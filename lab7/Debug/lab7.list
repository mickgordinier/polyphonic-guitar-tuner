
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d224  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000155c8  0800d3e8  0800d3e8  0000e3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080229b0  080229b0  00024080  2**0
                  CONTENTS
  4 .ARM          00000008  080229b0  080229b0  000239b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080229b8  080229b8  00024080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080229b8  080229b8  000239b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080229bc  080229bc  000239bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080229c0  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000080  08022a40  00024080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08022a40  000244e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b90  00000000  00000000  000240b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004376  00000000  00000000  00048c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  0004cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ff1  00000000  00000000  0004e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00008633  00000000  00000000  000678a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0006fed4  2**0
                  CONTENTS, READONLY
 18 .debug_rnglists 0000129d  00000000  00000000  0006ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007118  00000000  00000000  0007122c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  00078344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003114  00000000  00000000  000783b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000c8  00000000  00000000  0007b4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d3cc 	.word	0x0800d3cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	0800d3cc 	.word	0x0800d3cc

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	@ 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__gedf2>:
 80009b0:	f04f 3cff 	mov.w	ip, #4294967295
 80009b4:	e006      	b.n	80009c4 <__cmpdf2+0x4>
 80009b6:	bf00      	nop

080009b8 <__ledf2>:
 80009b8:	f04f 0c01 	mov.w	ip, #1
 80009bc:	e002      	b.n	80009c4 <__cmpdf2+0x4>
 80009be:	bf00      	nop

080009c0 <__cmpdf2>:
 80009c0:	f04f 0c01 	mov.w	ip, #1
 80009c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009da:	d01b      	beq.n	8000a14 <__cmpdf2+0x54>
 80009dc:	b001      	add	sp, #4
 80009de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e2:	bf0c      	ite	eq
 80009e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e8:	ea91 0f03 	teqne	r1, r3
 80009ec:	bf02      	ittt	eq
 80009ee:	ea90 0f02 	teqeq	r0, r2
 80009f2:	2000      	moveq	r0, #0
 80009f4:	4770      	bxeq	lr
 80009f6:	f110 0f00 	cmn.w	r0, #0
 80009fa:	ea91 0f03 	teq	r1, r3
 80009fe:	bf58      	it	pl
 8000a00:	4299      	cmppl	r1, r3
 8000a02:	bf08      	it	eq
 8000a04:	4290      	cmpeq	r0, r2
 8000a06:	bf2c      	ite	cs
 8000a08:	17d8      	asrcs	r0, r3, #31
 8000a0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0e:	f040 0001 	orr.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__cmpdf2+0x64>
 8000a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a22:	d107      	bne.n	8000a34 <__cmpdf2+0x74>
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	d1d6      	bne.n	80009dc <__cmpdf2+0x1c>
 8000a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a32:	d0d3      	beq.n	80009dc <__cmpdf2+0x1c>
 8000a34:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdrcmple>:
 8000a3c:	4684      	mov	ip, r0
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4662      	mov	r2, ip
 8000a42:	468c      	mov	ip, r1
 8000a44:	4619      	mov	r1, r3
 8000a46:	4663      	mov	r3, ip
 8000a48:	e000      	b.n	8000a4c <__aeabi_cdcmpeq>
 8000a4a:	bf00      	nop

08000a4c <__aeabi_cdcmpeq>:
 8000a4c:	b501      	push	{r0, lr}
 8000a4e:	f7ff ffb7 	bl	80009c0 <__cmpdf2>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	bf48      	it	mi
 8000a56:	f110 0f00 	cmnmi.w	r0, #0
 8000a5a:	bd01      	pop	{r0, pc}

08000a5c <__aeabi_dcmpeq>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff fff4 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a64:	bf0c      	ite	eq
 8000a66:	2001      	moveq	r0, #1
 8000a68:	2000      	movne	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmplt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffea 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmple>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffe0 	bl	8000a4c <__aeabi_cdcmpeq>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpge>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffce 	bl	8000a3c <__aeabi_cdrcmple>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpgt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffc4 	bl	8000a3c <__aeabi_cdrcmple>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpun>:
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__aeabi_dcmpun+0x10>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d10a      	bne.n	8000ae6 <__aeabi_dcmpun+0x26>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__aeabi_dcmpun+0x20>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_dcmpun+0x26>
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0001 	mov.w	r0, #1
 8000aea:	4770      	bx	lr

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96a 	b.w	8000e78 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14e      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bc8:	4694      	mov	ip, r2
 8000bca:	458c      	cmp	ip, r1
 8000bcc:	4686      	mov	lr, r0
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	d962      	bls.n	8000c9a <__udivmoddi4+0xde>
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0320 	rsb	r3, r2, #32
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	4319      	orrs	r1, r3
 8000be6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bee:	fa1f f68c 	uxth.w	r6, ip
 8000bf2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb04 f106 	mul.w	r1, r4, r6
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c12:	f080 8112 	bcs.w	8000e3a <__udivmoddi4+0x27e>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 810f 	bls.w	8000e3a <__udivmoddi4+0x27e>
 8000c1c:	3c02      	subs	r4, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb00 f606 	mul.w	r6, r0, r6
 8000c36:	429e      	cmp	r6, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x94>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c42:	f080 80fc 	bcs.w	8000e3e <__udivmoddi4+0x282>
 8000c46:	429e      	cmp	r6, r3
 8000c48:	f240 80f9 	bls.w	8000e3e <__udivmoddi4+0x282>
 8000c4c:	4463      	add	r3, ip
 8000c4e:	3802      	subs	r0, #2
 8000c50:	1b9b      	subs	r3, r3, r6
 8000c52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c56:	2100      	movs	r1, #0
 8000c58:	b11d      	cbz	r5, 8000c62 <__udivmoddi4+0xa6>
 8000c5a:	40d3      	lsrs	r3, r2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d905      	bls.n	8000c76 <__udivmoddi4+0xba>
 8000c6a:	b10d      	cbz	r5, 8000c70 <__udivmoddi4+0xb4>
 8000c6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c70:	2100      	movs	r1, #0
 8000c72:	4608      	mov	r0, r1
 8000c74:	e7f5      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c76:	fab3 f183 	clz	r1, r3
 8000c7a:	2900      	cmp	r1, #0
 8000c7c:	d146      	bne.n	8000d0c <__udivmoddi4+0x150>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xcc>
 8000c82:	4290      	cmp	r0, r2
 8000c84:	f0c0 80f0 	bcc.w	8000e68 <__udivmoddi4+0x2ac>
 8000c88:	1a86      	subs	r6, r0, r2
 8000c8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d0e6      	beq.n	8000c62 <__udivmoddi4+0xa6>
 8000c94:	e9c5 6300 	strd	r6, r3, [r5]
 8000c98:	e7e3      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x204>
 8000ca0:	eba1 040c 	sub.w	r4, r1, ip
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa1f f78c 	uxth.w	r7, ip
 8000cac:	2101      	movs	r1, #1
 8000cae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cbe:	fb07 f006 	mul.w	r0, r7, r6
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x11c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x11a>
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	f200 80cd 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000cd6:	4626      	mov	r6, r4
 8000cd8:	1a1c      	subs	r4, r3, r0
 8000cda:	fa1f f38e 	uxth.w	r3, lr
 8000cde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb00 f707 	mul.w	r7, r0, r7
 8000cee:	429f      	cmp	r7, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x148>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x146>
 8000cfc:	429f      	cmp	r7, r3
 8000cfe:	f200 80b0 	bhi.w	8000e62 <__udivmoddi4+0x2a6>
 8000d02:	4620      	mov	r0, r4
 8000d04:	1bdb      	subs	r3, r3, r7
 8000d06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0x9c>
 8000d0c:	f1c1 0620 	rsb	r6, r1, #32
 8000d10:	408b      	lsls	r3, r1
 8000d12:	fa22 f706 	lsr.w	r7, r2, r6
 8000d16:	431f      	orrs	r7, r3
 8000d18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d20:	ea43 030c 	orr.w	r3, r3, ip
 8000d24:	40f4      	lsrs	r4, r6
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	0c38      	lsrs	r0, r7, #16
 8000d2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d30:	fbb4 fef0 	udiv	lr, r4, r0
 8000d34:	fa1f fc87 	uxth.w	ip, r7
 8000d38:	fb00 441e 	mls	r4, r0, lr, r4
 8000d3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d40:	fb0e f90c 	mul.w	r9, lr, ip
 8000d44:	45a1      	cmp	r9, r4
 8000d46:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x1a6>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d52:	f080 8084 	bcs.w	8000e5e <__udivmoddi4+0x2a2>
 8000d56:	45a1      	cmp	r9, r4
 8000d58:	f240 8081 	bls.w	8000e5e <__udivmoddi4+0x2a2>
 8000d5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	eba4 0409 	sub.w	r4, r4, r9
 8000d66:	fa1f f983 	uxth.w	r9, r3
 8000d6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x1d2>
 8000d7e:	193c      	adds	r4, r7, r4
 8000d80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d84:	d267      	bcs.n	8000e56 <__udivmoddi4+0x29a>
 8000d86:	45a4      	cmp	ip, r4
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0x29a>
 8000d8a:	3b02      	subs	r3, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d92:	fba0 9302 	umull	r9, r3, r0, r2
 8000d96:	eba4 040c 	sub.w	r4, r4, ip
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	46ce      	mov	lr, r9
 8000d9e:	469c      	mov	ip, r3
 8000da0:	d351      	bcc.n	8000e46 <__udivmoddi4+0x28a>
 8000da2:	d04e      	beq.n	8000e42 <__udivmoddi4+0x286>
 8000da4:	b155      	cbz	r5, 8000dbc <__udivmoddi4+0x200>
 8000da6:	ebb8 030e 	subs.w	r3, r8, lr
 8000daa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dae:	fa04 f606 	lsl.w	r6, r4, r6
 8000db2:	40cb      	lsrs	r3, r1
 8000db4:	431e      	orrs	r6, r3
 8000db6:	40cc      	lsrs	r4, r1
 8000db8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	e750      	b.n	8000c62 <__udivmoddi4+0xa6>
 8000dc0:	f1c2 0320 	rsb	r3, r2, #32
 8000dc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd0:	4094      	lsls	r4, r2
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ddc:	fa1f f78c 	uxth.w	r7, ip
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3110 	mls	r1, r8, r0, r3
 8000de8:	0c23      	lsrs	r3, r4, #16
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f107 	mul.w	r1, r0, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x24c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfe:	d22c      	bcs.n	8000e5a <__udivmoddi4+0x29e>
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d92a      	bls.n	8000e5a <__udivmoddi4+0x29e>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e10:	fb08 3311 	mls	r3, r8, r1, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb01 f307 	mul.w	r3, r1, r7
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x276>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e28:	d213      	bcs.n	8000e52 <__udivmoddi4+0x296>
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	d911      	bls.n	8000e52 <__udivmoddi4+0x296>
 8000e2e:	3902      	subs	r1, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	1ae4      	subs	r4, r4, r3
 8000e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e38:	e739      	b.n	8000cae <__udivmoddi4+0xf2>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	e6f0      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e706      	b.n	8000c50 <__udivmoddi4+0x94>
 8000e42:	45c8      	cmp	r8, r9
 8000e44:	d2ae      	bcs.n	8000da4 <__udivmoddi4+0x1e8>
 8000e46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7a8      	b.n	8000da4 <__udivmoddi4+0x1e8>
 8000e52:	4631      	mov	r1, r6
 8000e54:	e7ed      	b.n	8000e32 <__udivmoddi4+0x276>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e799      	b.n	8000d8e <__udivmoddi4+0x1d2>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e7d4      	b.n	8000e08 <__udivmoddi4+0x24c>
 8000e5e:	46d6      	mov	lr, sl
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1a6>
 8000e62:	4463      	add	r3, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	e74d      	b.n	8000d04 <__udivmoddi4+0x148>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e70f      	b.n	8000c90 <__udivmoddi4+0xd4>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	e730      	b.n	8000cd8 <__udivmoddi4+0x11c>
 8000e76:	bf00      	nop

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <ILI9341_Select>:


#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2110      	movs	r1, #16
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e88:	f004 f8c4 	bl	8005014 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2110      	movs	r1, #16
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f004 f8ba 	bl	8005014 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <ILI9341_Reset+0x24>)
 8000eae:	f004 f8b1 	bl	8005014 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f002 f938 	bl	8003128 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <ILI9341_Reset+0x24>)
 8000ebe:	f004 f8a9 	bl	8005014 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	48000400 	.word	0x48000400

08000ecc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <ILI9341_WriteCommand+0x2c>)
 8000edc:	f004 f89a 	bl	8005014 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ee0:	1df9      	adds	r1, r7, #7
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <ILI9341_WriteCommand+0x30>)
 8000eea:	f007 f9c4 	bl	8008276 <HAL_SPI_Transmit>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	200002a0 	.word	0x200002a0

08000f00 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <ILI9341_WriteData+0x54>)
 8000f10:	f004 f880 	bl	8005014 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f14:	e015      	b.n	8000f42 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f1c:	bf28      	it	cs
 8000f1e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f22:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f24:	89fa      	ldrh	r2, [r7, #14]
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <ILI9341_WriteData+0x58>)
 8000f2e:	f007 f9a2 	bl	8008276 <HAL_SPI_Transmit>

        buff += chunk_size;
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e6      	bne.n	8000f16 <ILI9341_WriteData+0x16>
    }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48000400 	.word	0x48000400
 8000f58:	200002a0 	.word	0x200002a0

08000f5c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000f7a:	202a      	movs	r0, #42	@ 0x2a
 8000f7c:	f7ff ffa6 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	737b      	strb	r3, [r7, #13]
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73bb      	strb	r3, [r7, #14]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffaa 	bl	8000f00 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000fac:	202b      	movs	r0, #43	@ 0x2b
 8000fae:	f7ff ff8d 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	723b      	strb	r3, [r7, #8]
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	727b      	strb	r3, [r7, #9]
 8000fc2:	883b      	ldrh	r3, [r7, #0]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	72bb      	strb	r3, [r7, #10]
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff91 	bl	8000f00 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000fde:	202c      	movs	r0, #44	@ 0x2c
 8000fe0:	f7ff ff74 	bl	8000ecc <ILI9341_WriteCommand>
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <ILI9341_Init>:

void ILI9341_Init() {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b09b      	sub	sp, #108	@ 0x6c
 8000ff0:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000ff2:	f7ff ff43 	bl	8000e7c <ILI9341_Select>
    ILI9341_Reset();
 8000ff6:	f7ff ff55 	bl	8000ea4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff ff66 	bl	8000ecc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8001000:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001004:	f002 f890 	bl	8003128 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001008:	20cb      	movs	r0, #203	@ 0xcb
 800100a:	f7ff ff5f 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800100e:	4a87      	ldr	r2, [pc, #540]	@ (800122c <ILI9341_Init+0x240>)
 8001010:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001018:	6018      	str	r0, [r3, #0]
 800101a:	3304      	adds	r3, #4
 800101c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800101e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff6b 	bl	8000f00 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800102a:	20cf      	movs	r0, #207	@ 0xcf
 800102c:	f7ff ff4e 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8001030:	4a7f      	ldr	r2, [pc, #508]	@ (8001230 <ILI9341_Init+0x244>)
 8001032:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	4611      	mov	r1, r2
 800103a:	8019      	strh	r1, [r3, #0]
 800103c:	3302      	adds	r3, #2
 800103e:	0c12      	lsrs	r2, r2, #16
 8001040:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001042:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001046:	2103      	movs	r1, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff59 	bl	8000f00 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800104e:	20e8      	movs	r0, #232	@ 0xe8
 8001050:	f7ff ff3c 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001054:	4a77      	ldr	r2, [pc, #476]	@ (8001234 <ILI9341_Init+0x248>)
 8001056:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	4611      	mov	r1, r2
 800105e:	8019      	strh	r1, [r3, #0]
 8001060:	3302      	adds	r3, #2
 8001062:	0c12      	lsrs	r2, r2, #16
 8001064:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001066:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800106a:	2103      	movs	r1, #3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff47 	bl	8000f00 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001072:	20ea      	movs	r0, #234	@ 0xea
 8001074:	f7ff ff2a 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001078:	2300      	movs	r3, #0
 800107a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 800107e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff3b 	bl	8000f00 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800108a:	20ed      	movs	r0, #237	@ 0xed
 800108c:	f7ff ff1e 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001090:	4b69      	ldr	r3, [pc, #420]	@ (8001238 <ILI9341_Init+0x24c>)
 8001092:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001094:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff30 	bl	8000f00 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80010a0:	20f7      	movs	r0, #247	@ 0xf7
 80010a2:	f7ff ff13 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80010a6:	2320      	movs	r3, #32
 80010a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80010ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff24 	bl	8000f00 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80010b8:	20c0      	movs	r0, #192	@ 0xc0
 80010ba:	f7ff ff07 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80010be:	2323      	movs	r3, #35	@ 0x23
 80010c0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80010c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010c8:	2101      	movs	r1, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff18 	bl	8000f00 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80010d0:	20c1      	movs	r0, #193	@ 0xc1
 80010d2:	f7ff fefb 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80010d6:	2310      	movs	r3, #16
 80010d8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80010dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff0c 	bl	8000f00 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80010e8:	20c5      	movs	r0, #197	@ 0xc5
 80010ea:	f7ff feef 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80010ee:	f642 033e 	movw	r3, #10302	@ 0x283e
 80010f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80010f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff feff 	bl	8000f00 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8001102:	20c7      	movs	r0, #199	@ 0xc7
 8001104:	f7ff fee2 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001108:	2386      	movs	r3, #134	@ 0x86
 800110a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800110e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fef3 	bl	8000f00 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800111a:	2036      	movs	r0, #54	@ 0x36
 800111c:	f7ff fed6 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8001120:	2348      	movs	r3, #72	@ 0x48
 8001122:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001126:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fee7 	bl	8000f00 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8001132:	203a      	movs	r0, #58	@ 0x3a
 8001134:	f7ff feca 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001138:	2355      	movs	r3, #85	@ 0x55
 800113a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800113e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001142:	2101      	movs	r1, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fedb 	bl	8000f00 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800114a:	20b1      	movs	r0, #177	@ 0xb1
 800114c:	f7ff febe 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8001150:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001154:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001156:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800115a:	2102      	movs	r1, #2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fecf 	bl	8000f00 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8001162:	20b6      	movs	r0, #182	@ 0xb6
 8001164:	f7ff feb2 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001168:	4a34      	ldr	r2, [pc, #208]	@ (800123c <ILI9341_Init+0x250>)
 800116a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	4611      	mov	r1, r2
 8001172:	8019      	strh	r1, [r3, #0]
 8001174:	3302      	adds	r3, #2
 8001176:	0c12      	lsrs	r2, r2, #16
 8001178:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800117a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117e:	2103      	movs	r1, #3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff febd 	bl	8000f00 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001186:	20f2      	movs	r0, #242	@ 0xf2
 8001188:	f7ff fea0 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff feb1 	bl	8000f00 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800119e:	2026      	movs	r0, #38	@ 0x26
 80011a0:	f7ff fe94 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80011a4:	2301      	movs	r3, #1
 80011a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80011aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ae:	2101      	movs	r1, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fea5 	bl	8000f00 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80011b6:	20e0      	movs	r0, #224	@ 0xe0
 80011b8:	f7ff fe88 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <ILI9341_Init+0x254>)
 80011be:	f107 0414 	add.w	r4, r7, #20
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	c407      	stmia	r4!, {r0, r1, r2}
 80011c6:	8023      	strh	r3, [r4, #0]
 80011c8:	3402      	adds	r4, #2
 80011ca:	0c1b      	lsrs	r3, r3, #16
 80011cc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	210f      	movs	r1, #15
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fe93 	bl	8000f00 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80011da:	20e1      	movs	r0, #225	@ 0xe1
 80011dc:	f7ff fe76 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <ILI9341_Init+0x258>)
 80011e2:	1d3c      	adds	r4, r7, #4
 80011e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e6:	c407      	stmia	r4!, {r0, r1, r2}
 80011e8:	8023      	strh	r3, [r4, #0]
 80011ea:	3402      	adds	r4, #2
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	210f      	movs	r1, #15
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe83 	bl	8000f00 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80011fa:	2011      	movs	r0, #17
 80011fc:	f7ff fe66 	bl	8000ecc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001200:	2078      	movs	r0, #120	@ 0x78
 8001202:	f001 ff91 	bl	8003128 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001206:	2029      	movs	r0, #41	@ 0x29
 8001208:	f7ff fe60 	bl	8000ecc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800120c:	2036      	movs	r0, #54	@ 0x36
 800120e:	f7ff fe5d 	bl	8000ecc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8001212:	2348      	movs	r3, #72	@ 0x48
 8001214:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001216:	463b      	mov	r3, r7
 8001218:	2101      	movs	r1, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe70 	bl	8000f00 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8001220:	f7ff fe36 	bl	8000e90 <ILI9341_Unselect>
}
 8001224:	bf00      	nop
 8001226:	376c      	adds	r7, #108	@ 0x6c
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	0800d3e8 	.word	0x0800d3e8
 8001230:	0800d3f0 	.word	0x0800d3f0
 8001234:	0800d3f4 	.word	0x0800d3f4
 8001238:	81120364 	.word	0x81120364
 800123c:	0800d3f8 	.word	0x0800d3f8
 8001240:	0800d3fc 	.word	0x0800d3fc
 8001244:	0800d40c 	.word	0x0800d40c

08001248 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001248:	b082      	sub	sp, #8
 800124a:	b580      	push	{r7, lr}
 800124c:	b088      	sub	sp, #32
 800124e:	af00      	add	r7, sp, #0
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	460b      	mov	r3, r1
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800125e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001262:	461a      	mov	r2, r3
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4413      	add	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001272:	4619      	mov	r1, r3
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	440b      	add	r3, r1
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	b29b      	uxth	r3, r3
 800127e:	88b9      	ldrh	r1, [r7, #4]
 8001280:	88f8      	ldrh	r0, [r7, #6]
 8001282:	f7ff fe6b 	bl	8000f5c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e041      	b.n	8001310 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 800128c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	3b20      	subs	r3, #32
 8001292:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4619      	mov	r1, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	440b      	add	r3, r1
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e027      	b.n	80012fe <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00e      	beq.n	80012dc <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	743b      	strb	r3, [r7, #16]
 80012c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2102      	movs	r1, #2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe13 	bl	8000f00 <ILI9341_WriteData>
 80012da:	e00d      	b.n	80012f8 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	733b      	strb	r3, [r7, #12]
 80012e6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe04 	bl	8000f00 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001302:	461a      	mov	r2, r3
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4293      	cmp	r3, r2
 8001308:	d3d1      	bcc.n	80012ae <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001314:	461a      	mov	r2, r3
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	4293      	cmp	r3, r2
 800131a:	d3b7      	bcc.n	800128c <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001328:	b002      	add	sp, #8
 800132a:	4770      	bx	lr

0800132c <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800132c:	b082      	sub	sp, #8
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af04      	add	r7, sp, #16
 8001334:	603a      	str	r2, [r7, #0]
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	4603      	mov	r3, r0
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	460b      	mov	r3, r1
 800133e:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8001340:	f7ff fd9c 	bl	8000e7c <ILI9341_Select>

    while(*str) {
 8001344:	e02e      	b.n	80013a4 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	7d3a      	ldrb	r2, [r7, #20]
 800134a:	4413      	add	r3, r2
 800134c:	2bef      	cmp	r3, #239	@ 0xef
 800134e:	dd14      	ble.n	800137a <ILI9341_WriteString+0x4e>
            x = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001354:	7d7b      	ldrb	r3, [r7, #21]
 8001356:	461a      	mov	r2, r3
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	7d7a      	ldrb	r2, [r7, #21]
 8001362:	4413      	add	r3, r2
 8001364:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001368:	da21      	bge.n	80013ae <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b20      	cmp	r3, #32
 8001370:	d103      	bne.n	800137a <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	603b      	str	r3, [r7, #0]
                continue;
 8001378:	e014      	b.n	80013a4 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	88b9      	ldrh	r1, [r7, #4]
 8001380:	88f8      	ldrh	r0, [r7, #6]
 8001382:	8c3b      	ldrh	r3, [r7, #32]
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	8bbb      	ldrh	r3, [r7, #28]
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f7ff ff5a 	bl	8001248 <ILI9341_WriteChar>
        x += font.width;
 8001394:	7d3b      	ldrb	r3, [r7, #20]
 8001396:	461a      	mov	r2, r3
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4413      	add	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
        str++;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1cc      	bne.n	8001346 <ILI9341_WriteString+0x1a>
 80013ac:	e000      	b.n	80013b0 <ILI9341_WriteString+0x84>
                break;
 80013ae:	bf00      	nop
    }

    ILI9341_Unselect();
 80013b0:	f7ff fd6e 	bl	8000e90 <ILI9341_Unselect>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013be:	b002      	add	sp, #8
 80013c0:	4770      	bx	lr
	...

080013c4 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	461a      	mov	r2, r3
 80013d2:	4623      	mov	r3, r4
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	4603      	mov	r3, r0
 80013d8:	80bb      	strh	r3, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]
 80013de:	4613      	mov	r3, r2
 80013e0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	2bef      	cmp	r3, #239	@ 0xef
 80013e6:	d853      	bhi.n	8001490 <ILI9341_FillRectangle+0xcc>
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013ee:	d24f      	bcs.n	8001490 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4413      	add	r3, r2
 80013f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80013f8:	dd03      	ble.n	8001402 <ILI9341_FillRectangle+0x3e>
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001400:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8001402:	88ba      	ldrh	r2, [r7, #4]
 8001404:	883b      	ldrh	r3, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800140c:	dd03      	ble.n	8001416 <ILI9341_FillRectangle+0x52>
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001414:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001416:	f7ff fd31 	bl	8000e7c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29c      	uxth	r4, r3
 8001426:	88ba      	ldrh	r2, [r7, #4]
 8001428:	883b      	ldrh	r3, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	3b01      	subs	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	88b9      	ldrh	r1, [r7, #4]
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	4622      	mov	r2, r4
 8001438:	f7ff fd90 	bl	8000f5c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800143c:	8c3b      	ldrh	r3, [r7, #32]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	733b      	strb	r3, [r7, #12]
 8001446:	8c3b      	ldrh	r3, [r7, #32]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	4811      	ldr	r0, [pc, #68]	@ (8001498 <ILI9341_FillRectangle+0xd4>)
 8001452:	f003 fddf 	bl	8005014 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001456:	883b      	ldrh	r3, [r7, #0]
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	e013      	b.n	8001484 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	e00a      	b.n	8001478 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	2202      	movs	r2, #2
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <ILI9341_FillRectangle+0xd8>)
 800146e:	f006 ff02 	bl	8008276 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	3b01      	subs	r3, #1
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f1      	bne.n	8001462 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	3b01      	subs	r3, #1
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1e8      	bne.n	800145c <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 800148a:	f7ff fd01 	bl	8000e90 <ILI9341_Unselect>
 800148e:	e000      	b.n	8001492 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001490:	bf00      	nop
}
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	48000400 	.word	0x48000400
 800149c:	200002a0 	.word	0x200002a0

080014a0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80014b2:	22f0      	movs	r2, #240	@ 0xf0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff ff84 	bl	80013c4 <ILI9341_FillRectangle>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d2:	f003 fd9f 	bl	8005014 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000039c 	.word	0x2000039c

080014fc <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e033      	b.n	8001574 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001588 <apply_hanning_window+0x8c>
 800151a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800152e:	eeb0 0a66 	vmov.f32	s0, s13
 8001532:	f00a fb25 	bl	800bb80 <cosf>
 8001536:	eef0 7a40 	vmov.f32	s15, s0
 800153a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800153e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001542:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	edd7 7a02 	vldr	s15, [r7, #8]
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8c7      	bhi.n	800150c <apply_hanning_window+0x10>
	}
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40c90fdb 	.word	0x40c90fdb

0800158c <find_peaks>:


void find_peaks(float32_t* data, uint32_t length, int32_t* peaks, uint32_t* num_peaks) {
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
    float32_t threshold = 0; // Adjust if needed
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
    *num_peaks = 0;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 1; i < length - 1; ++i) {
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e041      	b.n	8001630 <find_peaks+0xa4>
        if (data[i] > threshold && data[i] > data[i-1] && data[i] > data[i+1]) {
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80015bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d531      	bpl.n	800162a <find_peaks+0x9e>
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80015d8:	3b01      	subs	r3, #1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd1d      	ble.n	800162a <find_peaks+0x9e>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	dd0b      	ble.n	800162a <find_peaks+0x9e>
            peaks[*num_peaks] = i;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]
            (*num_peaks)++;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < length - 1; ++i) {
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3b01      	subs	r3, #1
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3b8      	bcc.n	80015ac <find_peaks+0x20>
        }
    }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <autocorrelate>:



void autocorrelate(float32_t* x, uint32_t N, float32_t* autocorrelation) {
 8001648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800164c:	b093      	sub	sp, #76	@ 0x4c
 800164e:	af00      	add	r7, sp, #0
 8001650:	6178      	str	r0, [r7, #20]
 8001652:	6139      	str	r1, [r7, #16]
 8001654:	60fa      	str	r2, [r7, #12]
 8001656:	466b      	mov	r3, sp
 8001658:	461e      	mov	r6, r3

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, N);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f009 fa23 	bl	800aab0 <arm_rfft_fast_init_f32>

    float32_t output[N];
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	460b      	mov	r3, r1
 800166e:	3b01      	subs	r3, #1
 8001670:	643b      	str	r3, [r7, #64]	@ 0x40
 8001672:	2300      	movs	r3, #0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	0143      	lsls	r3, r0, #5
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	0142      	lsls	r2, r0, #5
 800168e:	2300      	movs	r3, #0
 8001690:	468a      	mov	sl, r1
 8001692:	469b      	mov	fp, r3
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80016a0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80016a4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80016a8:	008b      	lsls	r3, r1, #2
 80016aa:	3307      	adds	r3, #7
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	ebad 0d03 	sub.w	sp, sp, r3
 80016b4:	466b      	mov	r3, sp
 80016b6:	3303      	adds	r3, #3
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    arm_rfft_fast_f32(&fftInstance, x, output, 0);
 80016be:	f107 001c 	add.w	r0, r7, #28
 80016c2:	2300      	movs	r3, #0
 80016c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016c6:	6979      	ldr	r1, [r7, #20]
 80016c8:	f009 fad6 	bl	800ac78 <arm_rfft_fast_f32>

    float32_t power_spectrum[N/2];
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	0859      	lsrs	r1, r3, #1
 80016d0:	460b      	mov	r3, r1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016d6:	2300      	movs	r3, #0
 80016d8:	4688      	mov	r8, r1
 80016da:	4699      	mov	r9, r3
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80016e8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80016ec:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80016f0:	2300      	movs	r3, #0
 80016f2:	460c      	mov	r4, r1
 80016f4:	461d      	mov	r5, r3
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	016b      	lsls	r3, r5, #5
 8001700:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001704:	0162      	lsls	r2, r4, #5
 8001706:	008b      	lsls	r3, r1, #2
 8001708:	3307      	adds	r3, #7
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	ebad 0d03 	sub.w	sp, sp, r3
 8001712:	466b      	mov	r3, sp
 8001714:	3303      	adds	r3, #3
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
    //arm_cmplx_mag_squared_f32(output, power_spectrum, N/2);
    power_spectrum[0] = output[0] * output[0];
 800171c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800172e:	edc3 7a00 	vstr	s15, [r3]
    power_spectrum[1] = output[1] * output[1];
 8001732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001734:	ed93 7a01 	vldr	s14, [r3, #4]
 8001738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800173a:	edd3 7a01 	vldr	s15, [r3, #4]
 800173e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001744:	edc3 7a01 	vstr	s15, [r3, #4]

    // Rest of the frequency bins (upto N/2)
    for (uint32_t i = 1; i < N / 2; ++i) {
 8001748:	2301      	movs	r3, #1
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
 800174c:	e036      	b.n	80017bc <autocorrelate+0x174>
        power_spectrum[2 * i] = output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]; // Real part
 800174e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	3301      	adds	r3, #1
 8001774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	edd3 6a00 	vldr	s13, [r3]
 800177e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3301      	adds	r3, #1
 8001784:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	edc3 7a00 	vstr	s15, [r3]
        power_spectrum[2 * i + 1] = 0; // Imaginary part is 0
 80017a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	3301      	adds	r3, #1
 80017aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < N / 2; ++i) {
 80017b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b8:	3301      	adds	r3, #1
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3c3      	bcc.n	800174e <autocorrelate+0x106>
    }

    //arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);
 80017c6:	f107 001c 	add.w	r0, r7, #28
 80017ca:	2301      	movs	r3, #1
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017d0:	f009 fa52 	bl	800ac78 <arm_rfft_fast_f32>

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
 80017d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f009 fe2a 	bl	800b434 <arm_abs_f32>
 80017e0:	46b5      	mov	sp, r6
}
 80017e2:	bf00      	nop
 80017e4:	374c      	adds	r7, #76	@ 0x4c
 80017e6:	46bd      	mov	sp, r7
 80017e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080017ec <screenInit>:
  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);

  TIM4->CCR2 = temp_ccr2;
}

void screenInit () {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 80017f0:	f7ff fb4e 	bl	8000e90 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80017f4:	f7ff fe66 	bl	80014c4 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80017f8:	f7ff fbf8 	bl	8000fec <ILI9341_Init>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <reverse>:

void reverse(char* str, int len)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3b01      	subs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001814:	e018      	b.n	8001848 <reverse+0x48>
        temp = str[i];
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	441a      	add	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	440b      	add	r3, r1
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]
        i++;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
        j--;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3b01      	subs	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbe2      	blt.n	8001816 <reverse+0x16>
    }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001870:	e01d      	b.n	80018ae <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <intToStr+0x8c>)
 8001876:	fb83 1302 	smull	r1, r3, r3, r2
 800187a:	1099      	asrs	r1, r3, #2
 800187c:	17d3      	asrs	r3, r2, #31
 800187e:	1ac9      	subs	r1, r1, r3
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	1ad1      	subs	r1, r2, r3
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1c59      	adds	r1, r3, #1
 8001890:	6179      	str	r1, [r7, #20]
 8001892:	4619      	mov	r1, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	440b      	add	r3, r1
 8001898:	3230      	adds	r2, #48	@ 0x30
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <intToStr+0x8c>)
 80018a2:	fb82 1203 	smull	r1, r2, r2, r3
 80018a6:	1092      	asrs	r2, r2, #2
 80018a8:	17db      	asrs	r3, r3, #31
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	60fb      	str	r3, [r7, #12]
    while (x) {
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1de      	bne.n	8001872 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80018b4:	e007      	b.n	80018c6 <intToStr+0x66>
        str[i++] = '0';
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	617a      	str	r2, [r7, #20]
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	2230      	movs	r2, #48	@ 0x30
 80018c4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbf3      	blt.n	80018b6 <intToStr+0x56>

    reverse(str, i);
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7ff ff95 	bl	8001800 <reverse>
    str[i] = '\0';
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
    return i;
 80018e0:	697b      	ldr	r3, [r7, #20]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	66666667 	.word	0x66666667

080018f0 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018fa:	60b8      	str	r0, [r7, #8]
 80018fc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80018fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001906:	ee17 3a90 	vmov	r3, s15
 800190a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	ed97 7a03 	vldr	s14, [r7, #12]
 800191a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	69f8      	ldr	r0, [r7, #28]
 8001928:	f7ff ff9a 	bl	8001860 <intToStr>
 800192c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d030      	beq.n	8001996 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	222e      	movs	r2, #46	@ 0x2e
 800193c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 800193e:	69b8      	ldr	r0, [r7, #24]
 8001940:	f7fe fdcc 	bl	80004dc <__aeabi_f2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7fe fdb5 	bl	80004b8 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b11 	vmov	d1, r2, r3
 8001956:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 80019a0 <ftoa+0xb0>
 800195a:	f00a f8a1 	bl	800baa0 <pow>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fe11 	bl	800058c <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8bb 	bl	8000aec <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800197a:	edd7 7a06 	vldr	s15, [r7, #24]
 800197e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	4413      	add	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4619      	mov	r1, r3
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7ff ff65 	bl	8001860 <intToStr>
    }
}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}
 800199e:	bf00      	nop
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40240000 	.word	0x40240000

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 80019ae:	b0b2      	sub	sp, #200	@ 0xc8
 80019b0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 80019b2:	4bcb      	ldr	r3, [pc, #812]	@ (8001ce0 <main+0x338>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 80019b8:	4bca      	ldr	r3, [pc, #808]	@ (8001ce4 <main+0x33c>)
 80019ba:	f507 4440 	add.w	r4, r7, #49152	@ 0xc000
 80019be:	f104 0460 	add.w	r4, r4, #96	@ 0x60
 80019c2:	461d      	mov	r5, r3
 80019c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019cc:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 80019d0:	4bc5      	ldr	r3, [pc, #788]	@ (8001ce8 <main+0x340>)
 80019d2:	f507 4440 	add.w	r4, r7, #49152	@ 0xc000
 80019d6:	f104 0448 	add.w	r4, r4, #72	@ 0x48
 80019da:	461d      	mov	r5, r3
 80019dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019e4:	e884 0003 	stmia.w	r4, {r0, r1}
	char * E_high = "E (high)";
 80019e8:	4bc0      	ldr	r3, [pc, #768]	@ (8001cec <main+0x344>)
 80019ea:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 80019ee:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 80019f2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f4:	f001 fb23 	bl	800303e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f8:	f000 fb0e 	bl	8002018 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019fc:	f000 fb52 	bl	80020a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f000 fe0c 	bl	800261c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a04:	f000 fde0 	bl	80025c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a08:	f000 fb7c 	bl	8002104 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a0c:	f000 fbe0 	bl	80021d0 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001a10:	f000 fc12 	bl	8002238 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001a14:	f000 fc5c 	bl	80022d0 <MX_SAI1_Init>
  MX_TIM1_Init();
 8001a18:	f000 fcce 	bl	80023b8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a1c:	f000 fd78 	bl	8002510 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a20:	f000 fc8c 	bl	800233c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  screenInit();
 8001a24:	f7ff fee2 	bl	80017ec <screenInit>
  ILI9341_FillScreen(ILI9341_BLACK);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fd39 	bl	80014a0 <ILI9341_FillScreen>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8001a2e:	232d      	movs	r3, #45	@ 0x2d
 8001a30:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001a34:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8001a38:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 8001a3a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001a3e:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001a42:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8001a46:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8001a48:	48a9      	ldr	r0, [pc, #676]	@ (8001cf0 <main+0x348>)
 8001a4a:	f006 ff45 	bl	80088d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a4e:	2104      	movs	r1, #4
 8001a50:	48a8      	ldr	r0, [pc, #672]	@ (8001cf4 <main+0x34c>)
 8001a52:	f007 f869 	bl	8008b28 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8001a56:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001a5a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001a5e:	3b70      	subs	r3, #112	@ 0x70
 8001a60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a64:	4619      	mov	r1, r3
 8001a66:	48a4      	ldr	r0, [pc, #656]	@ (8001cf8 <main+0x350>)
 8001a68:	f001 fea2 	bl	80037b0 <HAL_ADC_Start_DMA>
//		  float32_t s = sin(r) + sin(r*4) * 0.5 + sin(r*3) * 0.25;
//		  signal[i] = s;
//	  }


	  while(convFlag == 0) {;}
 8001a6c:	bf00      	nop
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <main+0x338>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0fb      	beq.n	8001a6e <main+0xc6>


	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001a7c:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e031      	b.n	8001ae8 <main+0x140>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001a84:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001a88:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001a92:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcf8 	bl	8000498 <__aeabi_ui2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f81c 	bl	8000aec <__aeabi_d2f>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001aba:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ac4:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3b70      	subs	r3, #112	@ 0x70
 8001ad0:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001ad2:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ad6:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001ae2:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001aec:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af6:	dbc5      	blt.n	8001a84 <main+0xdc>
	  }


	  apply_hanning_window(&signal, BUFFER_LENGTH);
 8001af8:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001afc:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001b00:	3b70      	subs	r3, #112	@ 0x70
 8001b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fcf8 	bl	80014fc <apply_hanning_window>


	  autocorrelate(signal, BUFFER_LENGTH,  autocorrelation);
 8001b0c:	f507 4281 	add.w	r2, r7, #16512	@ 0x4080
 8001b10:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001b14:	3a70      	subs	r2, #112	@ 0x70
 8001b16:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001b1a:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001b1e:	3b70      	subs	r3, #112	@ 0x70
 8001b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd8f 	bl	8001648 <autocorrelate>

	  uint32_t peaks[BUFFER_LENGTH/2];
	  uint32_t num_peaks = 0;
 8001b2a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001b2e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b32:	461a      	mov	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	f842 3c74 	str.w	r3, [r2, #-116]

	  find_peaks(autocorrelation, BUFFER_LENGTH/2, peaks, &num_peaks); //returns peak indices
 8001b3a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001b3e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b42:	3b74      	subs	r3, #116	@ 0x74
 8001b44:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001b48:	3ab4      	subs	r2, #180	@ 0xb4
 8001b4a:	f507 4081 	add.w	r0, r7, #16512	@ 0x4080
 8001b4e:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 8001b52:	3870      	subs	r0, #112	@ 0x70
 8001b54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b58:	f7ff fd18 	bl	800158c <find_peaks>


	  float32_t freq = 0.0f;
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001b64:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8001b68:	6013      	str	r3, [r2, #0]
	     if (num_peaks > 0) {
 8001b6a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001b6e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b72:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80aa 	beq.w	8001cd0 <main+0x328>
	         // Get the highest valid peak
	         uint32_t max_peak_index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001b82:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8001b86:	6013      	str	r3, [r2, #0]
	         float32_t max_value = 0;
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001b90:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 8001b94:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001b9c:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e06a      	b.n	8001c7a <main+0x2d2>
	             int32_t peak = peaks[i];
 8001ba4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001bae:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001bbc:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001bc0:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8001bc4:	6013      	str	r3, [r2, #0]
	             //peak greater than lowest period and smaller than largest possible period
	             if (peak > LOWEST_PERIOD && peak < HIGHEST_PERIOD) { //if valid peak
 8001bc6:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001bca:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001bd4:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d242      	bcs.n	8001c64 <main+0x2bc>
 8001bde:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001be2:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001bec:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d936      	bls.n	8001c64 <main+0x2bc>
	                 if (autocorrelation[peak] > max_value) {
 8001bf6:	f507 4381 	add.w	r3, r7, #16512	@ 0x4080
 8001bfa:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c04:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b70      	subs	r3, #112	@ 0x70
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c18:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d51c      	bpl.n	8001c64 <main+0x2bc>
	                     max_peak_index = peak;
 8001c2a:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c2e:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001c38:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8001c3c:	6013      	str	r3, [r2, #0]
	                     max_value = autocorrelation[peak];
 8001c3e:	f507 4381 	add.w	r3, r7, #16512	@ 0x4080
 8001c42:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c46:	461a      	mov	r2, r3
 8001c48:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c4c:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b70      	subs	r3, #112	@ 0x70
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001c5e:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 8001c62:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 8001c64:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c68:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001c74:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001c7e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c82:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001c86:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001c8a:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d387      	bcc.n	8001ba4 <main+0x1fc>
	                 }
	             }
	         }
	         if (max_value > 0) {
 8001c94:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001c98:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	dd12      	ble.n	8001cd0 <main+0x328>
	             measured_freq = (float32_t)SAMPLING_RATE / max_peak_index;
 8001caa:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001cae:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cbc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001cfc <main+0x354>
 8001cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc4:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001cc8:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001ccc:	edc3 7a00 	vstr	s15, [r3]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001cd6:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e040      	b.n	8001d60 <main+0x3b8>
 8001cde:	bf00      	nop
 8001ce0:	2000039c 	.word	0x2000039c
 8001ce4:	0800d464 	.word	0x0800d464
 8001ce8:	0800d494 	.word	0x0800d494
 8001cec:	0800d41c 	.word	0x0800d41c
 8001cf0:	20000304 	.word	0x20000304
 8001cf4:	20000350 	.word	0x20000350
 8001cf8:	2000009c 	.word	0x2000009c
 8001cfc:	469c4000 	.word	0x469c4000
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8001d00:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001d04:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001d10:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001d14:	443b      	add	r3, r7
 8001d16:	3b58      	subs	r3, #88	@ 0x58
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001d20:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001d30:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d34:	461a      	mov	r2, r3
 8001d36:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001d3a:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b8c      	subs	r3, #140	@ 0x8c
 8001d46:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8001d4a:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001d4e:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001d5a:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001d64:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	ddc8      	ble.n	8001d00 <main+0x358>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8001d6e:	f507 5102 	add.w	r1, r7, #8320	@ 0x2080
 8001d72:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8001d76:	398c      	subs	r1, #140	@ 0x8c
 8001d78:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001d7c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d80:	3b8c      	subs	r3, #140	@ 0x8c
 8001d82:	2206      	movs	r2, #6
 8001d84:	4618      	mov	r0, r3
 8001d86:	f009 fb55 	bl	800b434 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 8001d8a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001d8e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d92:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001d96:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001d9a:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001d9e:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001da6:	f102 029b 	add.w	r2, r2, #155	@ 0x9b
 8001daa:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001dac:	2300      	movs	r3, #0
 8001dae:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001db2:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e041      	b.n	8001e3e <main+0x496>
	    	 if (min_freqs[i] < current_min){
 8001dba:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001dbe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001dc8:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b8c      	subs	r3, #140	@ 0x8c
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ddc:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	dd1c      	ble.n	8001e28 <main+0x480>
	    		 current_min = min_freqs[i];
 8001dee:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001df2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001df6:	461a      	mov	r2, r3
 8001df8:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001dfc:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b8c      	subs	r3, #140	@ 0x8c
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001e0e:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001e12:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8001e14:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e18:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001e22:	f102 029b 	add.w	r2, r2, #155	@ 0x9b
 8001e26:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001e28:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e2c:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001e38:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e42:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	ddb6      	ble.n	8001dba <main+0x412>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 8001e4c:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e50:	f103 039b 	add.w	r3, r3, #155	@ 0x9b
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001e5c:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001e60:	443b      	add	r3, r7
 8001e62:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8001e66:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001e6a:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 8001e6e:	6013      	str	r3, [r2, #0]

	     //manually compensate for high E being off
	     if(strcmp(detected_string, E_high) == 0){
 8001e70:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e74:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e7e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	f7fe f9bc 	bl	8000200 <strcmp>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <main+0x506>
	    	measured_freq += 2.0; //subject to change, but add 2Hz
 8001e8e:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001e92:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ea2:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ea6:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
	     }

	     string_offset = measured_freq - string_freqs[index];
 8001eae:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001eb2:	f103 039b 	add.w	r3, r3, #155	@ 0x9b
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001ebe:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001ec2:	443b      	add	r3, r7
 8001ec4:	3b58      	subs	r3, #88	@ 0x58
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ece:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eda:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ede:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001ee2:	edc3 7a00 	vstr	s15, [r3]


	     char charFreq[20];
	     char desiredFreq[20];
	     ftoa(measured_freq, charFreq, 2);
 8001ee6:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001eea:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001eee:	3ba0      	subs	r3, #160	@ 0xa0
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001ef8:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001efc:	ed93 0a00 	vldr	s0, [r3]
 8001f00:	f7ff fcf6 	bl	80018f0 <ftoa>
	     ftoa(string_freqs[index], desiredFreq, 2);
 8001f04:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001f08:	f103 039b 	add.w	r3, r3, #155	@ 0x9b
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 8001f14:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001f18:	443b      	add	r3, r7
 8001f1a:	3b58      	subs	r3, #88	@ 0x58
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8001f24:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001f28:	3bb4      	subs	r3, #180	@ 0xb4
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f32:	f7ff fcdd 	bl	80018f0 <ftoa>
	     ILI9341_WriteString(10, 0, "Detected String:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <main+0x658>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	9202      	str	r2, [sp, #8]
 8001f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f40:	9201      	str	r2, [sp, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	9200      	str	r2, [sp, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2e      	ldr	r2, [pc, #184]	@ (8002004 <main+0x65c>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	f7ff f9ed 	bl	800132c <ILI9341_WriteString>
	     ILI9341_WriteString(100, 30, detected_string, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <main+0x660>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	9202      	str	r2, [sp, #8]
 8001f58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	9200      	str	r2, [sp, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8001f68:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	211e      	movs	r1, #30
 8001f70:	2064      	movs	r0, #100	@ 0x64
 8001f72:	f7ff f9db 	bl	800132c <ILI9341_WriteString>
	     ILI9341_WriteString(10, 60, "Actual Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001f76:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <main+0x658>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	9202      	str	r2, [sp, #8]
 8001f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	9200      	str	r2, [sp, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a20      	ldr	r2, [pc, #128]	@ (800200c <main+0x664>)
 8001f8a:	213c      	movs	r1, #60	@ 0x3c
 8001f8c:	200a      	movs	r0, #10
 8001f8e:	f7ff f9cd 	bl	800132c <ILI9341_WriteString>
	     ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <main+0x660>)
 8001f94:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8001f98:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001f9c:	3aa0      	subs	r2, #160	@ 0xa0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fa6:	9101      	str	r1, [sp, #4]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	9100      	str	r1, [sp, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	215a      	movs	r1, #90	@ 0x5a
 8001fb0:	2064      	movs	r0, #100	@ 0x64
 8001fb2:	f7ff f9bb 	bl	800132c <ILI9341_WriteString>
	     ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <main+0x658>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	9202      	str	r2, [sp, #8]
 8001fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fc0:	9201      	str	r2, [sp, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <main+0x668>)
 8001fca:	2178      	movs	r1, #120	@ 0x78
 8001fcc:	200a      	movs	r0, #10
 8001fce:	f7ff f9ad 	bl	800132c <ILI9341_WriteString>
	     ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <main+0x660>)
 8001fd4:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8001fd8:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001fdc:	3ab4      	subs	r2, #180	@ 0xb4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	9102      	str	r1, [sp, #8]
 8001fe2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fe6:	9101      	str	r1, [sp, #4]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	9100      	str	r1, [sp, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2196      	movs	r1, #150	@ 0x96
 8001ff0:	2064      	movs	r0, #100	@ 0x64
 8001ff2:	f7ff f99b 	bl	800132c <ILI9341_WriteString>
	     //for (int i = 0; i < 1000000; ++i);

	     //set_motor_speed(55);


	  convFlag = 0;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <main+0x66c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  {
 8001ffc:	e52b      	b.n	8001a56 <main+0xae>
 8001ffe:	bf00      	nop
 8002000:	20000000 	.word	0x20000000
 8002004:	0800d428 	.word	0x0800d428
 8002008:	20000008 	.word	0x20000008
 800200c:	0800d43c 	.word	0x0800d43c
 8002010:	0800d450 	.word	0x0800d450
 8002014:	2000039c 	.word	0x2000039c

08002018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b096      	sub	sp, #88	@ 0x58
 800201c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	2244      	movs	r2, #68	@ 0x44
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f009 fd08 	bl	800ba3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800203a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800203e:	f003 f821 	bl	8005084 <HAL_PWREx_ControlVoltageScaling>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002048:	f000 fc8e 	bl	8002968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800204c:	2310      	movs	r3, #16
 800204e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002050:	2301      	movs	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002058:	2370      	movs	r3, #112	@ 0x70
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4618      	mov	r0, r3
 8002066:	f003 f8c1 	bl	80051ec <HAL_RCC_OscConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002070:	f000 fc7a 	bl	8002968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002074:	230f      	movs	r3, #15
 8002076:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f003 fcc7 	bl	8005a20 <HAL_RCC_ClockConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002098:	f000 fc66 	bl	8002968 <Error_Handler>
  }
}
 800209c:	bf00      	nop
 800209e:	3758      	adds	r7, #88	@ 0x58
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0a6      	sub	sp, #152	@ 0x98
 80020a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2294      	movs	r2, #148	@ 0x94
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f009 fcc3 	bl	800ba3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 80020b6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80020ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80020bc:	2300      	movs	r3, #0
 80020be:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80020c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80020d0:	2308      	movs	r3, #8
 80020d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020dc:	2302      	movs	r3, #2
 80020de:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <PeriphCommonClock_Config+0x5c>)
 80020e2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 ff58 	bl	8005f9c <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80020f2:	f000 fc39 	bl	8002968 <Error_Handler>
  }
}
 80020f6:	bf00      	nop
 80020f8:	3798      	adds	r7, #152	@ 0x98
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	01010000 	.word	0x01010000

08002104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	463b      	mov	r3, r7
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <MX_ADC1_Init+0xc4>)
 800211e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002122:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002126:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002128:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212e:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800213c:	2204      	movs	r2, #4
 800213e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002142:	2200      	movs	r2, #0
 8002144:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002148:	2200      	movs	r2, #0
 800214a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800214e:	2201      	movs	r2, #1
 8002150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800215c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002180:	4810      	ldr	r0, [pc, #64]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 8002182:	f001 f9cf 	bl	8003524 <HAL_ADC_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800218c:	f000 fbec 	bl	8002968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <MX_ADC1_Init+0xc8>)
 8002192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002194:	2306      	movs	r3, #6
 8002196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002198:	2307      	movs	r3, #7
 800219a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800219c:	237f      	movs	r3, #127	@ 0x7f
 800219e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021a0:	2304      	movs	r3, #4
 80021a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	@ (80021c4 <MX_ADC1_Init+0xc0>)
 80021ae:	f001 fb97 	bl	80038e0 <HAL_ADC_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80021b8:	f000 fbd6 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000009c 	.word	0x2000009c
 80021c8:	50040000 	.word	0x50040000
 80021cc:	04300002 	.word	0x04300002

080021d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021d6:	463b      	mov	r3, r7
 80021d8:	2228      	movs	r2, #40	@ 0x28
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f009 fc2d 	bl	800ba3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <MX_DAC1_Init+0x60>)
 80021e4:	4a13      	ldr	r2, [pc, #76]	@ (8002234 <MX_DAC1_Init+0x64>)
 80021e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80021e8:	4811      	ldr	r0, [pc, #68]	@ (8002230 <MX_DAC1_Init+0x60>)
 80021ea:	f002 f9a0 	bl	800452e <HAL_DAC_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80021f4:	f000 fbb8 	bl	8002968 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_DAC1_Init+0x60>)
 8002218:	f002 f9ac 	bl	8004574 <HAL_DAC_ConfigChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8002222:	f000 fba1 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000164 	.word	0x20000164
 8002234:	40007400 	.word	0x40007400

08002238 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <MX_LPUART1_UART_Init+0x94>)
 8002240:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002282:	f007 fce5 	bl	8009c50 <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800228c:	f000 fb6c 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002290:	2100      	movs	r1, #0
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 8002294:	f008 fa7a 	bl	800a78c <HAL_UARTEx_SetTxFifoThreshold>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800229e:	f000 fb63 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a2:	2100      	movs	r1, #0
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 80022a6:	f008 faaf 	bl	800a808 <HAL_UARTEx_SetRxFifoThreshold>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b0:	f000 fb5a 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <MX_LPUART1_UART_Init+0x90>)
 80022b6:	f008 fa30 	bl	800a71a <HAL_UARTEx_DisableFifoMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c0:	f000 fb52 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000178 	.word	0x20000178
 80022cc:	40008000 	.word	0x40008000

080022d0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022d6:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <MX_SAI1_Init+0x64>)
 80022d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80022ec:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <MX_SAI1_Init+0x60>)
 80022fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002338 <MX_SAI1_Init+0x68>)
 80022fc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_SAI1_Init+0x60>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <MX_SAI1_Init+0x60>)
 8002306:	2200      	movs	r2, #0
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_SAI1_Init+0x60>)
 800230c:	2200      	movs	r2, #0
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <MX_SAI1_Init+0x60>)
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002316:	2302      	movs	r3, #2
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_SAI1_Init+0x60>)
 800231e:	f005 fb89 	bl	8007a34 <HAL_SAI_InitProtocol>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8002328:	f000 fb1e 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000020c 	.word	0x2000020c
 8002334:	40015404 	.word	0x40015404
 8002338:	0002ee00 	.word	0x0002ee00

0800233c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002340:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002342:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <MX_SPI1_Init+0x78>)
 8002344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002346:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002348:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800234c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800234e:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002356:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800235a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <MX_SPI1_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002362:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <MX_SPI1_Init+0x74>)
 800236a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002370:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002372:	2228      	movs	r2, #40	@ 0x28
 8002374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <MX_SPI1_Init+0x74>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <MX_SPI1_Init+0x74>)
 800238a:	2207      	movs	r2, #7
 800238c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <MX_SPI1_Init+0x74>)
 8002396:	2208      	movs	r2, #8
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <MX_SPI1_Init+0x74>)
 800239c:	f005 fec8 	bl	8008130 <HAL_SPI_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023a6:	f000 fadf 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200002a0 	.word	0x200002a0
 80023b4:	40013000 	.word	0x40013000

080023b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09a      	sub	sp, #104	@ 0x68
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	222c      	movs	r2, #44	@ 0x2c
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f009 fb22 	bl	800ba3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f8:	4b43      	ldr	r3, [pc, #268]	@ (8002508 <MX_TIM1_Init+0x150>)
 80023fa:	4a44      	ldr	r2, [pc, #272]	@ (800250c <MX_TIM1_Init+0x154>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80023fe:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002400:	2213      	movs	r2, #19
 8002402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b40      	ldr	r3, [pc, #256]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800240a:	4b3f      	ldr	r3, [pc, #252]	@ (8002508 <MX_TIM1_Init+0x150>)
 800240c:	2209      	movs	r2, #9
 800240e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002410:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002416:	4b3c      	ldr	r3, [pc, #240]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <MX_TIM1_Init+0x150>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002422:	4839      	ldr	r0, [pc, #228]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002424:	f006 fa00 	bl	8008828 <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800242e:	f000 fa9b 	bl	8002968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002436:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002438:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800243c:	4619      	mov	r1, r3
 800243e:	4832      	ldr	r0, [pc, #200]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002440:	f006 fe06 	bl	8009050 <HAL_TIM_ConfigClockSource>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800244a:	f000 fa8d 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800244e:	482e      	ldr	r0, [pc, #184]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002450:	f006 fab2 	bl	80089b8 <HAL_TIM_OC_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800245a:	f000 fa85 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800245e:	2320      	movs	r3, #32
 8002460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800246a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800246e:	4619      	mov	r1, r3
 8002470:	4825      	ldr	r0, [pc, #148]	@ (8002508 <MX_TIM1_Init+0x150>)
 8002472:	f007 fae7 	bl	8009a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800247c:	f000 fa74 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 5;
 8002484:	2305      	movs	r3, #5
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800248c:	2300      	movs	r3, #0
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024a0:	2200      	movs	r2, #0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4818      	ldr	r0, [pc, #96]	@ (8002508 <MX_TIM1_Init+0x150>)
 80024a6:	f006 fc45 	bl	8008d34 <HAL_TIM_OC_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80024b0:	f000 fa5a 	bl	8002968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4807      	ldr	r0, [pc, #28]	@ (8002508 <MX_TIM1_Init+0x150>)
 80024ea:	f007 fb33 	bl	8009b54 <HAL_TIMEx_ConfigBreakDeadTime>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024f4:	f000 fa38 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024f8:	4803      	ldr	r0, [pc, #12]	@ (8002508 <MX_TIM1_Init+0x150>)
 80024fa:	f000 fc7f 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 80024fe:	bf00      	nop
 8002500:	3768      	adds	r7, #104	@ 0x68
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000304 	.word	0x20000304
 800250c:	40012c00 	.word	0x40012c00

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002522:	463b      	mov	r3, r7
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002534:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 8002536:	4a23      	ldr	r2, [pc, #140]	@ (80025c4 <MX_TIM4_Init+0xb4>)
 8002538:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 800253c:	2207      	movs	r2, #7
 800253e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 8002548:	f242 7210 	movw	r2, #10000	@ 0x2710
 800254c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800255a:	4819      	ldr	r0, [pc, #100]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 800255c:	f006 fa8d 	bl	8008a7a <HAL_TIM_PWM_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002566:	f000 f9ff 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	4811      	ldr	r0, [pc, #68]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 800257a:	f007 fa63 	bl	8009a44 <HAL_TIMEx_MasterConfigSynchronization>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002584:	f000 f9f0 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002588:	2360      	movs	r3, #96	@ 0x60
 800258a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 800258c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	2204      	movs	r2, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	4807      	ldr	r0, [pc, #28]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 80025a2:	f006 fc41 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80025ac:	f000 f9dc 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025b0:	4803      	ldr	r0, [pc, #12]	@ (80025c0 <MX_TIM4_Init+0xb0>)
 80025b2:	f000 fc23 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	@ 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000350 	.word	0x20000350
 80025c4:	40000800 	.word	0x40000800

080025c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <MX_DMA_Init+0x50>)
 80025d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d2:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <MX_DMA_Init+0x50>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_DMA_Init+0x50>)
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <MX_DMA_Init+0x50>)
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <MX_DMA_Init+0x50>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <MX_DMA_Init+0x50>)
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	200b      	movs	r0, #11
 8002604:	f001 ff5d 	bl	80044c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002608:	200b      	movs	r0, #11
 800260a:	f001 ff76 	bl	80044fa <HAL_NVIC_EnableIRQ>

}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	@ 0x38
 8002620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	4bb2      	ldr	r3, [pc, #712]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4ab1      	ldr	r2, [pc, #708]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002638:	f043 0310 	orr.w	r3, r3, #16
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4baf      	ldr	r3, [pc, #700]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4bac      	ldr	r3, [pc, #688]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4aab      	ldr	r2, [pc, #684]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4ba9      	ldr	r3, [pc, #676]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002662:	4ba6      	ldr	r3, [pc, #664]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002666:	4aa5      	ldr	r2, [pc, #660]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002668:	f043 0320 	orr.w	r3, r3, #32
 800266c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266e:	4ba3      	ldr	r3, [pc, #652]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267a:	4ba0      	ldr	r3, [pc, #640]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a9f      	ldr	r2, [pc, #636]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002686:	4b9d      	ldr	r3, [pc, #628]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b9a      	ldr	r3, [pc, #616]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a99      	ldr	r2, [pc, #612]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b97      	ldr	r3, [pc, #604]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4b94      	ldr	r3, [pc, #592]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	4a93      	ldr	r2, [pc, #588]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b6:	4b91      	ldr	r3, [pc, #580]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c2:	4b8e      	ldr	r3, [pc, #568]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	4a8d      	ldr	r2, [pc, #564]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ce:	4b8b      	ldr	r3, [pc, #556]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026da:	4b88      	ldr	r3, [pc, #544]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	4a87      	ldr	r2, [pc, #540]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e6:	4b85      	ldr	r3, [pc, #532]	@ (80028fc <MX_GPIO_Init+0x2e0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80026f2:	f002 fd6b 	bl	80051cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2107      	movs	r1, #7
 80026fa:	4881      	ldr	r0, [pc, #516]	@ (8002900 <MX_GPIO_Init+0x2e4>)
 80026fc:	f002 fc8a 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002700:	2307      	movs	r3, #7
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002704:	2312      	movs	r3, #18
 8002706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002710:	2304      	movs	r3, #4
 8002712:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002718:	4619      	mov	r1, r3
 800271a:	487a      	ldr	r0, [pc, #488]	@ (8002904 <MX_GPIO_Init+0x2e8>)
 800271c:	f002 fae8 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002720:	2301      	movs	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002730:	2301      	movs	r3, #1
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273e:	f002 fad7 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002742:	2307      	movs	r3, #7
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4869      	ldr	r0, [pc, #420]	@ (8002900 <MX_GPIO_Init+0x2e4>)
 800275a:	f002 fac9 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800275e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002770:	2301      	movs	r3, #1
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	4861      	ldr	r0, [pc, #388]	@ (8002900 <MX_GPIO_Init+0x2e4>)
 800277c:	f002 fab8 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002780:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002792:	230d      	movs	r3, #13
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279a:	4619      	mov	r1, r3
 800279c:	4858      	ldr	r0, [pc, #352]	@ (8002900 <MX_GPIO_Init+0x2e4>)
 800279e:	f002 faa7 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027b4:	230e      	movs	r3, #14
 80027b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027bc:	4619      	mov	r1, r3
 80027be:	4850      	ldr	r0, [pc, #320]	@ (8002900 <MX_GPIO_Init+0x2e4>)
 80027c0:	f002 fa96 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027d6:	2307      	movs	r3, #7
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4849      	ldr	r0, [pc, #292]	@ (8002908 <MX_GPIO_Init+0x2ec>)
 80027e2:	f002 fa85 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027e6:	2340      	movs	r3, #64	@ 0x40
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027f6:	230d      	movs	r3, #13
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fe:	4619      	mov	r1, r3
 8002800:	4842      	ldr	r0, [pc, #264]	@ (800290c <MX_GPIO_Init+0x2f0>)
 8002802:	f002 fa75 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002816:	2302      	movs	r3, #2
 8002818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	483a      	ldr	r0, [pc, #232]	@ (800290c <MX_GPIO_Init+0x2f0>)
 8002822:	f002 fa65 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002826:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002838:	230c      	movs	r3, #12
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4832      	ldr	r0, [pc, #200]	@ (800290c <MX_GPIO_Init+0x2f0>)
 8002844:	f002 fa54 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002848:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800285a:	230a      	movs	r3, #10
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002868:	f002 fa42 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800286c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002884:	f002 fa34 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002898:	2309      	movs	r3, #9
 800289a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	4819      	ldr	r0, [pc, #100]	@ (8002908 <MX_GPIO_Init+0x2ec>)
 80028a4:	f002 fa24 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028a8:	2304      	movs	r3, #4
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028b8:	230c      	movs	r3, #12
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	4811      	ldr	r0, [pc, #68]	@ (8002908 <MX_GPIO_Init+0x2ec>)
 80028c4:	f002 fa14 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2378      	movs	r3, #120	@ 0x78
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4809      	ldr	r0, [pc, #36]	@ (8002908 <MX_GPIO_Init+0x2ec>)
 80028e4:	f002 fa04 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80028e8:	2338      	movs	r3, #56	@ 0x38
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f8:	e00a      	b.n	8002910 <MX_GPIO_Init+0x2f4>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	48000400 	.word	0x48000400
 8002904:	48001400 	.word	0x48001400
 8002908:	48000c00 	.word	0x48000c00
 800290c:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002910:	2306      	movs	r3, #6
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	4812      	ldr	r0, [pc, #72]	@ (8002964 <MX_GPIO_Init+0x348>)
 800291c:	f002 f9e8 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002920:	2340      	movs	r3, #64	@ 0x40
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002924:	2303      	movs	r3, #3
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	480c      	ldr	r0, [pc, #48]	@ (8002964 <MX_GPIO_Init+0x348>)
 8002934:	f002 f9dc 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002938:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800294a:	2304      	movs	r3, #4
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002952:	4619      	mov	r1, r3
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <MX_GPIO_Init+0x348>)
 8002956:	f002 f9cb 	bl	8004cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800295a:	bf00      	nop
 800295c:	3738      	adds	r7, #56	@ 0x38
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	48000400 	.word	0x48000400

08002968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <Error_Handler+0x8>

08002974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <HAL_MspInit+0x44>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297e:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <HAL_MspInit+0x44>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6613      	str	r3, [r2, #96]	@ 0x60
 8002986:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <HAL_MspInit+0x44>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_MspInit+0x44>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	4a08      	ldr	r2, [pc, #32]	@ (80029b8 <HAL_MspInit+0x44>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	@ 0x58
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_MspInit+0x44>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	@ 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a37      	ldr	r2, [pc, #220]	@ (8002ab8 <HAL_ADC_MspInit+0xfc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d168      	bne.n	8002ab0 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	4a36      	ldr	r2, [pc, #216]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 80029e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ea:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a30      	ldr	r2, [pc, #192]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a02:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	4a2a      	ldr	r2, [pc, #168]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1a:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_ADC_MspInit+0x100>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a26:	233f      	movs	r3, #63	@ 0x3f
 8002a28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a2a:	230b      	movs	r3, #11
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4821      	ldr	r0, [pc, #132]	@ (8002ac0 <HAL_ADC_MspInit+0x104>)
 8002a3a:	f002 f959 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002a3e:	230a      	movs	r3, #10
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a42:	230b      	movs	r3, #11
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f002 f94c 	bl	8004cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_ADC_MspInit+0x10c>)
 8002a5c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a60:	2205      	movs	r2, #5
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a76:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a88:	2220      	movs	r2, #32
 8002a8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a8e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002a92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a94:	480b      	ldr	r0, [pc, #44]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002a96:	f001 feb9 	bl	800480c <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002aa0:	f7ff ff62 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002aa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002aaa:	4a06      	ldr	r2, [pc, #24]	@ (8002ac4 <HAL_ADC_MspInit+0x108>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3728      	adds	r7, #40	@ 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	50040000 	.word	0x50040000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	48000800 	.word	0x48000800
 8002ac4:	20000104 	.word	0x20000104
 8002ac8:	40020008 	.word	0x40020008

08002acc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <HAL_DAC_MspInit+0x74>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d124      	bne.n	8002b38 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	4a14      	ldr	r2, [pc, #80]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002af4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <HAL_DAC_MspInit+0x78>)
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b1e:	2310      	movs	r3, #16
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b22:	2303      	movs	r3, #3
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b34:	f002 f8dc 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	@ 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40007400 	.word	0x40007400
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0ae      	sub	sp, #184	@ 0xb8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2294      	movs	r2, #148	@ 0x94
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f008 ff67 	bl	800ba3c <memset>
  if(huart->Instance==LPUART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <HAL_UART_MspInit+0xb4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d13d      	bne.n	8002bf4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fa09 	bl	8005f9c <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b90:	f7ff feea 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002ba0:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_UART_MspInit+0xb8>)
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002bc4:	f002 fb02 	bl	80051cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002bc8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002be2:	2308      	movs	r3, #8
 8002be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002be8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <HAL_UART_MspInit+0xbc>)
 8002bf0:	f002 f87e 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	37b8      	adds	r7, #184	@ 0xb8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40008000 	.word	0x40008000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	48001800 	.word	0x48001800

08002c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <HAL_SPI_MspInit+0x7c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d128      	bne.n	8002c7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2e:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	4a10      	ldr	r2, [pc, #64]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c5a:	23e0      	movs	r3, #224	@ 0xe0
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c78:	f002 f83a 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	@ 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40013000 	.word	0x40013000
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	@ (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d139      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002cde:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	480e      	ldr	r0, [pc, #56]	@ (8002d34 <HAL_TIM_Base_MspInit+0xa8>)
 8002cfc:	f001 fff8 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002d12:	2303      	movs	r3, #3
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <HAL_TIM_Base_MspInit+0xa8>)
 8002d1e:	f001 ffe7 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	48001000 	.word	0x48001000

08002d38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a25      	ldr	r2, [pc, #148]	@ (8002dec <HAL_TIM_PWM_MspInit+0xb4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d144      	bne.n	8002de4 <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d5a:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4a24      	ldr	r2, [pc, #144]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	4b1f      	ldr	r3, [pc, #124]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d96:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002da2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002db4:	2302      	movs	r3, #2
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480d      	ldr	r0, [pc, #52]	@ (8002df4 <HAL_TIM_PWM_MspInit+0xbc>)
 8002dc0:	f001 ff96 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <HAL_TIM_PWM_MspInit+0xc0>)
 8002de0:	f001 ff86 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	@ 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000c00 	.word	0x48000c00
 8002df8:	48001000 	.word	0x48001000

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <HAL_TIM_MspPostInit+0xac>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d11d      	bne.n	8002e5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e1e:	4b23      	ldr	r3, [pc, #140]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2a:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8002e36:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	4817      	ldr	r0, [pc, #92]	@ (8002eb0 <HAL_TIM_MspPostInit+0xb4>)
 8002e54:	f001 ff4c 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e58:	e021      	b.n	8002e9e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_TIM_MspPostInit+0xb8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d11c      	bne.n	8002e9e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e68:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e70:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <HAL_TIM_MspPostInit+0xb0>)
 8002e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e92:	f107 0314 	add.w	r3, r7, #20
 8002e96:	4619      	mov	r1, r3
 8002e98:	4807      	ldr	r0, [pc, #28]	@ (8002eb8 <HAL_TIM_MspPostInit+0xbc>)
 8002e9a:	f001 ff29 	bl	8004cf0 <HAL_GPIO_Init>
}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	@ 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	48001000 	.word	0x48001000
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	48000c00 	.word	0x48000c00

08002ebc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_SAI_MspInit+0x84>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d134      	bne.n	8002f38 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002ece:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_SAI_MspInit+0x88>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_SAI_MspInit+0x8c>)
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eda:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_SAI_MspInit+0x8c>)
 8002edc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_SAI_MspInit+0x8c>)
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_SAI_MspInit+0x88>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <HAL_SAI_MspInit+0x88>)
 8002ef6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002ef8:	237c      	movs	r3, #124	@ 0x7c
 8002efa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002f08:	230d      	movs	r3, #13
 8002f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4619      	mov	r1, r3
 8002f12:	480e      	ldr	r0, [pc, #56]	@ (8002f4c <HAL_SAI_MspInit+0x90>)
 8002f14:	f001 feec 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002f28:	230d      	movs	r3, #13
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4619      	mov	r1, r3
 8002f32:	4807      	ldr	r0, [pc, #28]	@ (8002f50 <HAL_SAI_MspInit+0x94>)
 8002f34:	f001 fedc 	bl	8004cf0 <HAL_GPIO_Init>

    }
}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40015404 	.word	0x40015404
 8002f44:	200003a0 	.word	0x200003a0
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	48001000 	.word	0x48001000
 8002f50:	48001400 	.word	0x48001400

08002f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <NMI_Handler+0x4>

08002f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <BusFault_Handler+0x4>

08002f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <UsageFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002faa:	f000 f89d 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fb8:	4802      	ldr	r0, [pc, #8]	@ (8002fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8002fba:	f001 fd4a 	bl	8004a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000104 	.word	0x20000104

08002fc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <SystemInit+0x20>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <SystemInit+0x20>)
 8002fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ff0:	f7ff ffea 	bl	8002fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff4:	480c      	ldr	r0, [pc, #48]	@ (8003028 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ff6:	490d      	ldr	r1, [pc, #52]	@ (800302c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <LoopForever+0xe>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ffc:	e002      	b.n	8003004 <LoopCopyDataInit>

08002ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003002:	3304      	adds	r3, #4

08003004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003008:	d3f9      	bcc.n	8002ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800300c:	4c0a      	ldr	r4, [pc, #40]	@ (8003038 <LoopForever+0x16>)
  movs r3, #0
 800300e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003010:	e001      	b.n	8003016 <LoopFillZerobss>

08003012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003014:	3204      	adds	r2, #4

08003016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003018:	d3fb      	bcc.n	8003012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800301a:	f008 fd1d 	bl	800ba58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800301e:	f7fe fcc3 	bl	80019a8 <main>

08003022 <LoopForever>:

LoopForever:
    b LoopForever
 8003022:	e7fe      	b.n	8003022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003024:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003030:	080229c0 	.word	0x080229c0
  ldr r2, =_sbss
 8003034:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003038:	200004e0 	.word	0x200004e0

0800303c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC1_IRQHandler>

0800303e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f001 fa2f 	bl	80044ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800304e:	2000      	movs	r0, #0
 8003050:	f000 f80e 	bl	8003070 <HAL_InitTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	71fb      	strb	r3, [r7, #7]
 800305e:	e001      	b.n	8003064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003060:	f7ff fc88 	bl	8002974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003064:	79fb      	ldrb	r3, [r7, #7]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_InitTick+0x6c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003084:	4b16      	ldr	r3, [pc, #88]	@ (80030e0 <HAL_InitTick+0x70>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_InitTick+0x6c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fa3b 	bl	8004516 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d809      	bhi.n	80030c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ac:	2200      	movs	r2, #0
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f001 fa05 	bl	80044c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b8:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_InitTick+0x74>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e007      	b.n	80030d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e004      	b.n	80030d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e001      	b.n	80030d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000018 	.word	0x20000018
 80030e0:	20000010 	.word	0x20000010
 80030e4:	20000014 	.word	0x20000014

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	@ (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000018 	.word	0x20000018
 800310c:	200003a4 	.word	0x200003a4

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	200003a4 	.word	0x200003a4

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_Delay+0x44>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000018 	.word	0x20000018

08003170 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3360      	adds	r3, #96	@ 0x60
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <LL_ADC_SetOffset+0x44>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	4313      	orrs	r3, r2
 8003208:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	03fff000 	.word	0x03fff000

08003220 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3360      	adds	r3, #96	@ 0x60
 800322e:	461a      	mov	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3360      	adds	r3, #96	@ 0x60
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	615a      	str	r2, [r3, #20]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3330      	adds	r3, #48	@ 0x30
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	4413      	add	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	211f      	movs	r1, #31
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	401a      	ands	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 011f 	and.w	r1, r3, #31
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	431a      	orrs	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003326:	b480      	push	{r7}
 8003328:	b087      	sub	sp, #28
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3314      	adds	r3, #20
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	0e5b      	lsrs	r3, r3, #25
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	4413      	add	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2107      	movs	r1, #7
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	401a      	ands	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	0d1b      	lsrs	r3, r3, #20
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	431a      	orrs	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0318 	and.w	r3, r3, #24
 800339e:	4908      	ldr	r1, [pc, #32]	@ (80033c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033a0:	40d9      	lsrs	r1, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	400b      	ands	r3, r1
 80033a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	0007ffff 	.word	0x0007ffff

080033c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6093      	str	r3, [r2, #8]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033fc:	d101      	bne.n	8003402 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003420:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003424:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344c:	d101      	bne.n	8003452 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <LL_ADC_IsEnabled+0x18>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <LL_ADC_IsEnabled+0x1a>
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c2:	f043 0204 	orr.w	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d101      	bne.n	80034ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d101      	bne.n	8003514 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e129      	b.n	8003792 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff fa35 	bl	80029bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff3f 	bl	80033e8 <LL_ADC_IsDeepPowerDownEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff25 	bl	80033c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff5a 	bl	8003438 <LL_ADC_IsInternalRegulatorEnabled>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d115      	bne.n	80035b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff3e 	bl	8003410 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003594:	4b81      	ldr	r3, [pc, #516]	@ (800379c <HAL_ADC_Init+0x278>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	4a81      	ldr	r2, [pc, #516]	@ (80037a0 <HAL_ADC_Init+0x27c>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff3c 	bl	8003438 <LL_ADC_IsInternalRegulatorEnabled>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	f043 0210 	orr.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff75 	bl	80034d6 <LL_ADC_REG_IsConversionOngoing>
 80035ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 80c2 	bne.w	8003780 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80be 	bne.w	8003780 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800360c:	f043 0202 	orr.w	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff35 	bl	8003488 <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003624:	485f      	ldr	r0, [pc, #380]	@ (80037a4 <HAL_ADC_Init+0x280>)
 8003626:	f7ff ff2f 	bl	8003488 <LL_ADC_IsEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	485c      	ldr	r0, [pc, #368]	@ (80037a8 <HAL_ADC_Init+0x284>)
 8003638:	f7ff fd9a 	bl	8003170 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7e5b      	ldrb	r3, [r3, #25]
 8003640:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003646:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800364c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003652:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d106      	bne.n	8003678 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	3b01      	subs	r3, #1
 8003670:	045b      	lsls	r3, r3, #17
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_ADC_Init+0x288>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff25 	bl	80034fc <LL_ADC_INJ_IsConversionOngoing>
 80036b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d140      	bne.n	800373c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d13d      	bne.n	800373c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7e1b      	ldrb	r3, [r3, #24]
 80036c8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e2:	f023 0306 	bic.w	r3, r3, #6
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d118      	bne.n	800372c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800371c:	430a      	orrs	r2, r1
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	611a      	str	r2, [r3, #16]
 800372a:	e007      	b.n	800373c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f023 010f 	bic.w	r1, r3, #15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	1e5a      	subs	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
 800375c:	e007      	b.n	800376e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 020f 	bic.w	r2, r2, #15
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	@ 0x58
 800377e:	e007      	b.n	8003790 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f043 0210 	orr.w	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003790:	7ffb      	ldrb	r3, [r7, #31]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000010 	.word	0x20000010
 80037a0:	053e2d63 	.word	0x053e2d63
 80037a4:	50040000 	.word	0x50040000
 80037a8:	50040300 	.word	0x50040300
 80037ac:	fff0c007 	.word	0xfff0c007

080037b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fe88 	bl	80034d6 <LL_ADC_REG_IsConversionOngoing>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d167      	bne.n	800389c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADC_Start_DMA+0x2a>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e063      	b.n	80038a2 <HAL_ADC_Start_DMA+0xf2>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fc78 	bl	80040d8 <ADC_Enable>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d14f      	bne.n	8003892 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	f023 0206 	bic.w	r2, r3, #6
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800381e:	e002      	b.n	8003826 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	4a20      	ldr	r2, [pc, #128]	@ (80038ac <HAL_ADC_Start_DMA+0xfc>)
 800382c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003832:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <HAL_ADC_Start_DMA+0x100>)
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <HAL_ADC_Start_DMA+0x104>)
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	221c      	movs	r2, #28
 8003844:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0210 	orr.w	r2, r2, #16
 800385c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3340      	adds	r3, #64	@ 0x40
 8003878:	4619      	mov	r1, r3
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f001 f86d 	bl	800495c <HAL_DMA_Start_IT>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe0f 	bl	80034ae <LL_ADC_REG_StartConversion>
 8003890:	e006      	b.n	80038a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800389a:	e001      	b.n	80038a0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800389c:	2302      	movs	r3, #2
 800389e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	080041e5 	.word	0x080041e5
 80038b0:	080042bd 	.word	0x080042bd
 80038b4:	080042d9 	.word	0x080042d9

080038b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b0b6      	sub	sp, #216	@ 0xd8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x22>
 80038fe:	2302      	movs	r3, #2
 8003900:	e3d5      	b.n	80040ae <HAL_ADC_ConfigChannel+0x7ce>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fde1 	bl	80034d6 <LL_ADC_REG_IsConversionOngoing>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 83ba 	bne.w	8004090 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d824      	bhi.n	8003976 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	3b02      	subs	r3, #2
 8003932:	2b03      	cmp	r3, #3
 8003934:	d81b      	bhi.n	800396e <HAL_ADC_ConfigChannel+0x8e>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <HAL_ADC_ConfigChannel+0x5c>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003955 	.word	0x08003955
 8003944:	0800395d 	.word	0x0800395d
 8003948:	08003965 	.word	0x08003965
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800394c:	230c      	movs	r3, #12
 800394e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003952:	e010      	b.n	8003976 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003954:	2312      	movs	r3, #18
 8003956:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800395a:	e00c      	b.n	8003976 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800395c:	2318      	movs	r3, #24
 800395e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003962:	e008      	b.n	8003976 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800396c:	e003      	b.n	8003976 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800396e:	2306      	movs	r3, #6
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003974:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003984:	f7ff fca3 	bl	80032ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fda2 	bl	80034d6 <LL_ADC_REG_IsConversionOngoing>
 8003992:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fdae 	bl	80034fc <LL_ADC_INJ_IsConversionOngoing>
 80039a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f040 81bf 	bne.w	8003d2c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 81ba 	bne.w	8003d2c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039c0:	d10f      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7ff fcaa 	bl	8003326 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fc51 	bl	8003282 <LL_ADC_SetSamplingTimeCommonConfig>
 80039e0:	e00e      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7ff fc99 	bl	8003326 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fc41 	bl	8003282 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00a      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6919      	ldr	r1, [r3, #16]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a32:	f7ff fbd1 	bl	80031d8 <LL_ADC_SetOffset>
 8003a36:	e179      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fbee 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x184>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fbe3 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	0e9b      	lsrs	r3, r3, #26
 8003a5e:	f003 021f 	and.w	r2, r3, #31
 8003a62:	e01e      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1c2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fbd8 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003a92:	2320      	movs	r3, #32
 8003a94:	e004      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x1da>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	0e9b      	lsrs	r3, r3, #26
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	e018      	b.n	8003aec <HAL_ADC_ConfigChannel+0x20c>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003ade:	2320      	movs	r3, #32
 8003ae0:	e004      	b.n	8003aec <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003ae2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d106      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fba7 	bl	800324c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fb8b 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x24a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fb80 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	0e9b      	lsrs	r3, r3, #26
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	e01e      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x288>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fb75 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003b58:	2320      	movs	r3, #32
 8003b5a:	e004      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003b5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x2a0>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	e018      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x2d2>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e004      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d106      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fb44 	bl	800324c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fb28 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x310>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2102      	movs	r1, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fb1d 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	e01e      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x34e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fb12 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e004      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d105      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x366>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0e9b      	lsrs	r3, r3, #26
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	e014      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x390>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003c62:	2320      	movs	r3, #32
 8003c64:	e004      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d106      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fae5 	bl	800324c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2103      	movs	r1, #3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fac9 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x3ce>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2103      	movs	r1, #3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fabe 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	0e9b      	lsrs	r3, r3, #26
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	e017      	b.n	8003cde <HAL_ADC_ConfigChannel+0x3fe>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fab3 	bl	8003220 <LL_ADC_GetOffsetChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	e003      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x416>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	0e9b      	lsrs	r3, r3, #26
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	e011      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x43a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d06:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e003      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d106      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2103      	movs	r1, #3
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fa90 	bl	800324c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fba9 	bl	8003488 <LL_ADC_IsEnabled>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 813f 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7ff fb16 	bl	800337c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a8e      	ldr	r2, [pc, #568]	@ (8003f90 <HAL_ADC_ConfigChannel+0x6b0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f040 8130 	bne.w	8003fbc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x4a4>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	3301      	adds	r3, #1
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	bf94      	ite	ls
 8003d7c:	2301      	movls	r3, #1
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e019      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x4d8>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e003      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	bf94      	ite	ls
 8003db2:	2301      	movls	r3, #1
 8003db4:	2300      	movhi	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d079      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x4f8>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	3301      	adds	r3, #1
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dd6:	e015      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x524>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003df0:	2320      	movs	r3, #32
 8003df2:	e003      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	069b      	lsls	r3, r3, #26
 8003e00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x544>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	3301      	adds	r3, #1
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	e017      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x574>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x59a>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x5cc>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eac:	430b      	orrs	r3, r1
 8003eae:	e080      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x5ec>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eca:	e015      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x618>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e003      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	069b      	lsls	r3, r3, #26
 8003ef4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x638>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	e017      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x668>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	61bb      	str	r3, [r7, #24]
  return result;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e003      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	ea42 0103 	orr.w	r1, r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x694>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f003 021f 	and.w	r2, r3, #31
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	3b1e      	subs	r3, #30
 8003f6c:	051b      	lsls	r3, r3, #20
 8003f6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	e01d      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x6d0>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	60fb      	str	r3, [r7, #12]
  return result;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e005      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x6bc>
 8003f90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f003 021f 	and.w	r2, r3, #31
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3b1e      	subs	r3, #30
 8003faa:	051b      	lsls	r3, r3, #20
 8003fac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7ff f9b5 	bl	8003326 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80040b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d06c      	beq.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fc8:	483c      	ldr	r0, [pc, #240]	@ (80040bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003fca:	f7ff f8f7 	bl	80031bc <LL_ADC_GetCommonPathInternalCh>
 8003fce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80040c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d127      	bne.n	800402c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d121      	bne.n	800402c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a35      	ldr	r2, [pc, #212]	@ (80040c4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d157      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ff6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	482f      	ldr	r0, [pc, #188]	@ (80040bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003ffe:	f7ff f8ca 	bl	8003196 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004002:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_ADC_ConfigChannel+0x7e8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <HAL_ADC_ConfigChannel+0x7ec>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800401c:	e002      	b.n	8004024 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3b01      	subs	r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f9      	bne.n	800401e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800402a:	e03a      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a27      	ldr	r2, [pc, #156]	@ (80040d0 <HAL_ADC_ConfigChannel+0x7f0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800403a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1f      	ldr	r2, [pc, #124]	@ (80040c4 <HAL_ADC_ConfigChannel+0x7e4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d12a      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800404c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004054:	4619      	mov	r1, r3
 8004056:	4819      	ldr	r0, [pc, #100]	@ (80040bc <HAL_ADC_ConfigChannel+0x7dc>)
 8004058:	f7ff f89d 	bl	8003196 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800405c:	e021      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <HAL_ADC_ConfigChannel+0x7f4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d11c      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d116      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <HAL_ADC_ConfigChannel+0x7e4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d111      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800407e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004082:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004086:	4619      	mov	r1, r3
 8004088:	480c      	ldr	r0, [pc, #48]	@ (80040bc <HAL_ADC_ConfigChannel+0x7dc>)
 800408a:	f7ff f884 	bl	8003196 <LL_ADC_SetCommonPathInternalCh>
 800408e:	e008      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80040aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	37d8      	adds	r7, #216	@ 0xd8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	80080000 	.word	0x80080000
 80040bc:	50040300 	.word	0x50040300
 80040c0:	c7520000 	.word	0xc7520000
 80040c4:	50040000 	.word	0x50040000
 80040c8:	20000010 	.word	0x20000010
 80040cc:	053e2d63 	.word	0x053e2d63
 80040d0:	cb840000 	.word	0xcb840000
 80040d4:	80000001 	.word	0x80000001

080040d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f9cd 	bl	8003488 <LL_ADC_IsEnabled>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d169      	bne.n	80041c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b36      	ldr	r3, [pc, #216]	@ (80041d4 <ADC_Enable+0xfc>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	f043 0210 	orr.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e055      	b.n	80041ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f99c 	bl	8003460 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004128:	482b      	ldr	r0, [pc, #172]	@ (80041d8 <ADC_Enable+0x100>)
 800412a:	f7ff f847 	bl	80031bc <LL_ADC_GetCommonPathInternalCh>
 800412e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004138:	4b28      	ldr	r3, [pc, #160]	@ (80041dc <ADC_Enable+0x104>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <ADC_Enable+0x108>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004152:	e002      	b.n	800415a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3b01      	subs	r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f9      	bne.n	8004154 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004160:	f7fe ffd6 	bl	8003110 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004166:	e028      	b.n	80041ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff f98b 	bl	8003488 <LL_ADC_IsEnabled>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f96f 	bl	8003460 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004182:	f7fe ffc5 	bl	8003110 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d914      	bls.n	80041ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d00d      	beq.n	80041ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f043 0210 	orr.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d1cf      	bne.n	8004168 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	8000003f 	.word	0x8000003f
 80041d8:	50040300 	.word	0x50040300
 80041dc:	20000010 	.word	0x20000010
 80041e0:	053e2d63 	.word	0x053e2d63

080041e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d14b      	bne.n	8004296 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d021      	beq.n	800425c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff f843 	bl	80032a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d032      	beq.n	800428e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12b      	bne.n	800428e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11f      	bne.n	800428e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	659a      	str	r2, [r3, #88]	@ 0x58
 800425a:	e018      	b.n	800428e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d111      	bne.n	800428e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7fd f924 	bl	80014dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004294:	e00e      	b.n	80042b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fb12 	bl	80038cc <HAL_ADC_ErrorCallback>
}
 80042a8:	e004      	b.n	80042b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff faf4 	bl	80038b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff fae4 	bl	80038cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <__NVIC_SetPriorityGrouping+0x44>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800433e:	4a04      	ldr	r2, [pc, #16]	@ (8004350 <__NVIC_SetPriorityGrouping+0x44>)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	60d3      	str	r3, [r2, #12]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004358:	4b04      	ldr	r3, [pc, #16]	@ (800436c <__NVIC_GetPriorityGrouping+0x18>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f003 0307 	and.w	r3, r3, #7
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	2b00      	cmp	r3, #0
 8004380:	db0b      	blt.n	800439a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	4907      	ldr	r1, [pc, #28]	@ (80043a8 <__NVIC_EnableIRQ+0x38>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2001      	movs	r0, #1
 8004392:	fa00 f202 	lsl.w	r2, r0, r2
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000e100 	.word	0xe000e100

080043ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db0a      	blt.n	80043d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	490c      	ldr	r1, [pc, #48]	@ (80043f8 <__NVIC_SetPriority+0x4c>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d4:	e00a      	b.n	80043ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4908      	ldr	r1, [pc, #32]	@ (80043fc <__NVIC_SetPriority+0x50>)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3b04      	subs	r3, #4
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	761a      	strb	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000e100 	.word	0xe000e100
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f1c3 0307 	rsb	r3, r3, #7
 800441a:	2b04      	cmp	r3, #4
 800441c:	bf28      	it	cs
 800441e:	2304      	movcs	r3, #4
 8004420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3304      	adds	r3, #4
 8004426:	2b06      	cmp	r3, #6
 8004428:	d902      	bls.n	8004430 <NVIC_EncodePriority+0x30>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3b03      	subs	r3, #3
 800442e:	e000      	b.n	8004432 <NVIC_EncodePriority+0x32>
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43da      	mvns	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	401a      	ands	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	43d9      	mvns	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	4313      	orrs	r3, r2
         );
}
 800445a:	4618      	mov	r0, r3
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004478:	d301      	bcc.n	800447e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800447a:	2301      	movs	r3, #1
 800447c:	e00f      	b.n	800449e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800447e:	4a0a      	ldr	r2, [pc, #40]	@ (80044a8 <SysTick_Config+0x40>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004486:	210f      	movs	r1, #15
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f7ff ff8e 	bl	80043ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <SysTick_Config+0x40>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004496:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <SysTick_Config+0x40>)
 8004498:	2207      	movs	r2, #7
 800449a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000e010 	.word	0xe000e010

080044ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff29 	bl	800430c <__NVIC_SetPriorityGrouping>
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044d4:	f7ff ff3e 	bl	8004354 <__NVIC_GetPriorityGrouping>
 80044d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7ff ff8e 	bl	8004400 <NVIC_EncodePriority>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff5d 	bl	80043ac <__NVIC_SetPriority>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff31 	bl	8004370 <__NVIC_EnableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ffa2 	bl	8004468 <SysTick_Config>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e014      	b.n	800456a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	791b      	ldrb	r3, [r3, #4]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fe fabb 	bl	8002acc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	795b      	ldrb	r3, [r3, #5]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_DAC_ConfigChannel+0x1c>
 800458c:	2302      	movs	r3, #2
 800458e:	e137      	b.n	8004800 <HAL_DAC_ConfigChannel+0x28c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2202      	movs	r2, #2
 800459a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	f040 8081 	bne.w	80046a8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80045a6:	f7fe fdb3 	bl	8003110 <HAL_GetTick>
 80045aa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d140      	bne.n	8004634 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045b2:	e018      	b.n	80045e6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045b4:	f7fe fdac 	bl	8003110 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d911      	bls.n	80045e6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f043 0208 	orr.w	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2203      	movs	r2, #3
 80045e0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e10c      	b.n	8004800 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1df      	bne.n	80045b4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7fe fd97 	bl	8003128 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	69d2      	ldr	r2, [r2, #28]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40
 8004604:	e023      	b.n	800464e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004606:	f7fe fd83 	bl	8003110 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d90f      	bls.n	8004634 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461a:	2b00      	cmp	r3, #0
 800461c:	da0a      	bge.n	8004634 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2203      	movs	r2, #3
 800462e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0e5      	b.n	8004800 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	2b00      	cmp	r3, #0
 800463c:	dbe3      	blt.n	8004606 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800463e:	2001      	movs	r0, #1
 8004640:	f7fe fd72 	bl	8003128 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	69d2      	ldr	r2, [r2, #28]
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	ea02 0103 	and.w	r1, r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	21ff      	movs	r1, #255	@ 0xff
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	ea02 0103 	and.w	r1, r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d11d      	bne.n	80046ec <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	221f      	movs	r2, #31
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2207      	movs	r2, #7
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	4013      	ands	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	431a      	orrs	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43da      	mvns	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	400a      	ands	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	4013      	ands	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	4313      	orrs	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004790:	d104      	bne.n	800479c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e018      	b.n	80047ce <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e00f      	b.n	80047ce <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80047ae:	f001 fafd 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 80047b2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4a14      	ldr	r2, [pc, #80]	@ (8004808 <HAL_DAC_ConfigChannel+0x294>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d904      	bls.n	80047c6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e003      	b.n	80047ce <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047cc:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	22c0      	movs	r2, #192	@ 0xc0
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43da      	mvns	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	400a      	ands	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	04c4b400 	.word	0x04c4b400

0800480c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e08d      	b.n	800493a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <HAL_DMA_Init+0x138>)
 8004826:	429a      	cmp	r2, r3
 8004828:	d80f      	bhi.n	800484a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	4b45      	ldr	r3, [pc, #276]	@ (8004948 <HAL_DMA_Init+0x13c>)
 8004832:	4413      	add	r3, r2
 8004834:	4a45      	ldr	r2, [pc, #276]	@ (800494c <HAL_DMA_Init+0x140>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	009a      	lsls	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a42      	ldr	r2, [pc, #264]	@ (8004950 <HAL_DMA_Init+0x144>)
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40
 8004848:	e00e      	b.n	8004868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b40      	ldr	r3, [pc, #256]	@ (8004954 <HAL_DMA_Init+0x148>)
 8004852:	4413      	add	r3, r2
 8004854:	4a3d      	ldr	r2, [pc, #244]	@ (800494c <HAL_DMA_Init+0x140>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	009a      	lsls	r2, r3, #2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a3c      	ldr	r2, [pc, #240]	@ (8004958 <HAL_DMA_Init+0x14c>)
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800488c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9b6 	bl	8004c2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048c8:	d102      	bne.n	80048d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_DMA_Init+0x104>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d80c      	bhi.n	8004910 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9d6 	bl	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	e008      	b.n	8004922 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40020407 	.word	0x40020407
 8004948:	bffdfff8 	.word	0xbffdfff8
 800494c:	cccccccd 	.word	0xcccccccd
 8004950:	40020000 	.word	0x40020000
 8004954:	bffdfbf8 	.word	0xbffdfbf8
 8004958:	40020400 	.word	0x40020400

0800495c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_DMA_Start_IT+0x20>
 8004978:	2302      	movs	r3, #2
 800497a:	e066      	b.n	8004a4a <HAL_DMA_Start_IT+0xee>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d155      	bne.n	8004a3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8fb 	bl	8004bb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 020e 	orr.w	r2, r2, #14
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e00f      	b.n	80049f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0204 	bic.w	r2, r2, #4
 80049e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 020a 	orr.w	r2, r2, #10
 80049f2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a28:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e005      	b.n	8004a48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
 8004a46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f003 031c 	and.w	r3, r3, #28
 8004a72:	2204      	movs	r2, #4
 8004a74:	409a      	lsls	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d026      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d021      	beq.n	8004acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0204 	bic.w	r2, r2, #4
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f003 021c 	and.w	r2, r3, #28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2104      	movs	r1, #4
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d071      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004aca:	e06c      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad0:	f003 031c 	and.w	r3, r3, #28
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d029      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 020a 	bic.w	r2, r2, #10
 8004b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f003 021c 	and.w	r2, r3, #28
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d038      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b3c:	e033      	b.n	8004ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 031c 	and.w	r3, r3, #28
 8004b46:	2208      	movs	r2, #8
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d025      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020e 	bic.w	r2, r2, #14
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	f003 021c 	and.w	r2, r3, #28
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
}
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f003 021c 	and.w	r2, r3, #28
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d108      	bne.n	8004c10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c0e:	e007      	b.n	8004c20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b17      	ldr	r3, [pc, #92]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d80a      	bhi.n	8004c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c4c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6493      	str	r3, [r2, #72]	@ 0x48
 8004c54:	e007      	b.n	8004c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	009a      	lsls	r2, r3, #2
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c60:	4413      	add	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40020407 	.word	0x40020407
 8004c9c:	4002081c 	.word	0x4002081c
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	40020880 	.word	0x40020880

08004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	1000823f 	.word	0x1000823f
 8004cec:	40020940 	.word	0x40020940

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfe:	e166      	b.n	8004fce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8158 	beq.w	8004fc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d005      	beq.n	8004d30 <HAL_GPIO_Init+0x40>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d130      	bne.n	8004d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d66:	2201      	movs	r2, #1
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0201 	and.w	r2, r3, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d017      	beq.n	8004dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4013      	ands	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d123      	bne.n	8004e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	08da      	lsrs	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	220f      	movs	r2, #15
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	08da      	lsrs	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3208      	adds	r2, #8
 8004e1c:	6939      	ldr	r1, [r7, #16]
 8004e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0203 	and.w	r2, r3, #3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80b2 	beq.w	8004fc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e64:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <HAL_GPIO_Init+0x2fc>)
 8004e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e68:	4a60      	ldr	r2, [pc, #384]	@ (8004fec <HAL_GPIO_Init+0x2fc>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e70:	4b5e      	ldr	r3, [pc, #376]	@ (8004fec <HAL_GPIO_Init+0x2fc>)
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	3302      	adds	r3, #2
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	220f      	movs	r2, #15
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ea6:	d02b      	beq.n	8004f00 <HAL_GPIO_Init+0x210>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a52      	ldr	r2, [pc, #328]	@ (8004ff4 <HAL_GPIO_Init+0x304>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d025      	beq.n	8004efc <HAL_GPIO_Init+0x20c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a51      	ldr	r2, [pc, #324]	@ (8004ff8 <HAL_GPIO_Init+0x308>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01f      	beq.n	8004ef8 <HAL_GPIO_Init+0x208>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a50      	ldr	r2, [pc, #320]	@ (8004ffc <HAL_GPIO_Init+0x30c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d019      	beq.n	8004ef4 <HAL_GPIO_Init+0x204>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a4f      	ldr	r2, [pc, #316]	@ (8005000 <HAL_GPIO_Init+0x310>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <HAL_GPIO_Init+0x200>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a4e      	ldr	r2, [pc, #312]	@ (8005004 <HAL_GPIO_Init+0x314>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00d      	beq.n	8004eec <HAL_GPIO_Init+0x1fc>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8005008 <HAL_GPIO_Init+0x318>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <HAL_GPIO_Init+0x1f8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4c      	ldr	r2, [pc, #304]	@ (800500c <HAL_GPIO_Init+0x31c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_GPIO_Init+0x1f4>
 8004ee0:	2307      	movs	r3, #7
 8004ee2:	e00e      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	e00c      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004ee8:	2306      	movs	r3, #6
 8004eea:	e00a      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004eec:	2305      	movs	r3, #5
 8004eee:	e008      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	e006      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e004      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e002      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_GPIO_Init+0x212>
 8004f00:	2300      	movs	r3, #0
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	f002 0203 	and.w	r2, r2, #3
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	4093      	lsls	r3, r2
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f12:	4937      	ldr	r1, [pc, #220]	@ (8004ff0 <HAL_GPIO_Init+0x300>)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f20:	4b3b      	ldr	r3, [pc, #236]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f44:	4a32      	ldr	r2, [pc, #200]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f4a:	4b31      	ldr	r3, [pc, #196]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f6e:	4a28      	ldr	r2, [pc, #160]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f74:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f98:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fc2:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <HAL_GPIO_Init+0x320>)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f ae91 	bne.w	8004d00 <HAL_GPIO_Init+0x10>
  }
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	48000400 	.word	0x48000400
 8004ff8:	48000800 	.word	0x48000800
 8004ffc:	48000c00 	.word	0x48000c00
 8005000:	48001000 	.word	0x48001000
 8005004:	48001400 	.word	0x48001400
 8005008:	48001800 	.word	0x48001800
 800500c:	48001c00 	.word	0x48001c00
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005030:	e002      	b.n	8005038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <HAL_PWREx_GetVoltageRange+0x3c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005054:	d102      	bne.n	800505c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505a:	e00b      	b.n	8005074 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800505c:	4b08      	ldr	r3, [pc, #32]	@ (8005080 <HAL_PWREx_GetVoltageRange+0x3c>)
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506a:	d102      	bne.n	8005072 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800506c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005070:	e000      	b.n	8005074 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005072:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40007000 	.word	0x40007000

08005084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d141      	bne.n	8005116 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005092:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509e:	d131      	bne.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a0:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	4a46      	ldr	r2, [pc, #280]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050b0:	4b43      	ldr	r3, [pc, #268]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b8:	4a41      	ldr	r2, [pc, #260]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050c0:	4b40      	ldr	r3, [pc, #256]	@ (80051c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2232      	movs	r2, #50	@ 0x32
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	4a3f      	ldr	r2, [pc, #252]	@ (80051c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	0c9b      	lsrs	r3, r3, #18
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d6:	e002      	b.n	80050de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050de:	4b38      	ldr	r3, [pc, #224]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ea:	d102      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f2      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050f2:	4b33      	ldr	r3, [pc, #204]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fe:	d158      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e057      	b.n	80051b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b2e      	ldr	r3, [pc, #184]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005114:	e04d      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511c:	d141      	bne.n	80051a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800511e:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512a:	d131      	bne.n	8005190 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800512c:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800513c:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005144:	4a1e      	ldr	r2, [pc, #120]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800514a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800514c:	4b1d      	ldr	r3, [pc, #116]	@ (80051c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2232      	movs	r2, #50	@ 0x32
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	0c9b      	lsrs	r3, r3, #18
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005162:	e002      	b.n	800516a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b01      	subs	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d102      	bne.n	800517e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f2      	bne.n	8005164 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518a:	d112      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e011      	b.n	80051b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a0a      	ldr	r2, [pc, #40]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051a0:	e007      	b.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051aa:	4a05      	ldr	r2, [pc, #20]	@ (80051c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051b0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40007000 	.word	0x40007000
 80051c4:	20000010 	.word	0x20000010
 80051c8:	431bde83 	.word	0x431bde83

080051cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a04      	ldr	r2, [pc, #16]	@ (80051e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051da:	6053      	str	r3, [r2, #4]
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40007000 	.word	0x40007000

080051ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f000 bc08 	b.w	8005a10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005200:	4b96      	ldr	r3, [pc, #600]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800520a:	4b94      	ldr	r3, [pc, #592]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80e4 	beq.w	80053ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HAL_RCC_OscConfig+0x4c>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	f040 808b 	bne.w	8005346 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b01      	cmp	r3, #1
 8005234:	f040 8087 	bne.w	8005346 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005238:	4b88      	ldr	r3, [pc, #544]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_OscConfig+0x64>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e3df      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	4b81      	ldr	r3, [pc, #516]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_RCC_OscConfig+0x7e>
 8005260:	4b7e      	ldr	r3, [pc, #504]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005268:	e005      	b.n	8005276 <HAL_RCC_OscConfig+0x8a>
 800526a:	4b7c      	ldr	r3, [pc, #496]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005276:	4293      	cmp	r3, r2
 8005278:	d223      	bcs.n	80052c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fdcc 	bl	8005e1c <RCC_SetFlashLatencyFromMSIRange>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e3c0      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528e:	4b73      	ldr	r3, [pc, #460]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a72      	ldr	r2, [pc, #456]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005294:	f043 0308 	orr.w	r3, r3, #8
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b70      	ldr	r3, [pc, #448]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	496d      	ldr	r1, [pc, #436]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ac:	4b6b      	ldr	r3, [pc, #428]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	4968      	ldr	r1, [pc, #416]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	e025      	b.n	800530e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c2:	4b66      	ldr	r3, [pc, #408]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a65      	ldr	r2, [pc, #404]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052c8:	f043 0308 	orr.w	r3, r3, #8
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b63      	ldr	r3, [pc, #396]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4960      	ldr	r1, [pc, #384]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e0:	4b5e      	ldr	r3, [pc, #376]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	495b      	ldr	r1, [pc, #364]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd8c 	bl	8005e1c <RCC_SetFlashLatencyFromMSIRange>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e380      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800530e:	f000 fcc1 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005312:	4602      	mov	r2, r0
 8005314:	4b51      	ldr	r3, [pc, #324]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	4950      	ldr	r1, [pc, #320]	@ (8005460 <HAL_RCC_OscConfig+0x274>)
 8005320:	5ccb      	ldrb	r3, [r1, r3]
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	4a4e      	ldr	r2, [pc, #312]	@ (8005464 <HAL_RCC_OscConfig+0x278>)
 800532c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800532e:	4b4e      	ldr	r3, [pc, #312]	@ (8005468 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd fe9c 	bl	8003070 <HAL_InitTick>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d052      	beq.n	80053e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	e364      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d032      	beq.n	80053b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800534e:	4b43      	ldr	r3, [pc, #268]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a42      	ldr	r2, [pc, #264]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800535a:	f7fd fed9 	bl	8003110 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005362:	f7fd fed5 	bl	8003110 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e34d      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005374:	4b39      	ldr	r3, [pc, #228]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005380:	4b36      	ldr	r3, [pc, #216]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a35      	ldr	r2, [pc, #212]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b33      	ldr	r3, [pc, #204]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4930      	ldr	r1, [pc, #192]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800539e:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	492b      	ldr	r1, [pc, #172]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
 80053b2:	e01a      	b.n	80053ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053b4:	4b29      	ldr	r3, [pc, #164]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a28      	ldr	r2, [pc, #160]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053c0:	f7fd fea6 	bl	8003110 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053c8:	f7fd fea2 	bl	8003110 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e31a      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1dc>
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d073      	beq.n	80054de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x21c>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d10e      	bne.n	8005420 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d10b      	bne.n	8005420 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	4b14      	ldr	r3, [pc, #80]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d063      	beq.n	80054dc <HAL_RCC_OscConfig+0x2f0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d15f      	bne.n	80054dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e2f7      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005428:	d106      	bne.n	8005438 <HAL_RCC_OscConfig+0x24c>
 800542a:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a0b      	ldr	r2, [pc, #44]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e025      	b.n	8005484 <HAL_RCC_OscConfig+0x298>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005440:	d114      	bne.n	800546c <HAL_RCC_OscConfig+0x280>
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a05      	ldr	r2, [pc, #20]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4b03      	ldr	r3, [pc, #12]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a02      	ldr	r2, [pc, #8]	@ (800545c <HAL_RCC_OscConfig+0x270>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e013      	b.n	8005484 <HAL_RCC_OscConfig+0x298>
 800545c:	40021000 	.word	0x40021000
 8005460:	0800f554 	.word	0x0800f554
 8005464:	20000010 	.word	0x20000010
 8005468:	20000014 	.word	0x20000014
 800546c:	4ba0      	ldr	r3, [pc, #640]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a9f      	ldr	r2, [pc, #636]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4b9d      	ldr	r3, [pc, #628]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a9c      	ldr	r2, [pc, #624]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800547e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fd fe40 	bl	8003110 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fd fe3c 	bl	8003110 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	@ 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e2b4      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a6:	4b92      	ldr	r3, [pc, #584]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x2a8>
 80054b2:	e014      	b.n	80054de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fd fe2c 	bl	8003110 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fd fe28 	bl	8003110 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	@ 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e2a0      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ce:	4b88      	ldr	r3, [pc, #544]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x2d0>
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d060      	beq.n	80055ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_OscConfig+0x310>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d119      	bne.n	800552a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d116      	bne.n	800552a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fc:	4b7c      	ldr	r3, [pc, #496]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_OscConfig+0x328>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e27d      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b76      	ldr	r3, [pc, #472]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	061b      	lsls	r3, r3, #24
 8005522:	4973      	ldr	r1, [pc, #460]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005528:	e040      	b.n	80055ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d023      	beq.n	800557a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005532:	4b6f      	ldr	r3, [pc, #444]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a6e      	ldr	r2, [pc, #440]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fd fde7 	bl	8003110 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005546:	f7fd fde3 	bl	8003110 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e25b      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005558:	4b65      	ldr	r3, [pc, #404]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b62      	ldr	r3, [pc, #392]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	495f      	ldr	r1, [pc, #380]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	e018      	b.n	80055ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557a:	4b5d      	ldr	r3, [pc, #372]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5c      	ldr	r2, [pc, #368]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fd fdc3 	bl	8003110 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558e:	f7fd fdbf 	bl	8003110 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e237      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a0:	4b53      	ldr	r3, [pc, #332]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d03c      	beq.n	8005632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01c      	beq.n	80055fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c0:	4b4b      	ldr	r3, [pc, #300]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c6:	4a4a      	ldr	r2, [pc, #296]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fd fd9e 	bl	8003110 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d8:	f7fd fd9a 	bl	8003110 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e212      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ea:	4b41      	ldr	r3, [pc, #260]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80055ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0ef      	beq.n	80055d8 <HAL_RCC_OscConfig+0x3ec>
 80055f8:	e01b      	b.n	8005632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fa:	4b3d      	ldr	r3, [pc, #244]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005600:	4a3b      	ldr	r2, [pc, #236]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fd fd81 	bl	8003110 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005612:	f7fd fd7d 	bl	8003110 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e1f5      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005624:	4b32      	ldr	r3, [pc, #200]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ef      	bne.n	8005612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a6 	beq.w	800578c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005644:	4b2a      	ldr	r3, [pc, #168]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005650:	4b27      	ldr	r3, [pc, #156]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005654:	4a26      	ldr	r2, [pc, #152]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 8005656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800565a:	6593      	str	r3, [r2, #88]	@ 0x58
 800565c:	4b24      	ldr	r3, [pc, #144]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005668:	2301      	movs	r3, #1
 800566a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566c:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <HAL_RCC_OscConfig+0x508>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d118      	bne.n	80056aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005678:	4b1e      	ldr	r3, [pc, #120]	@ (80056f4 <HAL_RCC_OscConfig+0x508>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1d      	ldr	r2, [pc, #116]	@ (80056f4 <HAL_RCC_OscConfig+0x508>)
 800567e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005684:	f7fd fd44 	bl	8003110 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568c:	f7fd fd40 	bl	8003110 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1b8      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569e:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <HAL_RCC_OscConfig+0x508>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d108      	bne.n	80056c4 <HAL_RCC_OscConfig+0x4d8>
 80056b2:	4b0f      	ldr	r3, [pc, #60]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b8:	4a0d      	ldr	r2, [pc, #52]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056c2:	e029      	b.n	8005718 <HAL_RCC_OscConfig+0x52c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d115      	bne.n	80056f8 <HAL_RCC_OscConfig+0x50c>
 80056cc:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d2:	4a07      	ldr	r2, [pc, #28]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056d4:	f043 0304 	orr.w	r3, r3, #4
 80056d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	4a03      	ldr	r2, [pc, #12]	@ (80056f0 <HAL_RCC_OscConfig+0x504>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056ec:	e014      	b.n	8005718 <HAL_RCC_OscConfig+0x52c>
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40007000 	.word	0x40007000
 80056f8:	4b9d      	ldr	r3, [pc, #628]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	4a9c      	ldr	r2, [pc, #624]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005708:	4b99      	ldr	r3, [pc, #612]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	4a98      	ldr	r2, [pc, #608]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d016      	beq.n	800574e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fd fcf6 	bl	8003110 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005726:	e00a      	b.n	800573e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005728:	f7fd fcf2 	bl	8003110 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e168      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573e:	4b8c      	ldr	r3, [pc, #560]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ed      	beq.n	8005728 <HAL_RCC_OscConfig+0x53c>
 800574c:	e015      	b.n	800577a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fd fcdf 	bl	8003110 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005754:	e00a      	b.n	800576c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fd fcdb 	bl	8003110 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e151      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800576c:	4b80      	ldr	r3, [pc, #512]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1ed      	bne.n	8005756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005780:	4b7b      	ldr	r3, [pc, #492]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005784:	4a7a      	ldr	r2, [pc, #488]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d03c      	beq.n	8005812 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01c      	beq.n	80057da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a0:	4b73      	ldr	r3, [pc, #460]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80057a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057a6:	4a72      	ldr	r2, [pc, #456]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fd fcae 	bl	8003110 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b8:	f7fd fcaa 	bl	8003110 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e122      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ca:	4b69      	ldr	r3, [pc, #420]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80057cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ef      	beq.n	80057b8 <HAL_RCC_OscConfig+0x5cc>
 80057d8:	e01b      	b.n	8005812 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057da:	4b65      	ldr	r3, [pc, #404]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80057dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057e0:	4a63      	ldr	r2, [pc, #396]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ea:	f7fd fc91 	bl	8003110 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f2:	f7fd fc8d 	bl	8003110 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e105      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005804:	4b5a      	ldr	r3, [pc, #360]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ef      	bne.n	80057f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80f9 	beq.w	8005a0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b02      	cmp	r3, #2
 8005822:	f040 80cf 	bne.w	80059c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005826:	4b52      	ldr	r3, [pc, #328]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f003 0203 	and.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	429a      	cmp	r2, r3
 8005838:	d12c      	bne.n	8005894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	3b01      	subs	r3, #1
 8005846:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d123      	bne.n	8005894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005856:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d11b      	bne.n	8005894 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d113      	bne.n	8005894 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	3b01      	subs	r3, #1
 800587a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d109      	bne.n	8005894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	3b01      	subs	r3, #1
 800588e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d071      	beq.n	8005978 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d068      	beq.n	800596c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800589a:	4b35      	ldr	r3, [pc, #212]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058a6:	4b32      	ldr	r3, [pc, #200]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0ac      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80058bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058c2:	f7fd fc25 	bl	8003110 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ca:	f7fd fc21 	bl	8003110 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e099      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058dc:	4b24      	ldr	r3, [pc, #144]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e8:	4b21      	ldr	r3, [pc, #132]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	4b21      	ldr	r3, [pc, #132]	@ (8005974 <HAL_RCC_OscConfig+0x788>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058f8:	3a01      	subs	r2, #1
 80058fa:	0112      	lsls	r2, r2, #4
 80058fc:	4311      	orrs	r1, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005902:	0212      	lsls	r2, r2, #8
 8005904:	4311      	orrs	r1, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800590a:	0852      	lsrs	r2, r2, #1
 800590c:	3a01      	subs	r2, #1
 800590e:	0552      	lsls	r2, r2, #21
 8005910:	4311      	orrs	r1, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005916:	0852      	lsrs	r2, r2, #1
 8005918:	3a01      	subs	r2, #1
 800591a:	0652      	lsls	r2, r2, #25
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005922:	06d2      	lsls	r2, r2, #27
 8005924:	430a      	orrs	r2, r1
 8005926:	4912      	ldr	r1, [pc, #72]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005928:	4313      	orrs	r3, r2
 800592a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800592c:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0f      	ldr	r2, [pc, #60]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005938:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a0c      	ldr	r2, [pc, #48]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 800593e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005944:	f7fd fbe4 	bl	8003110 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594c:	f7fd fbe0 	bl	8003110 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e058      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595e:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <HAL_RCC_OscConfig+0x784>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800596a:	e050      	b.n	8005a0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e04f      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
 8005970:	40021000 	.word	0x40021000
 8005974:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005978:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d144      	bne.n	8005a0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005984:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a23      	ldr	r2, [pc, #140]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 800598a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005990:	4b21      	ldr	r3, [pc, #132]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a20      	ldr	r2, [pc, #128]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 8005996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800599a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800599c:	f7fd fbb8 	bl	8003110 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fd fbb4 	bl	8003110 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e02c      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b6:	4b18      	ldr	r3, [pc, #96]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x7b8>
 80059c2:	e024      	b.n	8005a0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b0c      	cmp	r3, #12
 80059c8:	d01f      	beq.n	8005a0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b13      	ldr	r3, [pc, #76]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 80059d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fd fb9b 	bl	8003110 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059de:	f7fd fb97 	bl	8003110 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e00f      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f0:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4905      	ldr	r1, [pc, #20]	@ (8005a18 <HAL_RCC_OscConfig+0x82c>)
 8005a02:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <HAL_RCC_OscConfig+0x830>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60cb      	str	r3, [r1, #12]
 8005a08:	e001      	b.n	8005a0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	feeefffc 	.word	0xfeeefffc

08005a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e11d      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a38:	4b90      	ldr	r3, [pc, #576]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d910      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b8d      	ldr	r3, [pc, #564]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 020f 	bic.w	r2, r3, #15
 8005a4e:	498b      	ldr	r1, [pc, #556]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b89      	ldr	r3, [pc, #548]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e105      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	4b81      	ldr	r3, [pc, #516]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d908      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a84:	4b7e      	ldr	r3, [pc, #504]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	497b      	ldr	r1, [pc, #492]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d079      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d11e      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aaa:	4b75      	ldr	r3, [pc, #468]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0dc      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005aba:	f000 fa09 	bl	8005ed0 <RCC_GetSysClockFreqFromPLLSource>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4a70      	ldr	r2, [pc, #448]	@ (8005c84 <HAL_RCC_ClockConfig+0x264>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d946      	bls.n	8005b54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d140      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ada:	4a69      	ldr	r2, [pc, #420]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e035      	b.n	8005b54 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d107      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af0:	4b63      	ldr	r3, [pc, #396]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d115      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0b9      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b08:	4b5d      	ldr	r3, [pc, #372]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0ad      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b18:	4b59      	ldr	r3, [pc, #356]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0a5      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b28:	f000 f8b4 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4a55      	ldr	r2, [pc, #340]	@ (8005c84 <HAL_RCC_ClockConfig+0x264>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d90f      	bls.n	8005b54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b34:	4b52      	ldr	r3, [pc, #328]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b40:	4b4f      	ldr	r3, [pc, #316]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b48:	4a4d      	ldr	r2, [pc, #308]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b54:	4b4a      	ldr	r3, [pc, #296]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 0203 	bic.w	r2, r3, #3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4947      	ldr	r1, [pc, #284]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fd fad3 	bl	8003110 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6e:	f7fd facf 	bl	8003110 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e077      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b84:	4b3e      	ldr	r3, [pc, #248]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 020c 	and.w	r2, r3, #12
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d1eb      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b80      	cmp	r3, #128	@ 0x80
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b9c:	4b38      	ldr	r3, [pc, #224]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a37      	ldr	r2, [pc, #220]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ba6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b31      	ldr	r3, [pc, #196]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d208      	bcs.n	8005bd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	492b      	ldr	r1, [pc, #172]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd6:	4b29      	ldr	r3, [pc, #164]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d210      	bcs.n	8005c06 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be4:	4b25      	ldr	r3, [pc, #148]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 020f 	bic.w	r2, r3, #15
 8005bec:	4923      	ldr	r1, [pc, #140]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf4:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <HAL_RCC_ClockConfig+0x25c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e036      	b.n	8005c74 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c12:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4918      	ldr	r1, [pc, #96]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4910      	ldr	r1, [pc, #64]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c44:	f000 f826 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <HAL_RCC_ClockConfig+0x260>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	490c      	ldr	r1, [pc, #48]	@ (8005c88 <HAL_RCC_ClockConfig+0x268>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	4a0a      	ldr	r2, [pc, #40]	@ (8005c8c <HAL_RCC_ClockConfig+0x26c>)
 8005c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c64:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <HAL_RCC_ClockConfig+0x270>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fd fa01 	bl	8003070 <HAL_InitTick>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40021000 	.word	0x40021000
 8005c84:	04c4b400 	.word	0x04c4b400
 8005c88:	0800f554 	.word	0x0800f554
 8005c8c:	20000010 	.word	0x20000010
 8005c90:	20000014 	.word	0x20000014

08005c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	@ 0x24
 8005c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cac:	4b3b      	ldr	r3, [pc, #236]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d121      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d11e      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cc8:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cd4:	4b31      	ldr	r3, [pc, #196]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d04:	e00a      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d102      	bne.n	8005d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e004      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d18:	4b23      	ldr	r3, [pc, #140]	@ (8005da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b0c      	cmp	r3, #12
 8005d20:	d134      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d22:	4b1e      	ldr	r3, [pc, #120]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d003      	beq.n	8005d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d003      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0xac>
 8005d38:	e005      	b.n	8005d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d3c:	617b      	str	r3, [r7, #20]
      break;
 8005d3e:	e005      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d40:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d42:	617b      	str	r3, [r7, #20]
      break;
 8005d44:	e002      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	617b      	str	r3, [r7, #20]
      break;
 8005d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d4c:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	3301      	adds	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d5a:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	fb03 f202 	mul.w	r2, r3, r2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d72:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	0e5b      	lsrs	r3, r3, #25
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	@ 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	0800f56c 	.word	0x0800f56c
 8005da4:	00f42400 	.word	0x00f42400
 8005da8:	007a1200 	.word	0x007a1200

08005dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db0:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dc8:	f7ff fff0 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	0a1b      	lsrs	r3, r3, #8
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4904      	ldr	r1, [pc, #16]	@ (8005dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000
 8005dec:	0800f564 	.word	0x0800f564

08005df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005df4:	f7ff ffda 	bl	8005dac <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	0adb      	lsrs	r3, r3, #11
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4904      	ldr	r1, [pc, #16]	@ (8005e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	0800f564 	.word	0x0800f564

08005e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e28:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e34:	f7ff f906 	bl	8005044 <HAL_PWREx_GetVoltageRange>
 8005e38:	6178      	str	r0, [r7, #20]
 8005e3a:	e014      	b.n	8005e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e40:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e48:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e54:	f7ff f8f6 	bl	8005044 <HAL_PWREx_GetVoltageRange>
 8005e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e6c:	d10b      	bne.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d913      	bls.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e78:	d902      	bls.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e00d      	b.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e80:	2301      	movs	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	e00a      	b.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e8a:	d902      	bls.n	8005e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	e004      	b.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b70      	cmp	r3, #112	@ 0x70
 8005e96:	d101      	bne.n	8005e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e98:	2301      	movs	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f023 020f 	bic.w	r2, r3, #15
 8005ea4:	4909      	ldr	r1, [pc, #36]	@ (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005eac:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d001      	beq.n	8005ebe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40022000 	.word	0x40022000

08005ed0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d00b      	beq.n	8005efe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d825      	bhi.n	8005f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d008      	beq.n	8005f04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d11f      	bne.n	8005f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	@ (8005f90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005efa:	613b      	str	r3, [r7, #16]
    break;
 8005efc:	e01f      	b.n	8005f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f00:	613b      	str	r3, [r7, #16]
    break;
 8005f02:	e01c      	b.n	8005f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f04:	4b21      	ldr	r3, [pc, #132]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d107      	bne.n	8005f20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f10:	4b1e      	ldr	r3, [pc, #120]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e005      	b.n	8005f2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f20:	4b1a      	ldr	r3, [pc, #104]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	091b      	lsrs	r3, r3, #4
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f34:	613b      	str	r3, [r7, #16]
    break;
 8005f36:	e002      	b.n	8005f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
    break;
 8005f3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f3e:	4b13      	ldr	r3, [pc, #76]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	fb03 f202 	mul.w	r2, r3, r2
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f64:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	0e5b      	lsrs	r3, r3, #25
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f7e:	683b      	ldr	r3, [r7, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200
 8005f98:	0800f56c 	.word	0x0800f56c

08005f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fa8:	2300      	movs	r3, #0
 8005faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d040      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fbc:	2b80      	cmp	r3, #128	@ 0x80
 8005fbe:	d02a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fc0:	2b80      	cmp	r3, #128	@ 0x80
 8005fc2:	d825      	bhi.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fc4:	2b60      	cmp	r3, #96	@ 0x60
 8005fc6:	d026      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fc8:	2b60      	cmp	r3, #96	@ 0x60
 8005fca:	d821      	bhi.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	d006      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	d81d      	bhi.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d010      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005fdc:	e018      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fde:	4b89      	ldr	r3, [pc, #548]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4a88      	ldr	r2, [pc, #544]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fea:	e015      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fa24 	bl	8007440 <RCCEx_PLLSAI1_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ffc:	e00c      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3320      	adds	r3, #32
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fb0f 	bl	8007628 <RCCEx_PLLSAI2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	74fb      	strb	r3, [r7, #19]
      break;
 8006014:	e000      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800601e:	4b79      	ldr	r3, [pc, #484]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006020:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006024:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800602c:	4975      	ldr	r1, [pc, #468]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006034:	e001      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	7cfb      	ldrb	r3, [r7, #19]
 8006038:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d047      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d030      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006054:	d82a      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800605a:	d02a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800605c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006060:	d824      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006066:	d008      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800606c:	d81e      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006076:	d010      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006078:	e018      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800607a:	4b62      	ldr	r3, [pc, #392]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	4a61      	ldr	r2, [pc, #388]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006084:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006086:	e015      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3304      	adds	r3, #4
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f9d6 	bl	8007440 <RCCEx_PLLSAI1_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006098:	e00c      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3320      	adds	r3, #32
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fac1 	bl	8007628 <RCCEx_PLLSAI2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060aa:	e003      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	74fb      	strb	r3, [r7, #19]
      break;
 80060b0:	e000      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80060b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b4:	7cfb      	ldrb	r3, [r7, #19]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060ba:	4b52      	ldr	r3, [pc, #328]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	494e      	ldr	r1, [pc, #312]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80060d0:	e001      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	7cfb      	ldrb	r3, [r7, #19]
 80060d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 809f 	beq.w	8006222 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060e4:	2300      	movs	r3, #0
 80060e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060e8:	4b46      	ldr	r3, [pc, #280]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	4b41      	ldr	r3, [pc, #260]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	4a40      	ldr	r2, [pc, #256]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006108:	6593      	str	r3, [r2, #88]	@ 0x58
 800610a:	4b3e      	ldr	r3, [pc, #248]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006116:	2301      	movs	r3, #1
 8006118:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800611a:	4b3b      	ldr	r3, [pc, #236]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3a      	ldr	r2, [pc, #232]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006126:	f7fc fff3 	bl	8003110 <HAL_GetTick>
 800612a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800612c:	e009      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800612e:	f7fc ffef 	bl	8003110 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d902      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	74fb      	strb	r3, [r7, #19]
        break;
 8006140:	e005      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006142:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ef      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d15b      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800615e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01f      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	429a      	cmp	r2, r3
 8006170:	d019      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006172:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800617c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800617e:	4b21      	ldr	r3, [pc, #132]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	4a1f      	ldr	r2, [pc, #124]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800618e:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800619e:	4a19      	ldr	r2, [pc, #100]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fc ffae 	bl	8003110 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061b6:	e00b      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fc ffaa 	bl	8003110 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d902      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	74fb      	strb	r3, [r7, #19]
            break;
 80061ce:	e006      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ec      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80061de:	7cfb      	ldrb	r3, [r7, #19]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10c      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e4:	4b07      	ldr	r3, [pc, #28]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f4:	4903      	ldr	r1, [pc, #12]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80061fc:	e008      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	74bb      	strb	r3, [r7, #18]
 8006202:	e005      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006204:	40021000 	.word	0x40021000
 8006208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006210:	7c7b      	ldrb	r3, [r7, #17]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d105      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006216:	4ba0      	ldr	r3, [pc, #640]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621a:	4a9f      	ldr	r2, [pc, #636]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800622e:	4b9a      	ldr	r3, [pc, #616]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006234:	f023 0203 	bic.w	r2, r3, #3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623c:	4996      	ldr	r1, [pc, #600]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006250:	4b91      	ldr	r3, [pc, #580]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f023 020c 	bic.w	r2, r3, #12
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	498e      	ldr	r1, [pc, #568]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006272:	4b89      	ldr	r3, [pc, #548]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006280:	4985      	ldr	r1, [pc, #532]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006294:	4b80      	ldr	r3, [pc, #512]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a2:	497d      	ldr	r1, [pc, #500]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062b6:	4b78      	ldr	r3, [pc, #480]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c4:	4974      	ldr	r1, [pc, #464]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e6:	496c      	ldr	r1, [pc, #432]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fa:	4b67      	ldr	r3, [pc, #412]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006308:	4963      	ldr	r1, [pc, #396]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800631c:	4b5e      	ldr	r3, [pc, #376]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800632a:	495b      	ldr	r1, [pc, #364]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800633e:	4b56      	ldr	r3, [pc, #344]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006344:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634c:	4952      	ldr	r1, [pc, #328]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006360:	4b4d      	ldr	r3, [pc, #308]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006366:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	494a      	ldr	r1, [pc, #296]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006382:	4b45      	ldr	r3, [pc, #276]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006390:	4941      	ldr	r1, [pc, #260]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063aa:	f023 0203 	bic.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b2:	4939      	ldr	r1, [pc, #228]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d028      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c6:	4b34      	ldr	r3, [pc, #208]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d4:	4930      	ldr	r1, [pc, #192]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063e4:	d106      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f0:	60d3      	str	r3, [r2, #12]
 80063f2:	e011      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	2101      	movs	r1, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f001 f81b 	bl	8007440 <RCCEx_PLLSAI1_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d04d      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800642c:	d108      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800642e:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006434:	4a18      	ldr	r2, [pc, #96]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800643a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800643e:	e012      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006446:	4a14      	ldr	r2, [pc, #80]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800644c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006450:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006456:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800645e:	490e      	ldr	r1, [pc, #56]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800646e:	d106      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800647a:	60d3      	str	r3, [r2, #12]
 800647c:	e020      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006486:	d109      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4a02      	ldr	r2, [pc, #8]	@ (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006492:	60d3      	str	r3, [r2, #12]
 8006494:	e014      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064a4:	d10c      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 ffc7 	bl	8007440 <RCCEx_PLLSAI1_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064b6:	7cfb      	ldrb	r3, [r7, #19]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d028      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064cc:	4b4a      	ldr	r3, [pc, #296]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064da:	4947      	ldr	r1, [pc, #284]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ea:	d106      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ec:	4b42      	ldr	r3, [pc, #264]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4a41      	ldr	r2, [pc, #260]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064f6:	60d3      	str	r3, [r2, #12]
 80064f8:	e011      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006502:	d10c      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	2101      	movs	r1, #1
 800650a:	4618      	mov	r0, r3
 800650c:	f000 ff98 	bl	8007440 <RCCEx_PLLSAI1_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800651a:	7cfb      	ldrb	r3, [r7, #19]
 800651c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01e      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800652a:	4b33      	ldr	r3, [pc, #204]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800653a:	492f      	ldr	r1, [pc, #188]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800654c:	d10c      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ff73 	bl	8007440 <RCCEx_PLLSAI1_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006574:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800657a:	f023 0204 	bic.w	r2, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006584:	491c      	ldr	r1, [pc, #112]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006598:	4b17      	ldr	r3, [pc, #92]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800659a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659e:	f023 0218 	bic.w	r2, r3, #24
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	4913      	ldr	r1, [pc, #76]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d017      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065bc:	4b0e      	ldr	r3, [pc, #56]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065cc:	490a      	ldr	r1, [pc, #40]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065de:	d105      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e0:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000

080065fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800660e:	d13e      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006610:	4bb6      	ldr	r3, [pc, #728]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006622:	d028      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800662a:	f200 86f4 	bhi.w	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006634:	d005      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663c:	d00e      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800663e:	f000 beea 	b.w	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006642:	4baa      	ldr	r3, [pc, #680]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	f040 86e4 	bne.w	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006656:	61fb      	str	r3, [r7, #28]
      break;
 8006658:	f000 bedf 	b.w	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800665c:	4ba3      	ldr	r3, [pc, #652]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800665e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	f040 86d9 	bne.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800666c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006670:	61fb      	str	r3, [r7, #28]
      break;
 8006672:	f000 bed4 	b.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006676:	4b9d      	ldr	r3, [pc, #628]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006682:	f040 86ce 	bne.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006686:	4b9a      	ldr	r3, [pc, #616]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006688:	61fb      	str	r3, [r7, #28]
      break;
 800668a:	f000 beca 	b.w	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800668e:	4b97      	ldr	r3, [pc, #604]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d036      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d840      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d003      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d020      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80066b0:	e039      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066b2:	4b8e      	ldr	r3, [pc, #568]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d116      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066be:	4b8b      	ldr	r3, [pc, #556]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80066ca:	4b88      	ldr	r3, [pc, #544]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	e005      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80066d6:	4b85      	ldr	r3, [pc, #532]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	4a84      	ldr	r2, [pc, #528]	@ (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80066ea:	e01f      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
      break;
 80066f0:	e01c      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066f2:	4b7e      	ldr	r3, [pc, #504]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d102      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006700:	4b7d      	ldr	r3, [pc, #500]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006702:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006704:	e012      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
      break;
 800670a:	e00f      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800670c:	4b77      	ldr	r3, [pc, #476]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006718:	d102      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800671a:	4b78      	ldr	r3, [pc, #480]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800671c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800671e:	e005      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	61bb      	str	r3, [r7, #24]
      break;
 8006724:	e002      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
      break;
 800672a:	bf00      	nop
    }

    switch(PeriphClk)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006732:	f000 8606 	beq.w	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800673c:	f200 8673 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006746:	f000 8469 	beq.w	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006750:	f200 8669 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800675a:	f000 8531 	beq.w	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006764:	f200 865f 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800676e:	f000 8187 	beq.w	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006778:	f200 8655 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006782:	f000 80cd 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800678c:	f200 864b 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006796:	f000 8430 	beq.w	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	f200 8641 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067aa:	f000 83e4 	beq.w	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b4:	f200 8637 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067be:	f000 80af 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c8:	f200 862d 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d2:	f000 809d 	beq.w	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067dc:	f200 8623 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067e6:	f000 808b 	beq.w	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f0:	f200 8619 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fa:	f000 8554 	beq.w	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006804:	f200 860f 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800680e:	f000 8500 	beq.w	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006818:	f200 8605 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006822:	f000 84a1 	beq.w	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682c:	f200 85fb 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b80      	cmp	r3, #128	@ 0x80
 8006834:	f000 846c 	beq.w	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b80      	cmp	r3, #128	@ 0x80
 800683c:	f200 85f3 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b20      	cmp	r3, #32
 8006844:	d84c      	bhi.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 85ec 	beq.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3b01      	subs	r3, #1
 8006852:	2b1f      	cmp	r3, #31
 8006854:	f200 85e7 	bhi.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006858:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006c75 	.word	0x08006c75
 8006864:	08006ce3 	.word	0x08006ce3
 8006868:	08007427 	.word	0x08007427
 800686c:	08006d77 	.word	0x08006d77
 8006870:	08007427 	.word	0x08007427
 8006874:	08007427 	.word	0x08007427
 8006878:	08007427 	.word	0x08007427
 800687c:	08006def 	.word	0x08006def
 8006880:	08007427 	.word	0x08007427
 8006884:	08007427 	.word	0x08007427
 8006888:	08007427 	.word	0x08007427
 800688c:	08007427 	.word	0x08007427
 8006890:	08007427 	.word	0x08007427
 8006894:	08007427 	.word	0x08007427
 8006898:	08007427 	.word	0x08007427
 800689c:	08006e73 	.word	0x08006e73
 80068a0:	08007427 	.word	0x08007427
 80068a4:	08007427 	.word	0x08007427
 80068a8:	08007427 	.word	0x08007427
 80068ac:	08007427 	.word	0x08007427
 80068b0:	08007427 	.word	0x08007427
 80068b4:	08007427 	.word	0x08007427
 80068b8:	08007427 	.word	0x08007427
 80068bc:	08007427 	.word	0x08007427
 80068c0:	08007427 	.word	0x08007427
 80068c4:	08007427 	.word	0x08007427
 80068c8:	08007427 	.word	0x08007427
 80068cc:	08007427 	.word	0x08007427
 80068d0:	08007427 	.word	0x08007427
 80068d4:	08007427 	.word	0x08007427
 80068d8:	08007427 	.word	0x08007427
 80068dc:	08006ef5 	.word	0x08006ef5
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	f000 83e8 	beq.w	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80068e8:	f000 bd9d 	b.w	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80068ec:	40021000 	.word	0x40021000
 80068f0:	0003d090 	.word	0x0003d090
 80068f4:	0800f56c 	.word	0x0800f56c
 80068f8:	00f42400 	.word	0x00f42400
 80068fc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006900:	69b9      	ldr	r1, [r7, #24]
 8006902:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006906:	f000 ff83 	bl	8007810 <RCCEx_GetSAIxPeriphCLKFreq>
 800690a:	61f8      	str	r0, [r7, #28]
      break;
 800690c:	f000 bd8e 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006916:	f000 ff7b 	bl	8007810 <RCCEx_GetSAIxPeriphCLKFreq>
 800691a:	61f8      	str	r0, [r7, #28]
      break;
 800691c:	f000 bd86 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006920:	4b9a      	ldr	r3, [pc, #616]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006932:	d015      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800693a:	f200 8092 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006944:	d029      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800694c:	f200 8089 	bhi.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d07b      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800695c:	d04a      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800695e:	e080      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006960:	4b8a      	ldr	r3, [pc, #552]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d17d      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800696c:	4b87      	ldr	r3, [pc, #540]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006978:	4b84      	ldr	r3, [pc, #528]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	e005      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006984:	4b81      	ldr	r3, [pc, #516]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	4a7f      	ldr	r2, [pc, #508]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	61fb      	str	r3, [r7, #28]
          break;
 8006998:	e066      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800699a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069a6:	d162      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069a8:	4b78      	ldr	r3, [pc, #480]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069b4:	d15b      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069b6:	4b75      	ldr	r3, [pc, #468]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	fb03 f202 	mul.w	r2, r3, r2
 80069ca:	4b70      	ldr	r3, [pc, #448]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	3301      	adds	r3, #1
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80069dc:	4b6b      	ldr	r3, [pc, #428]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0d5b      	lsrs	r3, r3, #21
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3301      	adds	r3, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f0:	61fb      	str	r3, [r7, #28]
          break;
 80069f2:	e03c      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80069f4:	4b65      	ldr	r3, [pc, #404]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a00:	d138      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a02:	4b62      	ldr	r3, [pc, #392]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0e:	d131      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a10:	4b5e      	ldr	r3, [pc, #376]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	0a1b      	lsrs	r3, r3, #8
 8006a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	fb03 f202 	mul.w	r2, r3, r2
 8006a24:	4b59      	ldr	r3, [pc, #356]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3301      	adds	r3, #1
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006a36:	4b55      	ldr	r3, [pc, #340]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	0d5b      	lsrs	r3, r3, #21
 8006a3c:	f003 0303 	and.w	r3, r3, #3
 8006a40:	3301      	adds	r3, #1
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	61fb      	str	r3, [r7, #28]
          break;
 8006a4c:	e012      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d10e      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a5e:	61fb      	str	r3, [r7, #28]
          break;
 8006a60:	e00b      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006a62:	bf00      	nop
 8006a64:	f000 bce2 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a68:	bf00      	nop
 8006a6a:	f000 bcdf 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a6e:	bf00      	nop
 8006a70:	f000 bcdc 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a74:	bf00      	nop
 8006a76:	f000 bcd9 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a7a:	bf00      	nop
        break;
 8006a7c:	f000 bcd6 	b.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006a80:	4b42      	ldr	r3, [pc, #264]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a8e:	d13d      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a90:	4b3e      	ldr	r3, [pc, #248]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a9c:	f040 84c5 	bne.w	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aac:	f040 84bd 	bne.w	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ab0:	4b36      	ldr	r3, [pc, #216]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aba:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	4b31      	ldr	r3, [pc, #196]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3301      	adds	r3, #1
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	0edb      	lsrs	r3, r3, #27
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006ae8:	4b28      	ldr	r3, [pc, #160]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006af4:	2311      	movs	r3, #17
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e001      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006afa:	2307      	movs	r3, #7
 8006afc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	61fb      	str	r3, [r7, #28]
      break;
 8006b08:	f000 bc8f 	b.w	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b1e:	d016      	beq.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b26:	f200 809b 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b30:	d032      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b38:	f200 8092 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 8084 	beq.w	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b4a:	d052      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006b4c:	e088      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	f040 8084 	bne.w	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006b68:	4b08      	ldr	r3, [pc, #32]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	e005      	b.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	4a03      	ldr	r2, [pc, #12]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b86:	61fb      	str	r3, [r7, #28]
          break;
 8006b88:	e06c      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	0800f56c 	.word	0x0800f56c
 8006b94:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b98:	4ba5      	ldr	r3, [pc, #660]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ba4:	d160      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb2:	d159      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bbe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	fb03 f202 	mul.w	r2, r3, r2
 8006bc8:	4b99      	ldr	r3, [pc, #612]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006bda:	4b95      	ldr	r3, [pc, #596]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	0d5b      	lsrs	r3, r3, #21
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	3301      	adds	r3, #1
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	61fb      	str	r3, [r7, #28]
          break;
 8006bf0:	e03a      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfe:	d135      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006c00:	4b8b      	ldr	r3, [pc, #556]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c0c:	d12e      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006c0e:	4b88      	ldr	r3, [pc, #544]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c18:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	fb03 f202 	mul.w	r2, r3, r2
 8006c22:	4b83      	ldr	r3, [pc, #524]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	091b      	lsrs	r3, r3, #4
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006c34:	4b7e      	ldr	r3, [pc, #504]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	0d5b      	lsrs	r3, r3, #21
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	61fb      	str	r3, [r7, #28]
          break;
 8006c4a:	e00f      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006c4c:	4b78      	ldr	r3, [pc, #480]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d10a      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006c5a:	4b76      	ldr	r3, [pc, #472]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c5c:	61fb      	str	r3, [r7, #28]
          break;
 8006c5e:	e007      	b.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006c60:	bf00      	nop
 8006c62:	e3e2      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c64:	bf00      	nop
 8006c66:	e3e0      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c68:	bf00      	nop
 8006c6a:	e3de      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c6c:	bf00      	nop
 8006c6e:	e3dc      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c70:	bf00      	nop
      break;
 8006c72:	e3da      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c74:	4b6e      	ldr	r3, [pc, #440]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d827      	bhi.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006c86:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006ca5 	.word	0x08006ca5
 8006c94:	08006cad 	.word	0x08006cad
 8006c98:	08006cc1 	.word	0x08006cc1
          frequency = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7ff f8a8 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	61f8      	str	r0, [r7, #28]
          break;
 8006ca2:	e01d      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ca4:	f7fe fff6 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006ca8:	61f8      	str	r0, [r7, #28]
          break;
 8006caa:	e019      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cac:	4b60      	ldr	r3, [pc, #384]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb8:	d10f      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006cba:	4b5f      	ldr	r3, [pc, #380]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cbc:	61fb      	str	r3, [r7, #28]
          break;
 8006cbe:	e00c      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d107      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd2:	61fb      	str	r3, [r7, #28]
          break;
 8006cd4:	e003      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006cd6:	bf00      	nop
 8006cd8:	e3a8      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cda:	bf00      	nop
 8006cdc:	e3a6      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cde:	bf00      	nop
        break;
 8006ce0:	e3a4      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006ce2:	4b53      	ldr	r3, [pc, #332]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce8:	f003 030c 	and.w	r3, r3, #12
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	d83a      	bhi.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d31 	.word	0x08006d31
 8006d00:	08006d6b 	.word	0x08006d6b
 8006d04:	08006d6b 	.word	0x08006d6b
 8006d08:	08006d6b 	.word	0x08006d6b
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	08006d6b 	.word	0x08006d6b
 8006d14:	08006d6b 	.word	0x08006d6b
 8006d18:	08006d6b 	.word	0x08006d6b
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d6b 	.word	0x08006d6b
 8006d24:	08006d6b 	.word	0x08006d6b
 8006d28:	08006d6b 	.word	0x08006d6b
 8006d2c:	08006d55 	.word	0x08006d55
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7ff f848 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8006d34:	61f8      	str	r0, [r7, #28]
          break;
 8006d36:	e01d      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d38:	f7fe ffac 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006d3c:	61f8      	str	r0, [r7, #28]
          break;
 8006d3e:	e019      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d40:	4b3b      	ldr	r3, [pc, #236]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4c:	d10f      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d50:	61fb      	str	r3, [r7, #28]
          break;
 8006d52:	e00c      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d54:	4b36      	ldr	r3, [pc, #216]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d107      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d66:	61fb      	str	r3, [r7, #28]
          break;
 8006d68:	e003      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006d6a:	bf00      	nop
 8006d6c:	e35e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d6e:	bf00      	nop
 8006d70:	e35c      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d72:	bf00      	nop
        break;
 8006d74:	e35a      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d76:	4b2e      	ldr	r3, [pc, #184]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b30      	cmp	r3, #48	@ 0x30
 8006d86:	d021      	beq.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d829      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d011      	beq.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d823      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d004      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006da6:	e01c      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7ff f80c 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8006dac:	61f8      	str	r0, [r7, #28]
          break;
 8006dae:	e01d      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006db0:	f7fe ff70 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006db4:	61f8      	str	r0, [r7, #28]
          break;
 8006db6:	e019      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006db8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc4:	d10f      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dc8:	61fb      	str	r3, [r7, #28]
          break;
 8006dca:	e00c      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dcc:	4b18      	ldr	r3, [pc, #96]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d107      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dde:	61fb      	str	r3, [r7, #28]
          break;
 8006de0:	e003      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006de2:	bf00      	nop
 8006de4:	e322      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006de6:	bf00      	nop
 8006de8:	e320      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006dea:	bf00      	nop
        break;
 8006dec:	e31e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006dee:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dfe:	d027      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e04:	d82f      	bhi.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b80      	cmp	r3, #128	@ 0x80
 8006e0a:	d017      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b80      	cmp	r3, #128	@ 0x80
 8006e10:	d829      	bhi.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b40      	cmp	r3, #64	@ 0x40
 8006e1c:	d004      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006e1e:	e022      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e20:	f7fe ffd0 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8006e24:	61f8      	str	r0, [r7, #28]
          break;
 8006e26:	e023      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e28:	f7fe ff34 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006e2c:	61f8      	str	r0, [r7, #28]
          break;
 8006e2e:	e01f      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006e30:	40021000 	.word	0x40021000
 8006e34:	02dc6c00 	.word	0x02dc6c00
 8006e38:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e3c:	4b9b      	ldr	r3, [pc, #620]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e48:	d10f      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006e4a:	4b99      	ldr	r3, [pc, #612]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e4c:	61fb      	str	r3, [r7, #28]
          break;
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e50:	4b96      	ldr	r3, [pc, #600]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d107      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e62:	61fb      	str	r3, [r7, #28]
          break;
 8006e64:	e003      	b.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006e66:	bf00      	nop
 8006e68:	e2e0      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e6a:	bf00      	nop
 8006e6c:	e2de      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e6e:	bf00      	nop
        break;
 8006e70:	e2dc      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e72:	4b8e      	ldr	r3, [pc, #568]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e84:	d025      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e8c:	d82c      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e94:	d013      	beq.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e9c:	d824      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eaa:	d004      	beq.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006eac:	e01c      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eae:	f7fe ff89 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8006eb2:	61f8      	str	r0, [r7, #28]
          break;
 8006eb4:	e01d      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fe feed 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006eba:	61f8      	str	r0, [r7, #28]
          break;
 8006ebc:	e019      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	d10f      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006ecc:	4b78      	ldr	r3, [pc, #480]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006ece:	61fb      	str	r3, [r7, #28]
          break;
 8006ed0:	e00c      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ed2:	4b76      	ldr	r3, [pc, #472]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee4:	61fb      	str	r3, [r7, #28]
          break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006ee8:	bf00      	nop
 8006eea:	e29f      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eec:	bf00      	nop
 8006eee:	e29d      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ef0:	bf00      	nop
        break;
 8006ef2:	e29b      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f06:	d025      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f0e:	d82c      	bhi.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f16:	d013      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1e:	d824      	bhi.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2c:	d004      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006f2e:	e01c      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fe ff48 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8006f34:	61f8      	str	r0, [r7, #28]
          break;
 8006f36:	e01d      	b.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f38:	f7fe feac 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006f3c:	61f8      	str	r0, [r7, #28]
          break;
 8006f3e:	e019      	b.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f40:	4b5a      	ldr	r3, [pc, #360]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4c:	d10f      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006f4e:	4b58      	ldr	r3, [pc, #352]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006f50:	61fb      	str	r3, [r7, #28]
          break;
 8006f52:	e00c      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f54:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d107      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f66:	61fb      	str	r3, [r7, #28]
          break;
 8006f68:	e003      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006f6a:	bf00      	nop
 8006f6c:	e25e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f6e:	bf00      	nop
 8006f70:	e25c      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f72:	bf00      	nop
        break;
 8006f74:	e25a      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f76:	4b4d      	ldr	r3, [pc, #308]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f88:	d007      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f90:	d12f      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f92:	f7fe fe7f 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8006f96:	61f8      	str	r0, [r7, #28]
          break;
 8006f98:	e02e      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006f9a:	4b44      	ldr	r3, [pc, #272]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fa6:	d126      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006fa8:	4b40      	ldr	r3, [pc, #256]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d020      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	0a1b      	lsrs	r3, r3, #8
 8006fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fbe:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	fb03 f202 	mul.w	r2, r3, r2
 8006fc8:	4b38      	ldr	r3, [pc, #224]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006fda:	4b34      	ldr	r3, [pc, #208]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	0e5b      	lsrs	r3, r3, #25
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	61fb      	str	r3, [r7, #28]
          break;
 8006ff0:	e001      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006ff2:	bf00      	nop
 8006ff4:	e21a      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ff6:	bf00      	nop
        break;
 8006ff8:	e218      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800700c:	f7fe fef0 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 8007010:	61f8      	str	r0, [r7, #28]
        break;
 8007012:	e20b      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007014:	f7fe fe3e 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8007018:	61f8      	str	r0, [r7, #28]
        break;
 800701a:	e207      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800701c:	4b23      	ldr	r3, [pc, #140]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800701e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007022:	f003 0318 	and.w	r3, r3, #24
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b10      	cmp	r3, #16
 800702c:	d010      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d834      	bhi.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d024      	beq.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007040:	e02d      	b.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007042:	69b9      	ldr	r1, [r7, #24]
 8007044:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007048:	f000 fbe2 	bl	8007810 <RCCEx_GetSAIxPeriphCLKFreq>
 800704c:	61f8      	str	r0, [r7, #28]
          break;
 800704e:	e02b      	b.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007050:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d122      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800705c:	4b13      	ldr	r3, [pc, #76]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007068:	4b10      	ldr	r3, [pc, #64]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	e005      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007074:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007086:	61fb      	str	r3, [r7, #28]
          break;
 8007088:	e00b      	b.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800708a:	4b08      	ldr	r3, [pc, #32]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007096:	d106      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800709a:	61fb      	str	r3, [r7, #28]
          break;
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800709e:	bf00      	nop
 80070a0:	e1c4      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070a2:	bf00      	nop
 80070a4:	e1c2      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070a6:	bf00      	nop
        break;
 80070a8:	e1c0      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000
 80070b0:	00f42400 	.word	0x00f42400
 80070b4:	0800f56c 	.word	0x0800f56c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070b8:	4b96      	ldr	r3, [pc, #600]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ca:	d013      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d2:	d819      	bhi.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e0:	d004      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80070e2:	e011      	b.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fe fe6e 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 80070e8:	61f8      	str	r0, [r7, #28]
          break;
 80070ea:	e010      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80070ec:	f7fe fdd2 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 80070f0:	61f8      	str	r0, [r7, #28]
          break;
 80070f2:	e00c      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f4:	4b87      	ldr	r3, [pc, #540]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d104      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007102:	4b85      	ldr	r3, [pc, #532]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007104:	61fb      	str	r3, [r7, #28]
          break;
 8007106:	e001      	b.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007108:	bf00      	nop
 800710a:	e18f      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800710c:	bf00      	nop
        break;
 800710e:	e18d      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007110:	4b80      	ldr	r3, [pc, #512]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007116:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007122:	d013      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800712a:	d819      	bhi.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007138:	d004      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800713c:	f7fe fe42 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8007140:	61f8      	str	r0, [r7, #28]
          break;
 8007142:	e010      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007144:	f7fe fda6 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8007148:	61f8      	str	r0, [r7, #28]
          break;
 800714a:	e00c      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800714c:	4b71      	ldr	r3, [pc, #452]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007158:	d104      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800715a:	4b6f      	ldr	r3, [pc, #444]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800715c:	61fb      	str	r3, [r7, #28]
          break;
 800715e:	e001      	b.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007160:	bf00      	nop
 8007162:	e163      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007164:	bf00      	nop
        break;
 8007166:	e161      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007168:	4b6a      	ldr	r3, [pc, #424]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800717a:	d013      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007182:	d819      	bhi.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007190:	d004      	beq.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007192:	e011      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007194:	f7fe fe16 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8007198:	61f8      	str	r0, [r7, #28]
          break;
 800719a:	e010      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800719c:	f7fe fd7a 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 80071a0:	61f8      	str	r0, [r7, #28]
          break;
 80071a2:	e00c      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b0:	d104      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80071b2:	4b59      	ldr	r3, [pc, #356]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80071b4:	61fb      	str	r3, [r7, #28]
          break;
 80071b6:	e001      	b.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80071b8:	bf00      	nop
 80071ba:	e137      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071bc:	bf00      	nop
        break;
 80071be:	e135      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80071c0:	4b54      	ldr	r3, [pc, #336]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d011      	beq.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d818      	bhi.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d004      	beq.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80071e4:	e011      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071e6:	f7fe fded 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 80071ea:	61f8      	str	r0, [r7, #28]
          break;
 80071ec:	e010      	b.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80071ee:	f7fe fd51 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 80071f2:	61f8      	str	r0, [r7, #28]
          break;
 80071f4:	e00c      	b.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071f6:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007202:	d104      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007204:	4b44      	ldr	r3, [pc, #272]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007206:	61fb      	str	r3, [r7, #28]
          break;
 8007208:	e001      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800720a:	bf00      	nop
 800720c:	e10e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800720e:	bf00      	nop
        break;
 8007210:	e10c      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007212:	4b40      	ldr	r3, [pc, #256]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007218:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007224:	d02c      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800722c:	d833      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007234:	d01a      	beq.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800723c:	d82b      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800724a:	d004      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800724c:	e023      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800724e:	f7fe fdb9 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 8007252:	61f8      	str	r0, [r7, #28]
          break;
 8007254:	e026      	b.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007256:	4b2f      	ldr	r3, [pc, #188]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d11a      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007264:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007268:	61fb      	str	r3, [r7, #28]
          break;
 800726a:	e016      	b.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800726c:	4b29      	ldr	r3, [pc, #164]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007278:	d111      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800727a:	4b27      	ldr	r3, [pc, #156]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800727c:	61fb      	str	r3, [r7, #28]
          break;
 800727e:	e00e      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007280:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d109      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800728e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007292:	61fb      	str	r3, [r7, #28]
          break;
 8007294:	e005      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007296:	bf00      	nop
 8007298:	e0c8      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800729a:	bf00      	nop
 800729c:	e0c6      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800729e:	bf00      	nop
 80072a0:	e0c4      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072a2:	bf00      	nop
        break;
 80072a4:	e0c2      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072b8:	d030      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072c0:	d837      	bhi.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072c8:	d01a      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072d0:	d82f      	bhi.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072de:	d004      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80072e0:	e027      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80072e2:	f7fe fd6f 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 80072e6:	61f8      	str	r0, [r7, #28]
          break;
 80072e8:	e02a      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80072ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80072ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d11e      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80072f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072fc:	61fb      	str	r3, [r7, #28]
          break;
 80072fe:	e01a      	b.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007300:	4b04      	ldr	r3, [pc, #16]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800730c:	d115      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800730e:	4b02      	ldr	r3, [pc, #8]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007310:	61fb      	str	r3, [r7, #28]
          break;
 8007312:	e012      	b.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007314:	40021000 	.word	0x40021000
 8007318:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800731c:	4b46      	ldr	r3, [pc, #280]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d109      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800732a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732e:	61fb      	str	r3, [r7, #28]
          break;
 8007330:	e005      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007332:	bf00      	nop
 8007334:	e07a      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007336:	bf00      	nop
 8007338:	e078      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800733a:	bf00      	nop
 800733c:	e076      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800733e:	bf00      	nop
        break;
 8007340:	e074      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007342:	4b3d      	ldr	r3, [pc, #244]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007348:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007354:	d02c      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800735c:	d855      	bhi.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736a:	d004      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800736c:	e04d      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800736e:	f7fe fc91 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8007372:	61f8      	str	r0, [r7, #28]
          break;
 8007374:	e04e      	b.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007376:	4b30      	ldr	r3, [pc, #192]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	d145      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007382:	4b2d      	ldr	r3, [pc, #180]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800738e:	4b2a      	ldr	r3, [pc, #168]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	e005      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800739a:	4b27      	ldr	r3, [pc, #156]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800739c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	4a25      	ldr	r2, [pc, #148]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80073a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ac:	61fb      	str	r3, [r7, #28]
          break;
 80073ae:	e02e      	b.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80073b0:	4b21      	ldr	r3, [pc, #132]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073bc:	d129      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80073be:	4b1e      	ldr	r3, [pc, #120]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ca:	d122      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80073cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073d6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	fb03 f202 	mul.w	r2, r3, r2
 80073e0:	4b15      	ldr	r3, [pc, #84]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	3301      	adds	r3, #1
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80073f2:	4b11      	ldr	r3, [pc, #68]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	0d5b      	lsrs	r3, r3, #21
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	3301      	adds	r3, #1
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	61fb      	str	r3, [r7, #28]
          break;
 8007408:	e003      	b.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800740a:	bf00      	nop
 800740c:	e00e      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800740e:	bf00      	nop
 8007410:	e00c      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007412:	bf00      	nop
        break;
 8007414:	e00a      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007416:	bf00      	nop
 8007418:	e008      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800741a:	bf00      	nop
 800741c:	e006      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800741e:	bf00      	nop
 8007420:	e004      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800742a:	bf00      	nop
    }
  }

  return(frequency);
 800742c:	69fb      	ldr	r3, [r7, #28]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
 800743c:	0800f56c 	.word	0x0800f56c

08007440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800744e:	4b72      	ldr	r3, [pc, #456]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00e      	beq.n	8007478 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800745a:	4b6f      	ldr	r3, [pc, #444]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0203 	and.w	r2, r3, #3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d103      	bne.n	8007472 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
       ||
 800746e:	2b00      	cmp	r3, #0
 8007470:	d142      	bne.n	80074f8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
 8007476:	e03f      	b.n	80074f8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d018      	beq.n	80074b2 <RCCEx_PLLSAI1_Config+0x72>
 8007480:	2b03      	cmp	r3, #3
 8007482:	d825      	bhi.n	80074d0 <RCCEx_PLLSAI1_Config+0x90>
 8007484:	2b01      	cmp	r3, #1
 8007486:	d002      	beq.n	800748e <RCCEx_PLLSAI1_Config+0x4e>
 8007488:	2b02      	cmp	r3, #2
 800748a:	d009      	beq.n	80074a0 <RCCEx_PLLSAI1_Config+0x60>
 800748c:	e020      	b.n	80074d0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800748e:	4b62      	ldr	r3, [pc, #392]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d11d      	bne.n	80074d6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800749e:	e01a      	b.n	80074d6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074a0:	4b5d      	ldr	r3, [pc, #372]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d116      	bne.n	80074da <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b0:	e013      	b.n	80074da <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074b2:	4b59      	ldr	r3, [pc, #356]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10f      	bne.n	80074de <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074be:	4b56      	ldr	r3, [pc, #344]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074ce:	e006      	b.n	80074de <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e004      	b.n	80074e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074d6:	bf00      	nop
 80074d8:	e002      	b.n	80074e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074da:	bf00      	nop
 80074dc:	e000      	b.n	80074e0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074de:	bf00      	nop
    }

    if(status == HAL_OK)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80074e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f023 0203 	bic.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4949      	ldr	r1, [pc, #292]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 8086 	bne.w	800760c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007500:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a44      	ldr	r2, [pc, #272]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800750a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750c:	f7fb fe00 	bl	8003110 <HAL_GetTick>
 8007510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007512:	e009      	b.n	8007528 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007514:	f7fb fdfc 	bl	8003110 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d902      	bls.n	8007528 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	73fb      	strb	r3, [r7, #15]
        break;
 8007526:	e005      	b.n	8007534 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007528:	4b3b      	ldr	r3, [pc, #236]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1ef      	bne.n	8007514 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d168      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d113      	bne.n	8007568 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007540:	4b35      	ldr	r3, [pc, #212]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	4b35      	ldr	r3, [pc, #212]	@ (800761c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007546:	4013      	ands	r3, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6892      	ldr	r2, [r2, #8]
 800754c:	0211      	lsls	r1, r2, #8
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68d2      	ldr	r2, [r2, #12]
 8007552:	06d2      	lsls	r2, r2, #27
 8007554:	4311      	orrs	r1, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6852      	ldr	r2, [r2, #4]
 800755a:	3a01      	subs	r2, #1
 800755c:	0112      	lsls	r2, r2, #4
 800755e:	430a      	orrs	r2, r1
 8007560:	492d      	ldr	r1, [pc, #180]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	610b      	str	r3, [r1, #16]
 8007566:	e02d      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d115      	bne.n	800759a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800756e:	4b2a      	ldr	r3, [pc, #168]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	4b2b      	ldr	r3, [pc, #172]	@ (8007620 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007574:	4013      	ands	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6892      	ldr	r2, [r2, #8]
 800757a:	0211      	lsls	r1, r2, #8
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6912      	ldr	r2, [r2, #16]
 8007580:	0852      	lsrs	r2, r2, #1
 8007582:	3a01      	subs	r2, #1
 8007584:	0552      	lsls	r2, r2, #21
 8007586:	4311      	orrs	r1, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6852      	ldr	r2, [r2, #4]
 800758c:	3a01      	subs	r2, #1
 800758e:	0112      	lsls	r2, r2, #4
 8007590:	430a      	orrs	r2, r1
 8007592:	4921      	ldr	r1, [pc, #132]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007594:	4313      	orrs	r3, r2
 8007596:	610b      	str	r3, [r1, #16]
 8007598:	e014      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800759a:	4b1f      	ldr	r3, [pc, #124]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	4b21      	ldr	r3, [pc, #132]	@ (8007624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6892      	ldr	r2, [r2, #8]
 80075a6:	0211      	lsls	r1, r2, #8
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6952      	ldr	r2, [r2, #20]
 80075ac:	0852      	lsrs	r2, r2, #1
 80075ae:	3a01      	subs	r2, #1
 80075b0:	0652      	lsls	r2, r2, #25
 80075b2:	4311      	orrs	r1, r2
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6852      	ldr	r2, [r2, #4]
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0112      	lsls	r2, r2, #4
 80075bc:	430a      	orrs	r2, r1
 80075be:	4916      	ldr	r1, [pc, #88]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a13      	ldr	r2, [pc, #76]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fb fd9e 	bl	8003110 <HAL_GetTick>
 80075d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075d6:	e009      	b.n	80075ec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075d8:	f7fb fd9a 	bl	8003110 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d902      	bls.n	80075ec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
          break;
 80075ea:	e005      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ef      	beq.n	80075d8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	4904      	ldr	r1, [pc, #16]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007608:	4313      	orrs	r3, r2
 800760a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000
 800761c:	07ff800f 	.word	0x07ff800f
 8007620:	ff9f800f 	.word	0xff9f800f
 8007624:	f9ff800f 	.word	0xf9ff800f

08007628 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007636:	4b72      	ldr	r3, [pc, #456]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00e      	beq.n	8007660 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007642:	4b6f      	ldr	r3, [pc, #444]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f003 0203 	and.w	r2, r3, #3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d103      	bne.n	800765a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
       ||
 8007656:	2b00      	cmp	r3, #0
 8007658:	d142      	bne.n	80076e0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
 800765e:	e03f      	b.n	80076e0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d018      	beq.n	800769a <RCCEx_PLLSAI2_Config+0x72>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d825      	bhi.n	80076b8 <RCCEx_PLLSAI2_Config+0x90>
 800766c:	2b01      	cmp	r3, #1
 800766e:	d002      	beq.n	8007676 <RCCEx_PLLSAI2_Config+0x4e>
 8007670:	2b02      	cmp	r3, #2
 8007672:	d009      	beq.n	8007688 <RCCEx_PLLSAI2_Config+0x60>
 8007674:	e020      	b.n	80076b8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007676:	4b62      	ldr	r3, [pc, #392]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d11d      	bne.n	80076be <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007686:	e01a      	b.n	80076be <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007688:	4b5d      	ldr	r3, [pc, #372]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007690:	2b00      	cmp	r3, #0
 8007692:	d116      	bne.n	80076c2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007698:	e013      	b.n	80076c2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800769a:	4b59      	ldr	r3, [pc, #356]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10f      	bne.n	80076c6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076a6:	4b56      	ldr	r3, [pc, #344]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076b6:	e006      	b.n	80076c6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	e004      	b.n	80076c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d108      	bne.n	80076e0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80076ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f023 0203 	bic.w	r2, r3, #3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4949      	ldr	r1, [pc, #292]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8086 	bne.w	80077f4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076e8:	4b45      	ldr	r3, [pc, #276]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a44      	ldr	r2, [pc, #272]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f4:	f7fb fd0c 	bl	8003110 <HAL_GetTick>
 80076f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076fa:	e009      	b.n	8007710 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076fc:	f7fb fd08 	bl	8003110 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d902      	bls.n	8007710 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	73fb      	strb	r3, [r7, #15]
        break;
 800770e:	e005      	b.n	800771c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007710:	4b3b      	ldr	r3, [pc, #236]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ef      	bne.n	80076fc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d168      	bne.n	80077f4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d113      	bne.n	8007750 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007728:	4b35      	ldr	r3, [pc, #212]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	4b35      	ldr	r3, [pc, #212]	@ (8007804 <RCCEx_PLLSAI2_Config+0x1dc>)
 800772e:	4013      	ands	r3, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6892      	ldr	r2, [r2, #8]
 8007734:	0211      	lsls	r1, r2, #8
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68d2      	ldr	r2, [r2, #12]
 800773a:	06d2      	lsls	r2, r2, #27
 800773c:	4311      	orrs	r1, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6852      	ldr	r2, [r2, #4]
 8007742:	3a01      	subs	r2, #1
 8007744:	0112      	lsls	r2, r2, #4
 8007746:	430a      	orrs	r2, r1
 8007748:	492d      	ldr	r1, [pc, #180]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 800774a:	4313      	orrs	r3, r2
 800774c:	614b      	str	r3, [r1, #20]
 800774e:	e02d      	b.n	80077ac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d115      	bne.n	8007782 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007756:	4b2a      	ldr	r3, [pc, #168]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	4b2b      	ldr	r3, [pc, #172]	@ (8007808 <RCCEx_PLLSAI2_Config+0x1e0>)
 800775c:	4013      	ands	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6892      	ldr	r2, [r2, #8]
 8007762:	0211      	lsls	r1, r2, #8
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6912      	ldr	r2, [r2, #16]
 8007768:	0852      	lsrs	r2, r2, #1
 800776a:	3a01      	subs	r2, #1
 800776c:	0552      	lsls	r2, r2, #21
 800776e:	4311      	orrs	r1, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6852      	ldr	r2, [r2, #4]
 8007774:	3a01      	subs	r2, #1
 8007776:	0112      	lsls	r2, r2, #4
 8007778:	430a      	orrs	r2, r1
 800777a:	4921      	ldr	r1, [pc, #132]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 800777c:	4313      	orrs	r3, r2
 800777e:	614b      	str	r3, [r1, #20]
 8007780:	e014      	b.n	80077ac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007782:	4b1f      	ldr	r3, [pc, #124]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	4b21      	ldr	r3, [pc, #132]	@ (800780c <RCCEx_PLLSAI2_Config+0x1e4>)
 8007788:	4013      	ands	r3, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6892      	ldr	r2, [r2, #8]
 800778e:	0211      	lsls	r1, r2, #8
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6952      	ldr	r2, [r2, #20]
 8007794:	0852      	lsrs	r2, r2, #1
 8007796:	3a01      	subs	r2, #1
 8007798:	0652      	lsls	r2, r2, #25
 800779a:	4311      	orrs	r1, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6852      	ldr	r2, [r2, #4]
 80077a0:	3a01      	subs	r2, #1
 80077a2:	0112      	lsls	r2, r2, #4
 80077a4:	430a      	orrs	r2, r1
 80077a6:	4916      	ldr	r1, [pc, #88]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80077ac:	4b14      	ldr	r3, [pc, #80]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a13      	ldr	r2, [pc, #76]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b8:	f7fb fcaa 	bl	8003110 <HAL_GetTick>
 80077bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077be:	e009      	b.n	80077d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077c0:	f7fb fca6 	bl	8003110 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d902      	bls.n	80077d4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	73fb      	strb	r3, [r7, #15]
          break;
 80077d2:	e005      	b.n	80077e0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0ef      	beq.n	80077c0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	4904      	ldr	r1, [pc, #16]	@ (8007800 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40021000 	.word	0x40021000
 8007804:	07ff800f 	.word	0x07ff800f
 8007808:	ff9f800f 	.word	0xff9f800f
 800780c:	f9ff800f 	.word	0xf9ff800f

08007810 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007810:	b480      	push	{r7}
 8007812:	b089      	sub	sp, #36	@ 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800782c:	d10b      	bne.n	8007846 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800782e:	4b7e      	ldr	r3, [pc, #504]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007834:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007838:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b60      	cmp	r3, #96	@ 0x60
 800783e:	d112      	bne.n	8007866 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007840:	4b7a      	ldr	r3, [pc, #488]	@ (8007a2c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	e00f      	b.n	8007866 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784c:	d10b      	bne.n	8007866 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800784e:	4b76      	ldr	r3, [pc, #472]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007854:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007858:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007860:	d101      	bne.n	8007866 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007862:	4b72      	ldr	r3, [pc, #456]	@ (8007a2c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007864:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 80d6 	bne.w	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b40      	cmp	r3, #64	@ 0x40
 8007876:	d003      	beq.n	8007880 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800787e:	d13b      	bne.n	80078f8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007880:	4b69      	ldr	r3, [pc, #420]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800788c:	f040 80c4 	bne.w	8007a18 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007890:	4b65      	ldr	r3, [pc, #404]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80bd 	beq.w	8007a18 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800789e:	4b62      	ldr	r3, [pc, #392]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	3301      	adds	r3, #1
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80078be:	4b5a      	ldr	r3, [pc, #360]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	0edb      	lsrs	r3, r3, #27
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80078d0:	4b55      	ldr	r3, [pc, #340]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80078dc:	2311      	movs	r3, #17
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e001      	b.n	80078e6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80078e2:	2307      	movs	r3, #7
 80078e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	fb03 f202 	mul.w	r2, r3, r2
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80078f6:	e08f      	b.n	8007a18 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d13a      	bne.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80078fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790a:	f040 8086 	bne.w	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800790e:	4b46      	ldr	r3, [pc, #280]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d07f      	beq.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800791a:	4b43      	ldr	r3, [pc, #268]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	091b      	lsrs	r3, r3, #4
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	3301      	adds	r3, #1
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800792e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007938:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800793a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	0edb      	lsrs	r3, r3, #27
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800794c:	4b36      	ldr	r3, [pc, #216]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007958:	2311      	movs	r3, #17
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e001      	b.n	8007962 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800795e:	2307      	movs	r3, #7
 8007960:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	fb03 f202 	mul.w	r2, r3, r2
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	e052      	b.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	2b80      	cmp	r3, #128	@ 0x80
 8007978:	d003      	beq.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007980:	d109      	bne.n	8007996 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007982:	4b29      	ldr	r3, [pc, #164]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800798a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800798e:	d144      	bne.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007990:	4b27      	ldr	r3, [pc, #156]	@ (8007a30 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007992:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007994:	e041      	b.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b20      	cmp	r3, #32
 800799a:	d003      	beq.n	80079a4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a2:	d13a      	bne.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80079a4:	4b20      	ldr	r3, [pc, #128]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d133      	bne.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80079b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d02d      	beq.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80079be:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	091b      	lsrs	r3, r3, #4
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	3301      	adds	r3, #1
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80079d2:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80079de:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	0edb      	lsrs	r3, r3, #27
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80079f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80079fc:	2311      	movs	r3, #17
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e001      	b.n	8007a06 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007a02:	2307      	movs	r3, #7
 8007a04:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	fb03 f202 	mul.w	r2, r3, r2
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e000      	b.n	8007a1a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007a18:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3724      	adds	r7, #36	@ 0x24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	001fff68 	.word	0x001fff68
 8007a30:	00f42400 	.word	0x00f42400

08007a34 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d904      	bls.n	8007a52 <HAL_SAI_InitProtocol+0x1e>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	3b03      	subs	r3, #3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d812      	bhi.n	8007a76 <HAL_SAI_InitProtocol+0x42>
 8007a50:	e008      	b.n	8007a64 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f9fb 	bl	8007e54 <SAI_InitI2S>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
      break;
 8007a62:	e00b      	b.n	8007a7c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 faa4 	bl	8007fb8 <SAI_InitPCM>
 8007a70:	4603      	mov	r3, r0
 8007a72:	75fb      	strb	r3, [r7, #23]
      break;
 8007a74:	e002      	b.n	8007a7c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7a:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f808 	bl	8007a98 <HAL_SAI_Init>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	@ 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e1c7      	b.n	8007e3a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10e      	bne.n	8007ad2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a81      	ldr	r2, [pc, #516]	@ (8007cc0 <HAL_SAI_Init+0x228>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d107      	bne.n	8007ace <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d103      	bne.n	8007ace <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e1b3      	b.n	8007e3a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fb f9e8 	bl	8002ebc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fae5 	bl	80080bc <SAI_Disable>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e19e      	b.n	8007e3a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d00c      	beq.n	8007b26 <HAL_SAI_Init+0x8e>
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d80d      	bhi.n	8007b2c <HAL_SAI_Init+0x94>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SAI_Init+0x82>
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d003      	beq.n	8007b20 <HAL_SAI_Init+0x88>
 8007b18:	e008      	b.n	8007b2c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b1e:	e008      	b.n	8007b32 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b20:	2310      	movs	r3, #16
 8007b22:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b24:	e005      	b.n	8007b32 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b26:	2320      	movs	r3, #32
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b30:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d81d      	bhi.n	8007b76 <HAL_SAI_Init+0xde>
 8007b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <HAL_SAI_Init+0xa8>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b57 	.word	0x08007b57
 8007b48:	08007b5f 	.word	0x08007b5f
 8007b4c:	08007b67 	.word	0x08007b67
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]
      break;
 8007b54:	e012      	b.n	8007b7c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b5a:	61fb      	str	r3, [r7, #28]
      break;
 8007b5c:	e00e      	b.n	8007b7c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b62:	61fb      	str	r3, [r7, #28]
      break;
 8007b64:	e00a      	b.n	8007b7c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b6a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b74:	e002      	b.n	8007b7c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
      break;
 8007b7a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a4f      	ldr	r2, [pc, #316]	@ (8007cc0 <HAL_SAI_Init+0x228>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d004      	beq.n	8007b90 <HAL_SAI_Init+0xf8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a4e      	ldr	r2, [pc, #312]	@ (8007cc4 <HAL_SAI_Init+0x22c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007b90:	4a4d      	ldr	r2, [pc, #308]	@ (8007cc8 <HAL_SAI_Init+0x230>)
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e002      	b.n	8007b9e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007b98:	4a4c      	ldr	r2, [pc, #304]	@ (8007ccc <HAL_SAI_Init+0x234>)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d073      	beq.n	8007c8e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a45      	ldr	r2, [pc, #276]	@ (8007cc0 <HAL_SAI_Init+0x228>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_SAI_Init+0x122>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a43      	ldr	r2, [pc, #268]	@ (8007cc4 <HAL_SAI_Init+0x22c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d105      	bne.n	8007bc6 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007bba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007bbe:	f7fe fd1d 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8007bc2:	61b8      	str	r0, [r7, #24]
 8007bc4:	e004      	b.n	8007bd0 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007bc6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007bca:	f7fe fd17 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8007bce:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007bd8:	d120      	bne.n	8007c1c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d102      	bne.n	8007be8 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007be2:	2340      	movs	r3, #64	@ 0x40
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	e00a      	b.n	8007bfe <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d103      	bne.n	8007bf8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	e002      	b.n	8007bfe <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4619      	mov	r1, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	fb02 f303 	mul.w	r3, r2, r3
 8007c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	e017      	b.n	8007c4c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c24:	d101      	bne.n	8007c2a <HAL_SAI_Init+0x192>
 8007c26:	2302      	movs	r3, #2
 8007c28:	e000      	b.n	8007c2c <HAL_SAI_Init+0x194>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c4a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	4a20      	ldr	r2, [pc, #128]	@ (8007cd0 <HAL_SAI_Init+0x238>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	08da      	lsrs	r2, r3, #3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007c5a:	6979      	ldr	r1, [r7, #20]
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd0 <HAL_SAI_Init+0x238>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	08da      	lsrs	r2, r3, #3
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	1aca      	subs	r2, r1, r3
 8007c6e:	2a08      	cmp	r2, #8
 8007c70:	d904      	bls.n	8007c7c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d104      	bne.n	8007c8e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	085a      	lsrs	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_SAI_Init+0x206>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d109      	bne.n	8007cb2 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <HAL_SAI_Init+0x212>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e001      	b.n	8007cae <HAL_SAI_Init+0x216>
 8007caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cae:	623b      	str	r3, [r7, #32]
 8007cb0:	e012      	b.n	8007cd8 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_SAI_Init+0x23c>
 8007cba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cbe:	e00a      	b.n	8007cd6 <HAL_SAI_Init+0x23e>
 8007cc0:	40015404 	.word	0x40015404
 8007cc4:	40015424 	.word	0x40015424
 8007cc8:	40015400 	.word	0x40015400
 8007ccc:	40015800 	.word	0x40015800
 8007cd0:	cccccccd 	.word	0xcccccccd
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4b58      	ldr	r3, [pc, #352]	@ (8007e44 <HAL_SAI_Init+0x3ac>)
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007cfc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d02:	431a      	orrs	r2, r3
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007d10:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d1c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	051b      	lsls	r3, r3, #20
 8007d24:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d2a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007d42:	f023 030f 	bic.w	r3, r3, #15
 8007d46:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6859      	ldr	r1, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699a      	ldr	r2, [r3, #24]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6899      	ldr	r1, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4b35      	ldr	r3, [pc, #212]	@ (8007e48 <HAL_SAI_Init+0x3b0>)
 8007d72:	400b      	ands	r3, r1
 8007d74:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6899      	ldr	r1, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d80:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d86:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8007d8c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8007d92:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007d9c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68d9      	ldr	r1, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007db4:	400b      	ands	r3, r1
 8007db6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68d9      	ldr	r1, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dc6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007dce:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a19      	ldr	r2, [pc, #100]	@ (8007e4c <HAL_SAI_Init+0x3b4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d119      	bne.n	8007e20 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007dec:	4b18      	ldr	r3, [pc, #96]	@ (8007e50 <HAL_SAI_Init+0x3b8>)
 8007dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df0:	4a17      	ldr	r2, [pc, #92]	@ (8007e50 <HAL_SAI_Init+0x3b8>)
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d10e      	bne.n	8007e20 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007e0e:	4910      	ldr	r1, [pc, #64]	@ (8007e50 <HAL_SAI_Init+0x3b8>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007e14:	4b0e      	ldr	r3, [pc, #56]	@ (8007e50 <HAL_SAI_Init+0x3b8>)
 8007e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e18:	4a0d      	ldr	r2, [pc, #52]	@ (8007e50 <HAL_SAI_Init+0x3b8>)
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3728      	adds	r7, #40	@ 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	f805c010 	.word	0xf805c010
 8007e48:	fff88000 	.word	0xfff88000
 8007e4c:	40015404 	.word	0x40015404
 8007e50:	40015400 	.word	0x40015400

08007e54 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <SAI_InitI2S+0x2e>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d103      	bne.n	8007e8a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007e88:	e002      	b.n	8007e90 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007e96:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e9e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e077      	b.n	8007faa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d107      	bne.n	8007ed0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007ecc:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ece:	e006      	b.n	8007ede <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d84f      	bhi.n	8007f84 <SAI_InitI2S+0x130>
 8007ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <SAI_InitI2S+0x98>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f1f 	.word	0x08007f1f
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f63 	.word	0x08007f63
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2280      	movs	r2, #128	@ 0x80
 8007f00:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	085b      	lsrs	r3, r3, #1
 8007f10:	011a      	lsls	r2, r3, #4
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2240      	movs	r2, #64	@ 0x40
 8007f1a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f1c:	e035      	b.n	8007f8a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2280      	movs	r2, #128	@ 0x80
 8007f22:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	019a      	lsls	r2, r3, #6
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	085b      	lsrs	r3, r3, #1
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2280      	movs	r2, #128	@ 0x80
 8007f3c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f3e:	e024      	b.n	8007f8a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	22c0      	movs	r2, #192	@ 0xc0
 8007f44:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	019a      	lsls	r2, r3, #6
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2280      	movs	r2, #128	@ 0x80
 8007f5e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f60:	e013      	b.n	8007f8a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	22e0      	movs	r2, #224	@ 0xe0
 8007f66:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	085b      	lsrs	r3, r3, #1
 8007f6c:	019a      	lsls	r2, r3, #6
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2280      	movs	r2, #128	@ 0x80
 8007f80:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f82:	e002      	b.n	8007f8a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	75fb      	strb	r3, [r7, #23]
      break;
 8007f88:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10b      	bne.n	8007fa8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d102      	bne.n	8007f9c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2210      	movs	r2, #16
 8007f9a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d102      	bne.n	8007fa8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop

08007fb8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <SAI_InitPCM+0x2e>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007fec:	e002      	b.n	8007ff4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008000:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008008:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800801c:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d103      	bne.n	800802c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	655a      	str	r2, [r3, #84]	@ 0x54
 800802a:	e002      	b.n	8008032 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	220d      	movs	r2, #13
 8008030:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d837      	bhi.n	80080a8 <SAI_InitPCM+0xf0>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <SAI_InitPCM+0x88>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	08008067 	.word	0x08008067
 8008048:	0800807d 	.word	0x0800807d
 800804c:	08008093 	.word	0x08008093
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2280      	movs	r2, #128	@ 0x80
 8008054:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	011a      	lsls	r2, r3, #4
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2240      	movs	r2, #64	@ 0x40
 8008062:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008064:	e023      	b.n	80080ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2280      	movs	r2, #128	@ 0x80
 800806a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2280      	movs	r2, #128	@ 0x80
 8008078:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800807a:	e018      	b.n	80080ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	22c0      	movs	r2, #192	@ 0xc0
 8008080:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2280      	movs	r2, #128	@ 0x80
 800808e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008090:	e00d      	b.n	80080ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	22e0      	movs	r2, #224	@ 0xe0
 8008096:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2280      	movs	r2, #128	@ 0x80
 80080a4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80080a6:	e002      	b.n	80080ae <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	bf00      	nop
  }

  return status;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80080c4:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <SAI_Disable+0x6c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	@ (800812c <SAI_Disable+0x70>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	0b1b      	lsrs	r3, r3, #12
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80080e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	72fb      	strb	r3, [r7, #11]
      break;
 8008102:	e009      	b.n	8008118 <SAI_Disable+0x5c>
    }
    count--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e7      	bne.n	80080e8 <SAI_Disable+0x2c>

  return status;
 8008118:	7afb      	ldrb	r3, [r7, #11]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000010 	.word	0x20000010
 800812c:	95cbec1b 	.word	0x95cbec1b

08008130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e095      	b.n	800826e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d108      	bne.n	800815c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008152:	d009      	beq.n	8008168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	61da      	str	r2, [r3, #28]
 800815a:	e005      	b.n	8008168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fa fd40 	bl	8002c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800819e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081a8:	d902      	bls.n	80081b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	e002      	b.n	80081b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80081be:	d007      	beq.n	80081d0 <HAL_SPI_Init+0xa0>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081c8:	d002      	beq.n	80081d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008212:	ea42 0103 	orr.w	r1, r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	f003 0204 	and.w	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800824c:	ea42 0103 	orr.w	r1, r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b088      	sub	sp, #32
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_SPI_Transmit+0x22>
 8008294:	2302      	movs	r3, #2
 8008296:	e15f      	b.n	8008558 <HAL_SPI_Transmit+0x2e2>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082a0:	f7fa ff36 	bl	8003110 <HAL_GetTick>
 80082a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d002      	beq.n	80082bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
 80082b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082ba:	e148      	b.n	800854e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_SPI_Transmit+0x52>
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082cc:	e13f      	b.n	800854e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2203      	movs	r2, #3
 80082d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008318:	d10f      	bne.n	800833a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008344:	2b40      	cmp	r3, #64	@ 0x40
 8008346:	d007      	beq.n	8008358 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008360:	d94f      	bls.n	8008402 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_SPI_Transmit+0xfa>
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d142      	bne.n	80083f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	881a      	ldrh	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	1c9a      	adds	r2, r3, #2
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008394:	e02f      	b.n	80083f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d112      	bne.n	80083ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	881a      	ldrh	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	1c9a      	adds	r2, r3, #2
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083c8:	e015      	b.n	80083f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ca:	f7fa fea1 	bl	8003110 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d803      	bhi.n	80083e2 <HAL_SPI_Transmit+0x16c>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d102      	bne.n	80083e8 <HAL_SPI_Transmit+0x172>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80083f4:	e0ab      	b.n	800854e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1ca      	bne.n	8008396 <HAL_SPI_Transmit+0x120>
 8008400:	e080      	b.n	8008504 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_SPI_Transmit+0x19a>
 800840a:	8afb      	ldrh	r3, [r7, #22]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d174      	bne.n	80084fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b01      	cmp	r3, #1
 8008418:	d912      	bls.n	8008440 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	881a      	ldrh	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842a:	1c9a      	adds	r2, r3, #2
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b02      	subs	r3, #2
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800843e:	e05c      	b.n	80084fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	7812      	ldrb	r2, [r2, #0]
 800844c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008466:	e048      	b.n	80084fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b02      	cmp	r3, #2
 8008474:	d12b      	bne.n	80084ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d912      	bls.n	80084a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	881a      	ldrh	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008490:	1c9a      	adds	r2, r3, #2
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b02      	subs	r3, #2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084a4:	e029      	b.n	80084fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084cc:	e015      	b.n	80084fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ce:	f7fa fe1f 	bl	8003110 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d803      	bhi.n	80084e6 <HAL_SPI_Transmit+0x270>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_Transmit+0x276>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80084f8:	e029      	b.n	800854e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1b1      	bne.n	8008468 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f947 	bl	800879c <SPI_EndRxTxTransaction>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	77fb      	strb	r3, [r7, #31]
 8008544:	e003      	b.n	800854e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008556:	7ffb      	ldrb	r3, [r7, #31]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008570:	f7fa fdce 	bl	8003110 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008580:	f7fa fdc6 	bl	8003110 <HAL_GetTick>
 8008584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008586:	4b39      	ldr	r3, [pc, #228]	@ (800866c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	015b      	lsls	r3, r3, #5
 800858c:	0d1b      	lsrs	r3, r3, #20
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	fb02 f303 	mul.w	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008596:	e054      	b.n	8008642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d050      	beq.n	8008642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a0:	f7fa fdb6 	bl	8003110 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d902      	bls.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d13d      	bne.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085ce:	d111      	bne.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d8:	d004      	beq.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e2:	d107      	bne.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fc:	d10f      	bne.n	800861e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800861c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e017      	b.n	8008662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	3b01      	subs	r3, #1
 8008640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4013      	ands	r3, r2
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	bf0c      	ite	eq
 8008652:	2301      	moveq	r3, #1
 8008654:	2300      	movne	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	429a      	cmp	r2, r3
 800865e:	d19b      	bne.n	8008598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000010 	.word	0x20000010

08008670 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	@ 0x28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008682:	f7fa fd45 	bl	8003110 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	4413      	add	r3, r2
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008692:	f7fa fd3d 	bl	8003110 <HAL_GetTick>
 8008696:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086a0:	4b3d      	ldr	r3, [pc, #244]	@ (8008798 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	00da      	lsls	r2, r3, #3
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	0d1b      	lsrs	r3, r3, #20
 80086b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b2:	fb02 f303 	mul.w	r3, r2, r3
 80086b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086b8:	e060      	b.n	800877c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086c0:	d107      	bne.n	80086d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d050      	beq.n	800877c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086da:	f7fa fd19 	bl	8003110 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d902      	bls.n	80086f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d13d      	bne.n	800876c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008708:	d111      	bne.n	800872e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008712:	d004      	beq.n	800871e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800871c:	d107      	bne.n	800872e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800872c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008736:	d10f      	bne.n	8008758 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008756:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e010      	b.n	800878e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3b01      	subs	r3, #1
 800877a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d196      	bne.n	80086ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3728      	adds	r7, #40	@ 0x28
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20000010 	.word	0x20000010

0800879c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff ff5b 	bl	8008670 <SPI_WaitFifoStateUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087c4:	f043 0220 	orr.w	r2, r3, #32
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e027      	b.n	8008820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2200      	movs	r2, #0
 80087d8:	2180      	movs	r1, #128	@ 0x80
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fec0 	bl	8008560 <SPI_WaitFlagStateUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ea:	f043 0220 	orr.w	r2, r3, #32
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e014      	b.n	8008820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff ff34 	bl	8008670 <SPI_WaitFifoStateUntilTimeout>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d007      	beq.n	800881e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008812:	f043 0220 	orr.w	r2, r3, #32
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e000      	b.n	8008820 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e049      	b.n	80088ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fa fa1c 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f000 fcbc 	bl	80091e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d001      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e04f      	b.n	8008990 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a23      	ldr	r2, [pc, #140]	@ (800899c <HAL_TIM_Base_Start_IT+0xc4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01d      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891a:	d018      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1f      	ldr	r2, [pc, #124]	@ (80089a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1e      	ldr	r2, [pc, #120]	@ (80089a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00e      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1c      	ldr	r2, [pc, #112]	@ (80089a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1b      	ldr	r2, [pc, #108]	@ (80089ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d004      	beq.n	800894e <HAL_TIM_Base_Start_IT+0x76>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a19      	ldr	r2, [pc, #100]	@ (80089b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d115      	bne.n	800897a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	4b17      	ldr	r3, [pc, #92]	@ (80089b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008956:	4013      	ands	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b06      	cmp	r3, #6
 800895e:	d015      	beq.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008966:	d011      	beq.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0201 	orr.w	r2, r2, #1
 8008976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	e008      	b.n	800898c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f042 0201 	orr.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	e000      	b.n	800898e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	40012c00 	.word	0x40012c00
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800
 80089a8:	40000c00 	.word	0x40000c00
 80089ac:	40013400 	.word	0x40013400
 80089b0:	40014000 	.word	0x40014000
 80089b4:	00010007 	.word	0x00010007

080089b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e049      	b.n	8008a5e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f841 	bl	8008a66 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f000 fbf4 	bl	80091e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e049      	b.n	8008b20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fa f949 	bl	8002d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f000 fb93 	bl	80091e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <HAL_TIM_PWM_Start+0x24>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	bf14      	ite	ne
 8008b44:	2301      	movne	r3, #1
 8008b46:	2300      	moveq	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	e03c      	b.n	8008bc6 <HAL_TIM_PWM_Start+0x9e>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d109      	bne.n	8008b66 <HAL_TIM_PWM_Start+0x3e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	e02f      	b.n	8008bc6 <HAL_TIM_PWM_Start+0x9e>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d109      	bne.n	8008b80 <HAL_TIM_PWM_Start+0x58>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	bf14      	ite	ne
 8008b78:	2301      	movne	r3, #1
 8008b7a:	2300      	moveq	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	e022      	b.n	8008bc6 <HAL_TIM_PWM_Start+0x9e>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b0c      	cmp	r3, #12
 8008b84:	d109      	bne.n	8008b9a <HAL_TIM_PWM_Start+0x72>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	bf14      	ite	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	2300      	moveq	r3, #0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	e015      	b.n	8008bc6 <HAL_TIM_PWM_Start+0x9e>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d109      	bne.n	8008bb4 <HAL_TIM_PWM_Start+0x8c>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	bf14      	ite	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	2300      	moveq	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	e008      	b.n	8008bc6 <HAL_TIM_PWM_Start+0x9e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	bf14      	ite	ne
 8008bc0:	2301      	movne	r3, #1
 8008bc2:	2300      	moveq	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e09c      	b.n	8008d08 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <HAL_TIM_PWM_Start+0xb6>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bdc:	e023      	b.n	8008c26 <HAL_TIM_PWM_Start+0xfe>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d104      	bne.n	8008bee <HAL_TIM_PWM_Start+0xc6>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bec:	e01b      	b.n	8008c26 <HAL_TIM_PWM_Start+0xfe>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d104      	bne.n	8008bfe <HAL_TIM_PWM_Start+0xd6>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bfc:	e013      	b.n	8008c26 <HAL_TIM_PWM_Start+0xfe>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b0c      	cmp	r3, #12
 8008c02:	d104      	bne.n	8008c0e <HAL_TIM_PWM_Start+0xe6>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c0c:	e00b      	b.n	8008c26 <HAL_TIM_PWM_Start+0xfe>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b10      	cmp	r3, #16
 8008c12:	d104      	bne.n	8008c1e <HAL_TIM_PWM_Start+0xf6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c1c:	e003      	b.n	8008c26 <HAL_TIM_PWM_Start+0xfe>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fee2 	bl	80099f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a35      	ldr	r2, [pc, #212]	@ (8008d10 <HAL_TIM_PWM_Start+0x1e8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <HAL_TIM_PWM_Start+0x13e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a34      	ldr	r2, [pc, #208]	@ (8008d14 <HAL_TIM_PWM_Start+0x1ec>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00e      	beq.n	8008c66 <HAL_TIM_PWM_Start+0x13e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a32      	ldr	r2, [pc, #200]	@ (8008d18 <HAL_TIM_PWM_Start+0x1f0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d009      	beq.n	8008c66 <HAL_TIM_PWM_Start+0x13e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a31      	ldr	r2, [pc, #196]	@ (8008d1c <HAL_TIM_PWM_Start+0x1f4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d004      	beq.n	8008c66 <HAL_TIM_PWM_Start+0x13e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a2f      	ldr	r2, [pc, #188]	@ (8008d20 <HAL_TIM_PWM_Start+0x1f8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_PWM_Start+0x142>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <HAL_TIM_PWM_Start+0x144>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a22      	ldr	r2, [pc, #136]	@ (8008d10 <HAL_TIM_PWM_Start+0x1e8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d01d      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c92:	d018      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a22      	ldr	r2, [pc, #136]	@ (8008d24 <HAL_TIM_PWM_Start+0x1fc>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d013      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <HAL_TIM_PWM_Start+0x200>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00e      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1f      	ldr	r2, [pc, #124]	@ (8008d2c <HAL_TIM_PWM_Start+0x204>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d009      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a17      	ldr	r2, [pc, #92]	@ (8008d14 <HAL_TIM_PWM_Start+0x1ec>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d004      	beq.n	8008cc6 <HAL_TIM_PWM_Start+0x19e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	@ (8008d18 <HAL_TIM_PWM_Start+0x1f0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d115      	bne.n	8008cf2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	4b18      	ldr	r3, [pc, #96]	@ (8008d30 <HAL_TIM_PWM_Start+0x208>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b06      	cmp	r3, #6
 8008cd6:	d015      	beq.n	8008d04 <HAL_TIM_PWM_Start+0x1dc>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cde:	d011      	beq.n	8008d04 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf0:	e008      	b.n	8008d04 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f042 0201 	orr.w	r2, r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e000      	b.n	8008d06 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40013400 	.word	0x40013400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	40000c00 	.word	0x40000c00
 8008d30:	00010007 	.word	0x00010007

08008d34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e066      	b.n	8008e20 <HAL_TIM_OC_ConfigChannel+0xec>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b14      	cmp	r3, #20
 8008d5e:	d857      	bhi.n	8008e10 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008d60:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008dbd 	.word	0x08008dbd
 8008d6c:	08008e11 	.word	0x08008e11
 8008d70:	08008e11 	.word	0x08008e11
 8008d74:	08008e11 	.word	0x08008e11
 8008d78:	08008dcb 	.word	0x08008dcb
 8008d7c:	08008e11 	.word	0x08008e11
 8008d80:	08008e11 	.word	0x08008e11
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008e11 	.word	0x08008e11
 8008d90:	08008e11 	.word	0x08008e11
 8008d94:	08008e11 	.word	0x08008e11
 8008d98:	08008de7 	.word	0x08008de7
 8008d9c:	08008e11 	.word	0x08008e11
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e11 	.word	0x08008e11
 8008da8:	08008df5 	.word	0x08008df5
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	08008e11 	.word	0x08008e11
 8008db4:	08008e11 	.word	0x08008e11
 8008db8:	08008e03 	.word	0x08008e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 faa8 	bl	8009318 <TIM_OC1_SetConfig>
      break;
 8008dc8:	e025      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fb31 	bl	8009438 <TIM_OC2_SetConfig>
      break;
 8008dd6:	e01e      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fbb4 	bl	800954c <TIM_OC3_SetConfig>
      break;
 8008de4:	e017      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68b9      	ldr	r1, [r7, #8]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fc35 	bl	800965c <TIM_OC4_SetConfig>
      break;
 8008df2:	e010      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fc98 	bl	8009730 <TIM_OC5_SetConfig>
      break;
 8008e00:	e009      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fcf5 	bl	80097f8 <TIM_OC6_SetConfig>
      break;
 8008e0e:	e002      	b.n	8008e16 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
      break;
 8008e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e0ff      	b.n	8009046 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b14      	cmp	r3, #20
 8008e52:	f200 80f0 	bhi.w	8009036 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e56:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008eb1 	.word	0x08008eb1
 8008e60:	08009037 	.word	0x08009037
 8008e64:	08009037 	.word	0x08009037
 8008e68:	08009037 	.word	0x08009037
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08009037 	.word	0x08009037
 8008e74:	08009037 	.word	0x08009037
 8008e78:	08009037 	.word	0x08009037
 8008e7c:	08008f33 	.word	0x08008f33
 8008e80:	08009037 	.word	0x08009037
 8008e84:	08009037 	.word	0x08009037
 8008e88:	08009037 	.word	0x08009037
 8008e8c:	08008f73 	.word	0x08008f73
 8008e90:	08009037 	.word	0x08009037
 8008e94:	08009037 	.word	0x08009037
 8008e98:	08009037 	.word	0x08009037
 8008e9c:	08008fb5 	.word	0x08008fb5
 8008ea0:	08009037 	.word	0x08009037
 8008ea4:	08009037 	.word	0x08009037
 8008ea8:	08009037 	.word	0x08009037
 8008eac:	08008ff5 	.word	0x08008ff5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa2e 	bl	8009318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0208 	orr.w	r2, r2, #8
 8008eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0204 	bic.w	r2, r2, #4
 8008eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	619a      	str	r2, [r3, #24]
      break;
 8008eee:	e0a5      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fa9e 	bl	8009438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6999      	ldr	r1, [r3, #24]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	021a      	lsls	r2, r3, #8
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	619a      	str	r2, [r3, #24]
      break;
 8008f30:	e084      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fb07 	bl	800954c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0208 	orr.w	r2, r2, #8
 8008f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0204 	bic.w	r2, r2, #4
 8008f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	61da      	str	r2, [r3, #28]
      break;
 8008f70:	e064      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fb6f 	bl	800965c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69da      	ldr	r2, [r3, #28]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69d9      	ldr	r1, [r3, #28]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	021a      	lsls	r2, r3, #8
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	61da      	str	r2, [r3, #28]
      break;
 8008fb2:	e043      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fbb8 	bl	8009730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0208 	orr.w	r2, r2, #8
 8008fce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0204 	bic.w	r2, r2, #4
 8008fde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ff2:	e023      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fbfc 	bl	80097f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800900e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800901e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	021a      	lsls	r2, r3, #8
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009034:	e002      	b.n	800903c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	75fb      	strb	r3, [r7, #23]
      break;
 800903a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009044:	7dfb      	ldrb	r3, [r7, #23]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop

08009050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_TIM_ConfigClockSource+0x1c>
 8009068:	2302      	movs	r3, #2
 800906a:	e0b6      	b.n	80091da <HAL_TIM_ConfigClockSource+0x18a>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800908a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800908e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090a8:	d03e      	beq.n	8009128 <HAL_TIM_ConfigClockSource+0xd8>
 80090aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ae:	f200 8087 	bhi.w	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b6:	f000 8086 	beq.w	80091c6 <HAL_TIM_ConfigClockSource+0x176>
 80090ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090be:	d87f      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090c0:	2b70      	cmp	r3, #112	@ 0x70
 80090c2:	d01a      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0xaa>
 80090c4:	2b70      	cmp	r3, #112	@ 0x70
 80090c6:	d87b      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090c8:	2b60      	cmp	r3, #96	@ 0x60
 80090ca:	d050      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x11e>
 80090cc:	2b60      	cmp	r3, #96	@ 0x60
 80090ce:	d877      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090d0:	2b50      	cmp	r3, #80	@ 0x50
 80090d2:	d03c      	beq.n	800914e <HAL_TIM_ConfigClockSource+0xfe>
 80090d4:	2b50      	cmp	r3, #80	@ 0x50
 80090d6:	d873      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090d8:	2b40      	cmp	r3, #64	@ 0x40
 80090da:	d058      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x13e>
 80090dc:	2b40      	cmp	r3, #64	@ 0x40
 80090de:	d86f      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090e0:	2b30      	cmp	r3, #48	@ 0x30
 80090e2:	d064      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15e>
 80090e4:	2b30      	cmp	r3, #48	@ 0x30
 80090e6:	d86b      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d060      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15e>
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d867      	bhi.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d05c      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15e>
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	d05a      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x15e>
 80090f8:	e062      	b.n	80091c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800910a:	f000 fc55 	bl	80099b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800911c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	609a      	str	r2, [r3, #8]
      break;
 8009126:	e04f      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009138:	f000 fc3e 	bl	80099b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800914a:	609a      	str	r2, [r3, #8]
      break;
 800914c:	e03c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800915a:	461a      	mov	r2, r3
 800915c:	f000 fbb2 	bl	80098c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2150      	movs	r1, #80	@ 0x50
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fc0b 	bl	8009982 <TIM_ITRx_SetConfig>
      break;
 800916c:	e02c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800917a:	461a      	mov	r2, r3
 800917c:	f000 fbd1 	bl	8009922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2160      	movs	r1, #96	@ 0x60
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fbfb 	bl	8009982 <TIM_ITRx_SetConfig>
      break;
 800918c:	e01c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800919a:	461a      	mov	r2, r3
 800919c:	f000 fb92 	bl	80098c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2140      	movs	r1, #64	@ 0x40
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fbeb 	bl	8009982 <TIM_ITRx_SetConfig>
      break;
 80091ac:	e00c      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f000 fbe2 	bl	8009982 <TIM_ITRx_SetConfig>
      break;
 80091be:	e003      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
      break;
 80091c4:	e000      	b.n	80091c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80091c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a40      	ldr	r2, [pc, #256]	@ (80092f8 <TIM_Base_SetConfig+0x114>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d013      	beq.n	8009224 <TIM_Base_SetConfig+0x40>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009202:	d00f      	beq.n	8009224 <TIM_Base_SetConfig+0x40>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a3d      	ldr	r2, [pc, #244]	@ (80092fc <TIM_Base_SetConfig+0x118>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00b      	beq.n	8009224 <TIM_Base_SetConfig+0x40>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a3c      	ldr	r2, [pc, #240]	@ (8009300 <TIM_Base_SetConfig+0x11c>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d007      	beq.n	8009224 <TIM_Base_SetConfig+0x40>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a3b      	ldr	r2, [pc, #236]	@ (8009304 <TIM_Base_SetConfig+0x120>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d003      	beq.n	8009224 <TIM_Base_SetConfig+0x40>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a3a      	ldr	r2, [pc, #232]	@ (8009308 <TIM_Base_SetConfig+0x124>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d108      	bne.n	8009236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a2f      	ldr	r2, [pc, #188]	@ (80092f8 <TIM_Base_SetConfig+0x114>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d01f      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009244:	d01b      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a2c      	ldr	r2, [pc, #176]	@ (80092fc <TIM_Base_SetConfig+0x118>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d017      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a2b      	ldr	r2, [pc, #172]	@ (8009300 <TIM_Base_SetConfig+0x11c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d013      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a2a      	ldr	r2, [pc, #168]	@ (8009304 <TIM_Base_SetConfig+0x120>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00f      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a29      	ldr	r2, [pc, #164]	@ (8009308 <TIM_Base_SetConfig+0x124>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00b      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a28      	ldr	r2, [pc, #160]	@ (800930c <TIM_Base_SetConfig+0x128>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a27      	ldr	r2, [pc, #156]	@ (8009310 <TIM_Base_SetConfig+0x12c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_Base_SetConfig+0x9a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a26      	ldr	r2, [pc, #152]	@ (8009314 <TIM_Base_SetConfig+0x130>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d108      	bne.n	8009290 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a10      	ldr	r2, [pc, #64]	@ (80092f8 <TIM_Base_SetConfig+0x114>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00f      	beq.n	80092dc <TIM_Base_SetConfig+0xf8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a12      	ldr	r2, [pc, #72]	@ (8009308 <TIM_Base_SetConfig+0x124>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00b      	beq.n	80092dc <TIM_Base_SetConfig+0xf8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a11      	ldr	r2, [pc, #68]	@ (800930c <TIM_Base_SetConfig+0x128>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d007      	beq.n	80092dc <TIM_Base_SetConfig+0xf8>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a10      	ldr	r2, [pc, #64]	@ (8009310 <TIM_Base_SetConfig+0x12c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d003      	beq.n	80092dc <TIM_Base_SetConfig+0xf8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009314 <TIM_Base_SetConfig+0x130>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d103      	bne.n	80092e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	691a      	ldr	r2, [r3, #16]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	615a      	str	r2, [r3, #20]
}
 80092ea:	bf00      	nop
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40000400 	.word	0x40000400
 8009300:	40000800 	.word	0x40000800
 8009304:	40000c00 	.word	0x40000c00
 8009308:	40013400 	.word	0x40013400
 800930c:	40014000 	.word	0x40014000
 8009310:	40014400 	.word	0x40014400
 8009314:	40014800 	.word	0x40014800

08009318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f023 0201 	bic.w	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f023 0302 	bic.w	r3, r3, #2
 8009364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4313      	orrs	r3, r2
 800936e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a2c      	ldr	r2, [pc, #176]	@ (8009424 <TIM_OC1_SetConfig+0x10c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_OC1_SetConfig+0x80>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a2b      	ldr	r2, [pc, #172]	@ (8009428 <TIM_OC1_SetConfig+0x110>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00b      	beq.n	8009398 <TIM_OC1_SetConfig+0x80>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a2a      	ldr	r2, [pc, #168]	@ (800942c <TIM_OC1_SetConfig+0x114>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_OC1_SetConfig+0x80>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a29      	ldr	r2, [pc, #164]	@ (8009430 <TIM_OC1_SetConfig+0x118>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC1_SetConfig+0x80>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a28      	ldr	r2, [pc, #160]	@ (8009434 <TIM_OC1_SetConfig+0x11c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d10c      	bne.n	80093b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0308 	bic.w	r3, r3, #8
 800939e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f023 0304 	bic.w	r3, r3, #4
 80093b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009424 <TIM_OC1_SetConfig+0x10c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_OC1_SetConfig+0xc2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009428 <TIM_OC1_SetConfig+0x110>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00b      	beq.n	80093da <TIM_OC1_SetConfig+0xc2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a19      	ldr	r2, [pc, #100]	@ (800942c <TIM_OC1_SetConfig+0x114>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_OC1_SetConfig+0xc2>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a18      	ldr	r2, [pc, #96]	@ (8009430 <TIM_OC1_SetConfig+0x118>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_OC1_SetConfig+0xc2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a17      	ldr	r2, [pc, #92]	@ (8009434 <TIM_OC1_SetConfig+0x11c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d111      	bne.n	80093fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	621a      	str	r2, [r3, #32]
}
 8009418:	bf00      	nop
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	40012c00 	.word	0x40012c00
 8009428:	40013400 	.word	0x40013400
 800942c:	40014000 	.word	0x40014000
 8009430:	40014400 	.word	0x40014400
 8009434:	40014800 	.word	0x40014800

08009438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	f023 0210 	bic.w	r2, r3, #16
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0320 	bic.w	r3, r3, #32
 8009486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a28      	ldr	r2, [pc, #160]	@ (8009538 <TIM_OC2_SetConfig+0x100>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_OC2_SetConfig+0x6c>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a27      	ldr	r2, [pc, #156]	@ (800953c <TIM_OC2_SetConfig+0x104>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d10d      	bne.n	80094c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009538 <TIM_OC2_SetConfig+0x100>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00f      	beq.n	80094e8 <TIM_OC2_SetConfig+0xb0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1c      	ldr	r2, [pc, #112]	@ (800953c <TIM_OC2_SetConfig+0x104>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00b      	beq.n	80094e8 <TIM_OC2_SetConfig+0xb0>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009540 <TIM_OC2_SetConfig+0x108>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d007      	beq.n	80094e8 <TIM_OC2_SetConfig+0xb0>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1a      	ldr	r2, [pc, #104]	@ (8009544 <TIM_OC2_SetConfig+0x10c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d003      	beq.n	80094e8 <TIM_OC2_SetConfig+0xb0>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a19      	ldr	r2, [pc, #100]	@ (8009548 <TIM_OC2_SetConfig+0x110>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d113      	bne.n	8009510 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4313      	orrs	r3, r2
 8009502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	4313      	orrs	r3, r2
 800950e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40012c00 	.word	0x40012c00
 800953c:	40013400 	.word	0x40013400
 8009540:	40014000 	.word	0x40014000
 8009544:	40014400 	.word	0x40014400
 8009548:	40014800 	.word	0x40014800

0800954c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800957a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a27      	ldr	r2, [pc, #156]	@ (8009648 <TIM_OC3_SetConfig+0xfc>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d003      	beq.n	80095b6 <TIM_OC3_SetConfig+0x6a>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a26      	ldr	r2, [pc, #152]	@ (800964c <TIM_OC3_SetConfig+0x100>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d10d      	bne.n	80095d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009648 <TIM_OC3_SetConfig+0xfc>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00f      	beq.n	80095fa <TIM_OC3_SetConfig+0xae>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a1b      	ldr	r2, [pc, #108]	@ (800964c <TIM_OC3_SetConfig+0x100>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00b      	beq.n	80095fa <TIM_OC3_SetConfig+0xae>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009650 <TIM_OC3_SetConfig+0x104>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d007      	beq.n	80095fa <TIM_OC3_SetConfig+0xae>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a19      	ldr	r2, [pc, #100]	@ (8009654 <TIM_OC3_SetConfig+0x108>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <TIM_OC3_SetConfig+0xae>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a18      	ldr	r2, [pc, #96]	@ (8009658 <TIM_OC3_SetConfig+0x10c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d113      	bne.n	8009622 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	621a      	str	r2, [r3, #32]
}
 800963c:	bf00      	nop
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	40012c00 	.word	0x40012c00
 800964c:	40013400 	.word	0x40013400
 8009650:	40014000 	.word	0x40014000
 8009654:	40014400 	.word	0x40014400
 8009658:	40014800 	.word	0x40014800

0800965c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800968a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800968e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	021b      	lsls	r3, r3, #8
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	031b      	lsls	r3, r3, #12
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a18      	ldr	r2, [pc, #96]	@ (800971c <TIM_OC4_SetConfig+0xc0>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00f      	beq.n	80096e0 <TIM_OC4_SetConfig+0x84>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a17      	ldr	r2, [pc, #92]	@ (8009720 <TIM_OC4_SetConfig+0xc4>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00b      	beq.n	80096e0 <TIM_OC4_SetConfig+0x84>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a16      	ldr	r2, [pc, #88]	@ (8009724 <TIM_OC4_SetConfig+0xc8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d007      	beq.n	80096e0 <TIM_OC4_SetConfig+0x84>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <TIM_OC4_SetConfig+0xcc>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d003      	beq.n	80096e0 <TIM_OC4_SetConfig+0x84>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a14      	ldr	r2, [pc, #80]	@ (800972c <TIM_OC4_SetConfig+0xd0>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d109      	bne.n	80096f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	019b      	lsls	r3, r3, #6
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	621a      	str	r2, [r3, #32]
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	40012c00 	.word	0x40012c00
 8009720:	40013400 	.word	0x40013400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800

08009730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a17      	ldr	r2, [pc, #92]	@ (80097e4 <TIM_OC5_SetConfig+0xb4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00f      	beq.n	80097aa <TIM_OC5_SetConfig+0x7a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a16      	ldr	r2, [pc, #88]	@ (80097e8 <TIM_OC5_SetConfig+0xb8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00b      	beq.n	80097aa <TIM_OC5_SetConfig+0x7a>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a15      	ldr	r2, [pc, #84]	@ (80097ec <TIM_OC5_SetConfig+0xbc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d007      	beq.n	80097aa <TIM_OC5_SetConfig+0x7a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a14      	ldr	r2, [pc, #80]	@ (80097f0 <TIM_OC5_SetConfig+0xc0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_OC5_SetConfig+0x7a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a13      	ldr	r2, [pc, #76]	@ (80097f4 <TIM_OC5_SetConfig+0xc4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d109      	bne.n	80097be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	621a      	str	r2, [r3, #32]
}
 80097d8:	bf00      	nop
 80097da:	371c      	adds	r7, #28
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	40012c00 	.word	0x40012c00
 80097e8:	40013400 	.word	0x40013400
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	40014800 	.word	0x40014800

080097f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800982a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800983e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	051b      	lsls	r3, r3, #20
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a18      	ldr	r2, [pc, #96]	@ (80098b0 <TIM_OC6_SetConfig+0xb8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00f      	beq.n	8009874 <TIM_OC6_SetConfig+0x7c>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a17      	ldr	r2, [pc, #92]	@ (80098b4 <TIM_OC6_SetConfig+0xbc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00b      	beq.n	8009874 <TIM_OC6_SetConfig+0x7c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a16      	ldr	r2, [pc, #88]	@ (80098b8 <TIM_OC6_SetConfig+0xc0>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <TIM_OC6_SetConfig+0x7c>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a15      	ldr	r2, [pc, #84]	@ (80098bc <TIM_OC6_SetConfig+0xc4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC6_SetConfig+0x7c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a14      	ldr	r2, [pc, #80]	@ (80098c0 <TIM_OC6_SetConfig+0xc8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d109      	bne.n	8009888 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	029b      	lsls	r3, r3, #10
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40013400 	.word	0x40013400
 80098b8:	40014000 	.word	0x40014000
 80098bc:	40014400 	.word	0x40014400
 80098c0:	40014800 	.word	0x40014800

080098c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f023 0201 	bic.w	r2, r3, #1
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f023 030a 	bic.w	r3, r3, #10
 8009900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009922:	b480      	push	{r7}
 8009924:	b087      	sub	sp, #28
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	f023 0210 	bic.w	r2, r3, #16
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800994c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	031b      	lsls	r3, r3, #12
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800995e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	f043 0307 	orr.w	r3, r3, #7
 80099a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	609a      	str	r2, [r3, #8]
}
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	021a      	lsls	r2, r3, #8
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	431a      	orrs	r2, r3
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4313      	orrs	r3, r2
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	609a      	str	r2, [r3, #8]
}
 80099ec:	bf00      	nop
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a1a      	ldr	r2, [r3, #32]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	43db      	mvns	r3, r3
 8009a1a:	401a      	ands	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a1a      	ldr	r2, [r3, #32]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f003 031f 	and.w	r3, r3, #31
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a30:	431a      	orrs	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
	...

08009a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e068      	b.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a2e      	ldr	r2, [pc, #184]	@ (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d108      	bne.n	8009aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d01d      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ace:	d018      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a1a      	ldr	r2, [pc, #104]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00e      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a18      	ldr	r2, [pc, #96]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d009      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a13      	ldr	r2, [pc, #76]	@ (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d004      	beq.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a14      	ldr	r2, [pc, #80]	@ (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d10c      	bne.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40012c00 	.word	0x40012c00
 8009b40:	40013400 	.word	0x40013400
 8009b44:	40000400 	.word	0x40000400
 8009b48:	40000800 	.word	0x40000800
 8009b4c:	40000c00 	.word	0x40000c00
 8009b50:	40014000 	.word	0x40014000

08009b54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e065      	b.n	8009c3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	041b      	lsls	r3, r3, #16
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a16      	ldr	r2, [pc, #88]	@ (8009c48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a14      	ldr	r2, [pc, #80]	@ (8009c4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d115      	bne.n	8009c2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c08:	051b      	lsls	r3, r3, #20
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	40012c00 	.word	0x40012c00
 8009c4c:	40013400 	.word	0x40013400

08009c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e042      	b.n	8009ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7f8 ff67 	bl	8002b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2224      	movs	r2, #36	@ 0x24
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f022 0201 	bic.w	r2, r2, #1
 8009c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fb24 	bl	800a2e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f825 	bl	8009cf0 <UART_SetConfig>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e01b      	b.n	8009ce8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0201 	orr.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fba3 	bl	800a42c <UART_CheckIdleState>
 8009ce6:	4603      	mov	r3, r0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf4:	b08c      	sub	sp, #48	@ 0x30
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4baa      	ldr	r3, [pc, #680]	@ (8009fc8 <UART_SetConfig+0x2d8>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a9f      	ldr	r2, [pc, #636]	@ (8009fcc <UART_SetConfig+0x2dc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d004      	beq.n	8009d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	f023 010f 	bic.w	r1, r3, #15
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a90      	ldr	r2, [pc, #576]	@ (8009fd0 <UART_SetConfig+0x2e0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d125      	bne.n	8009de0 <UART_SetConfig+0xf0>
 8009d94:	4b8f      	ldr	r3, [pc, #572]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d81a      	bhi.n	8009dd8 <UART_SetConfig+0xe8>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <UART_SetConfig+0xb8>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dc9 	.word	0x08009dc9
 8009db0:	08009dc1 	.word	0x08009dc1
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dbe:	e116      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc6:	e112      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dce:	e10e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dd0:	2308      	movs	r3, #8
 8009dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dd6:	e10a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dde:	e106      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a7c      	ldr	r2, [pc, #496]	@ (8009fd8 <UART_SetConfig+0x2e8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d138      	bne.n	8009e5c <UART_SetConfig+0x16c>
 8009dea:	4b7a      	ldr	r3, [pc, #488]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df0:	f003 030c 	and.w	r3, r3, #12
 8009df4:	2b0c      	cmp	r3, #12
 8009df6:	d82d      	bhi.n	8009e54 <UART_SetConfig+0x164>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <UART_SetConfig+0x110>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e35 	.word	0x08009e35
 8009e04:	08009e55 	.word	0x08009e55
 8009e08:	08009e55 	.word	0x08009e55
 8009e0c:	08009e55 	.word	0x08009e55
 8009e10:	08009e45 	.word	0x08009e45
 8009e14:	08009e55 	.word	0x08009e55
 8009e18:	08009e55 	.word	0x08009e55
 8009e1c:	08009e55 	.word	0x08009e55
 8009e20:	08009e3d 	.word	0x08009e3d
 8009e24:	08009e55 	.word	0x08009e55
 8009e28:	08009e55 	.word	0x08009e55
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e3a:	e0d8      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e42:	e0d4      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e44:	2304      	movs	r3, #4
 8009e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4a:	e0d0      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e52:	e0cc      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e54:	2310      	movs	r3, #16
 8009e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5a:	e0c8      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a5e      	ldr	r2, [pc, #376]	@ (8009fdc <UART_SetConfig+0x2ec>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d125      	bne.n	8009eb2 <UART_SetConfig+0x1c2>
 8009e66:	4b5b      	ldr	r3, [pc, #364]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e70:	2b30      	cmp	r3, #48	@ 0x30
 8009e72:	d016      	beq.n	8009ea2 <UART_SetConfig+0x1b2>
 8009e74:	2b30      	cmp	r3, #48	@ 0x30
 8009e76:	d818      	bhi.n	8009eaa <UART_SetConfig+0x1ba>
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d00a      	beq.n	8009e92 <UART_SetConfig+0x1a2>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d814      	bhi.n	8009eaa <UART_SetConfig+0x1ba>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <UART_SetConfig+0x19a>
 8009e84:	2b10      	cmp	r3, #16
 8009e86:	d008      	beq.n	8009e9a <UART_SetConfig+0x1aa>
 8009e88:	e00f      	b.n	8009eaa <UART_SetConfig+0x1ba>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e90:	e0ad      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e92:	2302      	movs	r3, #2
 8009e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e98:	e0a9      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea0:	e0a5      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea8:	e0a1      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009eaa:	2310      	movs	r3, #16
 8009eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb0:	e09d      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8009fe0 <UART_SetConfig+0x2f0>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d125      	bne.n	8009f08 <UART_SetConfig+0x218>
 8009ebc:	4b45      	ldr	r3, [pc, #276]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ec8:	d016      	beq.n	8009ef8 <UART_SetConfig+0x208>
 8009eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ecc:	d818      	bhi.n	8009f00 <UART_SetConfig+0x210>
 8009ece:	2b80      	cmp	r3, #128	@ 0x80
 8009ed0:	d00a      	beq.n	8009ee8 <UART_SetConfig+0x1f8>
 8009ed2:	2b80      	cmp	r3, #128	@ 0x80
 8009ed4:	d814      	bhi.n	8009f00 <UART_SetConfig+0x210>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <UART_SetConfig+0x1f0>
 8009eda:	2b40      	cmp	r3, #64	@ 0x40
 8009edc:	d008      	beq.n	8009ef0 <UART_SetConfig+0x200>
 8009ede:	e00f      	b.n	8009f00 <UART_SetConfig+0x210>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee6:	e082      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eee:	e07e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ef0:	2304      	movs	r3, #4
 8009ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef6:	e07a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009ef8:	2308      	movs	r3, #8
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	e076      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f00:	2310      	movs	r3, #16
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f06:	e072      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a35      	ldr	r2, [pc, #212]	@ (8009fe4 <UART_SetConfig+0x2f4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d12a      	bne.n	8009f68 <UART_SetConfig+0x278>
 8009f12:	4b30      	ldr	r3, [pc, #192]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f20:	d01a      	beq.n	8009f58 <UART_SetConfig+0x268>
 8009f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f26:	d81b      	bhi.n	8009f60 <UART_SetConfig+0x270>
 8009f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f2c:	d00c      	beq.n	8009f48 <UART_SetConfig+0x258>
 8009f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f32:	d815      	bhi.n	8009f60 <UART_SetConfig+0x270>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <UART_SetConfig+0x250>
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3c:	d008      	beq.n	8009f50 <UART_SetConfig+0x260>
 8009f3e:	e00f      	b.n	8009f60 <UART_SetConfig+0x270>
 8009f40:	2300      	movs	r3, #0
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f46:	e052      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4e:	e04e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f56:	e04a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e046      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e042      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a17      	ldr	r2, [pc, #92]	@ (8009fcc <UART_SetConfig+0x2dc>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d13a      	bne.n	8009fe8 <UART_SetConfig+0x2f8>
 8009f72:	4b18      	ldr	r3, [pc, #96]	@ (8009fd4 <UART_SetConfig+0x2e4>)
 8009f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f80:	d01a      	beq.n	8009fb8 <UART_SetConfig+0x2c8>
 8009f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f86:	d81b      	bhi.n	8009fc0 <UART_SetConfig+0x2d0>
 8009f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f8c:	d00c      	beq.n	8009fa8 <UART_SetConfig+0x2b8>
 8009f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f92:	d815      	bhi.n	8009fc0 <UART_SetConfig+0x2d0>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <UART_SetConfig+0x2b0>
 8009f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f9c:	d008      	beq.n	8009fb0 <UART_SetConfig+0x2c0>
 8009f9e:	e00f      	b.n	8009fc0 <UART_SetConfig+0x2d0>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa6:	e022      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fae:	e01e      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb6:	e01a      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fbe:	e016      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc6:	e012      	b.n	8009fee <UART_SetConfig+0x2fe>
 8009fc8:	cfff69f3 	.word	0xcfff69f3
 8009fcc:	40008000 	.word	0x40008000
 8009fd0:	40013800 	.word	0x40013800
 8009fd4:	40021000 	.word	0x40021000
 8009fd8:	40004400 	.word	0x40004400
 8009fdc:	40004800 	.word	0x40004800
 8009fe0:	40004c00 	.word	0x40004c00
 8009fe4:	40005000 	.word	0x40005000
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4aae      	ldr	r2, [pc, #696]	@ (800a2ac <UART_SetConfig+0x5bc>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	f040 8097 	bne.w	800a128 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ffe:	2b08      	cmp	r3, #8
 800a000:	d823      	bhi.n	800a04a <UART_SetConfig+0x35a>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <UART_SetConfig+0x318>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a02d 	.word	0x0800a02d
 800a00c:	0800a04b 	.word	0x0800a04b
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a04b 	.word	0x0800a04b
 800a018:	0800a03b 	.word	0x0800a03b
 800a01c:	0800a04b 	.word	0x0800a04b
 800a020:	0800a04b 	.word	0x0800a04b
 800a024:	0800a04b 	.word	0x0800a04b
 800a028:	0800a043 	.word	0x0800a043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a02c:	f7fb feca 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 800a030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a032:	e010      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a034:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a038:	e00d      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03a:	f7fb fe2b 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 800a03e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a040:	e009      	b.n	800a056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a048:	e005      	b.n	800a056 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8130 	beq.w	800a2be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a062:	4a94      	ldr	r2, [pc, #592]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a068:	461a      	mov	r2, r3
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a070:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d305      	bcc.n	800a08e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d903      	bls.n	800a096 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a094:	e113      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	2200      	movs	r2, #0
 800a09a:	60bb      	str	r3, [r7, #8]
 800a09c:	60fa      	str	r2, [r7, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	4a84      	ldr	r2, [pc, #528]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0b8:	f7f6 fd68 	bl	8000b8c <__aeabi_uldivmod>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f04f 0200 	mov.w	r2, #0
 800a0c8:	f04f 0300 	mov.w	r3, #0
 800a0cc:	020b      	lsls	r3, r1, #8
 800a0ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0d2:	0202      	lsls	r2, r0, #8
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	6849      	ldr	r1, [r1, #4]
 800a0d8:	0849      	lsrs	r1, r1, #1
 800a0da:	2000      	movs	r0, #0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	4605      	mov	r5, r0
 800a0e0:	eb12 0804 	adds.w	r8, r2, r4
 800a0e4:	eb43 0905 	adc.w	r9, r3, r5
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	469a      	mov	sl, r3
 800a0f0:	4693      	mov	fp, r2
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	f7f6 fd47 	bl	8000b8c <__aeabi_uldivmod>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4613      	mov	r3, r2
 800a104:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a10c:	d308      	bcc.n	800a120 <UART_SetConfig+0x430>
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a114:	d204      	bcs.n	800a120 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6a3a      	ldr	r2, [r7, #32]
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	e0ce      	b.n	800a2be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a126:	e0ca      	b.n	800a2be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a130:	d166      	bne.n	800a200 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a136:	2b08      	cmp	r3, #8
 800a138:	d827      	bhi.n	800a18a <UART_SetConfig+0x49a>
 800a13a:	a201      	add	r2, pc, #4	@ (adr r2, 800a140 <UART_SetConfig+0x450>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a175 	.word	0x0800a175
 800a14c:	0800a18b 	.word	0x0800a18b
 800a150:	0800a17b 	.word	0x0800a17b
 800a154:	0800a18b 	.word	0x0800a18b
 800a158:	0800a18b 	.word	0x0800a18b
 800a15c:	0800a18b 	.word	0x0800a18b
 800a160:	0800a183 	.word	0x0800a183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a164:	f7fb fe2e 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 800a168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a16a:	e014      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a16c:	f7fb fe40 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 800a170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a172:	e010      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a174:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a178:	e00d      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a17a:	f7fb fd8b 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 800a17e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a180:	e009      	b.n	800a196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a188:	e005      	b.n	800a196 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8090 	beq.w	800a2be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a2:	4a44      	ldr	r2, [pc, #272]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b0:	005a      	lsls	r2, r3, #1
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d916      	bls.n	800a1f8 <UART_SetConfig+0x508>
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d0:	d212      	bcs.n	800a1f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f023 030f 	bic.w	r3, r3, #15
 800a1da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	8bfa      	ldrh	r2, [r7, #30]
 800a1f4:	60da      	str	r2, [r3, #12]
 800a1f6:	e062      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1fe:	e05e      	b.n	800a2be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a204:	2b08      	cmp	r3, #8
 800a206:	d828      	bhi.n	800a25a <UART_SetConfig+0x56a>
 800a208:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <UART_SetConfig+0x520>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a235 	.word	0x0800a235
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a245 	.word	0x0800a245
 800a21c:	0800a25b 	.word	0x0800a25b
 800a220:	0800a24b 	.word	0x0800a24b
 800a224:	0800a25b 	.word	0x0800a25b
 800a228:	0800a25b 	.word	0x0800a25b
 800a22c:	0800a25b 	.word	0x0800a25b
 800a230:	0800a253 	.word	0x0800a253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a234:	f7fb fdc6 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
 800a238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a23a:	e014      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a23c:	f7fb fdd8 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 800a240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a242:	e010      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a244:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <UART_SetConfig+0x5c0>)
 800a246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a248:	e00d      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a24a:	f7fb fd23 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 800a24e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a250:	e009      	b.n	800a266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a258:	e005      	b.n	800a266 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a264:	bf00      	nop
    }

    if (pclk != 0U)
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d028      	beq.n	800a2be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	4a10      	ldr	r2, [pc, #64]	@ (800a2b4 <UART_SetConfig+0x5c4>)
 800a272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a276:	461a      	mov	r2, r3
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d910      	bls.n	800a2b8 <UART_SetConfig+0x5c8>
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a29c:	d20c      	bcs.n	800a2b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60da      	str	r2, [r3, #12]
 800a2a8:	e009      	b.n	800a2be <UART_SetConfig+0x5ce>
 800a2aa:	bf00      	nop
 800a2ac:	40008000 	.word	0x40008000
 800a2b0:	00f42400 	.word	0x00f42400
 800a2b4:	0800f59c 	.word	0x0800f59c
      }
      else
      {
        ret = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3730      	adds	r7, #48	@ 0x30
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35a:	f003 0304 	and.w	r3, r3, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01a      	beq.n	800a3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3e6:	d10a      	bne.n	800a3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	605a      	str	r2, [r3, #4]
  }
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b098      	sub	sp, #96	@ 0x60
 800a430:	af02      	add	r7, sp, #8
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a43c:	f7f8 fe68 	bl	8003110 <HAL_GetTick>
 800a440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d12f      	bne.n	800a4b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a458:	2200      	movs	r2, #0
 800a45a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f88e 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d022      	beq.n	800a4b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a47e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a488:	647b      	str	r3, [r7, #68]	@ 0x44
 800a48a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e063      	b.n	800a578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d149      	bne.n	800a552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f857 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d03c      	beq.n	800a552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e6      	bne.n	800a4d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a52a:	61fa      	str	r2, [r7, #28]
 800a52c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	69b9      	ldr	r1, [r7, #24]
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	617b      	str	r3, [r7, #20]
   return(result);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e5      	bne.n	800a50a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e012      	b.n	800a578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3758      	adds	r7, #88	@ 0x58
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a590:	e049      	b.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d045      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59a:	f7f8 fdb9 	bl	8003110 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d302      	bcc.n	800a5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e048      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0304 	and.w	r3, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d031      	beq.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	f003 0308 	and.w	r3, r3, #8
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d110      	bne.n	800a5f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f838 	bl	800a64e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e029      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a600:	d111      	bne.n	800a626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a60a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f81e 	bl	800a64e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e00f      	b.n	800a646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69da      	ldr	r2, [r3, #28]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4013      	ands	r3, r2
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	429a      	cmp	r2, r3
 800a634:	bf0c      	ite	eq
 800a636:	2301      	moveq	r3, #1
 800a638:	2300      	movne	r3, #0
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	429a      	cmp	r2, r3
 800a642:	d0a6      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a64e:	b480      	push	{r7}
 800a650:	b095      	sub	sp, #84	@ 0x54
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a674:	643b      	str	r3, [r7, #64]	@ 0x40
 800a676:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a67a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e6      	bne.n	800a656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	61fb      	str	r3, [r7, #28]
   return(result);
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a69e:	f023 0301 	bic.w	r3, r3, #1
 800a6a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e3      	bne.n	800a688 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d118      	bne.n	800a6fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f023 0310 	bic.w	r3, r3, #16
 800a6dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6979      	ldr	r1, [r7, #20]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e6      	bne.n	800a6c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a70e:	bf00      	nop
 800a710:	3754      	adds	r7, #84	@ 0x54
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_UARTEx_DisableFifoMode+0x16>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e027      	b.n	800a780 <HAL_UARTEx_DisableFifoMode+0x66>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2224      	movs	r2, #36	@ 0x24
 800a73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0201 	bic.w	r2, r2, #1
 800a756:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a75e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e02d      	b.n	800a800 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2224      	movs	r2, #36	@ 0x24
 800a7b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f84f 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e02d      	b.n	800a87c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2224      	movs	r2, #36	@ 0x24
 800a82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0201 	bic.w	r2, r2, #1
 800a846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f811 	bl	800a884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a890:	2b00      	cmp	r3, #0
 800a892:	d108      	bne.n	800a8a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8a4:	e031      	b.n	800a90a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8a6:	2308      	movs	r3, #8
 800a8a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	0e5b      	lsrs	r3, r3, #25
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0307 	and.w	r3, r3, #7
 800a8bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	0f5b      	lsrs	r3, r3, #29
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	7b3a      	ldrb	r2, [r7, #12]
 800a8d2:	4911      	ldr	r1, [pc, #68]	@ (800a918 <UARTEx_SetNbDataToProcess+0x94>)
 800a8d4:	5c8a      	ldrb	r2, [r1, r2]
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8da:	7b3a      	ldrb	r2, [r7, #12]
 800a8dc:	490f      	ldr	r1, [pc, #60]	@ (800a91c <UARTEx_SetNbDataToProcess+0x98>)
 800a8de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	7b7a      	ldrb	r2, [r7, #13]
 800a8f0:	4909      	ldr	r1, [pc, #36]	@ (800a918 <UARTEx_SetNbDataToProcess+0x94>)
 800a8f2:	5c8a      	ldrb	r2, [r1, r2]
 800a8f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8f8:	7b7a      	ldrb	r2, [r7, #13]
 800a8fa:	4908      	ldr	r1, [pc, #32]	@ (800a91c <UARTEx_SetNbDataToProcess+0x98>)
 800a8fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800a902:	b29a      	uxth	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	0800f5b4 	.word	0x0800f5b4
 800a91c:	0800f5bc 	.word	0x0800f5bc

0800a920 <arm_rfft_32_fast_init_f32>:
 800a920:	b178      	cbz	r0, 800a942 <arm_rfft_32_fast_init_f32+0x22>
 800a922:	b430      	push	{r4, r5}
 800a924:	4908      	ldr	r1, [pc, #32]	@ (800a948 <arm_rfft_32_fast_init_f32+0x28>)
 800a926:	4a09      	ldr	r2, [pc, #36]	@ (800a94c <arm_rfft_32_fast_init_f32+0x2c>)
 800a928:	2310      	movs	r3, #16
 800a92a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a92e:	8003      	strh	r3, [r0, #0]
 800a930:	2520      	movs	r5, #32
 800a932:	2414      	movs	r4, #20
 800a934:	4b06      	ldr	r3, [pc, #24]	@ (800a950 <arm_rfft_32_fast_init_f32+0x30>)
 800a936:	8205      	strh	r5, [r0, #16]
 800a938:	8184      	strh	r4, [r0, #12]
 800a93a:	6143      	str	r3, [r0, #20]
 800a93c:	bc30      	pop	{r4, r5}
 800a93e:	2000      	movs	r0, #0
 800a940:	4770      	bx	lr
 800a942:	f04f 30ff 	mov.w	r0, #4294967295
 800a946:	4770      	bx	lr
 800a948:	08010574 	.word	0x08010574
 800a94c:	08014eac 	.word	0x08014eac
 800a950:	0801dc2c 	.word	0x0801dc2c

0800a954 <arm_rfft_64_fast_init_f32>:
 800a954:	b178      	cbz	r0, 800a976 <arm_rfft_64_fast_init_f32+0x22>
 800a956:	b430      	push	{r4, r5}
 800a958:	4908      	ldr	r1, [pc, #32]	@ (800a97c <arm_rfft_64_fast_init_f32+0x28>)
 800a95a:	4a09      	ldr	r2, [pc, #36]	@ (800a980 <arm_rfft_64_fast_init_f32+0x2c>)
 800a95c:	2320      	movs	r3, #32
 800a95e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a962:	8003      	strh	r3, [r0, #0]
 800a964:	2540      	movs	r5, #64	@ 0x40
 800a966:	2430      	movs	r4, #48	@ 0x30
 800a968:	4b06      	ldr	r3, [pc, #24]	@ (800a984 <arm_rfft_64_fast_init_f32+0x30>)
 800a96a:	8205      	strh	r5, [r0, #16]
 800a96c:	8184      	strh	r4, [r0, #12]
 800a96e:	6143      	str	r3, [r0, #20]
 800a970:	bc30      	pop	{r4, r5}
 800a972:	2000      	movs	r0, #0
 800a974:	4770      	bx	lr
 800a976:	f04f 30ff 	mov.w	r0, #4294967295
 800a97a:	4770      	bx	lr
 800a97c:	080126cc 	.word	0x080126cc
 800a980:	0801972c 	.word	0x0801972c
 800a984:	080224ac 	.word	0x080224ac

0800a988 <arm_rfft_256_fast_init_f32>:
 800a988:	b180      	cbz	r0, 800a9ac <arm_rfft_256_fast_init_f32+0x24>
 800a98a:	b430      	push	{r4, r5}
 800a98c:	4909      	ldr	r1, [pc, #36]	@ (800a9b4 <arm_rfft_256_fast_init_f32+0x2c>)
 800a98e:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b8 <arm_rfft_256_fast_init_f32+0x30>)
 800a990:	2380      	movs	r3, #128	@ 0x80
 800a992:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a996:	8003      	strh	r3, [r0, #0]
 800a998:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800a99c:	24d0      	movs	r4, #208	@ 0xd0
 800a99e:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <arm_rfft_256_fast_init_f32+0x34>)
 800a9a0:	8205      	strh	r5, [r0, #16]
 800a9a2:	8184      	strh	r4, [r0, #12]
 800a9a4:	6143      	str	r3, [r0, #20]
 800a9a6:	bc30      	pop	{r4, r5}
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4770      	bx	lr
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	080103d4 	.word	0x080103d4
 800a9b8:	08014aac 	.word	0x08014aac
 800a9bc:	0801d82c 	.word	0x0801d82c

0800a9c0 <arm_rfft_512_fast_init_f32>:
 800a9c0:	b190      	cbz	r0, 800a9e8 <arm_rfft_512_fast_init_f32+0x28>
 800a9c2:	b430      	push	{r4, r5}
 800a9c4:	490a      	ldr	r1, [pc, #40]	@ (800a9f0 <arm_rfft_512_fast_init_f32+0x30>)
 800a9c6:	4a0b      	ldr	r2, [pc, #44]	@ (800a9f4 <arm_rfft_512_fast_init_f32+0x34>)
 800a9c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9cc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a9d0:	8003      	strh	r3, [r0, #0]
 800a9d2:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800a9d6:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800a9da:	4b07      	ldr	r3, [pc, #28]	@ (800a9f8 <arm_rfft_512_fast_init_f32+0x38>)
 800a9dc:	8205      	strh	r5, [r0, #16]
 800a9de:	8184      	strh	r4, [r0, #12]
 800a9e0:	6143      	str	r3, [r0, #20]
 800a9e2:	bc30      	pop	{r4, r5}
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4770      	bx	lr
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	0801235c 	.word	0x0801235c
 800a9f4:	08018f2c 	.word	0x08018f2c
 800a9f8:	08021cac 	.word	0x08021cac

0800a9fc <arm_rfft_1024_fast_init_f32>:
 800a9fc:	b190      	cbz	r0, 800aa24 <arm_rfft_1024_fast_init_f32+0x28>
 800a9fe:	b430      	push	{r4, r5}
 800aa00:	490a      	ldr	r1, [pc, #40]	@ (800aa2c <arm_rfft_1024_fast_init_f32+0x30>)
 800aa02:	4a0b      	ldr	r2, [pc, #44]	@ (800aa30 <arm_rfft_1024_fast_init_f32+0x34>)
 800aa04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa08:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aa0c:	8003      	strh	r3, [r0, #0]
 800aa0e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800aa12:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800aa16:	4b07      	ldr	r3, [pc, #28]	@ (800aa34 <arm_rfft_1024_fast_init_f32+0x38>)
 800aa18:	8205      	strh	r5, [r0, #16]
 800aa1a:	8184      	strh	r4, [r0, #12]
 800aa1c:	6143      	str	r3, [r0, #20]
 800aa1e:	bc30      	pop	{r4, r5}
 800aa20:	2000      	movs	r0, #0
 800aa22:	4770      	bx	lr
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	0801272c 	.word	0x0801272c
 800aa30:	0801982c 	.word	0x0801982c
 800aa34:	0801a82c 	.word	0x0801a82c

0800aa38 <arm_rfft_2048_fast_init_f32>:
 800aa38:	b190      	cbz	r0, 800aa60 <arm_rfft_2048_fast_init_f32+0x28>
 800aa3a:	b430      	push	{r4, r5}
 800aa3c:	490a      	ldr	r1, [pc, #40]	@ (800aa68 <arm_rfft_2048_fast_init_f32+0x30>)
 800aa3e:	4a0b      	ldr	r2, [pc, #44]	@ (800aa6c <arm_rfft_2048_fast_init_f32+0x34>)
 800aa40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa44:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aa48:	8003      	strh	r3, [r0, #0]
 800aa4a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800aa4e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800aa52:	4b07      	ldr	r3, [pc, #28]	@ (800aa70 <arm_rfft_2048_fast_init_f32+0x38>)
 800aa54:	8205      	strh	r5, [r0, #16]
 800aa56:	8184      	strh	r4, [r0, #12]
 800aa58:	6143      	str	r3, [r0, #20]
 800aa5a:	bc30      	pop	{r4, r5}
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4770      	bx	lr
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	0800f5c4 	.word	0x0800f5c4
 800aa6c:	08012aac 	.word	0x08012aac
 800aa70:	0801b82c 	.word	0x0801b82c

0800aa74 <arm_rfft_4096_fast_init_f32>:
 800aa74:	b190      	cbz	r0, 800aa9c <arm_rfft_4096_fast_init_f32+0x28>
 800aa76:	b430      	push	{r4, r5}
 800aa78:	490a      	ldr	r1, [pc, #40]	@ (800aaa4 <arm_rfft_4096_fast_init_f32+0x30>)
 800aa7a:	4a0b      	ldr	r2, [pc, #44]	@ (800aaa8 <arm_rfft_4096_fast_init_f32+0x34>)
 800aa7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa80:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aa84:	8003      	strh	r3, [r0, #0]
 800aa86:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800aa8a:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800aa8e:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <arm_rfft_4096_fast_init_f32+0x38>)
 800aa90:	8205      	strh	r5, [r0, #16]
 800aa92:	8184      	strh	r4, [r0, #12]
 800aa94:	6143      	str	r3, [r0, #20]
 800aa96:	bc30      	pop	{r4, r5}
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4770      	bx	lr
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	0801059c 	.word	0x0801059c
 800aaa8:	08014f2c 	.word	0x08014f2c
 800aaac:	0801dcac 	.word	0x0801dcac

0800aab0 <arm_rfft_fast_init_f32>:
 800aab0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800aab4:	d01f      	beq.n	800aaf6 <arm_rfft_fast_init_f32+0x46>
 800aab6:	d90b      	bls.n	800aad0 <arm_rfft_fast_init_f32+0x20>
 800aab8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800aabc:	d019      	beq.n	800aaf2 <arm_rfft_fast_init_f32+0x42>
 800aabe:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800aac2:	d012      	beq.n	800aaea <arm_rfft_fast_init_f32+0x3a>
 800aac4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aac8:	d00d      	beq.n	800aae6 <arm_rfft_fast_init_f32+0x36>
 800aaca:	f04f 30ff 	mov.w	r0, #4294967295
 800aace:	4770      	bx	lr
 800aad0:	2940      	cmp	r1, #64	@ 0x40
 800aad2:	d00c      	beq.n	800aaee <arm_rfft_fast_init_f32+0x3e>
 800aad4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800aad8:	d003      	beq.n	800aae2 <arm_rfft_fast_init_f32+0x32>
 800aada:	2920      	cmp	r1, #32
 800aadc:	d1f5      	bne.n	800aaca <arm_rfft_fast_init_f32+0x1a>
 800aade:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <arm_rfft_fast_init_f32+0x4c>)
 800aae0:	4718      	bx	r3
 800aae2:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <arm_rfft_fast_init_f32+0x50>)
 800aae4:	4718      	bx	r3
 800aae6:	4b07      	ldr	r3, [pc, #28]	@ (800ab04 <arm_rfft_fast_init_f32+0x54>)
 800aae8:	4718      	bx	r3
 800aaea:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <arm_rfft_fast_init_f32+0x58>)
 800aaec:	4718      	bx	r3
 800aaee:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <arm_rfft_fast_init_f32+0x5c>)
 800aaf0:	e7f6      	b.n	800aae0 <arm_rfft_fast_init_f32+0x30>
 800aaf2:	4b07      	ldr	r3, [pc, #28]	@ (800ab10 <arm_rfft_fast_init_f32+0x60>)
 800aaf4:	e7f4      	b.n	800aae0 <arm_rfft_fast_init_f32+0x30>
 800aaf6:	4b07      	ldr	r3, [pc, #28]	@ (800ab14 <arm_rfft_fast_init_f32+0x64>)
 800aaf8:	e7f2      	b.n	800aae0 <arm_rfft_fast_init_f32+0x30>
 800aafa:	bf00      	nop
 800aafc:	0800a921 	.word	0x0800a921
 800ab00:	0800a989 	.word	0x0800a989
 800ab04:	0800a9fd 	.word	0x0800a9fd
 800ab08:	0800aa75 	.word	0x0800aa75
 800ab0c:	0800a955 	.word	0x0800a955
 800ab10:	0800aa39 	.word	0x0800aa39
 800ab14:	0800a9c1 	.word	0x0800a9c1

0800ab18 <stage_rfft_f32>:
 800ab18:	b410      	push	{r4}
 800ab1a:	edd1 7a00 	vldr	s15, [r1]
 800ab1e:	ed91 7a01 	vldr	s14, [r1, #4]
 800ab22:	8804      	ldrh	r4, [r0, #0]
 800ab24:	6940      	ldr	r0, [r0, #20]
 800ab26:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ab2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab2e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ab32:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab3a:	3c01      	subs	r4, #1
 800ab3c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ab40:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ab44:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ab48:	ed82 7a00 	vstr	s14, [r2]
 800ab4c:	edc2 7a01 	vstr	s15, [r2, #4]
 800ab50:	3010      	adds	r0, #16
 800ab52:	3210      	adds	r2, #16
 800ab54:	3b08      	subs	r3, #8
 800ab56:	3110      	adds	r1, #16
 800ab58:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ab5c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ab60:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ab64:	edd3 4a03 	vldr	s9, [r3, #12]
 800ab68:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ab6c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ab70:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ab74:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ab78:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ab7c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ab80:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ab84:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ab88:	ee37 7a23 	vadd.f32	s14, s14, s7
 800ab8c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ab90:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ab94:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ab98:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ab9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aba0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800aba4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800aba8:	3c01      	subs	r4, #1
 800abaa:	ed02 7a02 	vstr	s14, [r2, #-8]
 800abae:	ed42 7a01 	vstr	s15, [r2, #-4]
 800abb2:	f1a3 0308 	sub.w	r3, r3, #8
 800abb6:	f101 0108 	add.w	r1, r1, #8
 800abba:	f100 0008 	add.w	r0, r0, #8
 800abbe:	f102 0208 	add.w	r2, r2, #8
 800abc2:	d1c9      	bne.n	800ab58 <stage_rfft_f32+0x40>
 800abc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <merge_rfft_f32>:
 800abcc:	b410      	push	{r4}
 800abce:	edd1 7a00 	vldr	s15, [r1]
 800abd2:	edd1 6a01 	vldr	s13, [r1, #4]
 800abd6:	8804      	ldrh	r4, [r0, #0]
 800abd8:	6940      	ldr	r0, [r0, #20]
 800abda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800abde:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abe2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800abe6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800abea:	ee67 7a84 	vmul.f32	s15, s15, s8
 800abee:	3c01      	subs	r4, #1
 800abf0:	ed82 7a00 	vstr	s14, [r2]
 800abf4:	edc2 7a01 	vstr	s15, [r2, #4]
 800abf8:	b3dc      	cbz	r4, 800ac72 <merge_rfft_f32+0xa6>
 800abfa:	00e3      	lsls	r3, r4, #3
 800abfc:	3b08      	subs	r3, #8
 800abfe:	440b      	add	r3, r1
 800ac00:	3010      	adds	r0, #16
 800ac02:	3210      	adds	r2, #16
 800ac04:	3110      	adds	r1, #16
 800ac06:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ac0a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac0e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ac12:	edd3 4a03 	vldr	s9, [r3, #12]
 800ac16:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ac1a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ac1e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ac22:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ac26:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ac2a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ac2e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ac32:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ac36:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ac3a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ac3e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ac42:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ac46:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ac4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac4e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ac52:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac56:	3c01      	subs	r4, #1
 800ac58:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ac5c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ac60:	f1a3 0308 	sub.w	r3, r3, #8
 800ac64:	f101 0108 	add.w	r1, r1, #8
 800ac68:	f100 0008 	add.w	r0, r0, #8
 800ac6c:	f102 0208 	add.w	r2, r2, #8
 800ac70:	d1c9      	bne.n	800ac06 <merge_rfft_f32+0x3a>
 800ac72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <arm_rfft_fast_f32>:
 800ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	8a05      	ldrh	r5, [r0, #16]
 800ac7e:	086d      	lsrs	r5, r5, #1
 800ac80:	8005      	strh	r5, [r0, #0]
 800ac82:	4604      	mov	r4, r0
 800ac84:	4616      	mov	r6, r2
 800ac86:	461d      	mov	r5, r3
 800ac88:	b14b      	cbz	r3, 800ac9e <arm_rfft_fast_f32+0x26>
 800ac8a:	f7ff ff9f 	bl	800abcc <merge_rfft_f32>
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4631      	mov	r1, r6
 800ac92:	4620      	mov	r0, r4
 800ac94:	2301      	movs	r3, #1
 800ac96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	f000 bb33 	b.w	800b304 <arm_cfft_f32>
 800ac9e:	460f      	mov	r7, r1
 800aca0:	461a      	mov	r2, r3
 800aca2:	2301      	movs	r3, #1
 800aca4:	f000 fb2e 	bl	800b304 <arm_cfft_f32>
 800aca8:	4632      	mov	r2, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	4620      	mov	r0, r4
 800acae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	f7ff bf31 	b.w	800ab18 <stage_rfft_f32>
 800acb6:	bf00      	nop

0800acb8 <arm_cfft_radix8by2_f32>:
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	ed2d 8b08 	vpush	{d8-d11}
 800acc0:	4607      	mov	r7, r0
 800acc2:	4608      	mov	r0, r1
 800acc4:	f8b7 c000 	ldrh.w	ip, [r7]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800acce:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800acd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800acd6:	f000 80b0 	beq.w	800ae3a <arm_cfft_radix8by2_f32+0x182>
 800acda:	008c      	lsls	r4, r1, #2
 800acdc:	3410      	adds	r4, #16
 800acde:	f100 0310 	add.w	r3, r0, #16
 800ace2:	1906      	adds	r6, r0, r4
 800ace4:	3210      	adds	r2, #16
 800ace6:	4444      	add	r4, r8
 800ace8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800acec:	f108 0510 	add.w	r5, r8, #16
 800acf0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800acf4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800acf8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800acfc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ad00:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ad04:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ad08:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ad0c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ad10:	ed55 0a01 	vldr	s1, [r5, #-4]
 800ad14:	ed56 6a04 	vldr	s13, [r6, #-16]
 800ad18:	ed16 3a03 	vldr	s6, [r6, #-12]
 800ad1c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ad20:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ad24:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ad28:	ed16 1a02 	vldr	s2, [r6, #-8]
 800ad2c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800ad30:	ee73 ba82 	vadd.f32	s23, s7, s4
 800ad34:	ee37 ba22 	vadd.f32	s22, s14, s5
 800ad38:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800ad3c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800ad40:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800ad44:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ad48:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ad4c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800ad50:	ed43 ba04 	vstr	s23, [r3, #-16]
 800ad54:	ed03 ba03 	vstr	s22, [r3, #-12]
 800ad58:	ed43 aa02 	vstr	s21, [r3, #-8]
 800ad5c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800ad60:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ad64:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ad68:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ad6c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ad70:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ad74:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ad78:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ad7c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800ad80:	ed12 3a04 	vldr	s6, [r2, #-16]
 800ad84:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ad88:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ad8c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800ad90:	ee23 2a83 	vmul.f32	s4, s7, s6
 800ad94:	ee64 4a83 	vmul.f32	s9, s9, s6
 800ad98:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800ad9c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ada0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ada4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ada8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800adac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800adb0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800adb4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800adb8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800adbc:	ed05 3a04 	vstr	s6, [r5, #-16]
 800adc0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800adc4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800adc8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800adcc:	ee76 6a41 	vsub.f32	s13, s12, s2
 800add0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800add4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800add8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800addc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ade0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ade4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800ade8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800adec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800adf0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800adf4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800adf8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800adfc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ae00:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ae04:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ae08:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800ae0c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ae10:	3310      	adds	r3, #16
 800ae12:	4563      	cmp	r3, ip
 800ae14:	ed45 5a02 	vstr	s11, [r5, #-8]
 800ae18:	f106 0610 	add.w	r6, r6, #16
 800ae1c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ae20:	f102 0210 	add.w	r2, r2, #16
 800ae24:	ed04 6a02 	vstr	s12, [r4, #-8]
 800ae28:	ed04 7a01 	vstr	s14, [r4, #-4]
 800ae2c:	f105 0510 	add.w	r5, r5, #16
 800ae30:	f104 0410 	add.w	r4, r4, #16
 800ae34:	f47f af5c 	bne.w	800acf0 <arm_cfft_radix8by2_f32+0x38>
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	b28c      	uxth	r4, r1
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	2302      	movs	r3, #2
 800ae40:	f000 fb3c 	bl	800b4bc <arm_radix8_butterfly_f32>
 800ae44:	ecbd 8b08 	vpop	{d8-d11}
 800ae48:	4621      	mov	r1, r4
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	f000 bb32 	b.w	800b4bc <arm_radix8_butterfly_f32>

0800ae58 <arm_cfft_radix8by4_f32>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	ed2d 8b0a 	vpush	{d8-d12}
 800ae60:	b08d      	sub	sp, #52	@ 0x34
 800ae62:	460d      	mov	r5, r1
 800ae64:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae66:	8801      	ldrh	r1, [r0, #0]
 800ae68:	6842      	ldr	r2, [r0, #4]
 800ae6a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae6c:	0849      	lsrs	r1, r1, #1
 800ae6e:	008b      	lsls	r3, r1, #2
 800ae70:	18ee      	adds	r6, r5, r3
 800ae72:	18f0      	adds	r0, r6, r3
 800ae74:	edd0 5a00 	vldr	s11, [r0]
 800ae78:	edd5 7a00 	vldr	s15, [r5]
 800ae7c:	ed96 7a00 	vldr	s14, [r6]
 800ae80:	edd0 3a01 	vldr	s7, [r0, #4]
 800ae84:	ed96 4a01 	vldr	s8, [r6, #4]
 800ae88:	ed95 5a01 	vldr	s10, [r5, #4]
 800ae8c:	9008      	str	r0, [sp, #32]
 800ae8e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800ae92:	18c7      	adds	r7, r0, r3
 800ae94:	edd7 4a00 	vldr	s9, [r7]
 800ae98:	ed97 3a01 	vldr	s6, [r7, #4]
 800ae9c:	9701      	str	r7, [sp, #4]
 800ae9e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800aea2:	462c      	mov	r4, r5
 800aea4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aea8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aeac:	ee16 ca90 	vmov	ip, s13
 800aeb0:	f844 cb08 	str.w	ip, [r4], #8
 800aeb4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800aeb8:	edd6 5a01 	vldr	s11, [r6, #4]
 800aebc:	edd7 2a01 	vldr	s5, [r7, #4]
 800aec0:	9404      	str	r4, [sp, #16]
 800aec2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800aec6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800aeca:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aece:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aed2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800aed6:	0849      	lsrs	r1, r1, #1
 800aed8:	f102 0e08 	add.w	lr, r2, #8
 800aedc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aee0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800aee4:	9109      	str	r1, [sp, #36]	@ 0x24
 800aee6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800aeea:	f1a1 0902 	sub.w	r9, r1, #2
 800aeee:	f8cd e00c 	str.w	lr, [sp, #12]
 800aef2:	4631      	mov	r1, r6
 800aef4:	ee13 ea90 	vmov	lr, s7
 800aef8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800aefc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800af00:	4604      	mov	r4, r0
 800af02:	edc5 5a01 	vstr	s11, [r5, #4]
 800af06:	ee37 7a05 	vadd.f32	s14, s14, s10
 800af0a:	f841 eb08 	str.w	lr, [r1], #8
 800af0e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800af12:	ee16 ea10 	vmov	lr, s12
 800af16:	ed86 5a01 	vstr	s10, [r6, #4]
 800af1a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800af1e:	f844 eb08 	str.w	lr, [r4], #8
 800af22:	ee77 7a83 	vadd.f32	s15, s15, s6
 800af26:	edc0 6a01 	vstr	s13, [r0, #4]
 800af2a:	9405      	str	r4, [sp, #20]
 800af2c:	4604      	mov	r4, r0
 800af2e:	ee17 0a90 	vmov	r0, s15
 800af32:	9106      	str	r1, [sp, #24]
 800af34:	ee37 7a64 	vsub.f32	s14, s14, s9
 800af38:	f102 0110 	add.w	r1, r2, #16
 800af3c:	46bc      	mov	ip, r7
 800af3e:	9100      	str	r1, [sp, #0]
 800af40:	f847 0b08 	str.w	r0, [r7], #8
 800af44:	f102 0118 	add.w	r1, r2, #24
 800af48:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800af4c:	9102      	str	r1, [sp, #8]
 800af4e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800af52:	9007      	str	r0, [sp, #28]
 800af54:	f000 8134 	beq.w	800b1c0 <arm_cfft_radix8by4_f32+0x368>
 800af58:	f102 0920 	add.w	r9, r2, #32
 800af5c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800af60:	9a01      	ldr	r2, [sp, #4]
 800af62:	f8dd a000 	ldr.w	sl, [sp]
 800af66:	3b0c      	subs	r3, #12
 800af68:	4683      	mov	fp, r0
 800af6a:	4463      	add	r3, ip
 800af6c:	f105 0e10 	add.w	lr, r5, #16
 800af70:	f1a4 010c 	sub.w	r1, r4, #12
 800af74:	f104 0510 	add.w	r5, r4, #16
 800af78:	f1a6 0c0c 	sub.w	ip, r6, #12
 800af7c:	f1a2 040c 	sub.w	r4, r2, #12
 800af80:	f106 0010 	add.w	r0, r6, #16
 800af84:	3210      	adds	r2, #16
 800af86:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800af8a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800af8e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800af92:	ed52 1a02 	vldr	s3, [r2, #-8]
 800af96:	ed55 6a01 	vldr	s13, [r5, #-4]
 800af9a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800af9e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800afa2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800afa6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800afaa:	ee30 6a26 	vadd.f32	s12, s0, s13
 800afae:	ee37 7a84 	vadd.f32	s14, s15, s8
 800afb2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800afb6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800afba:	ee75 5a65 	vsub.f32	s11, s10, s11
 800afbe:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800afc2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800afc6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800afca:	ee36 7a07 	vadd.f32	s14, s12, s14
 800afce:	ee78 aa25 	vadd.f32	s21, s16, s11
 800afd2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800afd6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800afda:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800afde:	ed94 7a02 	vldr	s14, [r4, #8]
 800afe2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800afe6:	ed91 ba02 	vldr	s22, [r1, #8]
 800afea:	edd3 9a02 	vldr	s19, [r3, #8]
 800afee:	edd4 2a01 	vldr	s5, [r4, #4]
 800aff2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800aff6:	ed93 5a01 	vldr	s10, [r3, #4]
 800affa:	edd1 0a01 	vldr	s1, [r1, #4]
 800affe:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b002:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b006:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b00a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b00e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b012:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b016:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b01a:	ed91 7a01 	vldr	s14, [r1, #4]
 800b01e:	edd3 8a01 	vldr	s17, [r3, #4]
 800b022:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b026:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b02a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b02e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b032:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b036:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b03a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b03e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b042:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b046:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b04a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b04e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b052:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b056:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b05a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b05e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b062:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b066:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b06a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b06e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b072:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b076:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b07a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b07e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b082:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b086:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b08a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b08e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b092:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b096:	edc1 8a01 	vstr	s17, [r1, #4]
 800b09a:	ed81 aa02 	vstr	s20, [r1, #8]
 800b09e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b0a2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b0a6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b0aa:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b0ae:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b0b2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b0b6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b0ba:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b0be:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b0c2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b0c6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b0ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b0ce:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b0d2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b0d6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b0da:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b0de:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b0e2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b0e6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b0ea:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b0ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b0f2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b0f6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b0fa:	ed84 7a01 	vstr	s14, [r4, #4]
 800b0fe:	ed84 4a02 	vstr	s8, [r4, #8]
 800b102:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b106:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b10a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b10e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b112:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b116:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b11a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b11e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b122:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b126:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b12a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b12e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b132:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b136:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b13a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b13e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b142:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b146:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b14a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b14e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b152:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b156:	f10e 0e08 	add.w	lr, lr, #8
 800b15a:	ed83 3a02 	vstr	s6, [r3, #8]
 800b15e:	ed83 7a01 	vstr	s14, [r3, #4]
 800b162:	f1ac 0c08 	sub.w	ip, ip, #8
 800b166:	f10a 0a08 	add.w	sl, sl, #8
 800b16a:	f100 0008 	add.w	r0, r0, #8
 800b16e:	f1a1 0108 	sub.w	r1, r1, #8
 800b172:	f109 0910 	add.w	r9, r9, #16
 800b176:	f105 0508 	add.w	r5, r5, #8
 800b17a:	f1a4 0408 	sub.w	r4, r4, #8
 800b17e:	f108 0818 	add.w	r8, r8, #24
 800b182:	f102 0208 	add.w	r2, r2, #8
 800b186:	f1a3 0308 	sub.w	r3, r3, #8
 800b18a:	f47f aefc 	bne.w	800af86 <arm_cfft_radix8by4_f32+0x12e>
 800b18e:	9907      	ldr	r1, [sp, #28]
 800b190:	9800      	ldr	r0, [sp, #0]
 800b192:	00cb      	lsls	r3, r1, #3
 800b194:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b198:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b19c:	9100      	str	r1, [sp, #0]
 800b19e:	9904      	ldr	r1, [sp, #16]
 800b1a0:	4419      	add	r1, r3
 800b1a2:	9104      	str	r1, [sp, #16]
 800b1a4:	9903      	ldr	r1, [sp, #12]
 800b1a6:	4419      	add	r1, r3
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	9906      	ldr	r1, [sp, #24]
 800b1ac:	4419      	add	r1, r3
 800b1ae:	9106      	str	r1, [sp, #24]
 800b1b0:	9905      	ldr	r1, [sp, #20]
 800b1b2:	441f      	add	r7, r3
 800b1b4:	4419      	add	r1, r3
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	9105      	str	r1, [sp, #20]
 800b1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	9904      	ldr	r1, [sp, #16]
 800b1c2:	9805      	ldr	r0, [sp, #20]
 800b1c4:	ed91 4a00 	vldr	s8, [r1]
 800b1c8:	edd0 6a00 	vldr	s13, [r0]
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	ed97 3a00 	vldr	s6, [r7]
 800b1d2:	edd3 7a00 	vldr	s15, [r3]
 800b1d6:	edd0 4a01 	vldr	s9, [r0, #4]
 800b1da:	edd1 3a01 	vldr	s7, [r1, #4]
 800b1de:	ed97 2a01 	vldr	s4, [r7, #4]
 800b1e2:	ed93 7a01 	vldr	s14, [r3, #4]
 800b1e6:	9a03      	ldr	r2, [sp, #12]
 800b1e8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b1ec:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b1f0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b1f4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b1f8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b1fc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b200:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b204:	ed81 5a00 	vstr	s10, [r1]
 800b208:	ed93 5a01 	vldr	s10, [r3, #4]
 800b20c:	edd7 4a01 	vldr	s9, [r7, #4]
 800b210:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b214:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b218:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b21c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b220:	ed81 5a01 	vstr	s10, [r1, #4]
 800b224:	edd2 1a00 	vldr	s3, [r2]
 800b228:	edd2 2a01 	vldr	s5, [r2, #4]
 800b22c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b230:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b234:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b238:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b23c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b240:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b244:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b248:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b24c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b250:	edc3 2a00 	vstr	s5, [r3]
 800b254:	ed83 5a01 	vstr	s10, [r3, #4]
 800b258:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b262:	ed93 4a01 	vldr	s8, [r3, #4]
 800b266:	ed93 5a00 	vldr	s10, [r3]
 800b26a:	9b02      	ldr	r3, [sp, #8]
 800b26c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b270:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b274:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b278:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b27c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b280:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b284:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b288:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b28c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b290:	ed80 6a01 	vstr	s12, [r0, #4]
 800b294:	edc0 5a00 	vstr	s11, [r0]
 800b298:	edd3 5a01 	vldr	s11, [r3, #4]
 800b29c:	edd3 6a00 	vldr	s13, [r3]
 800b2a0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b2a4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b2a8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b2ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b2b0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b2b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b2b8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b2bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b2c0:	ed87 7a01 	vstr	s14, [r7, #4]
 800b2c4:	edc7 7a00 	vstr	s15, [r7]
 800b2c8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	686a      	ldr	r2, [r5, #4]
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	f000 f8f3 	bl	800b4bc <arm_radix8_butterfly_f32>
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4621      	mov	r1, r4
 800b2da:	686a      	ldr	r2, [r5, #4]
 800b2dc:	2304      	movs	r3, #4
 800b2de:	f000 f8ed 	bl	800b4bc <arm_radix8_butterfly_f32>
 800b2e2:	9808      	ldr	r0, [sp, #32]
 800b2e4:	686a      	ldr	r2, [r5, #4]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	2304      	movs	r3, #4
 800b2ea:	f000 f8e7 	bl	800b4bc <arm_radix8_butterfly_f32>
 800b2ee:	686a      	ldr	r2, [r5, #4]
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	b00d      	add	sp, #52	@ 0x34
 800b2f8:	ecbd 8b0a 	vpop	{d8-d12}
 800b2fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	f000 b8dc 	b.w	800b4bc <arm_radix8_butterfly_f32>

0800b304 <arm_cfft_f32>:
 800b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b308:	2a01      	cmp	r2, #1
 800b30a:	4606      	mov	r6, r0
 800b30c:	4617      	mov	r7, r2
 800b30e:	460c      	mov	r4, r1
 800b310:	4698      	mov	r8, r3
 800b312:	8805      	ldrh	r5, [r0, #0]
 800b314:	d056      	beq.n	800b3c4 <arm_cfft_f32+0xc0>
 800b316:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b31a:	d063      	beq.n	800b3e4 <arm_cfft_f32+0xe0>
 800b31c:	d916      	bls.n	800b34c <arm_cfft_f32+0x48>
 800b31e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b322:	d01a      	beq.n	800b35a <arm_cfft_f32+0x56>
 800b324:	d947      	bls.n	800b3b6 <arm_cfft_f32+0xb2>
 800b326:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b32a:	d05b      	beq.n	800b3e4 <arm_cfft_f32+0xe0>
 800b32c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b330:	d105      	bne.n	800b33e <arm_cfft_f32+0x3a>
 800b332:	2301      	movs	r3, #1
 800b334:	6872      	ldr	r2, [r6, #4]
 800b336:	4629      	mov	r1, r5
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 f8bf 	bl	800b4bc <arm_radix8_butterfly_f32>
 800b33e:	f1b8 0f00 	cmp.w	r8, #0
 800b342:	d111      	bne.n	800b368 <arm_cfft_f32+0x64>
 800b344:	2f01      	cmp	r7, #1
 800b346:	d016      	beq.n	800b376 <arm_cfft_f32+0x72>
 800b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34c:	2d20      	cmp	r5, #32
 800b34e:	d049      	beq.n	800b3e4 <arm_cfft_f32+0xe0>
 800b350:	d935      	bls.n	800b3be <arm_cfft_f32+0xba>
 800b352:	2d40      	cmp	r5, #64	@ 0x40
 800b354:	d0ed      	beq.n	800b332 <arm_cfft_f32+0x2e>
 800b356:	2d80      	cmp	r5, #128	@ 0x80
 800b358:	d1f1      	bne.n	800b33e <arm_cfft_f32+0x3a>
 800b35a:	4621      	mov	r1, r4
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fcab 	bl	800acb8 <arm_cfft_radix8by2_f32>
 800b362:	f1b8 0f00 	cmp.w	r8, #0
 800b366:	d0ed      	beq.n	800b344 <arm_cfft_f32+0x40>
 800b368:	68b2      	ldr	r2, [r6, #8]
 800b36a:	89b1      	ldrh	r1, [r6, #12]
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 f841 	bl	800b3f4 <arm_bitreversal_32>
 800b372:	2f01      	cmp	r7, #1
 800b374:	d1e8      	bne.n	800b348 <arm_cfft_f32+0x44>
 800b376:	ee07 5a90 	vmov	s15, r5
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b386:	2d00      	cmp	r5, #0
 800b388:	d0de      	beq.n	800b348 <arm_cfft_f32+0x44>
 800b38a:	f104 0108 	add.w	r1, r4, #8
 800b38e:	2300      	movs	r3, #0
 800b390:	3301      	adds	r3, #1
 800b392:	429d      	cmp	r5, r3
 800b394:	f101 0108 	add.w	r1, r1, #8
 800b398:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b39c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b3a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b3a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b3a8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b3ac:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b3b0:	d1ee      	bne.n	800b390 <arm_cfft_f32+0x8c>
 800b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b3ba:	d0ba      	beq.n	800b332 <arm_cfft_f32+0x2e>
 800b3bc:	e7bf      	b.n	800b33e <arm_cfft_f32+0x3a>
 800b3be:	2d10      	cmp	r5, #16
 800b3c0:	d0cb      	beq.n	800b35a <arm_cfft_f32+0x56>
 800b3c2:	e7bc      	b.n	800b33e <arm_cfft_f32+0x3a>
 800b3c4:	b19d      	cbz	r5, 800b3ee <arm_cfft_f32+0xea>
 800b3c6:	f101 030c 	add.w	r3, r1, #12
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b3d0:	3201      	adds	r2, #1
 800b3d2:	eef1 7a67 	vneg.f32	s15, s15
 800b3d6:	4295      	cmp	r5, r2
 800b3d8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b3dc:	f103 0308 	add.w	r3, r3, #8
 800b3e0:	d1f4      	bne.n	800b3cc <arm_cfft_f32+0xc8>
 800b3e2:	e798      	b.n	800b316 <arm_cfft_f32+0x12>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff fd36 	bl	800ae58 <arm_cfft_radix8by4_f32>
 800b3ec:	e7a7      	b.n	800b33e <arm_cfft_f32+0x3a>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0aa      	beq.n	800b348 <arm_cfft_f32+0x44>
 800b3f2:	e7b9      	b.n	800b368 <arm_cfft_f32+0x64>

0800b3f4 <arm_bitreversal_32>:
 800b3f4:	b1e9      	cbz	r1, 800b432 <arm_bitreversal_32+0x3e>
 800b3f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	f102 0e02 	add.w	lr, r2, #2
 800b3fe:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b402:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b406:	08a4      	lsrs	r4, r4, #2
 800b408:	089b      	lsrs	r3, r3, #2
 800b40a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b40e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b412:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b416:	00a6      	lsls	r6, r4, #2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b41e:	3304      	adds	r3, #4
 800b420:	1d34      	adds	r4, r6, #4
 800b422:	3502      	adds	r5, #2
 800b424:	58c6      	ldr	r6, [r0, r3]
 800b426:	5907      	ldr	r7, [r0, r4]
 800b428:	50c7      	str	r7, [r0, r3]
 800b42a:	428d      	cmp	r5, r1
 800b42c:	5106      	str	r6, [r0, r4]
 800b42e:	d3e6      	bcc.n	800b3fe <arm_bitreversal_32+0xa>
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b432:	4770      	bx	lr

0800b434 <arm_abs_f32>:
 800b434:	b470      	push	{r4, r5, r6}
 800b436:	0896      	lsrs	r6, r2, #2
 800b438:	d025      	beq.n	800b486 <arm_abs_f32+0x52>
 800b43a:	f100 0410 	add.w	r4, r0, #16
 800b43e:	f101 0310 	add.w	r3, r1, #16
 800b442:	4635      	mov	r5, r6
 800b444:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b448:	eef0 7ae7 	vabs.f32	s15, s15
 800b44c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b450:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b454:	eef0 7ae7 	vabs.f32	s15, s15
 800b458:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b45c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b460:	eef0 7ae7 	vabs.f32	s15, s15
 800b464:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b468:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b46c:	3d01      	subs	r5, #1
 800b46e:	eef0 7ae7 	vabs.f32	s15, s15
 800b472:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b476:	f104 0410 	add.w	r4, r4, #16
 800b47a:	f103 0310 	add.w	r3, r3, #16
 800b47e:	d1e1      	bne.n	800b444 <arm_abs_f32+0x10>
 800b480:	0136      	lsls	r6, r6, #4
 800b482:	4430      	add	r0, r6
 800b484:	4431      	add	r1, r6
 800b486:	f012 0203 	ands.w	r2, r2, #3
 800b48a:	d015      	beq.n	800b4b8 <arm_abs_f32+0x84>
 800b48c:	edd0 7a00 	vldr	s15, [r0]
 800b490:	3a01      	subs	r2, #1
 800b492:	eef0 7ae7 	vabs.f32	s15, s15
 800b496:	edc1 7a00 	vstr	s15, [r1]
 800b49a:	d00d      	beq.n	800b4b8 <arm_abs_f32+0x84>
 800b49c:	edd0 7a01 	vldr	s15, [r0, #4]
 800b4a0:	2a01      	cmp	r2, #1
 800b4a2:	eef0 7ae7 	vabs.f32	s15, s15
 800b4a6:	edc1 7a01 	vstr	s15, [r1, #4]
 800b4aa:	d005      	beq.n	800b4b8 <arm_abs_f32+0x84>
 800b4ac:	edd0 7a02 	vldr	s15, [r0, #8]
 800b4b0:	eef0 7ae7 	vabs.f32	s15, s15
 800b4b4:	edc1 7a02 	vstr	s15, [r1, #8]
 800b4b8:	bc70      	pop	{r4, r5, r6}
 800b4ba:	4770      	bx	lr

0800b4bc <arm_radix8_butterfly_f32>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	ed2d 8b10 	vpush	{d8-d15}
 800b4c4:	b095      	sub	sp, #84	@ 0x54
 800b4c6:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800b7b4 <arm_radix8_butterfly_f32+0x2f8>
 800b4d2:	9012      	str	r0, [sp, #72]	@ 0x48
 800b4d4:	468b      	mov	fp, r1
 800b4d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4d8:	4689      	mov	r9, r1
 800b4da:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b4de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4e0:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b4e2:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b4e6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b4ea:	eb03 0508 	add.w	r5, r3, r8
 800b4ee:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b4f2:	eb05 040e 	add.w	r4, r5, lr
 800b4f6:	0137      	lsls	r7, r6, #4
 800b4f8:	eba6 030a 	sub.w	r3, r6, sl
 800b4fc:	eb04 000e 	add.w	r0, r4, lr
 800b500:	44b2      	add	sl, r6
 800b502:	1d3a      	adds	r2, r7, #4
 800b504:	9702      	str	r7, [sp, #8]
 800b506:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b50a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b50e:	ebae 0c06 	sub.w	ip, lr, r6
 800b512:	9703      	str	r7, [sp, #12]
 800b514:	eb03 0708 	add.w	r7, r3, r8
 800b518:	9701      	str	r7, [sp, #4]
 800b51a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b51e:	9706      	str	r7, [sp, #24]
 800b520:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b522:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b526:	f10e 0104 	add.w	r1, lr, #4
 800b52a:	4439      	add	r1, r7
 800b52c:	443a      	add	r2, r7
 800b52e:	0137      	lsls	r7, r6, #4
 800b530:	00f6      	lsls	r6, r6, #3
 800b532:	9704      	str	r7, [sp, #16]
 800b534:	9605      	str	r6, [sp, #20]
 800b536:	9f01      	ldr	r7, [sp, #4]
 800b538:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b53a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	edd4 6a00 	vldr	s13, [r4]
 800b546:	edd7 1a00 	vldr	s3, [r7]
 800b54a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b54e:	edd5 5a00 	vldr	s11, [r5]
 800b552:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b556:	ed90 6a00 	vldr	s12, [r0]
 800b55a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b55e:	ed93 3a00 	vldr	s6, [r3]
 800b562:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b566:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b56a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b56e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b572:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b576:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b57a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b57e:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b582:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b586:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b58a:	ed85 4a00 	vstr	s8, [r5]
 800b58e:	edd1 6a00 	vldr	s13, [r1]
 800b592:	ed94 9a01 	vldr	s18, [r4, #4]
 800b596:	edd3 2a01 	vldr	s5, [r3, #4]
 800b59a:	edd7 8a01 	vldr	s17, [r7, #4]
 800b59e:	edd6 0a00 	vldr	s1, [r6]
 800b5a2:	edd5 3a01 	vldr	s7, [r5, #4]
 800b5a6:	ed90 8a01 	vldr	s16, [r0, #4]
 800b5aa:	ed92 7a00 	vldr	s14, [r2]
 800b5ae:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b5b2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b5b6:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b5ba:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b5be:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b5c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b5c6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b5ca:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b5ce:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b5d2:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b5d6:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b5da:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b5de:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b5e2:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b5e6:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b5ea:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b5ee:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b5f2:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b5f6:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b5fa:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b5fe:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b602:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b606:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b60a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b60e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b612:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b616:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b61a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b61e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b622:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b626:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b62a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b62e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b632:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b636:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b63a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b63e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b642:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b646:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b64a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b64e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b652:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b656:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b65a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b65e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b662:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b666:	44dc      	add	ip, fp
 800b668:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b66c:	45e1      	cmp	r9, ip
 800b66e:	ed86 8a00 	vstr	s16, [r6]
 800b672:	ed85 2a01 	vstr	s4, [r5, #4]
 800b676:	4456      	add	r6, sl
 800b678:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b67c:	4455      	add	r5, sl
 800b67e:	edc0 6a00 	vstr	s13, [r0]
 800b682:	ed82 1a00 	vstr	s2, [r2]
 800b686:	ed80 5a01 	vstr	s10, [r0, #4]
 800b68a:	4452      	add	r2, sl
 800b68c:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b690:	4450      	add	r0, sl
 800b692:	edc7 2a00 	vstr	s5, [r7]
 800b696:	edc4 4a00 	vstr	s9, [r4]
 800b69a:	ed83 7a00 	vstr	s14, [r3]
 800b69e:	edc1 5a00 	vstr	s11, [r1]
 800b6a2:	edc7 3a01 	vstr	s7, [r7, #4]
 800b6a6:	4451      	add	r1, sl
 800b6a8:	ed84 6a01 	vstr	s12, [r4, #4]
 800b6ac:	4457      	add	r7, sl
 800b6ae:	edc3 7a01 	vstr	s15, [r3, #4]
 800b6b2:	4454      	add	r4, sl
 800b6b4:	4453      	add	r3, sl
 800b6b6:	f63f af44 	bhi.w	800b542 <arm_radix8_butterfly_f32+0x86>
 800b6ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6bc:	2b07      	cmp	r3, #7
 800b6be:	f240 81b7 	bls.w	800ba30 <arm_radix8_butterfly_f32+0x574>
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	9903      	ldr	r1, [sp, #12]
 800b6c6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b6c8:	9e05      	ldr	r6, [sp, #20]
 800b6ca:	9a04      	ldr	r2, [sp, #16]
 800b6cc:	f103 0c08 	add.w	ip, r3, #8
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	3108      	adds	r1, #8
 800b6d4:	f108 0808 	add.w	r8, r8, #8
 800b6d8:	1841      	adds	r1, r0, r1
 800b6da:	3608      	adds	r6, #8
 800b6dc:	330c      	adds	r3, #12
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4444      	add	r4, r8
 800b6e2:	18c3      	adds	r3, r0, r3
 800b6e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6e6:	1981      	adds	r1, r0, r6
 800b6e8:	f10e 0e08 	add.w	lr, lr, #8
 800b6ec:	3208      	adds	r2, #8
 800b6ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6f0:	9107      	str	r1, [sp, #28]
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	f100 030c 	add.w	r3, r0, #12
 800b6fc:	4474      	add	r4, lr
 800b6fe:	f04f 0801 	mov.w	r8, #1
 800b702:	1882      	adds	r2, r0, r2
 800b704:	4461      	add	r1, ip
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	464b      	mov	r3, r9
 800b70a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b70c:	46c1      	mov	r9, r8
 800b70e:	9208      	str	r2, [sp, #32]
 800b710:	46d8      	mov	r8, fp
 800b712:	9106      	str	r1, [sp, #24]
 800b714:	f04f 0e00 	mov.w	lr, #0
 800b718:	469b      	mov	fp, r3
 800b71a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b71c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b71e:	449e      	add	lr, r3
 800b720:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b724:	441a      	add	r2, r3
 800b726:	920e      	str	r2, [sp, #56]	@ 0x38
 800b728:	441a      	add	r2, r3
 800b72a:	18d4      	adds	r4, r2, r3
 800b72c:	18e5      	adds	r5, r4, r3
 800b72e:	18ee      	adds	r6, r5, r3
 800b730:	18f7      	adds	r7, r6, r3
 800b732:	eb07 0c03 	add.w	ip, r7, r3
 800b736:	920d      	str	r2, [sp, #52]	@ 0x34
 800b738:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b73c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b740:	910c      	str	r1, [sp, #48]	@ 0x30
 800b742:	4419      	add	r1, r3
 800b744:	9103      	str	r1, [sp, #12]
 800b746:	4419      	add	r1, r3
 800b748:	18ca      	adds	r2, r1, r3
 800b74a:	9202      	str	r2, [sp, #8]
 800b74c:	441a      	add	r2, r3
 800b74e:	18d0      	adds	r0, r2, r3
 800b750:	ed92 ea01 	vldr	s28, [r2, #4]
 800b754:	9a02      	ldr	r2, [sp, #8]
 800b756:	edd4 7a00 	vldr	s15, [r4]
 800b75a:	edd2 da01 	vldr	s27, [r2, #4]
 800b75e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b760:	ed91 da01 	vldr	s26, [r1, #4]
 800b764:	ed92 ca01 	vldr	s24, [r2, #4]
 800b768:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b76a:	9903      	ldr	r1, [sp, #12]
 800b76c:	edcd 7a03 	vstr	s15, [sp, #12]
 800b770:	edd2 7a00 	vldr	s15, [r2]
 800b774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b776:	edcd 7a02 	vstr	s15, [sp, #8]
 800b77a:	edd2 7a00 	vldr	s15, [r2]
 800b77e:	edd0 ea01 	vldr	s29, [r0, #4]
 800b782:	edd1 ca01 	vldr	s25, [r1, #4]
 800b786:	eddc ba00 	vldr	s23, [ip]
 800b78a:	edd7 aa00 	vldr	s21, [r7]
 800b78e:	ed96 aa00 	vldr	s20, [r6]
 800b792:	edd5 9a00 	vldr	s19, [r5]
 800b796:	edcd 7a01 	vstr	s15, [sp, #4]
 800b79a:	4403      	add	r3, r0
 800b79c:	ed93 fa01 	vldr	s30, [r3, #4]
 800b7a0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b7a4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b7a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b7b0:	46cc      	mov	ip, r9
 800b7b2:	e001      	b.n	800b7b8 <arm_radix8_butterfly_f32+0x2fc>
 800b7b4:	3f3504f3 	.word	0x3f3504f3
 800b7b8:	ed91 6a00 	vldr	s12, [r1]
 800b7bc:	ed93 5a00 	vldr	s10, [r3]
 800b7c0:	edd0 fa00 	vldr	s31, [r0]
 800b7c4:	edd4 7a00 	vldr	s15, [r4]
 800b7c8:	ed95 7a00 	vldr	s14, [r5]
 800b7cc:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b7d0:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b7d4:	ed92 2a00 	vldr	s4, [r2]
 800b7d8:	ed96 0a00 	vldr	s0, [r6]
 800b7dc:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b7e0:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b7e4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b7e8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b7ec:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b7f0:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b7f4:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b7f8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b7fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b800:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b804:	edd4 8a01 	vldr	s17, [r4, #4]
 800b808:	ed92 9a01 	vldr	s18, [r2, #4]
 800b80c:	edd7 0a00 	vldr	s1, [r7]
 800b810:	edd1 2a01 	vldr	s5, [r1, #4]
 800b814:	ed95 7a01 	vldr	s14, [r5, #4]
 800b818:	ed93 6a01 	vldr	s12, [r3, #4]
 800b81c:	edd0 5a01 	vldr	s11, [r0, #4]
 800b820:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b824:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b828:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b82c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b830:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b834:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b838:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b83c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b840:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b844:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b848:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b84c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b850:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b854:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b858:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b85c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b860:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b864:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b868:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b86c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b870:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b874:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b878:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b87c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b880:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b884:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b888:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b88c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b890:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b894:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b898:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b89c:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b8a0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b8a4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b8a8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b8ac:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b8b0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b8b4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b8b8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b8bc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b8c0:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b8c4:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b8c8:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b8cc:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b8d0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b8d4:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b8d8:	eddd 1a02 	vldr	s3, [sp, #8]
 800b8dc:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b8e0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b8e4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b8e8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b8ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b8f0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b8f4:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b8f8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b8fc:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b900:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b904:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b908:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b90c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b910:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b914:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b918:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b91c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b920:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b924:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b928:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b92c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b930:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b934:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b938:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b93c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b940:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b944:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b948:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b94c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b950:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b954:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b958:	eddd 5a03 	vldr	s11, [sp, #12]
 800b95c:	edc6 fa00 	vstr	s31, [r6]
 800b960:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b964:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b968:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b96c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b970:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b974:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b978:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b97c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b980:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b984:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b988:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b98c:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b990:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b994:	44c4      	add	ip, r8
 800b996:	45e3      	cmp	fp, ip
 800b998:	edc3 3a00 	vstr	s7, [r3]
 800b99c:	edc3 6a01 	vstr	s13, [r3, #4]
 800b9a0:	4456      	add	r6, sl
 800b9a2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b9a6:	edc7 0a00 	vstr	s1, [r7]
 800b9aa:	4453      	add	r3, sl
 800b9ac:	ed80 2a00 	vstr	s4, [r0]
 800b9b0:	edc0 2a01 	vstr	s5, [r0, #4]
 800b9b4:	4457      	add	r7, sl
 800b9b6:	edc2 1a00 	vstr	s3, [r2]
 800b9ba:	ed82 7a01 	vstr	s14, [r2, #4]
 800b9be:	4450      	add	r0, sl
 800b9c0:	ed85 8a00 	vstr	s16, [r5]
 800b9c4:	ed85 0a01 	vstr	s0, [r5, #4]
 800b9c8:	4452      	add	r2, sl
 800b9ca:	edc1 4a00 	vstr	s9, [r1]
 800b9ce:	4455      	add	r5, sl
 800b9d0:	ed81 3a01 	vstr	s6, [r1, #4]
 800b9d4:	edc4 8a00 	vstr	s17, [r4]
 800b9d8:	ed84 6a01 	vstr	s12, [r4, #4]
 800b9dc:	4451      	add	r1, sl
 800b9de:	4454      	add	r4, sl
 800b9e0:	f63f aeea 	bhi.w	800b7b8 <arm_radix8_butterfly_f32+0x2fc>
 800b9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f6:	9b08      	ldr	r3, [sp, #32]
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	9308      	str	r3, [sp, #32]
 800b9fc:	9b07      	ldr	r3, [sp, #28]
 800b9fe:	3308      	adds	r3, #8
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	3308      	adds	r3, #8
 800ba06:	9306      	str	r3, [sp, #24]
 800ba08:	9b05      	ldr	r3, [sp, #20]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	3308      	adds	r3, #8
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba16:	f109 0901 	add.w	r9, r9, #1
 800ba1a:	454b      	cmp	r3, r9
 800ba1c:	f47f ae7d 	bne.w	800b71a <arm_radix8_butterfly_f32+0x25e>
 800ba20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	46d9      	mov	r9, fp
 800ba28:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba2a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800ba2e:	e554      	b.n	800b4da <arm_radix8_butterfly_f32+0x1e>
 800ba30:	b015      	add	sp, #84	@ 0x54
 800ba32:	ecbd 8b10 	vpop	{d8-d15}
 800ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3a:	bf00      	nop

0800ba3c <memset>:
 800ba3c:	4402      	add	r2, r0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d100      	bne.n	800ba46 <memset+0xa>
 800ba44:	4770      	bx	lr
 800ba46:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4a:	e7f9      	b.n	800ba40 <memset+0x4>

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	@ (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	2000001c 	.word	0x2000001c

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	4d0d      	ldr	r5, [pc, #52]	@ (800ba90 <__libc_init_array+0x38>)
 800ba5c:	4c0d      	ldr	r4, [pc, #52]	@ (800ba94 <__libc_init_array+0x3c>)
 800ba5e:	1b64      	subs	r4, r4, r5
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	2600      	movs	r6, #0
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	4d0b      	ldr	r5, [pc, #44]	@ (800ba98 <__libc_init_array+0x40>)
 800ba6a:	4c0c      	ldr	r4, [pc, #48]	@ (800ba9c <__libc_init_array+0x44>)
 800ba6c:	f001 fcae 	bl	800d3cc <_init>
 800ba70:	1b64      	subs	r4, r4, r5
 800ba72:	10a4      	asrs	r4, r4, #2
 800ba74:	2600      	movs	r6, #0
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	080229b8 	.word	0x080229b8
 800ba94:	080229b8 	.word	0x080229b8
 800ba98:	080229b8 	.word	0x080229b8
 800ba9c:	080229bc 	.word	0x080229bc

0800baa0 <pow>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	ed2d 8b02 	vpush	{d8}
 800baa6:	eeb0 8a40 	vmov.f32	s16, s0
 800baaa:	eef0 8a60 	vmov.f32	s17, s1
 800baae:	ec55 4b11 	vmov	r4, r5, d1
 800bab2:	f000 f8b5 	bl	800bc20 <__ieee754_pow>
 800bab6:	4622      	mov	r2, r4
 800bab8:	462b      	mov	r3, r5
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	ec57 6b10 	vmov	r6, r7, d0
 800bac2:	f7f4 fffd 	bl	8000ac0 <__aeabi_dcmpun>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d13b      	bne.n	800bb42 <pow+0xa2>
 800baca:	ec51 0b18 	vmov	r0, r1, d8
 800bace:	2200      	movs	r2, #0
 800bad0:	2300      	movs	r3, #0
 800bad2:	f7f4 ffc3 	bl	8000a5c <__aeabi_dcmpeq>
 800bad6:	b1b8      	cbz	r0, 800bb08 <pow+0x68>
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 ffbc 	bl	8000a5c <__aeabi_dcmpeq>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d146      	bne.n	800bb76 <pow+0xd6>
 800bae8:	ec45 4b10 	vmov	d0, r4, r5
 800baec:	f000 f88c 	bl	800bc08 <finite>
 800baf0:	b338      	cbz	r0, 800bb42 <pow+0xa2>
 800baf2:	2200      	movs	r2, #0
 800baf4:	2300      	movs	r3, #0
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	f7f4 ffb9 	bl	8000a70 <__aeabi_dcmplt>
 800bafe:	b300      	cbz	r0, 800bb42 <pow+0xa2>
 800bb00:	f7ff ffa4 	bl	800ba4c <__errno>
 800bb04:	2322      	movs	r3, #34	@ 0x22
 800bb06:	e01b      	b.n	800bb40 <pow+0xa0>
 800bb08:	ec47 6b10 	vmov	d0, r6, r7
 800bb0c:	f000 f87c 	bl	800bc08 <finite>
 800bb10:	b9e0      	cbnz	r0, 800bb4c <pow+0xac>
 800bb12:	eeb0 0a48 	vmov.f32	s0, s16
 800bb16:	eef0 0a68 	vmov.f32	s1, s17
 800bb1a:	f000 f875 	bl	800bc08 <finite>
 800bb1e:	b1a8      	cbz	r0, 800bb4c <pow+0xac>
 800bb20:	ec45 4b10 	vmov	d0, r4, r5
 800bb24:	f000 f870 	bl	800bc08 <finite>
 800bb28:	b180      	cbz	r0, 800bb4c <pow+0xac>
 800bb2a:	4632      	mov	r2, r6
 800bb2c:	463b      	mov	r3, r7
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f4 ffc5 	bl	8000ac0 <__aeabi_dcmpun>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d0e2      	beq.n	800bb00 <pow+0x60>
 800bb3a:	f7ff ff87 	bl	800ba4c <__errno>
 800bb3e:	2321      	movs	r3, #33	@ 0x21
 800bb40:	6003      	str	r3, [r0, #0]
 800bb42:	ecbd 8b02 	vpop	{d8}
 800bb46:	ec47 6b10 	vmov	d0, r6, r7
 800bb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2300      	movs	r3, #0
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	f7f4 ff82 	bl	8000a5c <__aeabi_dcmpeq>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d0f2      	beq.n	800bb42 <pow+0xa2>
 800bb5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb60:	eef0 0a68 	vmov.f32	s1, s17
 800bb64:	f000 f850 	bl	800bc08 <finite>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0ea      	beq.n	800bb42 <pow+0xa2>
 800bb6c:	ec45 4b10 	vmov	d0, r4, r5
 800bb70:	f000 f84a 	bl	800bc08 <finite>
 800bb74:	e7c3      	b.n	800bafe <pow+0x5e>
 800bb76:	4f01      	ldr	r7, [pc, #4]	@ (800bb7c <pow+0xdc>)
 800bb78:	2600      	movs	r6, #0
 800bb7a:	e7e2      	b.n	800bb42 <pow+0xa2>
 800bb7c:	3ff00000 	.word	0x3ff00000

0800bb80 <cosf>:
 800bb80:	ee10 3a10 	vmov	r3, s0
 800bb84:	b507      	push	{r0, r1, r2, lr}
 800bb86:	4a1e      	ldr	r2, [pc, #120]	@ (800bc00 <cosf+0x80>)
 800bb88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d806      	bhi.n	800bb9e <cosf+0x1e>
 800bb90:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bc04 <cosf+0x84>
 800bb94:	b003      	add	sp, #12
 800bb96:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb9a:	f000 bd8d 	b.w	800c6b8 <__kernel_cosf>
 800bb9e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bba2:	d304      	bcc.n	800bbae <cosf+0x2e>
 800bba4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bba8:	b003      	add	sp, #12
 800bbaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbae:	4668      	mov	r0, sp
 800bbb0:	f000 fe22 	bl	800c7f8 <__ieee754_rem_pio2f>
 800bbb4:	f000 0003 	and.w	r0, r0, #3
 800bbb8:	2801      	cmp	r0, #1
 800bbba:	d009      	beq.n	800bbd0 <cosf+0x50>
 800bbbc:	2802      	cmp	r0, #2
 800bbbe:	d010      	beq.n	800bbe2 <cosf+0x62>
 800bbc0:	b9b0      	cbnz	r0, 800bbf0 <cosf+0x70>
 800bbc2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbc6:	ed9d 0a00 	vldr	s0, [sp]
 800bbca:	f000 fd75 	bl	800c6b8 <__kernel_cosf>
 800bbce:	e7eb      	b.n	800bba8 <cosf+0x28>
 800bbd0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbd4:	ed9d 0a00 	vldr	s0, [sp]
 800bbd8:	f000 fdc6 	bl	800c768 <__kernel_sinf>
 800bbdc:	eeb1 0a40 	vneg.f32	s0, s0
 800bbe0:	e7e2      	b.n	800bba8 <cosf+0x28>
 800bbe2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbe6:	ed9d 0a00 	vldr	s0, [sp]
 800bbea:	f000 fd65 	bl	800c6b8 <__kernel_cosf>
 800bbee:	e7f5      	b.n	800bbdc <cosf+0x5c>
 800bbf0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbf4:	ed9d 0a00 	vldr	s0, [sp]
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f000 fdb5 	bl	800c768 <__kernel_sinf>
 800bbfe:	e7d3      	b.n	800bba8 <cosf+0x28>
 800bc00:	3f490fd8 	.word	0x3f490fd8
 800bc04:	00000000 	.word	0x00000000

0800bc08 <finite>:
 800bc08:	b082      	sub	sp, #8
 800bc0a:	ed8d 0b00 	vstr	d0, [sp]
 800bc0e:	9801      	ldr	r0, [sp, #4]
 800bc10:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bc14:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bc18:	0fc0      	lsrs	r0, r0, #31
 800bc1a:	b002      	add	sp, #8
 800bc1c:	4770      	bx	lr
	...

0800bc20 <__ieee754_pow>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	b091      	sub	sp, #68	@ 0x44
 800bc26:	ed8d 1b00 	vstr	d1, [sp]
 800bc2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bc2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bc32:	ea5a 0001 	orrs.w	r0, sl, r1
 800bc36:	ec57 6b10 	vmov	r6, r7, d0
 800bc3a:	d113      	bne.n	800bc64 <__ieee754_pow+0x44>
 800bc3c:	19b3      	adds	r3, r6, r6
 800bc3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bc42:	4152      	adcs	r2, r2
 800bc44:	4298      	cmp	r0, r3
 800bc46:	4b98      	ldr	r3, [pc, #608]	@ (800bea8 <__ieee754_pow+0x288>)
 800bc48:	4193      	sbcs	r3, r2
 800bc4a:	f080 84ea 	bcs.w	800c622 <__ieee754_pow+0xa02>
 800bc4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc52:	4630      	mov	r0, r6
 800bc54:	4639      	mov	r1, r7
 800bc56:	f7f4 fae3 	bl	8000220 <__adddf3>
 800bc5a:	ec41 0b10 	vmov	d0, r0, r1
 800bc5e:	b011      	add	sp, #68	@ 0x44
 800bc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc64:	4a91      	ldr	r2, [pc, #580]	@ (800beac <__ieee754_pow+0x28c>)
 800bc66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bc6a:	4590      	cmp	r8, r2
 800bc6c:	463d      	mov	r5, r7
 800bc6e:	4633      	mov	r3, r6
 800bc70:	d806      	bhi.n	800bc80 <__ieee754_pow+0x60>
 800bc72:	d101      	bne.n	800bc78 <__ieee754_pow+0x58>
 800bc74:	2e00      	cmp	r6, #0
 800bc76:	d1ea      	bne.n	800bc4e <__ieee754_pow+0x2e>
 800bc78:	4592      	cmp	sl, r2
 800bc7a:	d801      	bhi.n	800bc80 <__ieee754_pow+0x60>
 800bc7c:	d10e      	bne.n	800bc9c <__ieee754_pow+0x7c>
 800bc7e:	b169      	cbz	r1, 800bc9c <__ieee754_pow+0x7c>
 800bc80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bc84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bc88:	431d      	orrs	r5, r3
 800bc8a:	d1e0      	bne.n	800bc4e <__ieee754_pow+0x2e>
 800bc8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc90:	18db      	adds	r3, r3, r3
 800bc92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bc96:	4152      	adcs	r2, r2
 800bc98:	429d      	cmp	r5, r3
 800bc9a:	e7d4      	b.n	800bc46 <__ieee754_pow+0x26>
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	46c3      	mov	fp, r8
 800bca0:	da3a      	bge.n	800bd18 <__ieee754_pow+0xf8>
 800bca2:	4a83      	ldr	r2, [pc, #524]	@ (800beb0 <__ieee754_pow+0x290>)
 800bca4:	4592      	cmp	sl, r2
 800bca6:	d84d      	bhi.n	800bd44 <__ieee754_pow+0x124>
 800bca8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bcac:	4592      	cmp	sl, r2
 800bcae:	f240 84c7 	bls.w	800c640 <__ieee754_pow+0xa20>
 800bcb2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bcb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bcba:	2a14      	cmp	r2, #20
 800bcbc:	dd0f      	ble.n	800bcde <__ieee754_pow+0xbe>
 800bcbe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bcc2:	fa21 f402 	lsr.w	r4, r1, r2
 800bcc6:	fa04 f202 	lsl.w	r2, r4, r2
 800bcca:	428a      	cmp	r2, r1
 800bccc:	f040 84b8 	bne.w	800c640 <__ieee754_pow+0xa20>
 800bcd0:	f004 0401 	and.w	r4, r4, #1
 800bcd4:	f1c4 0402 	rsb	r4, r4, #2
 800bcd8:	2900      	cmp	r1, #0
 800bcda:	d158      	bne.n	800bd8e <__ieee754_pow+0x16e>
 800bcdc:	e00e      	b.n	800bcfc <__ieee754_pow+0xdc>
 800bcde:	2900      	cmp	r1, #0
 800bce0:	d154      	bne.n	800bd8c <__ieee754_pow+0x16c>
 800bce2:	f1c2 0214 	rsb	r2, r2, #20
 800bce6:	fa4a f402 	asr.w	r4, sl, r2
 800bcea:	fa04 f202 	lsl.w	r2, r4, r2
 800bcee:	4552      	cmp	r2, sl
 800bcf0:	f040 84a3 	bne.w	800c63a <__ieee754_pow+0xa1a>
 800bcf4:	f004 0401 	and.w	r4, r4, #1
 800bcf8:	f1c4 0402 	rsb	r4, r4, #2
 800bcfc:	4a6d      	ldr	r2, [pc, #436]	@ (800beb4 <__ieee754_pow+0x294>)
 800bcfe:	4592      	cmp	sl, r2
 800bd00:	d12e      	bne.n	800bd60 <__ieee754_pow+0x140>
 800bd02:	f1b9 0f00 	cmp.w	r9, #0
 800bd06:	f280 8494 	bge.w	800c632 <__ieee754_pow+0xa12>
 800bd0a:	496a      	ldr	r1, [pc, #424]	@ (800beb4 <__ieee754_pow+0x294>)
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	2000      	movs	r0, #0
 800bd12:	f7f4 fd65 	bl	80007e0 <__aeabi_ddiv>
 800bd16:	e7a0      	b.n	800bc5a <__ieee754_pow+0x3a>
 800bd18:	2400      	movs	r4, #0
 800bd1a:	bbc1      	cbnz	r1, 800bd8e <__ieee754_pow+0x16e>
 800bd1c:	4a63      	ldr	r2, [pc, #396]	@ (800beac <__ieee754_pow+0x28c>)
 800bd1e:	4592      	cmp	sl, r2
 800bd20:	d1ec      	bne.n	800bcfc <__ieee754_pow+0xdc>
 800bd22:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bd26:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bd2a:	431a      	orrs	r2, r3
 800bd2c:	f000 8479 	beq.w	800c622 <__ieee754_pow+0xa02>
 800bd30:	4b61      	ldr	r3, [pc, #388]	@ (800beb8 <__ieee754_pow+0x298>)
 800bd32:	4598      	cmp	r8, r3
 800bd34:	d908      	bls.n	800bd48 <__ieee754_pow+0x128>
 800bd36:	f1b9 0f00 	cmp.w	r9, #0
 800bd3a:	f2c0 8476 	blt.w	800c62a <__ieee754_pow+0xa0a>
 800bd3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd42:	e78a      	b.n	800bc5a <__ieee754_pow+0x3a>
 800bd44:	2402      	movs	r4, #2
 800bd46:	e7e8      	b.n	800bd1a <__ieee754_pow+0xfa>
 800bd48:	f1b9 0f00 	cmp.w	r9, #0
 800bd4c:	f04f 0000 	mov.w	r0, #0
 800bd50:	f04f 0100 	mov.w	r1, #0
 800bd54:	da81      	bge.n	800bc5a <__ieee754_pow+0x3a>
 800bd56:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bd5e:	e77c      	b.n	800bc5a <__ieee754_pow+0x3a>
 800bd60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bd64:	d106      	bne.n	800bd74 <__ieee754_pow+0x154>
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	f7f4 fc0d 	bl	800058c <__aeabi_dmul>
 800bd72:	e772      	b.n	800bc5a <__ieee754_pow+0x3a>
 800bd74:	4a51      	ldr	r2, [pc, #324]	@ (800bebc <__ieee754_pow+0x29c>)
 800bd76:	4591      	cmp	r9, r2
 800bd78:	d109      	bne.n	800bd8e <__ieee754_pow+0x16e>
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	db07      	blt.n	800bd8e <__ieee754_pow+0x16e>
 800bd7e:	ec47 6b10 	vmov	d0, r6, r7
 800bd82:	b011      	add	sp, #68	@ 0x44
 800bd84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	f000 bf2a 	b.w	800cbe0 <__ieee754_sqrt>
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	ec47 6b10 	vmov	d0, r6, r7
 800bd92:	9302      	str	r3, [sp, #8]
 800bd94:	f000 fc88 	bl	800c6a8 <fabs>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	ec51 0b10 	vmov	r0, r1, d0
 800bd9e:	bb53      	cbnz	r3, 800bdf6 <__ieee754_pow+0x1d6>
 800bda0:	4b44      	ldr	r3, [pc, #272]	@ (800beb4 <__ieee754_pow+0x294>)
 800bda2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d002      	beq.n	800bdb0 <__ieee754_pow+0x190>
 800bdaa:	f1b8 0f00 	cmp.w	r8, #0
 800bdae:	d122      	bne.n	800bdf6 <__ieee754_pow+0x1d6>
 800bdb0:	f1b9 0f00 	cmp.w	r9, #0
 800bdb4:	da05      	bge.n	800bdc2 <__ieee754_pow+0x1a2>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	2000      	movs	r0, #0
 800bdbc:	493d      	ldr	r1, [pc, #244]	@ (800beb4 <__ieee754_pow+0x294>)
 800bdbe:	f7f4 fd0f 	bl	80007e0 <__aeabi_ddiv>
 800bdc2:	2d00      	cmp	r5, #0
 800bdc4:	f6bf af49 	bge.w	800bc5a <__ieee754_pow+0x3a>
 800bdc8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bdcc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bdd0:	ea58 0804 	orrs.w	r8, r8, r4
 800bdd4:	d108      	bne.n	800bde8 <__ieee754_pow+0x1c8>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4610      	mov	r0, r2
 800bddc:	4619      	mov	r1, r3
 800bdde:	f7f4 fa1d 	bl	800021c <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e794      	b.n	800bd12 <__ieee754_pow+0xf2>
 800bde8:	2c01      	cmp	r4, #1
 800bdea:	f47f af36 	bne.w	800bc5a <__ieee754_pow+0x3a>
 800bdee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	e731      	b.n	800bc5a <__ieee754_pow+0x3a>
 800bdf6:	0feb      	lsrs	r3, r5, #31
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	ea53 0204 	orrs.w	r2, r3, r4
 800bdfe:	d102      	bne.n	800be06 <__ieee754_pow+0x1e6>
 800be00:	4632      	mov	r2, r6
 800be02:	463b      	mov	r3, r7
 800be04:	e7e9      	b.n	800bdda <__ieee754_pow+0x1ba>
 800be06:	3c01      	subs	r4, #1
 800be08:	431c      	orrs	r4, r3
 800be0a:	d016      	beq.n	800be3a <__ieee754_pow+0x21a>
 800be0c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800be98 <__ieee754_pow+0x278>
 800be10:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800be14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be18:	f240 8112 	bls.w	800c040 <__ieee754_pow+0x420>
 800be1c:	4b28      	ldr	r3, [pc, #160]	@ (800bec0 <__ieee754_pow+0x2a0>)
 800be1e:	459a      	cmp	sl, r3
 800be20:	4b25      	ldr	r3, [pc, #148]	@ (800beb8 <__ieee754_pow+0x298>)
 800be22:	d916      	bls.n	800be52 <__ieee754_pow+0x232>
 800be24:	4598      	cmp	r8, r3
 800be26:	d80b      	bhi.n	800be40 <__ieee754_pow+0x220>
 800be28:	f1b9 0f00 	cmp.w	r9, #0
 800be2c:	da0b      	bge.n	800be46 <__ieee754_pow+0x226>
 800be2e:	2000      	movs	r0, #0
 800be30:	b011      	add	sp, #68	@ 0x44
 800be32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be36:	f000 becb 	b.w	800cbd0 <__math_oflow>
 800be3a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bea0 <__ieee754_pow+0x280>
 800be3e:	e7e7      	b.n	800be10 <__ieee754_pow+0x1f0>
 800be40:	f1b9 0f00 	cmp.w	r9, #0
 800be44:	dcf3      	bgt.n	800be2e <__ieee754_pow+0x20e>
 800be46:	2000      	movs	r0, #0
 800be48:	b011      	add	sp, #68	@ 0x44
 800be4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4e:	f000 beb7 	b.w	800cbc0 <__math_uflow>
 800be52:	4598      	cmp	r8, r3
 800be54:	d20c      	bcs.n	800be70 <__ieee754_pow+0x250>
 800be56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be5a:	2200      	movs	r2, #0
 800be5c:	2300      	movs	r3, #0
 800be5e:	f7f4 fe07 	bl	8000a70 <__aeabi_dcmplt>
 800be62:	3800      	subs	r0, #0
 800be64:	bf18      	it	ne
 800be66:	2001      	movne	r0, #1
 800be68:	f1b9 0f00 	cmp.w	r9, #0
 800be6c:	daec      	bge.n	800be48 <__ieee754_pow+0x228>
 800be6e:	e7df      	b.n	800be30 <__ieee754_pow+0x210>
 800be70:	4b10      	ldr	r3, [pc, #64]	@ (800beb4 <__ieee754_pow+0x294>)
 800be72:	4598      	cmp	r8, r3
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	d924      	bls.n	800bec4 <__ieee754_pow+0x2a4>
 800be7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be7e:	2300      	movs	r3, #0
 800be80:	f7f4 fdf6 	bl	8000a70 <__aeabi_dcmplt>
 800be84:	3800      	subs	r0, #0
 800be86:	bf18      	it	ne
 800be88:	2001      	movne	r0, #1
 800be8a:	f1b9 0f00 	cmp.w	r9, #0
 800be8e:	dccf      	bgt.n	800be30 <__ieee754_pow+0x210>
 800be90:	e7da      	b.n	800be48 <__ieee754_pow+0x228>
 800be92:	bf00      	nop
 800be94:	f3af 8000 	nop.w
 800be98:	00000000 	.word	0x00000000
 800be9c:	3ff00000 	.word	0x3ff00000
 800bea0:	00000000 	.word	0x00000000
 800bea4:	bff00000 	.word	0xbff00000
 800bea8:	fff00000 	.word	0xfff00000
 800beac:	7ff00000 	.word	0x7ff00000
 800beb0:	433fffff 	.word	0x433fffff
 800beb4:	3ff00000 	.word	0x3ff00000
 800beb8:	3fefffff 	.word	0x3fefffff
 800bebc:	3fe00000 	.word	0x3fe00000
 800bec0:	43f00000 	.word	0x43f00000
 800bec4:	4b5a      	ldr	r3, [pc, #360]	@ (800c030 <__ieee754_pow+0x410>)
 800bec6:	f7f4 f9a9 	bl	800021c <__aeabi_dsub>
 800beca:	a351      	add	r3, pc, #324	@ (adr r3, 800c010 <__ieee754_pow+0x3f0>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	f7f4 fb5a 	bl	800058c <__aeabi_dmul>
 800bed8:	a34f      	add	r3, pc, #316	@ (adr r3, 800c018 <__ieee754_pow+0x3f8>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	4606      	mov	r6, r0
 800bee0:	460f      	mov	r7, r1
 800bee2:	4620      	mov	r0, r4
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 fb51 	bl	800058c <__aeabi_dmul>
 800beea:	4b52      	ldr	r3, [pc, #328]	@ (800c034 <__ieee754_pow+0x414>)
 800beec:	4682      	mov	sl, r0
 800beee:	468b      	mov	fp, r1
 800bef0:	2200      	movs	r2, #0
 800bef2:	4620      	mov	r0, r4
 800bef4:	4629      	mov	r1, r5
 800bef6:	f7f4 fb49 	bl	800058c <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	a148      	add	r1, pc, #288	@ (adr r1, 800c020 <__ieee754_pow+0x400>)
 800bf00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf04:	f7f4 f98a 	bl	800021c <__aeabi_dsub>
 800bf08:	4622      	mov	r2, r4
 800bf0a:	462b      	mov	r3, r5
 800bf0c:	f7f4 fb3e 	bl	800058c <__aeabi_dmul>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	2000      	movs	r0, #0
 800bf16:	4948      	ldr	r1, [pc, #288]	@ (800c038 <__ieee754_pow+0x418>)
 800bf18:	f7f4 f980 	bl	800021c <__aeabi_dsub>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4689      	mov	r9, r1
 800bf22:	462b      	mov	r3, r5
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fb30 	bl	800058c <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7f4 fb2a 	bl	800058c <__aeabi_dmul>
 800bf38:	a33b      	add	r3, pc, #236	@ (adr r3, 800c028 <__ieee754_pow+0x408>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 fb25 	bl	800058c <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4650      	mov	r0, sl
 800bf48:	4659      	mov	r1, fp
 800bf4a:	f7f4 f967 	bl	800021c <__aeabi_dsub>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	f7f4 f961 	bl	8000220 <__adddf3>
 800bf5e:	2400      	movs	r4, #0
 800bf60:	4632      	mov	r2, r6
 800bf62:	463b      	mov	r3, r7
 800bf64:	4620      	mov	r0, r4
 800bf66:	460d      	mov	r5, r1
 800bf68:	f7f4 f958 	bl	800021c <__aeabi_dsub>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4640      	mov	r0, r8
 800bf72:	4649      	mov	r1, r9
 800bf74:	f7f4 f952 	bl	800021c <__aeabi_dsub>
 800bf78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf80:	2300      	movs	r3, #0
 800bf82:	9304      	str	r3, [sp, #16]
 800bf84:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bf88:	4606      	mov	r6, r0
 800bf8a:	460f      	mov	r7, r1
 800bf8c:	4652      	mov	r2, sl
 800bf8e:	465b      	mov	r3, fp
 800bf90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf94:	f7f4 f942 	bl	800021c <__aeabi_dsub>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 faf6 	bl	800058c <__aeabi_dmul>
 800bfa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4689      	mov	r9, r1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f7f4 faee 	bl	800058c <__aeabi_dmul>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	f7f4 f932 	bl	8000220 <__adddf3>
 800bfbc:	4652      	mov	r2, sl
 800bfbe:	465b      	mov	r3, fp
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	460f      	mov	r7, r1
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fae0 	bl	800058c <__aeabi_dmul>
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4602      	mov	r2, r0
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	4689      	mov	r9, r1
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 f922 	bl	8000220 <__adddf3>
 800bfdc:	4b17      	ldr	r3, [pc, #92]	@ (800c03c <__ieee754_pow+0x41c>)
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	468a      	mov	sl, r1
 800bfe6:	468b      	mov	fp, r1
 800bfe8:	f340 82ef 	ble.w	800c5ca <__ieee754_pow+0x9aa>
 800bfec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bff0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bff4:	4303      	orrs	r3, r0
 800bff6:	f000 81e8 	beq.w	800c3ca <__ieee754_pow+0x7aa>
 800bffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	2300      	movs	r3, #0
 800c002:	f7f4 fd35 	bl	8000a70 <__aeabi_dcmplt>
 800c006:	3800      	subs	r0, #0
 800c008:	bf18      	it	ne
 800c00a:	2001      	movne	r0, #1
 800c00c:	e710      	b.n	800be30 <__ieee754_pow+0x210>
 800c00e:	bf00      	nop
 800c010:	60000000 	.word	0x60000000
 800c014:	3ff71547 	.word	0x3ff71547
 800c018:	f85ddf44 	.word	0xf85ddf44
 800c01c:	3e54ae0b 	.word	0x3e54ae0b
 800c020:	55555555 	.word	0x55555555
 800c024:	3fd55555 	.word	0x3fd55555
 800c028:	652b82fe 	.word	0x652b82fe
 800c02c:	3ff71547 	.word	0x3ff71547
 800c030:	3ff00000 	.word	0x3ff00000
 800c034:	3fd00000 	.word	0x3fd00000
 800c038:	3fe00000 	.word	0x3fe00000
 800c03c:	408fffff 	.word	0x408fffff
 800c040:	4bd5      	ldr	r3, [pc, #852]	@ (800c398 <__ieee754_pow+0x778>)
 800c042:	402b      	ands	r3, r5
 800c044:	2200      	movs	r2, #0
 800c046:	b92b      	cbnz	r3, 800c054 <__ieee754_pow+0x434>
 800c048:	4bd4      	ldr	r3, [pc, #848]	@ (800c39c <__ieee754_pow+0x77c>)
 800c04a:	f7f4 fa9f 	bl	800058c <__aeabi_dmul>
 800c04e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c052:	468b      	mov	fp, r1
 800c054:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c058:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c05c:	4413      	add	r3, r2
 800c05e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c060:	4bcf      	ldr	r3, [pc, #828]	@ (800c3a0 <__ieee754_pow+0x780>)
 800c062:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c066:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c06a:	459b      	cmp	fp, r3
 800c06c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c070:	dd08      	ble.n	800c084 <__ieee754_pow+0x464>
 800c072:	4bcc      	ldr	r3, [pc, #816]	@ (800c3a4 <__ieee754_pow+0x784>)
 800c074:	459b      	cmp	fp, r3
 800c076:	f340 81a5 	ble.w	800c3c4 <__ieee754_pow+0x7a4>
 800c07a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c07c:	3301      	adds	r3, #1
 800c07e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c080:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c084:	f04f 0a00 	mov.w	sl, #0
 800c088:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c08c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c08e:	4bc6      	ldr	r3, [pc, #792]	@ (800c3a8 <__ieee754_pow+0x788>)
 800c090:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c094:	ed93 7b00 	vldr	d7, [r3]
 800c098:	4629      	mov	r1, r5
 800c09a:	ec53 2b17 	vmov	r2, r3, d7
 800c09e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0a6:	f7f4 f8b9 	bl	800021c <__aeabi_dsub>
 800c0aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0b6:	f7f4 f8b3 	bl	8000220 <__adddf3>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	2000      	movs	r0, #0
 800c0c0:	49ba      	ldr	r1, [pc, #744]	@ (800c3ac <__ieee754_pow+0x78c>)
 800c0c2:	f7f4 fb8d 	bl	80007e0 <__aeabi_ddiv>
 800c0c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 fa5b 	bl	800058c <__aeabi_dmul>
 800c0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c0de:	106d      	asrs	r5, r5, #1
 800c0e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c0e4:	f04f 0b00 	mov.w	fp, #0
 800c0e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c0ec:	4661      	mov	r1, ip
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	46e1      	mov	r9, ip
 800c0f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	461d      	mov	r5, r3
 800c100:	f7f4 fa44 	bl	800058c <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 f886 	bl	800021c <__aeabi_dsub>
 800c110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c114:	4606      	mov	r6, r0
 800c116:	460f      	mov	r7, r1
 800c118:	4620      	mov	r0, r4
 800c11a:	4629      	mov	r1, r5
 800c11c:	f7f4 f87e 	bl	800021c <__aeabi_dsub>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c128:	f7f4 f878 	bl	800021c <__aeabi_dsub>
 800c12c:	465a      	mov	r2, fp
 800c12e:	464b      	mov	r3, r9
 800c130:	f7f4 fa2c 	bl	800058c <__aeabi_dmul>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 f86e 	bl	800021c <__aeabi_dsub>
 800c140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c144:	f7f4 fa22 	bl	800058c <__aeabi_dmul>
 800c148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c150:	4610      	mov	r0, r2
 800c152:	4619      	mov	r1, r3
 800c154:	f7f4 fa1a 	bl	800058c <__aeabi_dmul>
 800c158:	a37d      	add	r3, pc, #500	@ (adr r3, 800c350 <__ieee754_pow+0x730>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	4604      	mov	r4, r0
 800c160:	460d      	mov	r5, r1
 800c162:	f7f4 fa13 	bl	800058c <__aeabi_dmul>
 800c166:	a37c      	add	r3, pc, #496	@ (adr r3, 800c358 <__ieee754_pow+0x738>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 f858 	bl	8000220 <__adddf3>
 800c170:	4622      	mov	r2, r4
 800c172:	462b      	mov	r3, r5
 800c174:	f7f4 fa0a 	bl	800058c <__aeabi_dmul>
 800c178:	a379      	add	r3, pc, #484	@ (adr r3, 800c360 <__ieee754_pow+0x740>)
 800c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17e:	f7f4 f84f 	bl	8000220 <__adddf3>
 800c182:	4622      	mov	r2, r4
 800c184:	462b      	mov	r3, r5
 800c186:	f7f4 fa01 	bl	800058c <__aeabi_dmul>
 800c18a:	a377      	add	r3, pc, #476	@ (adr r3, 800c368 <__ieee754_pow+0x748>)
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f7f4 f846 	bl	8000220 <__adddf3>
 800c194:	4622      	mov	r2, r4
 800c196:	462b      	mov	r3, r5
 800c198:	f7f4 f9f8 	bl	800058c <__aeabi_dmul>
 800c19c:	a374      	add	r3, pc, #464	@ (adr r3, 800c370 <__ieee754_pow+0x750>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7f4 f83d 	bl	8000220 <__adddf3>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	f7f4 f9ef 	bl	800058c <__aeabi_dmul>
 800c1ae:	a372      	add	r3, pc, #456	@ (adr r3, 800c378 <__ieee754_pow+0x758>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	f7f4 f834 	bl	8000220 <__adddf3>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	462b      	mov	r3, r5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	f7f4 f9e2 	bl	800058c <__aeabi_dmul>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 f9dc 	bl	800058c <__aeabi_dmul>
 800c1d4:	465a      	mov	r2, fp
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	464b      	mov	r3, r9
 800c1dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e0:	f7f4 f81e 	bl	8000220 <__adddf3>
 800c1e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1e8:	f7f4 f9d0 	bl	800058c <__aeabi_dmul>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f7f4 f816 	bl	8000220 <__adddf3>
 800c1f4:	465a      	mov	r2, fp
 800c1f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	4658      	mov	r0, fp
 800c1fe:	4649      	mov	r1, r9
 800c200:	f7f4 f9c4 	bl	800058c <__aeabi_dmul>
 800c204:	4b6a      	ldr	r3, [pc, #424]	@ (800c3b0 <__ieee754_pow+0x790>)
 800c206:	2200      	movs	r2, #0
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	f7f4 f808 	bl	8000220 <__adddf3>
 800c210:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c214:	f7f4 f804 	bl	8000220 <__adddf3>
 800c218:	46d8      	mov	r8, fp
 800c21a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c21e:	460d      	mov	r5, r1
 800c220:	465a      	mov	r2, fp
 800c222:	460b      	mov	r3, r1
 800c224:	4640      	mov	r0, r8
 800c226:	4649      	mov	r1, r9
 800c228:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c22c:	f7f4 f9ae 	bl	800058c <__aeabi_dmul>
 800c230:	465c      	mov	r4, fp
 800c232:	4680      	mov	r8, r0
 800c234:	4689      	mov	r9, r1
 800c236:	4b5e      	ldr	r3, [pc, #376]	@ (800c3b0 <__ieee754_pow+0x790>)
 800c238:	2200      	movs	r2, #0
 800c23a:	4620      	mov	r0, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f3 ffed 	bl	800021c <__aeabi_dsub>
 800c242:	4632      	mov	r2, r6
 800c244:	463b      	mov	r3, r7
 800c246:	f7f3 ffe9 	bl	800021c <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c252:	f7f3 ffe3 	bl	800021c <__aeabi_dsub>
 800c256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c25a:	f7f4 f997 	bl	800058c <__aeabi_dmul>
 800c25e:	4622      	mov	r2, r4
 800c260:	4606      	mov	r6, r0
 800c262:	460f      	mov	r7, r1
 800c264:	462b      	mov	r3, r5
 800c266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c26a:	f7f4 f98f 	bl	800058c <__aeabi_dmul>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	f7f3 ffd3 	bl	8000220 <__adddf3>
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f3 ffcb 	bl	8000220 <__adddf3>
 800c28a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c28e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c380 <__ieee754_pow+0x760>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	4658      	mov	r0, fp
 800c296:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c29a:	460d      	mov	r5, r1
 800c29c:	f7f4 f976 	bl	800058c <__aeabi_dmul>
 800c2a0:	465c      	mov	r4, fp
 800c2a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2a6:	4642      	mov	r2, r8
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f7f3 ffb5 	bl	800021c <__aeabi_dsub>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	4639      	mov	r1, r7
 800c2ba:	f7f3 ffaf 	bl	800021c <__aeabi_dsub>
 800c2be:	a332      	add	r3, pc, #200	@ (adr r3, 800c388 <__ieee754_pow+0x768>)
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	f7f4 f962 	bl	800058c <__aeabi_dmul>
 800c2c8:	a331      	add	r3, pc, #196	@ (adr r3, 800c390 <__ieee754_pow+0x770>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f4 f959 	bl	800058c <__aeabi_dmul>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f3 ff9d 	bl	8000220 <__adddf3>
 800c2e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2e8:	4b32      	ldr	r3, [pc, #200]	@ (800c3b4 <__ieee754_pow+0x794>)
 800c2ea:	4413      	add	r3, r2
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f7f3 ff96 	bl	8000220 <__adddf3>
 800c2f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2fa:	f7f4 f8dd 	bl	80004b8 <__aeabi_i2d>
 800c2fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c300:	4b2d      	ldr	r3, [pc, #180]	@ (800c3b8 <__ieee754_pow+0x798>)
 800c302:	4413      	add	r3, r2
 800c304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c308:	4606      	mov	r6, r0
 800c30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c30e:	460f      	mov	r7, r1
 800c310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c314:	f7f3 ff84 	bl	8000220 <__adddf3>
 800c318:	4642      	mov	r2, r8
 800c31a:	464b      	mov	r3, r9
 800c31c:	f7f3 ff80 	bl	8000220 <__adddf3>
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	f7f3 ff7c 	bl	8000220 <__adddf3>
 800c328:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c32c:	4632      	mov	r2, r6
 800c32e:	463b      	mov	r3, r7
 800c330:	4658      	mov	r0, fp
 800c332:	460d      	mov	r5, r1
 800c334:	f7f3 ff72 	bl	800021c <__aeabi_dsub>
 800c338:	4642      	mov	r2, r8
 800c33a:	464b      	mov	r3, r9
 800c33c:	f7f3 ff6e 	bl	800021c <__aeabi_dsub>
 800c340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c344:	f7f3 ff6a 	bl	800021c <__aeabi_dsub>
 800c348:	465c      	mov	r4, fp
 800c34a:	4602      	mov	r2, r0
 800c34c:	e036      	b.n	800c3bc <__ieee754_pow+0x79c>
 800c34e:	bf00      	nop
 800c350:	4a454eef 	.word	0x4a454eef
 800c354:	3fca7e28 	.word	0x3fca7e28
 800c358:	93c9db65 	.word	0x93c9db65
 800c35c:	3fcd864a 	.word	0x3fcd864a
 800c360:	a91d4101 	.word	0xa91d4101
 800c364:	3fd17460 	.word	0x3fd17460
 800c368:	518f264d 	.word	0x518f264d
 800c36c:	3fd55555 	.word	0x3fd55555
 800c370:	db6fabff 	.word	0xdb6fabff
 800c374:	3fdb6db6 	.word	0x3fdb6db6
 800c378:	33333303 	.word	0x33333303
 800c37c:	3fe33333 	.word	0x3fe33333
 800c380:	e0000000 	.word	0xe0000000
 800c384:	3feec709 	.word	0x3feec709
 800c388:	dc3a03fd 	.word	0xdc3a03fd
 800c38c:	3feec709 	.word	0x3feec709
 800c390:	145b01f5 	.word	0x145b01f5
 800c394:	be3e2fe0 	.word	0xbe3e2fe0
 800c398:	7ff00000 	.word	0x7ff00000
 800c39c:	43400000 	.word	0x43400000
 800c3a0:	0003988e 	.word	0x0003988e
 800c3a4:	000bb679 	.word	0x000bb679
 800c3a8:	080225d0 	.word	0x080225d0
 800c3ac:	3ff00000 	.word	0x3ff00000
 800c3b0:	40080000 	.word	0x40080000
 800c3b4:	080225b0 	.word	0x080225b0
 800c3b8:	080225c0 	.word	0x080225c0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3c2:	e5d7      	b.n	800bf74 <__ieee754_pow+0x354>
 800c3c4:	f04f 0a01 	mov.w	sl, #1
 800c3c8:	e65e      	b.n	800c088 <__ieee754_pow+0x468>
 800c3ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c69c <__ieee754_pow+0xa7c>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	f7f3 ff24 	bl	8000220 <__adddf3>
 800c3d8:	4642      	mov	r2, r8
 800c3da:	e9cd 0100 	strd	r0, r1, [sp]
 800c3de:	464b      	mov	r3, r9
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f3 ff1a 	bl	800021c <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3f0:	f7f4 fb5c 	bl	8000aac <__aeabi_dcmpgt>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f47f ae00 	bne.w	800bffa <__ieee754_pow+0x3da>
 800c3fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c3fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c402:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c406:	fa43 fa0a 	asr.w	sl, r3, sl
 800c40a:	44da      	add	sl, fp
 800c40c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c410:	489d      	ldr	r0, [pc, #628]	@ (800c688 <__ieee754_pow+0xa68>)
 800c412:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c416:	4108      	asrs	r0, r1
 800c418:	ea00 030a 	and.w	r3, r0, sl
 800c41c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c420:	f1c1 0114 	rsb	r1, r1, #20
 800c424:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c428:	fa4a fa01 	asr.w	sl, sl, r1
 800c42c:	f1bb 0f00 	cmp.w	fp, #0
 800c430:	4640      	mov	r0, r8
 800c432:	4649      	mov	r1, r9
 800c434:	f04f 0200 	mov.w	r2, #0
 800c438:	bfb8      	it	lt
 800c43a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c43e:	f7f3 feed 	bl	800021c <__aeabi_dsub>
 800c442:	4680      	mov	r8, r0
 800c444:	4689      	mov	r9, r1
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	f7f3 fee7 	bl	8000220 <__adddf3>
 800c452:	2400      	movs	r4, #0
 800c454:	a37c      	add	r3, pc, #496	@ (adr r3, 800c648 <__ieee754_pow+0xa28>)
 800c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45a:	4620      	mov	r0, r4
 800c45c:	460d      	mov	r5, r1
 800c45e:	f7f4 f895 	bl	800058c <__aeabi_dmul>
 800c462:	4642      	mov	r2, r8
 800c464:	e9cd 0100 	strd	r0, r1, [sp]
 800c468:	464b      	mov	r3, r9
 800c46a:	4620      	mov	r0, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f3 fed5 	bl	800021c <__aeabi_dsub>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f3 fecf 	bl	800021c <__aeabi_dsub>
 800c47e:	a374      	add	r3, pc, #464	@ (adr r3, 800c650 <__ieee754_pow+0xa30>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f4 f882 	bl	800058c <__aeabi_dmul>
 800c488:	a373      	add	r3, pc, #460	@ (adr r3, 800c658 <__ieee754_pow+0xa38>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	4680      	mov	r8, r0
 800c490:	4689      	mov	r9, r1
 800c492:	4620      	mov	r0, r4
 800c494:	4629      	mov	r1, r5
 800c496:	f7f4 f879 	bl	800058c <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f3 febd 	bl	8000220 <__adddf3>
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4b2:	f7f3 feb5 	bl	8000220 <__adddf3>
 800c4b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	4689      	mov	r9, r1
 800c4be:	f7f3 fead 	bl	800021c <__aeabi_dsub>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f3 fea7 	bl	800021c <__aeabi_dsub>
 800c4ce:	4642      	mov	r2, r8
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	4649      	mov	r1, r9
 800c4da:	f7f4 f857 	bl	800058c <__aeabi_dmul>
 800c4de:	a360      	add	r3, pc, #384	@ (adr r3, 800c660 <__ieee754_pow+0xa40>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	f7f4 f850 	bl	800058c <__aeabi_dmul>
 800c4ec:	a35e      	add	r3, pc, #376	@ (adr r3, 800c668 <__ieee754_pow+0xa48>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7f3 fe93 	bl	800021c <__aeabi_dsub>
 800c4f6:	4622      	mov	r2, r4
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	f7f4 f847 	bl	800058c <__aeabi_dmul>
 800c4fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800c670 <__ieee754_pow+0xa50>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fe8c 	bl	8000220 <__adddf3>
 800c508:	4622      	mov	r2, r4
 800c50a:	462b      	mov	r3, r5
 800c50c:	f7f4 f83e 	bl	800058c <__aeabi_dmul>
 800c510:	a359      	add	r3, pc, #356	@ (adr r3, 800c678 <__ieee754_pow+0xa58>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 fe81 	bl	800021c <__aeabi_dsub>
 800c51a:	4622      	mov	r2, r4
 800c51c:	462b      	mov	r3, r5
 800c51e:	f7f4 f835 	bl	800058c <__aeabi_dmul>
 800c522:	a357      	add	r3, pc, #348	@ (adr r3, 800c680 <__ieee754_pow+0xa60>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 fe7a 	bl	8000220 <__adddf3>
 800c52c:	4622      	mov	r2, r4
 800c52e:	462b      	mov	r3, r5
 800c530:	f7f4 f82c 	bl	800058c <__aeabi_dmul>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4640      	mov	r0, r8
 800c53a:	4649      	mov	r1, r9
 800c53c:	f7f3 fe6e 	bl	800021c <__aeabi_dsub>
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4640      	mov	r0, r8
 800c54a:	4649      	mov	r1, r9
 800c54c:	f7f4 f81e 	bl	800058c <__aeabi_dmul>
 800c550:	2200      	movs	r2, #0
 800c552:	e9cd 0100 	strd	r0, r1, [sp]
 800c556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 fe5d 	bl	800021c <__aeabi_dsub>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c56a:	f7f4 f939 	bl	80007e0 <__aeabi_ddiv>
 800c56e:	4632      	mov	r2, r6
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	463b      	mov	r3, r7
 800c576:	4640      	mov	r0, r8
 800c578:	4649      	mov	r1, r9
 800c57a:	f7f4 f807 	bl	800058c <__aeabi_dmul>
 800c57e:	4632      	mov	r2, r6
 800c580:	463b      	mov	r3, r7
 800c582:	f7f3 fe4d 	bl	8000220 <__adddf3>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4620      	mov	r0, r4
 800c58c:	4629      	mov	r1, r5
 800c58e:	f7f3 fe45 	bl	800021c <__aeabi_dsub>
 800c592:	4642      	mov	r2, r8
 800c594:	464b      	mov	r3, r9
 800c596:	f7f3 fe41 	bl	800021c <__aeabi_dsub>
 800c59a:	460b      	mov	r3, r1
 800c59c:	4602      	mov	r2, r0
 800c59e:	493b      	ldr	r1, [pc, #236]	@ (800c68c <__ieee754_pow+0xa6c>)
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f7f3 fe3b 	bl	800021c <__aeabi_dsub>
 800c5a6:	ec41 0b10 	vmov	d0, r0, r1
 800c5aa:	ee10 3a90 	vmov	r3, s1
 800c5ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c5b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5b6:	da30      	bge.n	800c61a <__ieee754_pow+0x9fa>
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	f000 fa55 	bl	800ca68 <scalbn>
 800c5be:	ec51 0b10 	vmov	r0, r1, d0
 800c5c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5c6:	f7ff bbd2 	b.w	800bd6e <__ieee754_pow+0x14e>
 800c5ca:	4c31      	ldr	r4, [pc, #196]	@ (800c690 <__ieee754_pow+0xa70>)
 800c5cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	d91a      	bls.n	800c60a <__ieee754_pow+0x9ea>
 800c5d4:	4b2f      	ldr	r3, [pc, #188]	@ (800c694 <__ieee754_pow+0xa74>)
 800c5d6:	440b      	add	r3, r1
 800c5d8:	4303      	orrs	r3, r0
 800c5da:	d009      	beq.n	800c5f0 <__ieee754_pow+0x9d0>
 800c5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f7f4 fa44 	bl	8000a70 <__aeabi_dcmplt>
 800c5e8:	3800      	subs	r0, #0
 800c5ea:	bf18      	it	ne
 800c5ec:	2001      	movne	r0, #1
 800c5ee:	e42b      	b.n	800be48 <__ieee754_pow+0x228>
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	464b      	mov	r3, r9
 800c5f4:	f7f3 fe12 	bl	800021c <__aeabi_dsub>
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	463b      	mov	r3, r7
 800c5fc:	f7f4 fa4c 	bl	8000a98 <__aeabi_dcmpge>
 800c600:	2800      	cmp	r0, #0
 800c602:	d1eb      	bne.n	800c5dc <__ieee754_pow+0x9bc>
 800c604:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c6a4 <__ieee754_pow+0xa84>
 800c608:	e6f7      	b.n	800c3fa <__ieee754_pow+0x7da>
 800c60a:	469a      	mov	sl, r3
 800c60c:	4b22      	ldr	r3, [pc, #136]	@ (800c698 <__ieee754_pow+0xa78>)
 800c60e:	459a      	cmp	sl, r3
 800c610:	f63f aef3 	bhi.w	800c3fa <__ieee754_pow+0x7da>
 800c614:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c618:	e715      	b.n	800c446 <__ieee754_pow+0x826>
 800c61a:	ec51 0b10 	vmov	r0, r1, d0
 800c61e:	4619      	mov	r1, r3
 800c620:	e7cf      	b.n	800c5c2 <__ieee754_pow+0x9a2>
 800c622:	491a      	ldr	r1, [pc, #104]	@ (800c68c <__ieee754_pow+0xa6c>)
 800c624:	2000      	movs	r0, #0
 800c626:	f7ff bb18 	b.w	800bc5a <__ieee754_pow+0x3a>
 800c62a:	2000      	movs	r0, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	f7ff bb14 	b.w	800bc5a <__ieee754_pow+0x3a>
 800c632:	4630      	mov	r0, r6
 800c634:	4639      	mov	r1, r7
 800c636:	f7ff bb10 	b.w	800bc5a <__ieee754_pow+0x3a>
 800c63a:	460c      	mov	r4, r1
 800c63c:	f7ff bb5e 	b.w	800bcfc <__ieee754_pow+0xdc>
 800c640:	2400      	movs	r4, #0
 800c642:	f7ff bb49 	b.w	800bcd8 <__ieee754_pow+0xb8>
 800c646:	bf00      	nop
 800c648:	00000000 	.word	0x00000000
 800c64c:	3fe62e43 	.word	0x3fe62e43
 800c650:	fefa39ef 	.word	0xfefa39ef
 800c654:	3fe62e42 	.word	0x3fe62e42
 800c658:	0ca86c39 	.word	0x0ca86c39
 800c65c:	be205c61 	.word	0xbe205c61
 800c660:	72bea4d0 	.word	0x72bea4d0
 800c664:	3e663769 	.word	0x3e663769
 800c668:	c5d26bf1 	.word	0xc5d26bf1
 800c66c:	3ebbbd41 	.word	0x3ebbbd41
 800c670:	af25de2c 	.word	0xaf25de2c
 800c674:	3f11566a 	.word	0x3f11566a
 800c678:	16bebd93 	.word	0x16bebd93
 800c67c:	3f66c16c 	.word	0x3f66c16c
 800c680:	5555553e 	.word	0x5555553e
 800c684:	3fc55555 	.word	0x3fc55555
 800c688:	fff00000 	.word	0xfff00000
 800c68c:	3ff00000 	.word	0x3ff00000
 800c690:	4090cbff 	.word	0x4090cbff
 800c694:	3f6f3400 	.word	0x3f6f3400
 800c698:	3fe00000 	.word	0x3fe00000
 800c69c:	652b82fe 	.word	0x652b82fe
 800c6a0:	3c971547 	.word	0x3c971547
 800c6a4:	4090cc00 	.word	0x4090cc00

0800c6a8 <fabs>:
 800c6a8:	ec51 0b10 	vmov	r0, r1, d0
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c6b2:	ec43 2b10 	vmov	d0, r2, r3
 800c6b6:	4770      	bx	lr

0800c6b8 <__kernel_cosf>:
 800c6b8:	ee10 3a10 	vmov	r3, s0
 800c6bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c6c4:	eef0 6a40 	vmov.f32	s13, s0
 800c6c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c6cc:	d204      	bcs.n	800c6d8 <__kernel_cosf+0x20>
 800c6ce:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c6d2:	ee17 2a90 	vmov	r2, s15
 800c6d6:	b342      	cbz	r2, 800c72a <__kernel_cosf+0x72>
 800c6d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c6dc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800c748 <__kernel_cosf+0x90>
 800c6e0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800c74c <__kernel_cosf+0x94>
 800c6e4:	4a1a      	ldr	r2, [pc, #104]	@ (800c750 <__kernel_cosf+0x98>)
 800c6e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c754 <__kernel_cosf+0x9c>
 800c6f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c6f4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800c758 <__kernel_cosf+0xa0>
 800c6f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c6fc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800c75c <__kernel_cosf+0xa4>
 800c700:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c704:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800c760 <__kernel_cosf+0xa8>
 800c708:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c70c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c710:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c714:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c718:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c720:	d804      	bhi.n	800c72c <__kernel_cosf+0x74>
 800c722:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c726:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c72a:	4770      	bx	lr
 800c72c:	4a0d      	ldr	r2, [pc, #52]	@ (800c764 <__kernel_cosf+0xac>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	bf9a      	itte	ls
 800c732:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c736:	ee07 3a10 	vmovls	s14, r3
 800c73a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800c73e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c746:	e7ec      	b.n	800c722 <__kernel_cosf+0x6a>
 800c748:	ad47d74e 	.word	0xad47d74e
 800c74c:	310f74f6 	.word	0x310f74f6
 800c750:	3e999999 	.word	0x3e999999
 800c754:	b493f27c 	.word	0xb493f27c
 800c758:	37d00d01 	.word	0x37d00d01
 800c75c:	bab60b61 	.word	0xbab60b61
 800c760:	3d2aaaab 	.word	0x3d2aaaab
 800c764:	3f480000 	.word	0x3f480000

0800c768 <__kernel_sinf>:
 800c768:	ee10 3a10 	vmov	r3, s0
 800c76c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c770:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c774:	d204      	bcs.n	800c780 <__kernel_sinf+0x18>
 800c776:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c77a:	ee17 3a90 	vmov	r3, s15
 800c77e:	b35b      	cbz	r3, 800c7d8 <__kernel_sinf+0x70>
 800c780:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c784:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c7dc <__kernel_sinf+0x74>
 800c788:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c7e0 <__kernel_sinf+0x78>
 800c78c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c790:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c7e4 <__kernel_sinf+0x7c>
 800c794:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c798:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800c7e8 <__kernel_sinf+0x80>
 800c79c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c7a0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800c7ec <__kernel_sinf+0x84>
 800c7a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c7a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c7ac:	b930      	cbnz	r0, 800c7bc <__kernel_sinf+0x54>
 800c7ae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800c7f0 <__kernel_sinf+0x88>
 800c7b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c7b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c7ba:	4770      	bx	lr
 800c7bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c7c0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800c7c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c7c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c7cc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c7f4 <__kernel_sinf+0x8c>
 800c7d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c7d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	2f2ec9d3 	.word	0x2f2ec9d3
 800c7e0:	b2d72f34 	.word	0xb2d72f34
 800c7e4:	3638ef1b 	.word	0x3638ef1b
 800c7e8:	b9500d01 	.word	0xb9500d01
 800c7ec:	3c088889 	.word	0x3c088889
 800c7f0:	be2aaaab 	.word	0xbe2aaaab
 800c7f4:	3e2aaaab 	.word	0x3e2aaaab

0800c7f8 <__ieee754_rem_pio2f>:
 800c7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fa:	ee10 6a10 	vmov	r6, s0
 800c7fe:	4b88      	ldr	r3, [pc, #544]	@ (800ca20 <__ieee754_rem_pio2f+0x228>)
 800c800:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c804:	429d      	cmp	r5, r3
 800c806:	b087      	sub	sp, #28
 800c808:	4604      	mov	r4, r0
 800c80a:	d805      	bhi.n	800c818 <__ieee754_rem_pio2f+0x20>
 800c80c:	2300      	movs	r3, #0
 800c80e:	ed80 0a00 	vstr	s0, [r0]
 800c812:	6043      	str	r3, [r0, #4]
 800c814:	2000      	movs	r0, #0
 800c816:	e022      	b.n	800c85e <__ieee754_rem_pio2f+0x66>
 800c818:	4b82      	ldr	r3, [pc, #520]	@ (800ca24 <__ieee754_rem_pio2f+0x22c>)
 800c81a:	429d      	cmp	r5, r3
 800c81c:	d83a      	bhi.n	800c894 <__ieee754_rem_pio2f+0x9c>
 800c81e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c822:	2e00      	cmp	r6, #0
 800c824:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ca28 <__ieee754_rem_pio2f+0x230>
 800c828:	4a80      	ldr	r2, [pc, #512]	@ (800ca2c <__ieee754_rem_pio2f+0x234>)
 800c82a:	f023 030f 	bic.w	r3, r3, #15
 800c82e:	dd18      	ble.n	800c862 <__ieee754_rem_pio2f+0x6a>
 800c830:	4293      	cmp	r3, r2
 800c832:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c836:	bf09      	itett	eq
 800c838:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ca30 <__ieee754_rem_pio2f+0x238>
 800c83c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ca34 <__ieee754_rem_pio2f+0x23c>
 800c840:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ca38 <__ieee754_rem_pio2f+0x240>
 800c844:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c848:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c84c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c850:	ed80 7a00 	vstr	s14, [r0]
 800c854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c858:	edc0 7a01 	vstr	s15, [r0, #4]
 800c85c:	2001      	movs	r0, #1
 800c85e:	b007      	add	sp, #28
 800c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c862:	4293      	cmp	r3, r2
 800c864:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c868:	bf09      	itett	eq
 800c86a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ca30 <__ieee754_rem_pio2f+0x238>
 800c86e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ca34 <__ieee754_rem_pio2f+0x23c>
 800c872:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ca38 <__ieee754_rem_pio2f+0x240>
 800c876:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c87a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c882:	ed80 7a00 	vstr	s14, [r0]
 800c886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88a:	edc0 7a01 	vstr	s15, [r0, #4]
 800c88e:	f04f 30ff 	mov.w	r0, #4294967295
 800c892:	e7e4      	b.n	800c85e <__ieee754_rem_pio2f+0x66>
 800c894:	4b69      	ldr	r3, [pc, #420]	@ (800ca3c <__ieee754_rem_pio2f+0x244>)
 800c896:	429d      	cmp	r5, r3
 800c898:	d873      	bhi.n	800c982 <__ieee754_rem_pio2f+0x18a>
 800c89a:	f000 f8dd 	bl	800ca58 <fabsf>
 800c89e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ca40 <__ieee754_rem_pio2f+0x248>
 800c8a2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c8a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c8aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8b2:	ee17 0a90 	vmov	r0, s15
 800c8b6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ca28 <__ieee754_rem_pio2f+0x230>
 800c8ba:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c8be:	281f      	cmp	r0, #31
 800c8c0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ca34 <__ieee754_rem_pio2f+0x23c>
 800c8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c8:	eeb1 6a47 	vneg.f32	s12, s14
 800c8cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c8d0:	ee16 1a90 	vmov	r1, s13
 800c8d4:	dc09      	bgt.n	800c8ea <__ieee754_rem_pio2f+0xf2>
 800c8d6:	4a5b      	ldr	r2, [pc, #364]	@ (800ca44 <__ieee754_rem_pio2f+0x24c>)
 800c8d8:	1e47      	subs	r7, r0, #1
 800c8da:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c8de:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c8e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d107      	bne.n	800c8fa <__ieee754_rem_pio2f+0x102>
 800c8ea:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c8ee:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c8f2:	2a08      	cmp	r2, #8
 800c8f4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c8f8:	dc14      	bgt.n	800c924 <__ieee754_rem_pio2f+0x12c>
 800c8fa:	6021      	str	r1, [r4, #0]
 800c8fc:	ed94 7a00 	vldr	s14, [r4]
 800c900:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c904:	2e00      	cmp	r6, #0
 800c906:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c90a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c90e:	daa6      	bge.n	800c85e <__ieee754_rem_pio2f+0x66>
 800c910:	eeb1 7a47 	vneg.f32	s14, s14
 800c914:	eeb1 0a40 	vneg.f32	s0, s0
 800c918:	ed84 7a00 	vstr	s14, [r4]
 800c91c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c920:	4240      	negs	r0, r0
 800c922:	e79c      	b.n	800c85e <__ieee754_rem_pio2f+0x66>
 800c924:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ca30 <__ieee754_rem_pio2f+0x238>
 800c928:	eef0 6a40 	vmov.f32	s13, s0
 800c92c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c930:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c934:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c938:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ca38 <__ieee754_rem_pio2f+0x240>
 800c93c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c940:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c944:	ee15 2a90 	vmov	r2, s11
 800c948:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c94c:	1a5b      	subs	r3, r3, r1
 800c94e:	2b19      	cmp	r3, #25
 800c950:	dc04      	bgt.n	800c95c <__ieee754_rem_pio2f+0x164>
 800c952:	edc4 5a00 	vstr	s11, [r4]
 800c956:	eeb0 0a66 	vmov.f32	s0, s13
 800c95a:	e7cf      	b.n	800c8fc <__ieee754_rem_pio2f+0x104>
 800c95c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ca48 <__ieee754_rem_pio2f+0x250>
 800c960:	eeb0 0a66 	vmov.f32	s0, s13
 800c964:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c968:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c96c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ca4c <__ieee754_rem_pio2f+0x254>
 800c970:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c974:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c978:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c97c:	ed84 7a00 	vstr	s14, [r4]
 800c980:	e7bc      	b.n	800c8fc <__ieee754_rem_pio2f+0x104>
 800c982:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c986:	d306      	bcc.n	800c996 <__ieee754_rem_pio2f+0x19e>
 800c988:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c98c:	edc0 7a01 	vstr	s15, [r0, #4]
 800c990:	edc0 7a00 	vstr	s15, [r0]
 800c994:	e73e      	b.n	800c814 <__ieee754_rem_pio2f+0x1c>
 800c996:	15ea      	asrs	r2, r5, #23
 800c998:	3a86      	subs	r2, #134	@ 0x86
 800c99a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c9a6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ca50 <__ieee754_rem_pio2f+0x258>
 800c9aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c9ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c9b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c9ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c9be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c9c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c9c6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c9ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c9ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d6:	edcd 7a05 	vstr	s15, [sp, #20]
 800c9da:	d11e      	bne.n	800ca1a <__ieee754_rem_pio2f+0x222>
 800c9dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2301      	moveq	r3, #1
 800c9e8:	2302      	movne	r3, #2
 800c9ea:	491a      	ldr	r1, [pc, #104]	@ (800ca54 <__ieee754_rem_pio2f+0x25c>)
 800c9ec:	9101      	str	r1, [sp, #4]
 800c9ee:	2102      	movs	r1, #2
 800c9f0:	9100      	str	r1, [sp, #0]
 800c9f2:	a803      	add	r0, sp, #12
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f000 f9cd 	bl	800cd94 <__kernel_rem_pio2f>
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	f6bf af2f 	bge.w	800c85e <__ieee754_rem_pio2f+0x66>
 800ca00:	edd4 7a00 	vldr	s15, [r4]
 800ca04:	eef1 7a67 	vneg.f32	s15, s15
 800ca08:	edc4 7a00 	vstr	s15, [r4]
 800ca0c:	edd4 7a01 	vldr	s15, [r4, #4]
 800ca10:	eef1 7a67 	vneg.f32	s15, s15
 800ca14:	edc4 7a01 	vstr	s15, [r4, #4]
 800ca18:	e782      	b.n	800c920 <__ieee754_rem_pio2f+0x128>
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	e7e5      	b.n	800c9ea <__ieee754_rem_pio2f+0x1f2>
 800ca1e:	bf00      	nop
 800ca20:	3f490fd8 	.word	0x3f490fd8
 800ca24:	4016cbe3 	.word	0x4016cbe3
 800ca28:	3fc90f80 	.word	0x3fc90f80
 800ca2c:	3fc90fd0 	.word	0x3fc90fd0
 800ca30:	37354400 	.word	0x37354400
 800ca34:	37354443 	.word	0x37354443
 800ca38:	2e85a308 	.word	0x2e85a308
 800ca3c:	43490f80 	.word	0x43490f80
 800ca40:	3f22f984 	.word	0x3f22f984
 800ca44:	080225e0 	.word	0x080225e0
 800ca48:	2e85a300 	.word	0x2e85a300
 800ca4c:	248d3132 	.word	0x248d3132
 800ca50:	43800000 	.word	0x43800000
 800ca54:	08022660 	.word	0x08022660

0800ca58 <fabsf>:
 800ca58:	ee10 3a10 	vmov	r3, s0
 800ca5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca60:	ee00 3a10 	vmov	s0, r3
 800ca64:	4770      	bx	lr
	...

0800ca68 <scalbn>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	ec55 4b10 	vmov	r4, r5, d0
 800ca6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ca72:	4606      	mov	r6, r0
 800ca74:	462b      	mov	r3, r5
 800ca76:	b991      	cbnz	r1, 800ca9e <scalbn+0x36>
 800ca78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ca7c:	4323      	orrs	r3, r4
 800ca7e:	d03d      	beq.n	800cafc <scalbn+0x94>
 800ca80:	4b35      	ldr	r3, [pc, #212]	@ (800cb58 <scalbn+0xf0>)
 800ca82:	4620      	mov	r0, r4
 800ca84:	4629      	mov	r1, r5
 800ca86:	2200      	movs	r2, #0
 800ca88:	f7f3 fd80 	bl	800058c <__aeabi_dmul>
 800ca8c:	4b33      	ldr	r3, [pc, #204]	@ (800cb5c <scalbn+0xf4>)
 800ca8e:	429e      	cmp	r6, r3
 800ca90:	4604      	mov	r4, r0
 800ca92:	460d      	mov	r5, r1
 800ca94:	da0f      	bge.n	800cab6 <scalbn+0x4e>
 800ca96:	a328      	add	r3, pc, #160	@ (adr r3, 800cb38 <scalbn+0xd0>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	e01e      	b.n	800cadc <scalbn+0x74>
 800ca9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800caa2:	4291      	cmp	r1, r2
 800caa4:	d10b      	bne.n	800cabe <scalbn+0x56>
 800caa6:	4622      	mov	r2, r4
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fbb8 	bl	8000220 <__adddf3>
 800cab0:	4604      	mov	r4, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	e022      	b.n	800cafc <scalbn+0x94>
 800cab6:	460b      	mov	r3, r1
 800cab8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cabc:	3936      	subs	r1, #54	@ 0x36
 800cabe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cac2:	4296      	cmp	r6, r2
 800cac4:	dd0d      	ble.n	800cae2 <scalbn+0x7a>
 800cac6:	2d00      	cmp	r5, #0
 800cac8:	a11d      	add	r1, pc, #116	@ (adr r1, 800cb40 <scalbn+0xd8>)
 800caca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cace:	da02      	bge.n	800cad6 <scalbn+0x6e>
 800cad0:	a11d      	add	r1, pc, #116	@ (adr r1, 800cb48 <scalbn+0xe0>)
 800cad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad6:	a31a      	add	r3, pc, #104	@ (adr r3, 800cb40 <scalbn+0xd8>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	f7f3 fd56 	bl	800058c <__aeabi_dmul>
 800cae0:	e7e6      	b.n	800cab0 <scalbn+0x48>
 800cae2:	1872      	adds	r2, r6, r1
 800cae4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cae8:	428a      	cmp	r2, r1
 800caea:	dcec      	bgt.n	800cac6 <scalbn+0x5e>
 800caec:	2a00      	cmp	r2, #0
 800caee:	dd08      	ble.n	800cb02 <scalbn+0x9a>
 800caf0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800caf4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800caf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cafc:	ec45 4b10 	vmov	d0, r4, r5
 800cb00:	bd70      	pop	{r4, r5, r6, pc}
 800cb02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cb06:	da08      	bge.n	800cb1a <scalbn+0xb2>
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	a10b      	add	r1, pc, #44	@ (adr r1, 800cb38 <scalbn+0xd0>)
 800cb0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb10:	dac1      	bge.n	800ca96 <scalbn+0x2e>
 800cb12:	a10f      	add	r1, pc, #60	@ (adr r1, 800cb50 <scalbn+0xe8>)
 800cb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb18:	e7bd      	b.n	800ca96 <scalbn+0x2e>
 800cb1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cb1e:	3236      	adds	r2, #54	@ 0x36
 800cb20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cb24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb28:	4620      	mov	r0, r4
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb60 <scalbn+0xf8>)
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	2200      	movs	r2, #0
 800cb30:	e7d4      	b.n	800cadc <scalbn+0x74>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	c2f8f359 	.word	0xc2f8f359
 800cb3c:	01a56e1f 	.word	0x01a56e1f
 800cb40:	8800759c 	.word	0x8800759c
 800cb44:	7e37e43c 	.word	0x7e37e43c
 800cb48:	8800759c 	.word	0x8800759c
 800cb4c:	fe37e43c 	.word	0xfe37e43c
 800cb50:	c2f8f359 	.word	0xc2f8f359
 800cb54:	81a56e1f 	.word	0x81a56e1f
 800cb58:	43500000 	.word	0x43500000
 800cb5c:	ffff3cb0 	.word	0xffff3cb0
 800cb60:	3c900000 	.word	0x3c900000

0800cb64 <with_errno>:
 800cb64:	b510      	push	{r4, lr}
 800cb66:	ed2d 8b02 	vpush	{d8}
 800cb6a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb6e:	eef0 8a60 	vmov.f32	s17, s1
 800cb72:	4604      	mov	r4, r0
 800cb74:	f7fe ff6a 	bl	800ba4c <__errno>
 800cb78:	eeb0 0a48 	vmov.f32	s0, s16
 800cb7c:	eef0 0a68 	vmov.f32	s1, s17
 800cb80:	ecbd 8b02 	vpop	{d8}
 800cb84:	6004      	str	r4, [r0, #0]
 800cb86:	bd10      	pop	{r4, pc}

0800cb88 <xflow>:
 800cb88:	4603      	mov	r3, r0
 800cb8a:	b507      	push	{r0, r1, r2, lr}
 800cb8c:	ec51 0b10 	vmov	r0, r1, d0
 800cb90:	b183      	cbz	r3, 800cbb4 <xflow+0x2c>
 800cb92:	4602      	mov	r2, r0
 800cb94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb98:	e9cd 2300 	strd	r2, r3, [sp]
 800cb9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cba0:	f7f3 fcf4 	bl	800058c <__aeabi_dmul>
 800cba4:	ec41 0b10 	vmov	d0, r0, r1
 800cba8:	2022      	movs	r0, #34	@ 0x22
 800cbaa:	b003      	add	sp, #12
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	f7ff bfd8 	b.w	800cb64 <with_errno>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	e7ee      	b.n	800cb98 <xflow+0x10>
 800cbba:	0000      	movs	r0, r0
 800cbbc:	0000      	movs	r0, r0
	...

0800cbc0 <__math_uflow>:
 800cbc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbc8 <__math_uflow+0x8>
 800cbc4:	f7ff bfe0 	b.w	800cb88 <xflow>
 800cbc8:	00000000 	.word	0x00000000
 800cbcc:	10000000 	.word	0x10000000

0800cbd0 <__math_oflow>:
 800cbd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cbd8 <__math_oflow+0x8>
 800cbd4:	f7ff bfd8 	b.w	800cb88 <xflow>
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	70000000 	.word	0x70000000

0800cbe0 <__ieee754_sqrt>:
 800cbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	4a68      	ldr	r2, [pc, #416]	@ (800cd88 <__ieee754_sqrt+0x1a8>)
 800cbe6:	ec55 4b10 	vmov	r4, r5, d0
 800cbea:	43aa      	bics	r2, r5
 800cbec:	462b      	mov	r3, r5
 800cbee:	4621      	mov	r1, r4
 800cbf0:	d110      	bne.n	800cc14 <__ieee754_sqrt+0x34>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 fcc8 	bl	800058c <__aeabi_dmul>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4620      	mov	r0, r4
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f3 fb0c 	bl	8000220 <__adddf3>
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	ec45 4b10 	vmov	d0, r4, r5
 800cc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc14:	2d00      	cmp	r5, #0
 800cc16:	dc0e      	bgt.n	800cc36 <__ieee754_sqrt+0x56>
 800cc18:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cc1c:	4322      	orrs	r2, r4
 800cc1e:	d0f5      	beq.n	800cc0c <__ieee754_sqrt+0x2c>
 800cc20:	b19d      	cbz	r5, 800cc4a <__ieee754_sqrt+0x6a>
 800cc22:	4622      	mov	r2, r4
 800cc24:	4620      	mov	r0, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	f7f3 faf8 	bl	800021c <__aeabi_dsub>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	f7f3 fdd6 	bl	80007e0 <__aeabi_ddiv>
 800cc34:	e7e8      	b.n	800cc08 <__ieee754_sqrt+0x28>
 800cc36:	152a      	asrs	r2, r5, #20
 800cc38:	d115      	bne.n	800cc66 <__ieee754_sqrt+0x86>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	e009      	b.n	800cc52 <__ieee754_sqrt+0x72>
 800cc3e:	0acb      	lsrs	r3, r1, #11
 800cc40:	3a15      	subs	r2, #21
 800cc42:	0549      	lsls	r1, r1, #21
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0fa      	beq.n	800cc3e <__ieee754_sqrt+0x5e>
 800cc48:	e7f7      	b.n	800cc3a <__ieee754_sqrt+0x5a>
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	e7fa      	b.n	800cc44 <__ieee754_sqrt+0x64>
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	3001      	adds	r0, #1
 800cc52:	02dc      	lsls	r4, r3, #11
 800cc54:	d5fb      	bpl.n	800cc4e <__ieee754_sqrt+0x6e>
 800cc56:	1e44      	subs	r4, r0, #1
 800cc58:	1b12      	subs	r2, r2, r4
 800cc5a:	f1c0 0420 	rsb	r4, r0, #32
 800cc5e:	fa21 f404 	lsr.w	r4, r1, r4
 800cc62:	4323      	orrs	r3, r4
 800cc64:	4081      	lsls	r1, r0
 800cc66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc6a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cc6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc72:	07d2      	lsls	r2, r2, #31
 800cc74:	bf5c      	itt	pl
 800cc76:	005b      	lslpl	r3, r3, #1
 800cc78:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cc7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc80:	bf58      	it	pl
 800cc82:	0049      	lslpl	r1, r1, #1
 800cc84:	2600      	movs	r6, #0
 800cc86:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cc8a:	106d      	asrs	r5, r5, #1
 800cc8c:	0049      	lsls	r1, r1, #1
 800cc8e:	2016      	movs	r0, #22
 800cc90:	4632      	mov	r2, r6
 800cc92:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cc96:	1917      	adds	r7, r2, r4
 800cc98:	429f      	cmp	r7, r3
 800cc9a:	bfde      	ittt	le
 800cc9c:	193a      	addle	r2, r7, r4
 800cc9e:	1bdb      	suble	r3, r3, r7
 800cca0:	1936      	addle	r6, r6, r4
 800cca2:	0fcf      	lsrs	r7, r1, #31
 800cca4:	3801      	subs	r0, #1
 800cca6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ccaa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ccae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ccb2:	d1f0      	bne.n	800cc96 <__ieee754_sqrt+0xb6>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	2720      	movs	r7, #32
 800ccb8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	eb00 0e0c 	add.w	lr, r0, ip
 800ccc2:	db02      	blt.n	800ccca <__ieee754_sqrt+0xea>
 800ccc4:	d113      	bne.n	800ccee <__ieee754_sqrt+0x10e>
 800ccc6:	458e      	cmp	lr, r1
 800ccc8:	d811      	bhi.n	800ccee <__ieee754_sqrt+0x10e>
 800ccca:	f1be 0f00 	cmp.w	lr, #0
 800ccce:	eb0e 000c 	add.w	r0, lr, ip
 800ccd2:	da42      	bge.n	800cd5a <__ieee754_sqrt+0x17a>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	db40      	blt.n	800cd5a <__ieee754_sqrt+0x17a>
 800ccd8:	f102 0801 	add.w	r8, r2, #1
 800ccdc:	1a9b      	subs	r3, r3, r2
 800ccde:	458e      	cmp	lr, r1
 800cce0:	bf88      	it	hi
 800cce2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cce6:	eba1 010e 	sub.w	r1, r1, lr
 800ccea:	4464      	add	r4, ip
 800ccec:	4642      	mov	r2, r8
 800ccee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ccf2:	3f01      	subs	r7, #1
 800ccf4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ccf8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ccfc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cd00:	d1dc      	bne.n	800ccbc <__ieee754_sqrt+0xdc>
 800cd02:	4319      	orrs	r1, r3
 800cd04:	d01b      	beq.n	800cd3e <__ieee754_sqrt+0x15e>
 800cd06:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cd8c <__ieee754_sqrt+0x1ac>
 800cd0a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cd90 <__ieee754_sqrt+0x1b0>
 800cd0e:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd12:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd16:	f7f3 fa81 	bl	800021c <__aeabi_dsub>
 800cd1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4640      	mov	r0, r8
 800cd24:	4649      	mov	r1, r9
 800cd26:	f7f3 fead 	bl	8000a84 <__aeabi_dcmple>
 800cd2a:	b140      	cbz	r0, 800cd3e <__ieee754_sqrt+0x15e>
 800cd2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cd30:	e9da 0100 	ldrd	r0, r1, [sl]
 800cd34:	e9db 2300 	ldrd	r2, r3, [fp]
 800cd38:	d111      	bne.n	800cd5e <__ieee754_sqrt+0x17e>
 800cd3a:	3601      	adds	r6, #1
 800cd3c:	463c      	mov	r4, r7
 800cd3e:	1072      	asrs	r2, r6, #1
 800cd40:	0863      	lsrs	r3, r4, #1
 800cd42:	07f1      	lsls	r1, r6, #31
 800cd44:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cd48:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cd4c:	bf48      	it	mi
 800cd4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cd52:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cd56:	4618      	mov	r0, r3
 800cd58:	e756      	b.n	800cc08 <__ieee754_sqrt+0x28>
 800cd5a:	4690      	mov	r8, r2
 800cd5c:	e7be      	b.n	800ccdc <__ieee754_sqrt+0xfc>
 800cd5e:	f7f3 fa5f 	bl	8000220 <__adddf3>
 800cd62:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f7f3 fe7f 	bl	8000a70 <__aeabi_dcmplt>
 800cd72:	b120      	cbz	r0, 800cd7e <__ieee754_sqrt+0x19e>
 800cd74:	1ca0      	adds	r0, r4, #2
 800cd76:	bf08      	it	eq
 800cd78:	3601      	addeq	r6, #1
 800cd7a:	3402      	adds	r4, #2
 800cd7c:	e7df      	b.n	800cd3e <__ieee754_sqrt+0x15e>
 800cd7e:	1c63      	adds	r3, r4, #1
 800cd80:	f023 0401 	bic.w	r4, r3, #1
 800cd84:	e7db      	b.n	800cd3e <__ieee754_sqrt+0x15e>
 800cd86:	bf00      	nop
 800cd88:	7ff00000 	.word	0x7ff00000
 800cd8c:	20000078 	.word	0x20000078
 800cd90:	20000070 	.word	0x20000070

0800cd94 <__kernel_rem_pio2f>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	ed2d 8b04 	vpush	{d8-d9}
 800cd9c:	b0d9      	sub	sp, #356	@ 0x164
 800cd9e:	4690      	mov	r8, r2
 800cda0:	9001      	str	r0, [sp, #4]
 800cda2:	4ab9      	ldr	r2, [pc, #740]	@ (800d088 <__kernel_rem_pio2f+0x2f4>)
 800cda4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800cda6:	f118 0f04 	cmn.w	r8, #4
 800cdaa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800cdae:	460f      	mov	r7, r1
 800cdb0:	f103 3bff 	add.w	fp, r3, #4294967295
 800cdb4:	db27      	blt.n	800ce06 <__kernel_rem_pio2f+0x72>
 800cdb6:	f1b8 0203 	subs.w	r2, r8, #3
 800cdba:	bf48      	it	mi
 800cdbc:	f108 0204 	addmi.w	r2, r8, #4
 800cdc0:	10d2      	asrs	r2, r2, #3
 800cdc2:	1c55      	adds	r5, r2, #1
 800cdc4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800cdc6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800cdca:	00e8      	lsls	r0, r5, #3
 800cdcc:	eba2 060b 	sub.w	r6, r2, fp
 800cdd0:	9002      	str	r0, [sp, #8]
 800cdd2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800cdd6:	eb0a 0c0b 	add.w	ip, sl, fp
 800cdda:	ac1c      	add	r4, sp, #112	@ 0x70
 800cddc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800cde0:	2000      	movs	r0, #0
 800cde2:	4560      	cmp	r0, ip
 800cde4:	dd11      	ble.n	800ce0a <__kernel_rem_pio2f+0x76>
 800cde6:	a91c      	add	r1, sp, #112	@ 0x70
 800cde8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800cdec:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800cdf0:	f04f 0c00 	mov.w	ip, #0
 800cdf4:	45d4      	cmp	ip, sl
 800cdf6:	dc27      	bgt.n	800ce48 <__kernel_rem_pio2f+0xb4>
 800cdf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cdfc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800ce00:	4606      	mov	r6, r0
 800ce02:	2400      	movs	r4, #0
 800ce04:	e016      	b.n	800ce34 <__kernel_rem_pio2f+0xa0>
 800ce06:	2200      	movs	r2, #0
 800ce08:	e7db      	b.n	800cdc2 <__kernel_rem_pio2f+0x2e>
 800ce0a:	42c6      	cmn	r6, r0
 800ce0c:	bf5d      	ittte	pl
 800ce0e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800ce12:	ee07 1a90 	vmovpl	s15, r1
 800ce16:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ce1a:	eef0 7a47 	vmovmi.f32	s15, s14
 800ce1e:	ece4 7a01 	vstmia	r4!, {s15}
 800ce22:	3001      	adds	r0, #1
 800ce24:	e7dd      	b.n	800cde2 <__kernel_rem_pio2f+0x4e>
 800ce26:	ecfe 6a01 	vldmia	lr!, {s13}
 800ce2a:	ed96 7a00 	vldr	s14, [r6]
 800ce2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce32:	3401      	adds	r4, #1
 800ce34:	455c      	cmp	r4, fp
 800ce36:	f1a6 0604 	sub.w	r6, r6, #4
 800ce3a:	ddf4      	ble.n	800ce26 <__kernel_rem_pio2f+0x92>
 800ce3c:	ece9 7a01 	vstmia	r9!, {s15}
 800ce40:	f10c 0c01 	add.w	ip, ip, #1
 800ce44:	3004      	adds	r0, #4
 800ce46:	e7d5      	b.n	800cdf4 <__kernel_rem_pio2f+0x60>
 800ce48:	a908      	add	r1, sp, #32
 800ce4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce4e:	9104      	str	r1, [sp, #16]
 800ce50:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ce52:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d094 <__kernel_rem_pio2f+0x300>
 800ce56:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d090 <__kernel_rem_pio2f+0x2fc>
 800ce5a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ce5e:	9203      	str	r2, [sp, #12]
 800ce60:	4654      	mov	r4, sl
 800ce62:	00a2      	lsls	r2, r4, #2
 800ce64:	9205      	str	r2, [sp, #20]
 800ce66:	aa58      	add	r2, sp, #352	@ 0x160
 800ce68:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ce6c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ce70:	a944      	add	r1, sp, #272	@ 0x110
 800ce72:	aa08      	add	r2, sp, #32
 800ce74:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ce78:	4694      	mov	ip, r2
 800ce7a:	4626      	mov	r6, r4
 800ce7c:	2e00      	cmp	r6, #0
 800ce7e:	f1a0 0004 	sub.w	r0, r0, #4
 800ce82:	dc4c      	bgt.n	800cf1e <__kernel_rem_pio2f+0x18a>
 800ce84:	4628      	mov	r0, r5
 800ce86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce8a:	f000 f9f5 	bl	800d278 <scalbnf>
 800ce8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ce92:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ce96:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ce9a:	f000 fa53 	bl	800d344 <floorf>
 800ce9e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800cea2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cea6:	2d00      	cmp	r5, #0
 800cea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ceac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ceb0:	ee17 9a90 	vmov	r9, s15
 800ceb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ceb8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cebc:	dd41      	ble.n	800cf42 <__kernel_rem_pio2f+0x1ae>
 800cebe:	f104 3cff 	add.w	ip, r4, #4294967295
 800cec2:	a908      	add	r1, sp, #32
 800cec4:	f1c5 0e08 	rsb	lr, r5, #8
 800cec8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800cecc:	fa46 f00e 	asr.w	r0, r6, lr
 800ced0:	4481      	add	r9, r0
 800ced2:	fa00 f00e 	lsl.w	r0, r0, lr
 800ced6:	1a36      	subs	r6, r6, r0
 800ced8:	f1c5 0007 	rsb	r0, r5, #7
 800cedc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800cee0:	4106      	asrs	r6, r0
 800cee2:	2e00      	cmp	r6, #0
 800cee4:	dd3c      	ble.n	800cf60 <__kernel_rem_pio2f+0x1cc>
 800cee6:	f04f 0e00 	mov.w	lr, #0
 800ceea:	f109 0901 	add.w	r9, r9, #1
 800ceee:	4670      	mov	r0, lr
 800cef0:	4574      	cmp	r4, lr
 800cef2:	dc68      	bgt.n	800cfc6 <__kernel_rem_pio2f+0x232>
 800cef4:	2d00      	cmp	r5, #0
 800cef6:	dd03      	ble.n	800cf00 <__kernel_rem_pio2f+0x16c>
 800cef8:	2d01      	cmp	r5, #1
 800cefa:	d074      	beq.n	800cfe6 <__kernel_rem_pio2f+0x252>
 800cefc:	2d02      	cmp	r5, #2
 800cefe:	d07d      	beq.n	800cffc <__kernel_rem_pio2f+0x268>
 800cf00:	2e02      	cmp	r6, #2
 800cf02:	d12d      	bne.n	800cf60 <__kernel_rem_pio2f+0x1cc>
 800cf04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf08:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cf0c:	b340      	cbz	r0, 800cf60 <__kernel_rem_pio2f+0x1cc>
 800cf0e:	4628      	mov	r0, r5
 800cf10:	9306      	str	r3, [sp, #24]
 800cf12:	f000 f9b1 	bl	800d278 <scalbnf>
 800cf16:	9b06      	ldr	r3, [sp, #24]
 800cf18:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cf1c:	e020      	b.n	800cf60 <__kernel_rem_pio2f+0x1cc>
 800cf1e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cf22:	3e01      	subs	r6, #1
 800cf24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf2c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cf30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cf34:	ecac 0a01 	vstmia	ip!, {s0}
 800cf38:	ed90 0a00 	vldr	s0, [r0]
 800cf3c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cf40:	e79c      	b.n	800ce7c <__kernel_rem_pio2f+0xe8>
 800cf42:	d105      	bne.n	800cf50 <__kernel_rem_pio2f+0x1bc>
 800cf44:	1e60      	subs	r0, r4, #1
 800cf46:	a908      	add	r1, sp, #32
 800cf48:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800cf4c:	11f6      	asrs	r6, r6, #7
 800cf4e:	e7c8      	b.n	800cee2 <__kernel_rem_pio2f+0x14e>
 800cf50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cf54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	da31      	bge.n	800cfc2 <__kernel_rem_pio2f+0x22e>
 800cf5e:	2600      	movs	r6, #0
 800cf60:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	f040 8098 	bne.w	800d09c <__kernel_rem_pio2f+0x308>
 800cf6c:	1e60      	subs	r0, r4, #1
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4550      	cmp	r0, sl
 800cf72:	da4b      	bge.n	800d00c <__kernel_rem_pio2f+0x278>
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	d065      	beq.n	800d044 <__kernel_rem_pio2f+0x2b0>
 800cf78:	3c01      	subs	r4, #1
 800cf7a:	ab08      	add	r3, sp, #32
 800cf7c:	3d08      	subs	r5, #8
 800cf7e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0f8      	beq.n	800cf78 <__kernel_rem_pio2f+0x1e4>
 800cf86:	4628      	mov	r0, r5
 800cf88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf8c:	f000 f974 	bl	800d278 <scalbnf>
 800cf90:	1c63      	adds	r3, r4, #1
 800cf92:	aa44      	add	r2, sp, #272	@ 0x110
 800cf94:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d094 <__kernel_rem_pio2f+0x300>
 800cf98:	0099      	lsls	r1, r3, #2
 800cf9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cf9e:	4623      	mov	r3, r4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f280 80a9 	bge.w	800d0f8 <__kernel_rem_pio2f+0x364>
 800cfa6:	4623      	mov	r3, r4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f2c0 80c7 	blt.w	800d13c <__kernel_rem_pio2f+0x3a8>
 800cfae:	aa44      	add	r2, sp, #272	@ 0x110
 800cfb0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800cfb4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d08c <__kernel_rem_pio2f+0x2f8>
 800cfb8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	1ae2      	subs	r2, r4, r3
 800cfc0:	e0b1      	b.n	800d126 <__kernel_rem_pio2f+0x392>
 800cfc2:	2602      	movs	r6, #2
 800cfc4:	e78f      	b.n	800cee6 <__kernel_rem_pio2f+0x152>
 800cfc6:	f852 1b04 	ldr.w	r1, [r2], #4
 800cfca:	b948      	cbnz	r0, 800cfe0 <__kernel_rem_pio2f+0x24c>
 800cfcc:	b121      	cbz	r1, 800cfd8 <__kernel_rem_pio2f+0x244>
 800cfce:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800cfd2:	f842 1c04 	str.w	r1, [r2, #-4]
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	f10e 0e01 	add.w	lr, lr, #1
 800cfdc:	4608      	mov	r0, r1
 800cfde:	e787      	b.n	800cef0 <__kernel_rem_pio2f+0x15c>
 800cfe0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800cfe4:	e7f5      	b.n	800cfd2 <__kernel_rem_pio2f+0x23e>
 800cfe6:	f104 3cff 	add.w	ip, r4, #4294967295
 800cfea:	aa08      	add	r2, sp, #32
 800cfec:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800cff0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cff4:	a908      	add	r1, sp, #32
 800cff6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800cffa:	e781      	b.n	800cf00 <__kernel_rem_pio2f+0x16c>
 800cffc:	f104 3cff 	add.w	ip, r4, #4294967295
 800d000:	aa08      	add	r2, sp, #32
 800d002:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d006:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d00a:	e7f3      	b.n	800cff4 <__kernel_rem_pio2f+0x260>
 800d00c:	a908      	add	r1, sp, #32
 800d00e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d012:	3801      	subs	r0, #1
 800d014:	430a      	orrs	r2, r1
 800d016:	e7ab      	b.n	800cf70 <__kernel_rem_pio2f+0x1dc>
 800d018:	3201      	adds	r2, #1
 800d01a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d01e:	2e00      	cmp	r6, #0
 800d020:	d0fa      	beq.n	800d018 <__kernel_rem_pio2f+0x284>
 800d022:	9905      	ldr	r1, [sp, #20]
 800d024:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d028:	eb0d 0001 	add.w	r0, sp, r1
 800d02c:	18e6      	adds	r6, r4, r3
 800d02e:	a91c      	add	r1, sp, #112	@ 0x70
 800d030:	f104 0c01 	add.w	ip, r4, #1
 800d034:	384c      	subs	r0, #76	@ 0x4c
 800d036:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d03a:	4422      	add	r2, r4
 800d03c:	4562      	cmp	r2, ip
 800d03e:	da04      	bge.n	800d04a <__kernel_rem_pio2f+0x2b6>
 800d040:	4614      	mov	r4, r2
 800d042:	e70e      	b.n	800ce62 <__kernel_rem_pio2f+0xce>
 800d044:	9804      	ldr	r0, [sp, #16]
 800d046:	2201      	movs	r2, #1
 800d048:	e7e7      	b.n	800d01a <__kernel_rem_pio2f+0x286>
 800d04a:	9903      	ldr	r1, [sp, #12]
 800d04c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d050:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d054:	9105      	str	r1, [sp, #20]
 800d056:	ee07 1a90 	vmov	s15, r1
 800d05a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d05e:	2400      	movs	r4, #0
 800d060:	ece6 7a01 	vstmia	r6!, {s15}
 800d064:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800d068:	46b1      	mov	r9, r6
 800d06a:	455c      	cmp	r4, fp
 800d06c:	dd04      	ble.n	800d078 <__kernel_rem_pio2f+0x2e4>
 800d06e:	ece0 7a01 	vstmia	r0!, {s15}
 800d072:	f10c 0c01 	add.w	ip, ip, #1
 800d076:	e7e1      	b.n	800d03c <__kernel_rem_pio2f+0x2a8>
 800d078:	ecfe 6a01 	vldmia	lr!, {s13}
 800d07c:	ed39 7a01 	vldmdb	r9!, {s14}
 800d080:	3401      	adds	r4, #1
 800d082:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d086:	e7f0      	b.n	800d06a <__kernel_rem_pio2f+0x2d6>
 800d088:	080229a4 	.word	0x080229a4
 800d08c:	08022978 	.word	0x08022978
 800d090:	43800000 	.word	0x43800000
 800d094:	3b800000 	.word	0x3b800000
 800d098:	00000000 	.word	0x00000000
 800d09c:	9b02      	ldr	r3, [sp, #8]
 800d09e:	eeb0 0a48 	vmov.f32	s0, s16
 800d0a2:	eba3 0008 	sub.w	r0, r3, r8
 800d0a6:	f000 f8e7 	bl	800d278 <scalbnf>
 800d0aa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d090 <__kernel_rem_pio2f+0x2fc>
 800d0ae:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b6:	db19      	blt.n	800d0ec <__kernel_rem_pio2f+0x358>
 800d0b8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d094 <__kernel_rem_pio2f+0x300>
 800d0bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d0c0:	aa08      	add	r2, sp, #32
 800d0c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d0d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d0d8:	ee10 3a10 	vmov	r3, s0
 800d0dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d0e0:	ee17 3a90 	vmov	r3, s15
 800d0e4:	3401      	adds	r4, #1
 800d0e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d0ea:	e74c      	b.n	800cf86 <__kernel_rem_pio2f+0x1f2>
 800d0ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d0f0:	aa08      	add	r2, sp, #32
 800d0f2:	ee10 3a10 	vmov	r3, s0
 800d0f6:	e7f6      	b.n	800d0e6 <__kernel_rem_pio2f+0x352>
 800d0f8:	a808      	add	r0, sp, #32
 800d0fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d0fe:	9001      	str	r0, [sp, #4]
 800d100:	ee07 0a90 	vmov	s15, r0
 800d104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d108:	3b01      	subs	r3, #1
 800d10a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d10e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d112:	ed62 7a01 	vstmdb	r2!, {s15}
 800d116:	e743      	b.n	800cfa0 <__kernel_rem_pio2f+0x20c>
 800d118:	ecfc 6a01 	vldmia	ip!, {s13}
 800d11c:	ecb5 7a01 	vldmia	r5!, {s14}
 800d120:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d124:	3001      	adds	r0, #1
 800d126:	4550      	cmp	r0, sl
 800d128:	dc01      	bgt.n	800d12e <__kernel_rem_pio2f+0x39a>
 800d12a:	4282      	cmp	r2, r0
 800d12c:	daf4      	bge.n	800d118 <__kernel_rem_pio2f+0x384>
 800d12e:	a858      	add	r0, sp, #352	@ 0x160
 800d130:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d134:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d138:	3b01      	subs	r3, #1
 800d13a:	e735      	b.n	800cfa8 <__kernel_rem_pio2f+0x214>
 800d13c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d13e:	2b02      	cmp	r3, #2
 800d140:	dc09      	bgt.n	800d156 <__kernel_rem_pio2f+0x3c2>
 800d142:	2b00      	cmp	r3, #0
 800d144:	dc2b      	bgt.n	800d19e <__kernel_rem_pio2f+0x40a>
 800d146:	d044      	beq.n	800d1d2 <__kernel_rem_pio2f+0x43e>
 800d148:	f009 0007 	and.w	r0, r9, #7
 800d14c:	b059      	add	sp, #356	@ 0x164
 800d14e:	ecbd 8b04 	vpop	{d8-d9}
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d1f5      	bne.n	800d148 <__kernel_rem_pio2f+0x3b4>
 800d15c:	aa30      	add	r2, sp, #192	@ 0xc0
 800d15e:	1f0b      	subs	r3, r1, #4
 800d160:	4413      	add	r3, r2
 800d162:	461a      	mov	r2, r3
 800d164:	4620      	mov	r0, r4
 800d166:	2800      	cmp	r0, #0
 800d168:	f1a2 0204 	sub.w	r2, r2, #4
 800d16c:	dc52      	bgt.n	800d214 <__kernel_rem_pio2f+0x480>
 800d16e:	4622      	mov	r2, r4
 800d170:	2a01      	cmp	r2, #1
 800d172:	f1a3 0304 	sub.w	r3, r3, #4
 800d176:	dc5d      	bgt.n	800d234 <__kernel_rem_pio2f+0x4a0>
 800d178:	ab30      	add	r3, sp, #192	@ 0xc0
 800d17a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800d17e:	440b      	add	r3, r1
 800d180:	2c01      	cmp	r4, #1
 800d182:	dc67      	bgt.n	800d254 <__kernel_rem_pio2f+0x4c0>
 800d184:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d188:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d18c:	2e00      	cmp	r6, #0
 800d18e:	d167      	bne.n	800d260 <__kernel_rem_pio2f+0x4cc>
 800d190:	edc7 6a00 	vstr	s13, [r7]
 800d194:	ed87 7a01 	vstr	s14, [r7, #4]
 800d198:	edc7 7a02 	vstr	s15, [r7, #8]
 800d19c:	e7d4      	b.n	800d148 <__kernel_rem_pio2f+0x3b4>
 800d19e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d1a0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800d1a4:	440b      	add	r3, r1
 800d1a6:	4622      	mov	r2, r4
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	da24      	bge.n	800d1f6 <__kernel_rem_pio2f+0x462>
 800d1ac:	b34e      	cbz	r6, 800d202 <__kernel_rem_pio2f+0x46e>
 800d1ae:	eef1 7a47 	vneg.f32	s15, s14
 800d1b2:	edc7 7a00 	vstr	s15, [r7]
 800d1b6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d1ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1be:	aa31      	add	r2, sp, #196	@ 0xc4
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	429c      	cmp	r4, r3
 800d1c4:	da20      	bge.n	800d208 <__kernel_rem_pio2f+0x474>
 800d1c6:	b10e      	cbz	r6, 800d1cc <__kernel_rem_pio2f+0x438>
 800d1c8:	eef1 7a67 	vneg.f32	s15, s15
 800d1cc:	edc7 7a01 	vstr	s15, [r7, #4]
 800d1d0:	e7ba      	b.n	800d148 <__kernel_rem_pio2f+0x3b4>
 800d1d2:	ab30      	add	r3, sp, #192	@ 0xc0
 800d1d4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d098 <__kernel_rem_pio2f+0x304>
 800d1d8:	440b      	add	r3, r1
 800d1da:	2c00      	cmp	r4, #0
 800d1dc:	da05      	bge.n	800d1ea <__kernel_rem_pio2f+0x456>
 800d1de:	b10e      	cbz	r6, 800d1e4 <__kernel_rem_pio2f+0x450>
 800d1e0:	eef1 7a67 	vneg.f32	s15, s15
 800d1e4:	edc7 7a00 	vstr	s15, [r7]
 800d1e8:	e7ae      	b.n	800d148 <__kernel_rem_pio2f+0x3b4>
 800d1ea:	ed33 7a01 	vldmdb	r3!, {s14}
 800d1ee:	3c01      	subs	r4, #1
 800d1f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1f4:	e7f1      	b.n	800d1da <__kernel_rem_pio2f+0x446>
 800d1f6:	ed73 7a01 	vldmdb	r3!, {s15}
 800d1fa:	3a01      	subs	r2, #1
 800d1fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d200:	e7d2      	b.n	800d1a8 <__kernel_rem_pio2f+0x414>
 800d202:	eef0 7a47 	vmov.f32	s15, s14
 800d206:	e7d4      	b.n	800d1b2 <__kernel_rem_pio2f+0x41e>
 800d208:	ecb2 7a01 	vldmia	r2!, {s14}
 800d20c:	3301      	adds	r3, #1
 800d20e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d212:	e7d6      	b.n	800d1c2 <__kernel_rem_pio2f+0x42e>
 800d214:	edd2 7a00 	vldr	s15, [r2]
 800d218:	edd2 6a01 	vldr	s13, [r2, #4]
 800d21c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d220:	3801      	subs	r0, #1
 800d222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d226:	ed82 7a00 	vstr	s14, [r2]
 800d22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d22e:	edc2 7a01 	vstr	s15, [r2, #4]
 800d232:	e798      	b.n	800d166 <__kernel_rem_pio2f+0x3d2>
 800d234:	edd3 7a00 	vldr	s15, [r3]
 800d238:	edd3 6a01 	vldr	s13, [r3, #4]
 800d23c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d240:	3a01      	subs	r2, #1
 800d242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d246:	ed83 7a00 	vstr	s14, [r3]
 800d24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d24e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d252:	e78d      	b.n	800d170 <__kernel_rem_pio2f+0x3dc>
 800d254:	ed33 7a01 	vldmdb	r3!, {s14}
 800d258:	3c01      	subs	r4, #1
 800d25a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d25e:	e78f      	b.n	800d180 <__kernel_rem_pio2f+0x3ec>
 800d260:	eef1 6a66 	vneg.f32	s13, s13
 800d264:	eeb1 7a47 	vneg.f32	s14, s14
 800d268:	edc7 6a00 	vstr	s13, [r7]
 800d26c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d270:	eef1 7a67 	vneg.f32	s15, s15
 800d274:	e790      	b.n	800d198 <__kernel_rem_pio2f+0x404>
 800d276:	bf00      	nop

0800d278 <scalbnf>:
 800d278:	ee10 3a10 	vmov	r3, s0
 800d27c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d280:	d02b      	beq.n	800d2da <scalbnf+0x62>
 800d282:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d286:	d302      	bcc.n	800d28e <scalbnf+0x16>
 800d288:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d28c:	4770      	bx	lr
 800d28e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d292:	d123      	bne.n	800d2dc <scalbnf+0x64>
 800d294:	4b24      	ldr	r3, [pc, #144]	@ (800d328 <scalbnf+0xb0>)
 800d296:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d32c <scalbnf+0xb4>
 800d29a:	4298      	cmp	r0, r3
 800d29c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d2a0:	db17      	blt.n	800d2d2 <scalbnf+0x5a>
 800d2a2:	ee10 3a10 	vmov	r3, s0
 800d2a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2aa:	3a19      	subs	r2, #25
 800d2ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d2b0:	4288      	cmp	r0, r1
 800d2b2:	dd15      	ble.n	800d2e0 <scalbnf+0x68>
 800d2b4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d330 <scalbnf+0xb8>
 800d2b8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d334 <scalbnf+0xbc>
 800d2bc:	ee10 3a10 	vmov	r3, s0
 800d2c0:	eeb0 7a67 	vmov.f32	s14, s15
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfb8      	it	lt
 800d2c8:	eef0 7a66 	vmovlt.f32	s15, s13
 800d2cc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d2d0:	4770      	bx	lr
 800d2d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d338 <scalbnf+0xc0>
 800d2d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d2da:	4770      	bx	lr
 800d2dc:	0dd2      	lsrs	r2, r2, #23
 800d2de:	e7e5      	b.n	800d2ac <scalbnf+0x34>
 800d2e0:	4410      	add	r0, r2
 800d2e2:	28fe      	cmp	r0, #254	@ 0xfe
 800d2e4:	dce6      	bgt.n	800d2b4 <scalbnf+0x3c>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	dd06      	ble.n	800d2f8 <scalbnf+0x80>
 800d2ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d2ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d2f2:	ee00 3a10 	vmov	s0, r3
 800d2f6:	4770      	bx	lr
 800d2f8:	f110 0f16 	cmn.w	r0, #22
 800d2fc:	da09      	bge.n	800d312 <scalbnf+0x9a>
 800d2fe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d338 <scalbnf+0xc0>
 800d302:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d33c <scalbnf+0xc4>
 800d306:	ee10 3a10 	vmov	r3, s0
 800d30a:	eeb0 7a67 	vmov.f32	s14, s15
 800d30e:	2b00      	cmp	r3, #0
 800d310:	e7d9      	b.n	800d2c6 <scalbnf+0x4e>
 800d312:	3019      	adds	r0, #25
 800d314:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d318:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d31c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d340 <scalbnf+0xc8>
 800d320:	ee07 3a90 	vmov	s15, r3
 800d324:	e7d7      	b.n	800d2d6 <scalbnf+0x5e>
 800d326:	bf00      	nop
 800d328:	ffff3cb0 	.word	0xffff3cb0
 800d32c:	4c000000 	.word	0x4c000000
 800d330:	7149f2ca 	.word	0x7149f2ca
 800d334:	f149f2ca 	.word	0xf149f2ca
 800d338:	0da24260 	.word	0x0da24260
 800d33c:	8da24260 	.word	0x8da24260
 800d340:	33000000 	.word	0x33000000

0800d344 <floorf>:
 800d344:	ee10 3a10 	vmov	r3, s0
 800d348:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d34c:	3a7f      	subs	r2, #127	@ 0x7f
 800d34e:	2a16      	cmp	r2, #22
 800d350:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d354:	dc2b      	bgt.n	800d3ae <floorf+0x6a>
 800d356:	2a00      	cmp	r2, #0
 800d358:	da12      	bge.n	800d380 <floorf+0x3c>
 800d35a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d3c0 <floorf+0x7c>
 800d35e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d362:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36a:	dd06      	ble.n	800d37a <floorf+0x36>
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	da24      	bge.n	800d3ba <floorf+0x76>
 800d370:	2900      	cmp	r1, #0
 800d372:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <floorf+0x80>)
 800d374:	bf08      	it	eq
 800d376:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d37a:	ee00 3a10 	vmov	s0, r3
 800d37e:	4770      	bx	lr
 800d380:	4911      	ldr	r1, [pc, #68]	@ (800d3c8 <floorf+0x84>)
 800d382:	4111      	asrs	r1, r2
 800d384:	420b      	tst	r3, r1
 800d386:	d0fa      	beq.n	800d37e <floorf+0x3a>
 800d388:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d3c0 <floorf+0x7c>
 800d38c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d390:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d398:	ddef      	ble.n	800d37a <floorf+0x36>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bfbe      	ittt	lt
 800d39e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d3a2:	fa40 f202 	asrlt.w	r2, r0, r2
 800d3a6:	189b      	addlt	r3, r3, r2
 800d3a8:	ea23 0301 	bic.w	r3, r3, r1
 800d3ac:	e7e5      	b.n	800d37a <floorf+0x36>
 800d3ae:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d3b2:	d3e4      	bcc.n	800d37e <floorf+0x3a>
 800d3b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3b8:	4770      	bx	lr
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e7dd      	b.n	800d37a <floorf+0x36>
 800d3be:	bf00      	nop
 800d3c0:	7149f2ca 	.word	0x7149f2ca
 800d3c4:	bf800000 	.word	0xbf800000
 800d3c8:	007fffff 	.word	0x007fffff

0800d3cc <_init>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	bf00      	nop
 800d3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d2:	bc08      	pop	{r3}
 800d3d4:	469e      	mov	lr, r3
 800d3d6:	4770      	bx	lr

0800d3d8 <_fini>:
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	bf00      	nop
 800d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3de:	bc08      	pop	{r3}
 800d3e0:	469e      	mov	lr, r3
 800d3e2:	4770      	bx	lr
