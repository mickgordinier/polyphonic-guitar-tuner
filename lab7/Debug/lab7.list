
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b238  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e874  0801e874  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e874  0801e874  0002e874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e87c  0801e87c  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e87c  0801e87c  0002e87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e880  0801e880  0002e880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801e884  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000000c  0801e890  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0801e890  000302d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212ac  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4e  00000000  00000000  000513a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00054ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105d  00000000  00000000  00056500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163cd  00000000  00000000  0005755d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c9d  00000000  00000000  0006d92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006038  00000000  00000000  000755c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  0007b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003114  00000000  00000000  0007b676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000c8  00000000  00000000  0007e78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b3e0 	.word	0x0800b3e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	0800b3e0 	.word	0x0800b3e0

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	; 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_d2f>:
 8000a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a08:	bf24      	itt	cs
 8000a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a12:	d90d      	bls.n	8000a30 <__aeabi_d2f+0x30>
 8000a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a34:	d121      	bne.n	8000a7a <__aeabi_d2f+0x7a>
 8000a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3a:	bfbc      	itt	lt
 8000a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	4770      	bxlt	lr
 8000a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4a:	f1c2 0218 	rsb	r2, r2, #24
 8000a4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a56:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	f040 0001 	orrne.w	r0, r0, #1
 8000a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a6c:	ea40 000c 	orr.w	r0, r0, ip
 8000a70:	fa23 f302 	lsr.w	r3, r3, r2
 8000a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a78:	e7cc      	b.n	8000a14 <__aeabi_d2f+0x14>
 8000a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7e:	d107      	bne.n	8000a90 <__aeabi_d2f+0x90>
 8000a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a84:	bf1e      	ittt	ne
 8000a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8e:	4770      	bxne	lr
 8000a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab4:	f000 b970 	b.w	8000d98 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9e08      	ldr	r6, [sp, #32]
 8000ad6:	460d      	mov	r5, r1
 8000ad8:	4604      	mov	r4, r0
 8000ada:	460f      	mov	r7, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14a      	bne.n	8000b76 <__udivmoddi4+0xa6>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	d965      	bls.n	8000bb2 <__udivmoddi4+0xe2>
 8000ae6:	fab2 f382 	clz	r3, r2
 8000aea:	b143      	cbz	r3, 8000afe <__udivmoddi4+0x2e>
 8000aec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af0:	f1c3 0220 	rsb	r2, r3, #32
 8000af4:	409f      	lsls	r7, r3
 8000af6:	fa20 f202 	lsr.w	r2, r0, r2
 8000afa:	4317      	orrs	r7, r2
 8000afc:	409c      	lsls	r4, r3
 8000afe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b02:	fa1f f58c 	uxth.w	r5, ip
 8000b06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0a:	0c22      	lsrs	r2, r4, #16
 8000b0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b14:	fb01 f005 	mul.w	r0, r1, r5
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x62>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b24:	f080 811c 	bcs.w	8000d60 <__udivmoddi4+0x290>
 8000b28:	4290      	cmp	r0, r2
 8000b2a:	f240 8119 	bls.w	8000d60 <__udivmoddi4+0x290>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4462      	add	r2, ip
 8000b32:	1a12      	subs	r2, r2, r0
 8000b34:	b2a4      	uxth	r4, r4
 8000b36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b42:	fb00 f505 	mul.w	r5, r0, r5
 8000b46:	42a5      	cmp	r5, r4
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x90>
 8000b4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b52:	f080 8107 	bcs.w	8000d64 <__udivmoddi4+0x294>
 8000b56:	42a5      	cmp	r5, r4
 8000b58:	f240 8104 	bls.w	8000d64 <__udivmoddi4+0x294>
 8000b5c:	4464      	add	r4, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11e      	cbz	r6, 8000b72 <__udivmoddi4+0xa2>
 8000b6a:	40dc      	lsrs	r4, r3
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0xbc>
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	f000 80ed 	beq.w	8000d5a <__udivmoddi4+0x28a>
 8000b80:	2100      	movs	r1, #0
 8000b82:	e9c6 0500 	strd	r0, r5, [r6]
 8000b86:	4608      	mov	r0, r1
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	fab3 f183 	clz	r1, r3
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d149      	bne.n	8000c28 <__udivmoddi4+0x158>
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d302      	bcc.n	8000b9e <__udivmoddi4+0xce>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	f200 80f8 	bhi.w	8000d8e <__udivmoddi4+0x2be>
 8000b9e:	1a84      	subs	r4, r0, r2
 8000ba0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d0e2      	beq.n	8000b72 <__udivmoddi4+0xa2>
 8000bac:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb0:	e7df      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xe6>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f382 	clz	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x210>
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd4:	0c22      	lsrs	r2, r4, #16
 8000bd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bda:	fb0e f005 	mul.w	r0, lr, r5
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x124>
 8000be2:	eb1c 0202 	adds.w	r2, ip, r2
 8000be6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x122>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f200 80cb 	bhi.w	8000d88 <__udivmoddi4+0x2b8>
 8000bf2:	4645      	mov	r5, r8
 8000bf4:	1a12      	subs	r2, r2, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bfc:	fb07 2210 	mls	r2, r7, r0, r2
 8000c00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c04:	fb0e fe00 	mul.w	lr, lr, r0
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x14e>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	d202      	bcs.n	8000c1c <__udivmoddi4+0x14c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f200 80bb 	bhi.w	8000d92 <__udivmoddi4+0x2c2>
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c26:	e79f      	b.n	8000b68 <__udivmoddi4+0x98>
 8000c28:	f1c1 0720 	rsb	r7, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c36:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3e:	40fd      	lsrs	r5, r7
 8000c40:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	fb09 5518 	mls	r5, r9, r8, r5
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c58:	fb08 f50e 	mul.w	r5, r8, lr
 8000c5c:	42a5      	cmp	r5, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	fa00 f001 	lsl.w	r0, r0, r1
 8000c66:	d90b      	bls.n	8000c80 <__udivmoddi4+0x1b0>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c70:	f080 8088 	bcs.w	8000d84 <__udivmoddi4+0x2b4>
 8000c74:	42a5      	cmp	r5, r4
 8000c76:	f240 8085 	bls.w	8000d84 <__udivmoddi4+0x2b4>
 8000c7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7e:	4464      	add	r4, ip
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	b29d      	uxth	r5, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1da>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ca0:	d26c      	bcs.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	d96a      	bls.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	42ac      	cmp	r4, r5
 8000cb8:	46c8      	mov	r8, r9
 8000cba:	46ae      	mov	lr, r5
 8000cbc:	d356      	bcc.n	8000d6c <__udivmoddi4+0x29c>
 8000cbe:	d053      	beq.n	8000d68 <__udivmoddi4+0x298>
 8000cc0:	b156      	cbz	r6, 8000cd8 <__udivmoddi4+0x208>
 8000cc2:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc6:	eb64 040e 	sbc.w	r4, r4, lr
 8000cca:	fa04 f707 	lsl.w	r7, r4, r7
 8000cce:	40ca      	lsrs	r2, r1
 8000cd0:	40cc      	lsrs	r4, r1
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	f1c3 0120 	rsb	r1, r3, #32
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	fa20 f201 	lsr.w	r2, r0, r1
 8000cec:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf0:	409d      	lsls	r5, r3
 8000cf2:	432a      	orrs	r2, r5
 8000cf4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1510 	mls	r5, r7, r0, r1
 8000d04:	0c11      	lsrs	r1, r2, #16
 8000d06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0e:	428d      	cmp	r5, r1
 8000d10:	fa04 f403 	lsl.w	r4, r4, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x258>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1e:	d22f      	bcs.n	8000d80 <__udivmoddi4+0x2b0>
 8000d20:	428d      	cmp	r5, r1
 8000d22:	d92d      	bls.n	8000d80 <__udivmoddi4+0x2b0>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1b49      	subs	r1, r1, r5
 8000d2a:	b292      	uxth	r2, r2
 8000d2c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d30:	fb07 1115 	mls	r1, r7, r5, r1
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	fb05 f10e 	mul.w	r1, r5, lr
 8000d3c:	4291      	cmp	r1, r2
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x282>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d48:	d216      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4a:	4291      	cmp	r1, r2
 8000d4c:	d914      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4e:	3d02      	subs	r5, #2
 8000d50:	4462      	add	r2, ip
 8000d52:	1a52      	subs	r2, r2, r1
 8000d54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d58:	e738      	b.n	8000bcc <__udivmoddi4+0xfc>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e708      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000d60:	4639      	mov	r1, r7
 8000d62:	e6e6      	b.n	8000b32 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e6fb      	b.n	8000b60 <__udivmoddi4+0x90>
 8000d68:	4548      	cmp	r0, r9
 8000d6a:	d2a9      	bcs.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d74:	3b01      	subs	r3, #1
 8000d76:	e7a3      	b.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d78:	4645      	mov	r5, r8
 8000d7a:	e7ea      	b.n	8000d52 <__udivmoddi4+0x282>
 8000d7c:	462b      	mov	r3, r5
 8000d7e:	e794      	b.n	8000caa <__udivmoddi4+0x1da>
 8000d80:	4640      	mov	r0, r8
 8000d82:	e7d1      	b.n	8000d28 <__udivmoddi4+0x258>
 8000d84:	46d0      	mov	r8, sl
 8000d86:	e77b      	b.n	8000c80 <__udivmoddi4+0x1b0>
 8000d88:	3d02      	subs	r5, #2
 8000d8a:	4462      	add	r2, ip
 8000d8c:	e732      	b.n	8000bf4 <__udivmoddi4+0x124>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e70a      	b.n	8000ba8 <__udivmoddi4+0xd8>
 8000d92:	4464      	add	r4, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e742      	b.n	8000c1e <__udivmoddi4+0x14e>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200002c4 	.word	0x200002c4

08000dbc <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e033      	b.n	8000e34 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e48 <apply_hanning_window+0x8c>
 8000dda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dee:	eeb0 0a66 	vmov.f32	s0, s13
 8000df2:	f009 fdbd 	bl	800a970 <cosf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
 8000dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0a:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	ed93 7a00 	vldr	s14, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8c7      	bhi.n	8000dcc <apply_hanning_window+0x10>
	}
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40c90fdb 	.word	0x40c90fdb

08000e4c <find_peaks>:


void find_peaks(float32_t* data, uint32_t length, int32_t* peaks, uint32_t* num_peaks) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
    float32_t threshold = 0; // Adjust if needed
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
    *num_peaks = 0;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 1; i < length - 1; ++i) {
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e041      	b.n	8000ef0 <find_peaks+0xa4>
        if (data[i] > threshold && data[i] > data[i-1] && data[i] > data[i+1]) {
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	d531      	bpl.n	8000eea <find_peaks+0x9e>
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	ed93 7a00 	vldr	s14, [r3]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	dd1d      	ble.n	8000eea <find_peaks+0x9e>
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed0:	dd0b      	ble.n	8000eea <find_peaks+0x9e>
            peaks[*num_peaks] = i;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	601a      	str	r2, [r3, #0]
            (*num_peaks)++;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < length - 1; ++i) {
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3b8      	bcc.n	8000e6c <find_peaks+0x20>
        }
    }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <autocorrelate>:



void autocorrelate(float32_t* x, uint32_t N, float32_t* autocorrelation) {
 8000f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0c:	b093      	sub	sp, #76	; 0x4c
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6178      	str	r0, [r7, #20]
 8000f12:	6139      	str	r1, [r7, #16]
 8000f14:	60fa      	str	r2, [r7, #12]
 8000f16:	466b      	mov	r3, sp
 8000f18:	461e      	mov	r6, r3

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, N);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 fd31 	bl	800998c <arm_rfft_fast_init_f32>

    float32_t output[N];
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	643b      	str	r3, [r7, #64]	; 0x40
 8000f32:	2300      	movs	r3, #0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	0143      	lsls	r3, r0, #5
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f4a:	6838      	ldr	r0, [r7, #0]
 8000f4c:	0142      	lsls	r2, r0, #5
 8000f4e:	2300      	movs	r3, #0
 8000f50:	468a      	mov	sl, r1
 8000f52:	469b      	mov	fp, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000f60:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000f64:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000f68:	008b      	lsls	r3, r1, #2
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	ebad 0d03 	sub.w	sp, sp, r3
 8000f74:	466b      	mov	r3, sp
 8000f76:	3303      	adds	r3, #3
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_rfft_fast_f32(&fftInstance, x, output, 0);
 8000f7e:	f107 001c 	add.w	r0, r7, #28
 8000f82:	2300      	movs	r3, #0
 8000f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f86:	6979      	ldr	r1, [r7, #20]
 8000f88:	f008 fde4 	bl	8009b54 <arm_rfft_fast_f32>

    float32_t power_spectrum[N/2];
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	0859      	lsrs	r1, r3, #1
 8000f90:	460b      	mov	r3, r1
 8000f92:	3b01      	subs	r3, #1
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f96:	2300      	movs	r3, #0
 8000f98:	4688      	mov	r8, r1
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000fa8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000fac:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	461d      	mov	r5, r3
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	016b      	lsls	r3, r5, #5
 8000fc0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000fc4:	0162      	lsls	r2, r4, #5
 8000fc6:	008b      	lsls	r3, r1, #2
 8000fc8:	3307      	adds	r3, #7
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd2:	466b      	mov	r3, sp
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
    //arm_cmplx_mag_squared_f32(output, power_spectrum, N/2);
    power_spectrum[0] = output[0] * output[0];
 8000fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fee:	edc3 7a00 	vstr	s15, [r3]
    power_spectrum[1] = output[1] * output[1];
 8000ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ff4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001004:	edc3 7a01 	vstr	s15, [r3, #4]

    // Rest of the frequency bins (upto N/2)
    for (uint32_t i = 1; i < N / 2; ++i) {
 8001008:	2301      	movs	r3, #1
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
 800100c:	e036      	b.n	800107c <autocorrelate+0x174>
        power_spectrum[2 * i] = output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]; // Real part
 800100e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	ed93 7a00 	vldr	s14, [r3]
 800101c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	3301      	adds	r3, #1
 8001034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	edd3 6a00 	vldr	s13, [r3]
 800103e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3301      	adds	r3, #1
 8001044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	edc3 7a00 	vstr	s15, [r3]
        power_spectrum[2 * i + 1] = 0; // Imaginary part is 0
 8001064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3301      	adds	r3, #1
 800106a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 1; i < N / 2; ++i) {
 8001076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001078:	3301      	adds	r3, #1
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001082:	429a      	cmp	r2, r3
 8001084:	d3c3      	bcc.n	800100e <autocorrelate+0x106>
    }

    //arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);
 8001086:	f107 001c 	add.w	r0, r7, #28
 800108a:	2301      	movs	r3, #1
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001090:	f008 fd60 	bl	8009b54 <arm_rfft_fast_f32>

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
 8001094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f009 f938 	bl	800a310 <arm_abs_f32>
 80010a0:	46b5      	mov	sp, r6
}
 80010a2:	bf00      	nop
 80010a4:	374c      	adds	r7, #76	; 0x4c
 80010a6:	46bd      	mov	sp, r7
 80010a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <set_motor_speed>:


void set_motor_speed(int motor_speed) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f9fd 	bl	80004b8 <__aeabi_i2d>
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <set_motor_speed+0xa0>)
 80010c4:	f7ff fb8c 	bl	80007e0 <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	a319      	add	r3, pc, #100	; (adr r3, 8001138 <set_motor_speed+0x88>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa59 	bl	800058c <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a317      	add	r3, pc, #92	; (adr r3, 8001140 <set_motor_speed+0x90>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff f89a 	bl	8000220 <__adddf3>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <set_motor_speed+0xa4>)
 80010fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fe:	f7ff fb6f 	bl	80007e0 <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	a30f      	add	r3, pc, #60	; (adr r3, 8001148 <set_motor_speed+0x98>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa3c 	bl	800058c <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fc48 	bl	80009b0 <__aeabi_d2iz>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <set_motor_speed+0xa8>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6393      	str	r3, [r2, #56]	; 0x38
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	c28f5c29 	.word	0xc28f5c29
 800113c:	3fdc28f5 	.word	0x3fdc28f5
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	3ff47ae1 	.word	0x3ff47ae1
 8001148:	00000000 	.word	0x00000000
 800114c:	411e8480 	.word	0x411e8480
 8001150:	40590000 	.word	0x40590000
 8001154:	408f4000 	.word	0x408f4000
 8001158:	40000800 	.word	0x40000800

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	f5ad 4d40 	sub.w	sp, sp, #49152	; 0xc000
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 8001166:	4bc7      	ldr	r3, [pc, #796]	; (8001484 <main+0x328>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 800116c:	4bc6      	ldr	r3, [pc, #792]	; (8001488 <main+0x32c>)
 800116e:	f507 4440 	add.w	r4, r7, #49152	; 0xc000
 8001172:	f104 0434 	add.w	r4, r4, #52	; 0x34
 8001176:	461d      	mov	r5, r3
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001180:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8001184:	4bc1      	ldr	r3, [pc, #772]	; (800148c <main+0x330>)
 8001186:	f507 4440 	add.w	r4, r7, #49152	; 0xc000
 800118a:	f104 041c 	add.w	r4, r4, #28
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001198:	e884 0003 	stmia.w	r4, {r0, r1}
	char * E_high = "E (high)";
 800119c:	4bbc      	ldr	r3, [pc, #752]	; (8001490 <main+0x334>)
 800119e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80011a2:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80011a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f001 fa4b 	bl	8002642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 fa92 	bl	80016d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011b0:	f000 fad6 	bl	8001760 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 fd52 	bl	8001c5c <MX_GPIO_Init>
  MX_DMA_Init();
 80011b8:	f000 fd26 	bl	8001c08 <MX_DMA_Init>
  MX_ADC1_Init();
 80011bc:	f000 fb00 	bl	80017c0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80011c0:	f000 fb64 	bl	800188c <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 80011c4:	f000 fb96 	bl	80018f4 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 80011c8:	f000 fbe0 	bl	800198c <MX_SAI1_Init>
  MX_TIM1_Init();
 80011cc:	f000 fc14 	bl	80019f8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80011d0:	f000 fcbe 	bl	8001b50 <MX_TIM4_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 80011d4:	232d      	movs	r3, #45	; 0x2d
 80011d6:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80011da:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80011de:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 80011e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011e4:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80011e8:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80011ec:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 80011ee:	48a9      	ldr	r0, [pc, #676]	; (8001494 <main+0x338>)
 80011f0:	f006 fae0 	bl	80077b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011f4:	2104      	movs	r1, #4
 80011f6:	48a8      	ldr	r0, [pc, #672]	; (8001498 <main+0x33c>)
 80011f8:	f006 fc04 	bl	8007a04 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 80011fc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001200:	f103 0310 	add.w	r3, r3, #16
 8001204:	3b74      	subs	r3, #116	; 0x74
 8001206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800120a:	4619      	mov	r1, r3
 800120c:	48a3      	ldr	r0, [pc, #652]	; (800149c <main+0x340>)
 800120e:	f001 fdd1 	bl	8002db4 <HAL_ADC_Start_DMA>
//		  float32_t s = sin(r) + sin(r*4) * 0.5 + sin(r*3) * 0.25;
//		  signal[i] = s;
//	  }


	  while(convFlag == 0) {;}
 8001212:	bf00      	nop
 8001214:	4b9b      	ldr	r3, [pc, #620]	; (8001484 <main+0x328>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0fb      	beq.n	8001214 <main+0xb8>


	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001222:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e031      	b.n	800128e <main+0x132>
		  signal[i] = (double)(ADC_BUFFER[i]);
 800122a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800122e:	f103 0310 	add.w	r3, r3, #16
 8001232:	461a      	mov	r2, r3
 8001234:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001238:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	f833 3c74 	ldrh.w	r3, [r3, #-116]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f925 	bl	8000498 <__aeabi_ui2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fbd3 	bl	8000a00 <__aeabi_d2f>
 800125a:	4602      	mov	r2, r0
 800125c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001260:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001264:	4619      	mov	r1, r3
 8001266:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800126a:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3b74      	subs	r3, #116	; 0x74
 8001276:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001278:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800127c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001288:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001292:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129c:	dbc5      	blt.n	800122a <main+0xce>
	  }


	  apply_hanning_window(&signal, BUFFER_LENGTH);
 800129e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80012a2:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80012a6:	3b74      	subs	r3, #116	; 0x74
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fd85 	bl	8000dbc <apply_hanning_window>


	  autocorrelate(signal, BUFFER_LENGTH,  autocorrelation);
 80012b2:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80012b6:	f102 0210 	add.w	r2, r2, #16
 80012ba:	3a74      	subs	r2, #116	; 0x74
 80012bc:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80012c0:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80012c4:	3b74      	subs	r3, #116	; 0x74
 80012c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe1c 	bl	8000f08 <autocorrelate>

	  uint32_t peaks[BUFFER_LENGTH/2];
	  uint32_t num_peaks = 0;
 80012d0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80012d4:	f103 0310 	add.w	r3, r3, #16
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	f842 3c78 	str.w	r3, [r2, #-120]

	  find_peaks(autocorrelation, BUFFER_LENGTH/2, peaks, &num_peaks); //returns peak indices
 80012e0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80012e4:	f103 0310 	add.w	r3, r3, #16
 80012e8:	3b78      	subs	r3, #120	; 0x78
 80012ea:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80012ee:	3a90      	subs	r2, #144	; 0x90
 80012f0:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 80012f4:	f100 0010 	add.w	r0, r0, #16
 80012f8:	3874      	subs	r0, #116	; 0x74
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	f7ff fda5 	bl	8000e4c <find_peaks>


	  float32_t freq = 0.0f;
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800130a:	f102 0258 	add.w	r2, r2, #88	; 0x58
 800130e:	6013      	str	r3, [r2, #0]
	     if (num_peaks > 0) {
 8001310:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001314:	f103 0310 	add.w	r3, r3, #16
 8001318:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80aa 	beq.w	8001476 <main+0x31a>
	         // Get the highest valid peak
	         uint32_t max_peak_index = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001328:	f102 0284 	add.w	r2, r2, #132	; 0x84
 800132c:	6013      	str	r3, [r2, #0]
	         float32_t max_value = 0;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001336:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800133a:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 800133c:	2300      	movs	r3, #0
 800133e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001342:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e06a      	b.n	8001420 <main+0x2c4>
	             int32_t peak = peaks[i];
 800134a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800134e:	461a      	mov	r2, r3
 8001350:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001354:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8001362:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001366:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800136a:	6013      	str	r3, [r2, #0]
	             //peak greater than lowest period and smaller than largest possible period
	             if (peak > LOWEST_PERIOD && peak < HIGHEST_PERIOD) { //if valid peak
 800136c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001370:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800137a:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d242      	bcs.n	800140a <main+0x2ae>
 8001384:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001388:	f103 0354 	add.w	r3, r3, #84	; 0x54
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001392:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d936      	bls.n	800140a <main+0x2ae>
	                 if (autocorrelation[peak] > max_value) {
 800139c:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80013a0:	f103 0310 	add.w	r3, r3, #16
 80013a4:	461a      	mov	r2, r3
 80013a6:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80013aa:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b74      	subs	r3, #116	; 0x74
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80013be:	f103 0380 	add.w	r3, r3, #128	; 0x80
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	d51c      	bpl.n	800140a <main+0x2ae>
	                     max_peak_index = peak;
 80013d0:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80013d4:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80013de:	f102 0284 	add.w	r2, r2, #132	; 0x84
 80013e2:	6013      	str	r3, [r2, #0]
	                     max_value = autocorrelation[peak];
 80013e4:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80013e8:	f103 0310 	add.w	r3, r3, #16
 80013ec:	461a      	mov	r2, r3
 80013ee:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80013f2:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b74      	subs	r3, #116	; 0x74
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001404:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8001408:	6013      	str	r3, [r2, #0]
	         for (uint32_t i = 0; i < num_peaks; ++i) {
 800140a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800140e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800141a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001424:	f103 0310 	add.w	r3, r3, #16
 8001428:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800142c:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001430:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d387      	bcc.n	800134a <main+0x1ee>
	                 }
	             }
	         }
	         if (max_value > 0) {
 800143a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800143e:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	dd12      	ble.n	8001476 <main+0x31a>
	             measured_freq = (float32_t)SAMPLING_RATE / max_peak_index;
 8001450:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001454:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001462:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80014a0 <main+0x344>
 8001466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146a:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800146e:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001472:	edc3 7a00 	vstr	s15, [r3]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001476:	2300      	movs	r3, #0
 8001478:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800147c:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e03f      	b.n	8001504 <main+0x3a8>
 8001484:	200002c4 	.word	0x200002c4
 8001488:	0800b404 	.word	0x0800b404
 800148c:	0800b434 	.word	0x0800b434
 8001490:	0800b3f8 	.word	0x0800b3f8
 8001494:	2000022c 	.word	0x2000022c
 8001498:	20000278 	.word	0x20000278
 800149c:	20000028 	.word	0x20000028
 80014a0:	469c4000 	.word	0x469c4000
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 80014a4:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80014a8:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 80014b4:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80014b8:	443b      	add	r3, r7
 80014ba:	3b5c      	subs	r3, #92	; 0x5c
 80014bc:	ed93 7a00 	vldr	s14, [r3]
 80014c0:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80014c4:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80014d4:	f103 0310 	add.w	r3, r3, #16
 80014d8:	461a      	mov	r2, r3
 80014da:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80014de:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b90      	subs	r3, #144	; 0x90
 80014ea:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 80014ee:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80014f2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80014fe:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001508:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b05      	cmp	r3, #5
 8001510:	ddc8      	ble.n	80014a4 <main+0x348>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8001512:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8001516:	f101 0110 	add.w	r1, r1, #16
 800151a:	3990      	subs	r1, #144	; 0x90
 800151c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001520:	f103 0310 	add.w	r3, r3, #16
 8001524:	3b90      	subs	r3, #144	; 0x90
 8001526:	2206      	movs	r2, #6
 8001528:	4618      	mov	r0, r3
 800152a:	f008 fef1 	bl	800a310 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 800152e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001532:	f103 0310 	add.w	r3, r3, #16
 8001536:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800153a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800153e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001542:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;;
 8001544:	2300      	movs	r3, #0
 8001546:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800154a:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800154e:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001550:	2300      	movs	r3, #0
 8001552:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001556:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e041      	b.n	80015e2 <main+0x486>
	    	 if (min_freqs[i] < current_min){
 800155e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001562:	f103 0310 	add.w	r3, r3, #16
 8001566:	461a      	mov	r2, r3
 8001568:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800156c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b90      	subs	r3, #144	; 0x90
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001580:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	dd1c      	ble.n	80015cc <main+0x470>
	    		 current_min = min_freqs[i];
 8001592:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8001596:	f103 0310 	add.w	r3, r3, #16
 800159a:	461a      	mov	r2, r3
 800159c:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80015a0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b90      	subs	r3, #144	; 0x90
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80015b2:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80015b6:	6013      	str	r3, [r2, #0]
	    		 index = i;
 80015b8:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80015bc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80015c6:	f102 0273 	add.w	r2, r2, #115	; 0x73
 80015ca:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 80015cc:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80015d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80015dc:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80015e6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	ddb6      	ble.n	800155e <main+0x402>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 80015f0:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80015f4:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8001600:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001604:	443b      	add	r3, r7
 8001606:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800160a:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 800160e:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8001612:	6013      	str	r3, [r2, #0]

	     //manually compensate for high E being off
	     if(strcmp(detected_string, E_high) == 0){
 8001614:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001618:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001622:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	f7fe fdea 	bl	8000200 <strcmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <main+0x4f6>
	    	measured_freq += 2.0; //subject to change, but add 2Hz
 8001632:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001636:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001646:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800164a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800164e:	edc3 7a00 	vstr	s15, [r3]
	     }

	     string_offset = measured_freq - string_freqs[index];
 8001652:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001656:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8001662:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001666:	443b      	add	r3, r7
 8001668:	3b5c      	subs	r3, #92	; 0x5c
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001672:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001682:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001686:	edc3 7a00 	vstr	s15, [r3]


	      set_motor_speed(44);
 800168a:	202c      	movs	r0, #44	; 0x2c
 800168c:	f7ff fd10 	bl	80010b0 <set_motor_speed>

	     for (int i = 0; i < 1000000; ++i);
 8001690:	2300      	movs	r3, #0
 8001692:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 8001696:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e00a      	b.n	80016b4 <main+0x558>
 800169e:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80016a2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f507 4240 	add.w	r2, r7, #49152	; 0xc000
 80016ae:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 80016b8:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <main+0x570>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	ddec      	ble.n	800169e <main+0x542>

	     //set_motor_speed(55);


	  convFlag = 0;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <main+0x574>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
  {
 80016ca:	e597      	b.n	80011fc <main+0xa0>
 80016cc:	000f423f 	.word	0x000f423f
 80016d0:	200002c4 	.word	0x200002c4

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b096      	sub	sp, #88	; 0x58
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2244      	movs	r2, #68	; 0x44
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 f918 	bl	800a918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016fa:	f002 ffad 	bl	8004658 <HAL_PWREx_ControlVoltageScaling>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001704:	f000 fc5e 	bl	8001fc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001708:	2310      	movs	r3, #16
 800170a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001714:	2360      	movs	r3, #96	; 0x60
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f84d 	bl	80047c0 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800172c:	f000 fc4a 	bl	8001fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fc53 	bl	8004ff4 <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001754:	f000 fc36 	bl	8001fc4 <Error_Handler>
  }
}
 8001758:	bf00      	nop
 800175a:	3758      	adds	r7, #88	; 0x58
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0a6      	sub	sp, #152	; 0x98
 8001764:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2294      	movs	r2, #148	; 0x94
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f009 f8d3 	bl	800a918 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8001772:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001778:	2300      	movs	r3, #0
 800177a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800177c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001784:	2301      	movs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800178c:	2310      	movs	r3, #16
 800178e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <PeriphCommonClock_Config+0x5c>)
 800179e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fee4 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80017ae:	f000 fc09 	bl	8001fc4 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3798      	adds	r7, #152	; 0x98
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	01010000 	.word	0x01010000

080017c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017d8:	4a2a      	ldr	r2, [pc, #168]	; (8001884 <MX_ADC1_Init+0xc4>)
 80017da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017f8:	2204      	movs	r2, #4
 80017fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <MX_ADC1_Init+0xc0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <MX_ADC1_Init+0xc0>)
 800180a:	2201      	movs	r2, #1
 800180c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001818:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_ADC1_Init+0xc0>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <MX_ADC1_Init+0xc0>)
 800183e:	f001 f973 	bl	8002b28 <HAL_ADC_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001848:	f000 fbbc 	bl	8001fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_ADC1_Init+0xc8>)
 800184e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001850:	2306      	movs	r3, #6
 8001852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001854:	2307      	movs	r3, #7
 8001856:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001858:	237f      	movs	r3, #127	; 0x7f
 800185a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800185c:	2304      	movs	r3, #4
 800185e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_ADC1_Init+0xc0>)
 800186a:	f001 fb3b 	bl	8002ee4 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001874:	f000 fba6 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000028 	.word	0x20000028
 8001884:	50040000 	.word	0x50040000
 8001888:	04300002 	.word	0x04300002

0800188c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001892:	463b      	mov	r3, r7
 8001894:	2228      	movs	r2, #40	; 0x28
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f009 f83d 	bl	800a918 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_DAC1_Init+0x60>)
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_DAC1_Init+0x64>)
 80018a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_DAC1_Init+0x60>)
 80018a6:	f002 f944 	bl	8003b32 <HAL_DAC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80018b0:	f000 fb88 	bl	8001fc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_DAC1_Init+0x60>)
 80018d4:	f002 f950 	bl	8003b78 <HAL_DAC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 80018de:	f000 fb71 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000f0 	.word	0x200000f0
 80018f0:	40007400 	.word	0x40007400

080018f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <MX_LPUART1_UART_Init+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 800193e:	f007 f8f5 	bl	8008b2c <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001948:	f000 fb3c 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194c:	2100      	movs	r1, #0
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001950:	f007 fe8a 	bl	8009668 <HAL_UARTEx_SetTxFifoThreshold>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800195a:	f000 fb33 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001962:	f007 febf 	bl	80096e4 <HAL_UARTEx_SetRxFifoThreshold>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 fb2a 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_LPUART1_UART_Init+0x90>)
 8001972:	f007 fe40 	bl	80095f6 <HAL_UARTEx_DisableFifoMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800197c:	f000 fb22 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000104 	.word	0x20000104
 8001988:	40008000 	.word	0x40008000

0800198c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_SAI1_Init+0x60>)
 8001992:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <MX_SAI1_Init+0x64>)
 8001994:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_SAI1_Init+0x60>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_SAI1_Init+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_SAI1_Init+0x60>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_SAI1_Init+0x60>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_SAI1_Init+0x60>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <MX_SAI1_Init+0x60>)
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <MX_SAI1_Init+0x68>)
 80019b8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SAI1_Init+0x60>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <MX_SAI1_Init+0x60>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SAI1_Init+0x60>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_SAI1_Init+0x60>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80019d2:	2302      	movs	r3, #2
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_SAI1_Init+0x60>)
 80019da:	f005 fb15 	bl	8007008 <HAL_SAI_InitProtocol>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80019e4:	f000 faee 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000198 	.word	0x20000198
 80019f0:	40015404 	.word	0x40015404
 80019f4:	0002ee00 	.word	0x0002ee00

080019f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b09a      	sub	sp, #104	; 0x68
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	222c      	movs	r2, #44	; 0x2c
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f008 ff70 	bl	800a918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a3a:	4a44      	ldr	r2, [pc, #272]	; (8001b4c <MX_TIM1_Init+0x154>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8001a3e:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a40:	2213      	movs	r2, #19
 8001a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a62:	4839      	ldr	r0, [pc, #228]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a64:	f005 fe4e 	bl	8007704 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a6e:	f000 faa9 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4832      	ldr	r0, [pc, #200]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a80:	f006 fa54 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a8a:	f000 fa9b 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001a8e:	482e      	ldr	r0, [pc, #184]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001a90:	f005 ff00 	bl	8007894 <HAL_TIM_OC_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a9a:	f000 fa93 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4825      	ldr	r0, [pc, #148]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001ab2:	f006 ff35 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001abc:	f000 fa82 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4818      	ldr	r0, [pc, #96]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001ae6:	f006 f893 	bl	8007c10 <HAL_TIM_OC_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001af0:	f000 fa68 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001b2a:	f006 ff81 	bl	8008a30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b34:	f000 fa46 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <MX_TIM1_Init+0x150>)
 8001b3a:	f000 fc67 	bl	800240c <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3768      	adds	r7, #104	; 0x68
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000022c 	.word	0x2000022c
 8001b4c:	40012c00 	.word	0x40012c00

08001b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <MX_TIM4_Init+0xb4>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b9a:	4819      	ldr	r0, [pc, #100]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001b9c:	f005 fedb 	bl	8007956 <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ba6:	f000 fa0d 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001bba:	f006 feb1 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001bc4:	f000 f9fe 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	; 0x60
 8001bca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 8001bcc:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001be2:	f006 f88f 	bl	8007d04 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001bec:	f000 f9ea 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM4_Init+0xb0>)
 8001bf2:	f000 fc0b 	bl	800240c <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000278 	.word	0x20000278
 8001c04:	40000800 	.word	0x40000800

08001c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6493      	str	r3, [r2, #72]	; 0x48
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6493      	str	r3, [r2, #72]	; 0x48
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	200b      	movs	r0, #11
 8001c44:	f001 ff3f 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c48:	200b      	movs	r0, #11
 8001c4a:	f001 ff58 	bl	8003afe <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000

08001c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	4bb1      	ldr	r3, [pc, #708]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4ab0      	ldr	r2, [pc, #704]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c78:	f043 0310 	orr.w	r3, r3, #16
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4bae      	ldr	r3, [pc, #696]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4bab      	ldr	r3, [pc, #684]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4aaa      	ldr	r2, [pc, #680]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4ba8      	ldr	r3, [pc, #672]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	4ba5      	ldr	r3, [pc, #660]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4aa4      	ldr	r2, [pc, #656]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4ba2      	ldr	r3, [pc, #648]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cba:	4b9f      	ldr	r3, [pc, #636]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a9e      	ldr	r2, [pc, #632]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b9c      	ldr	r3, [pc, #624]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a98      	ldr	r2, [pc, #608]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b96      	ldr	r3, [pc, #600]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b93      	ldr	r3, [pc, #588]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a92      	ldr	r2, [pc, #584]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	4b8d      	ldr	r3, [pc, #564]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a8c      	ldr	r2, [pc, #560]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1a:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a86      	ldr	r2, [pc, #536]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001d32:	f002 fd35 	bl	80047a0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d36:	2307      	movs	r3, #7
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	487a      	ldr	r0, [pc, #488]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001d52:	f002 facf 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d56:	2301      	movs	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d66:	2301      	movs	r3, #1
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f002 fabe 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d78:	23e0      	movs	r3, #224	; 0xe0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f002 faad 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001daa:	2302      	movs	r3, #2
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	4862      	ldr	r0, [pc, #392]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001db6:	f002 fa9d 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001dba:	2344      	movs	r3, #68	; 0x44
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	485c      	ldr	r0, [pc, #368]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001dce:	f002 fa91 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de4:	2301      	movs	r3, #1
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4854      	ldr	r0, [pc, #336]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001df0:	f002 fa80 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001df4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e06:	230d      	movs	r3, #13
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0e:	4619      	mov	r1, r3
 8001e10:	484b      	ldr	r0, [pc, #300]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e12:	f002 fa6f 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001e28:	230e      	movs	r3, #14
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4843      	ldr	r0, [pc, #268]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e34:	f002 fa5e 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	483b      	ldr	r0, [pc, #236]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001e56:	f002 fa4d 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001e6a:	230d      	movs	r3, #13
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4834      	ldr	r0, [pc, #208]	; (8001f48 <MX_GPIO_Init+0x2ec>)
 8001e76:	f002 fa3d 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	482c      	ldr	r0, [pc, #176]	; (8001f48 <MX_GPIO_Init+0x2ec>)
 8001e96:	f002 fa2d 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e9a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eac:	230c      	movs	r3, #12
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4824      	ldr	r0, [pc, #144]	; (8001f48 <MX_GPIO_Init+0x2ec>)
 8001eb8:	f002 fa1c 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001ebc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f002 fa0a 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f002 f9fc 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001efc:	2301      	movs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	480b      	ldr	r0, [pc, #44]	; (8001f44 <MX_GPIO_Init+0x2e8>)
 8001f18:	f002 f9ec 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	4619      	mov	r1, r3
 8001f36:	e009      	b.n	8001f4c <MX_GPIO_Init+0x2f0>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	48001400 	.word	0x48001400
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <MX_GPIO_Init+0x360>)
 8001f4e:	f002 f9d1 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f52:	2378      	movs	r3, #120	; 0x78
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f62:	2307      	movs	r3, #7
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <MX_GPIO_Init+0x360>)
 8001f6e:	f002 f9c1 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f72:	2338      	movs	r3, #56	; 0x38
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f82:	2306      	movs	r3, #6
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <MX_GPIO_Init+0x364>)
 8001f8e:	f002 f9b1 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_GPIO_Init+0x364>)
 8001fb0:	f002 f9a0 	bl	80042f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	; 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	48000c00 	.word	0x48000c00
 8001fc0:	48000400 	.word	0x48000400

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc8:	b672      	cpsid	i
}
 8001fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <Error_Handler+0x8>
	...

08001fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x44>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x44>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x44>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_MspInit+0x44>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_MspInit+0x44>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_MspInit+0x44>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a44      	ldr	r2, [pc, #272]	; (8002148 <HAL_ADC_MspInit+0x130>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f040 8081 	bne.w	800213e <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800203c:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_ADC_MspInit+0x134>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002042:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_ADC_MspInit+0x134>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HAL_ADC_MspInit+0x134>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_ADC_MspInit+0x134>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	4a36      	ldr	r2, [pc, #216]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_ADC_MspInit+0x134>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_ADC_MspInit+0x134>)
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_ADC_MspInit+0x134>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800209c:	233f      	movs	r3, #63	; 0x3f
 800209e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020a0:	230b      	movs	r3, #11
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4828      	ldr	r0, [pc, #160]	; (8002150 <HAL_ADC_MspInit+0x138>)
 80020b0:	f002 f920 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80020b4:	230a      	movs	r3, #10
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020b8:	230b      	movs	r3, #11
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f002 f913 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020d2:	230b      	movs	r3, #11
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	481c      	ldr	r0, [pc, #112]	; (8002154 <HAL_ADC_MspInit+0x13c>)
 80020e2:	f002 f907 	bl	80042f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_ADC_MspInit+0x140>)
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_ADC_MspInit+0x144>)
 80020ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_ADC_MspInit+0x140>)
 80020ee:	2205      	movs	r2, #5
 80020f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_ADC_MspInit+0x140>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_ADC_MspInit+0x140>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_ADC_MspInit+0x140>)
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_ADC_MspInit+0x140>)
 8002106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_ADC_MspInit+0x140>)
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_ADC_MspInit+0x140>)
 8002116:	2220      	movs	r2, #32
 8002118:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_ADC_MspInit+0x140>)
 800211c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002120:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_ADC_MspInit+0x140>)
 8002124:	f001 fe74 	bl	8003e10 <HAL_DMA_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800212e:	f7ff ff49 	bl	8001fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_ADC_MspInit+0x140>)
 8002136:	651a      	str	r2, [r3, #80]	; 0x50
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_ADC_MspInit+0x140>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3730      	adds	r7, #48	; 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	50040000 	.word	0x50040000
 800214c:	40021000 	.word	0x40021000
 8002150:	48000800 	.word	0x48000800
 8002154:	48000400 	.word	0x48000400
 8002158:	20000090 	.word	0x20000090
 800215c:	40020008 	.word	0x40020008

08002160 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_DAC_MspInit+0x74>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d124      	bne.n	80021cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 8002188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_DAC_MspInit+0x78>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021b2:	2310      	movs	r3, #16
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b6:	2303      	movs	r3, #3
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f002 f894 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40007400 	.word	0x40007400
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0ae      	sub	sp, #184	; 0xb8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	2294      	movs	r2, #148	; 0x94
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fb8b 	bl	800a918 <memset>
  if(huart->Instance==LPUART1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_UART_MspInit+0xb4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d13d      	bne.n	8002288 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800220c:	2320      	movs	r3, #32
 800220e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002210:	2300      	movs	r3, #0
 8002212:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	4618      	mov	r0, r3
 800221a:	f003 f9a9 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002224:	f7ff fece 	bl	8001fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_MspInit+0xb8>)
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_UART_MspInit+0xb8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_UART_MspInit+0xb8>)
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_UART_MspInit+0xb8>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_UART_MspInit+0xb8>)
 8002246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_UART_MspInit+0xb8>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002258:	f002 faa2 	bl	80047a0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800225c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002276:	2308      	movs	r3, #8
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002280:	4619      	mov	r1, r3
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_UART_MspInit+0xbc>)
 8002284:	f002 f836 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	37b8      	adds	r7, #184	; 0xb8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40008000 	.word	0x40008000
 8002294:	40021000 	.word	0x40021000
 8002298:	48001800 	.word	0x48001800

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_TIM_Base_MspInit+0xa0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d139      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_TIM_Base_MspInit+0xa4>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80022ee:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80022f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002300:	2301      	movs	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4619      	mov	r1, r3
 800230a:	480e      	ldr	r0, [pc, #56]	; (8002344 <HAL_TIM_Base_MspInit+0xa8>)
 800230c:	f001 fff2 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002310:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002322:	2303      	movs	r3, #3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_TIM_Base_MspInit+0xa8>)
 800232e:	f001 ffe1 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40021000 	.word	0x40021000
 8002344:	48001000 	.word	0x48001000

08002348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_TIM_PWM_MspInit+0xb4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d144      	bne.n	80023f4 <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_TIM_PWM_MspInit+0xb8>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023c4:	2302      	movs	r3, #2
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <HAL_TIM_PWM_MspInit+0xbc>)
 80023d0:	f001 ff90 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023d4:	2301      	movs	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023e4:	2302      	movs	r3, #2
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <HAL_TIM_PWM_MspInit+0xc0>)
 80023f0:	f001 ff80 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40000800 	.word	0x40000800
 8002400:	40021000 	.word	0x40021000
 8002404:	48000c00 	.word	0x48000c00
 8002408:	48001000 	.word	0x48001000

0800240c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_TIM_MspPostInit+0xac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d11d      	bne.n	800246a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8002446:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4817      	ldr	r0, [pc, #92]	; (80024c0 <HAL_TIM_MspPostInit+0xb4>)
 8002464:	f001 ff46 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002468:	e021      	b.n	80024ae <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_TIM_MspPostInit+0xb8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d11c      	bne.n	80024ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_TIM_MspPostInit+0xb0>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800248c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800249e:	2302      	movs	r3, #2
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <HAL_TIM_MspPostInit+0xbc>)
 80024aa:	f001 ff23 	bl	80042f4 <HAL_GPIO_Init>
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48001000 	.word	0x48001000
 80024c4:	40000800 	.word	0x40000800
 80024c8:	48000c00 	.word	0x48000c00

080024cc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_SAI_MspInit+0x84>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d134      	bne.n	8002548 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_SAI_MspInit+0x88>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_SAI_MspInit+0x8c>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_SAI_MspInit+0x8c>)
 80024ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f0:	6613      	str	r3, [r2, #96]	; 0x60
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_SAI_MspInit+0x8c>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_SAI_MspInit+0x88>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_SAI_MspInit+0x88>)
 8002506:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002508:	237c      	movs	r3, #124	; 0x7c
 800250a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002518:	230d      	movs	r3, #13
 800251a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	480e      	ldr	r0, [pc, #56]	; (800255c <HAL_SAI_MspInit+0x90>)
 8002524:	f001 fee6 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002538:	230d      	movs	r3, #13
 800253a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <HAL_SAI_MspInit+0x94>)
 8002544:	f001 fed6 	bl	80042f4 <HAL_GPIO_Init>

    }
}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40015404 	.word	0x40015404
 8002554:	200002c8 	.word	0x200002c8
 8002558:	40021000 	.word	0x40021000
 800255c:	48001000 	.word	0x48001000
 8002560:	48001400 	.word	0x48001400

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002568:	e7fe      	b.n	8002568 <NMI_Handler+0x4>

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <HardFault_Handler+0x4>

08002570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <MemManage_Handler+0x4>

08002576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler+0x4>

08002582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b0:	f000 f89c 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <DMA1_Channel1_IRQHandler+0x10>)
 80025be:	f001 fd4a 	bl	8004056 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000090 	.word	0x20000090

080025cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <SystemInit+0x20>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <SystemInit+0x20>)
 80025d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f4:	f7ff ffea 	bl	80025cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <LoopForever+0x6>)
  ldr r1, =_edata
 80025fa:	490d      	ldr	r1, [pc, #52]	; (8002630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <LoopForever+0xe>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002610:	4c0a      	ldr	r4, [pc, #40]	; (800263c <LoopForever+0x16>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261e:	f008 f983 	bl	800a928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002622:	f7fe fd9b 	bl	800115c <main>

08002626 <LoopForever>:

LoopForever:
    b LoopForever
 8002626:	e7fe      	b.n	8002626 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002628:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002634:	0801e884 	.word	0x0801e884
  ldr r2, =_sbss
 8002638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800263c:	200002d0 	.word	0x200002d0

08002640 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <ADC1_IRQHandler>

08002642 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f001 fa2f 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f80e 	bl	8002674 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	71fb      	strb	r3, [r7, #7]
 8002662:	e001      	b.n	8002668 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002664:	f7ff fcb4 	bl	8001fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002668:	79fb      	ldrb	r3, [r7, #7]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_InitTick+0x6c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_InitTick+0x70>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_InitTick+0x6c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 fa3b 	bl	8003b1a <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d809      	bhi.n	80026c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b0:	2200      	movs	r2, #0
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f001 fa05 	bl	8003ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_InitTick+0x74>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e007      	b.n	80026d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e004      	b.n	80026d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e001      	b.n	80026d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000008 	.word	0x20000008
 8002710:	200002cc 	.word	0x200002cc

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	200002cc 	.word	0x200002cc

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000008 	.word	0x20000008

08002774 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <LL_ADC_SetOffset+0x44>)
 80027fe:	4013      	ands	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	03fff000 	.word	0x03fff000

08002824 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3360      	adds	r3, #96	; 0x60
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3330      	adds	r3, #48	; 0x30
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	211f      	movs	r1, #31
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	401a      	ands	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	f003 011f 	and.w	r1, r3, #31
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3314      	adds	r3, #20
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0e5b      	lsrs	r3, r3, #25
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0d1b      	lsrs	r3, r3, #20
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2107      	movs	r1, #7
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0d1b      	lsrs	r3, r3, #20
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0318 	and.w	r3, r3, #24
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029a4:	40d9      	lsrs	r1, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	400b      	ands	r3, r1
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	0007ffff 	.word	0x0007ffff

080029c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6093      	str	r3, [r2, #8]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a00:	d101      	bne.n	8002a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a50:	d101      	bne.n	8002a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <LL_ADC_IsEnabled+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_ADC_IsEnabled+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac6:	f043 0204 	orr.w	r2, r3, #4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d101      	bne.n	8002b18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e129      	b.n	8002d96 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fa61 	bl	8002018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff3f 	bl	80029ec <LL_ADC_IsDeepPowerDownEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff25 	bl	80029c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff5a 	bl	8002a3c <LL_ADC_IsInternalRegulatorEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d115      	bne.n	8002bba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff3e 	bl	8002a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b98:	4b81      	ldr	r3, [pc, #516]	; (8002da0 <HAL_ADC_Init+0x278>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	4a81      	ldr	r2, [pc, #516]	; (8002da4 <HAL_ADC_Init+0x27c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff3c 	bl	8002a3c <LL_ADC_IsInternalRegulatorEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff75 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 80c2 	bne.w	8002d84 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 80be 	bne.w	8002d84 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c10:	f043 0202 	orr.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff35 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c28:	485f      	ldr	r0, [pc, #380]	; (8002da8 <HAL_ADC_Init+0x280>)
 8002c2a:	f7ff ff2f 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	485c      	ldr	r0, [pc, #368]	; (8002dac <HAL_ADC_Init+0x284>)
 8002c3c:	f7ff fd9a 	bl	8002774 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e5b      	ldrb	r3, [r3, #25]
 8002c44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	3b01      	subs	r3, #1
 8002c74:	045b      	lsls	r3, r3, #17
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b44      	ldr	r3, [pc, #272]	; (8002db0 <HAL_ADC_Init+0x288>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff25 	bl	8002b00 <LL_ADC_INJ_IsConversionOngoing>
 8002cb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d140      	bne.n	8002d40 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13d      	bne.n	8002d40 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e1b      	ldrb	r3, [r3, #24]
 8002ccc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce6:	f023 0306 	bic.w	r3, r3, #6
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d118      	bne.n	8002d30 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d14:	4311      	orrs	r1, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d20:	430a      	orrs	r2, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e007      	b.n	8002d40 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10c      	bne.n	8002d62 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f023 010f 	bic.w	r1, r3, #15
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d60:	e007      	b.n	8002d72 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 020f 	bic.w	r2, r2, #15
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	; 0x58
 8002d82:	e007      	b.n	8002d94 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f043 0210 	orr.w	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000
 8002da4:	053e2d63 	.word	0x053e2d63
 8002da8:	50040000 	.word	0x50040000
 8002dac:	50040300 	.word	0x50040300
 8002db0:	fff0c007 	.word	0xfff0c007

08002db4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe88 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d167      	bne.n	8002ea0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_Start_DMA+0x2a>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e063      	b.n	8002ea6 <HAL_ADC_Start_DMA+0xf2>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fc78 	bl	80036dc <ADC_Enable>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d14f      	bne.n	8002e96 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	f023 0206 	bic.w	r2, r3, #6
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e22:	e002      	b.n	8002e2a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <HAL_ADC_Start_DMA+0xfc>)
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_ADC_Start_DMA+0x100>)
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_ADC_Start_DMA+0x104>)
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	221c      	movs	r2, #28
 8002e48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0210 	orr.w	r2, r2, #16
 8002e60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3340      	adds	r3, #64	; 0x40
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f001 f86d 	bl	8003f60 <HAL_DMA_Start_IT>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fe0f 	bl	8002ab2 <LL_ADC_REG_StartConversion>
 8002e94:	e006      	b.n	8002ea4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002e9e:	e001      	b.n	8002ea4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	080037e9 	.word	0x080037e9
 8002eb4:	080038c1 	.word	0x080038c1
 8002eb8:	080038dd 	.word	0x080038dd

08002ebc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b0b6      	sub	sp, #216	; 0xd8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x22>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e3d5      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x7ce>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fde1 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 83ba 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d824      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	3b02      	subs	r3, #2
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d81b      	bhi.n	8002f72 <HAL_ADC_ConfigChannel+0x8e>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_ADC_ConfigChannel+0x5c>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f59 	.word	0x08002f59
 8002f48:	08002f61 	.word	0x08002f61
 8002f4c:	08002f69 	.word	0x08002f69
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f50:	230c      	movs	r3, #12
 8002f52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f56:	e010      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f58:	2312      	movs	r3, #18
 8002f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f5e:	e00c      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f60:	2318      	movs	r3, #24
 8002f62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f66:	e008      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f72:	2306      	movs	r3, #6
 8002f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f78:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002f88:	f7ff fca3 	bl	80028d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fda2 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002f96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fdae 	bl	8002b00 <LL_ADC_INJ_IsConversionOngoing>
 8002fa4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 81bf 	bne.w	8003330 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 81ba 	bne.w	8003330 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7ff fcaa 	bl	800292a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fc51 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fe4:	e00e      	b.n	8003004 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f7ff fc99 	bl	800292a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fc41 	bl	8002886 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	08db      	lsrs	r3, r3, #3
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00a      	beq.n	800303c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003036:	f7ff fbd1 	bl	80027dc <LL_ADC_SetOffset>
 800303a:	e179      	b.n	8003330 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fbee 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x184>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fbe3 	bl	8002824 <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	e01e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1c2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fbd8 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800308a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800308e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e004      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800309a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_ConfigChannel+0x1da>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	e018      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x20c>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80030d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80030da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80030e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d106      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fba7 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fb8b 	bl	8002824 <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_ADC_ConfigChannel+0x24a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fb80 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	e01e      	b.n	800316c <HAL_ADC_ConfigChannel+0x288>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb75 	bl	8002824 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800314c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e004      	b.n	800316a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003160:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x2a0>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	e018      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x2d2>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80031a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fb44 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fb28 	bl	8002824 <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x310>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb1d 	bl	8002824 <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	e01e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x34e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fb12 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800321a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e004      	b.n	8003230 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_ADC_ConfigChannel+0x366>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	e014      	b.n	8003274 <HAL_ADC_ConfigChannel+0x390>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e004      	b.n	8003274 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800326a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	2102      	movs	r1, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fae5 	bl	8002850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2103      	movs	r1, #3
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fac9 	bl	8002824 <LL_ADC_GetOffsetChannel>
 8003292:	4603      	mov	r3, r0
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x3ce>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2103      	movs	r1, #3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fabe 	bl	8002824 <LL_ADC_GetOffsetChannel>
 80032a8:	4603      	mov	r3, r0
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	e017      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x3fe>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2103      	movs	r1, #3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fab3 	bl	8002824 <LL_ADC_GetOffsetChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e003      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80032d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x416>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	e011      	b.n	800331e <HAL_ADC_ConfigChannel+0x43a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800330c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003312:	2320      	movs	r3, #32
 8003314:	e003      	b.n	800331e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800331e:	429a      	cmp	r2, r3
 8003320:	d106      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2200      	movs	r2, #0
 8003328:	2103      	movs	r1, #3
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fa90 	bl	8002850 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fba9 	bl	8002a8c <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 813f 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	461a      	mov	r2, r3
 8003350:	f7ff fb16 	bl	8002980 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a8e      	ldr	r2, [pc, #568]	; (8003594 <HAL_ADC_ConfigChannel+0x6b0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f040 8130 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x4a4>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	3301      	adds	r3, #1
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2b09      	cmp	r3, #9
 800337e:	bf94      	ite	ls
 8003380:	2301      	movls	r3, #1
 8003382:	2300      	movhi	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e019      	b.n	80033bc <HAL_ADC_ConfigChannel+0x4d8>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2b09      	cmp	r3, #9
 80033b4:	bf94      	ite	ls
 80033b6:	2301      	movls	r3, #1
 80033b8:	2300      	movhi	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d079      	beq.n	80034b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x4f8>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	3301      	adds	r3, #1
 80033d4:	069b      	lsls	r3, r3, #26
 80033d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033da:	e015      	b.n	8003408 <HAL_ADC_ConfigChannel+0x524>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80033ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80033f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x544>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	e017      	b.n	8003458 <HAL_ADC_ConfigChannel+0x574>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800343a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003440:	2320      	movs	r3, #32
 8003442:	e003      	b.n	800344c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_ADC_ConfigChannel+0x59a>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	051b      	lsls	r3, r3, #20
 800347c:	e018      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x5cc>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e003      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	430b      	orrs	r3, r1
 80034b2:	e080      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x5ec>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	3301      	adds	r3, #1
 80034c8:	069b      	lsls	r3, r3, #26
 80034ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ce:	e015      	b.n	80034fc <HAL_ADC_ConfigChannel+0x618>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	069b      	lsls	r3, r3, #26
 80034f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_ADC_ConfigChannel+0x638>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	e017      	b.n	800354c <HAL_ADC_ConfigChannel+0x668>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
  return result;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003534:	2320      	movs	r3, #32
 8003536:	e003      	b.n	8003540 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	ea42 0103 	orr.w	r1, r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x694>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	3b1e      	subs	r3, #30
 8003570:	051b      	lsls	r3, r3, #20
 8003572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003576:	e01d      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x6d0>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	60fb      	str	r3, [r7, #12]
  return result;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d103      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e005      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x6bc>
 8003594:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	3b1e      	subs	r3, #30
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff f9b5 	bl	800292a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_ADC_ConfigChannel+0x7d8>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d06c      	beq.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035cc:	483c      	ldr	r0, [pc, #240]	; (80036c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80035ce:	f7ff f8f7 	bl	80027c0 <LL_ADC_GetCommonPathInternalCh>
 80035d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3a      	ldr	r2, [pc, #232]	; (80036c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d127      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d121      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a35      	ldr	r2, [pc, #212]	; (80036c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d157      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035fe:	4619      	mov	r1, r3
 8003600:	482f      	ldr	r0, [pc, #188]	; (80036c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003602:	f7ff f8ca 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003606:	4b31      	ldr	r3, [pc, #196]	; (80036cc <HAL_ADC_ConfigChannel+0x7e8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003620:	e002      	b.n	8003628 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800362e:	e03a      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d113      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800363a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800363e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d12a      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003658:	4619      	mov	r1, r3
 800365a:	4819      	ldr	r0, [pc, #100]	; (80036c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800365c:	f7ff f89d 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003660:	e021      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d11c      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800366c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d116      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d111      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800368a:	4619      	mov	r1, r3
 800368c:	480c      	ldr	r0, [pc, #48]	; (80036c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800368e:	f7ff f884 	bl	800279a <LL_ADC_SetCommonPathInternalCh>
 8003692:	e008      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80036ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	37d8      	adds	r7, #216	; 0xd8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	80080000 	.word	0x80080000
 80036c0:	50040300 	.word	0x50040300
 80036c4:	c7520000 	.word	0xc7520000
 80036c8:	50040000 	.word	0x50040000
 80036cc:	20000000 	.word	0x20000000
 80036d0:	053e2d63 	.word	0x053e2d63
 80036d4:	cb840000 	.word	0xcb840000
 80036d8:	80000001 	.word	0x80000001

080036dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f9cd 	bl	8002a8c <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d169      	bne.n	80037cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <ADC_Enable+0xfc>)
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e055      	b.n	80037ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f99c 	bl	8002a64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800372c:	482b      	ldr	r0, [pc, #172]	; (80037dc <ADC_Enable+0x100>)
 800372e:	f7ff f847 	bl	80027c0 <LL_ADC_GetCommonPathInternalCh>
 8003732:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <ADC_Enable+0x104>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	4a28      	ldr	r2, [pc, #160]	; (80037e4 <ADC_Enable+0x108>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003756:	e002      	b.n	800375e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f9      	bne.n	8003758 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003764:	f7fe ffd6 	bl	8002714 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376a:	e028      	b.n	80037be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f98b 	bl	8002a8c <LL_ADC_IsEnabled>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f96f 	bl	8002a64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003786:	f7fe ffc5 	bl	8002714 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d914      	bls.n	80037be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00d      	beq.n	80037be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f043 0210 	orr.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d1cf      	bne.n	800376c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	8000003f 	.word	0x8000003f
 80037dc:	50040300 	.word	0x50040300
 80037e0:	20000000 	.word	0x20000000
 80037e4:	053e2d63 	.word	0x053e2d63

080037e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d14b      	bne.n	800389a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d021      	beq.n	8003860 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f843 	bl	80028ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d032      	beq.n	8003892 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12b      	bne.n	8003892 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	659a      	str	r2, [r3, #88]	; 0x58
 800385e:	e018      	b.n	8003892 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d111      	bne.n	8003892 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7fd fa82 	bl	8000d9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003898:	e00e      	b.n	80038b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff fb12 	bl	8002ed0 <HAL_ADC_ErrorCallback>
}
 80038ac:	e004      	b.n	80038b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
}
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff faf4 	bl	8002ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fae4 	bl	8002ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	; (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
         );
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff29 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff3e 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff8e 	bl	8003a04 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5d 	bl	80039b0 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff31 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa2 	bl	8003a6c <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e014      	b.n	8003b6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	791b      	ldrb	r3, [r3, #4]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fe fb03 	bl	8002160 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_DAC_ConfigChannel+0x1c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e137      	b.n	8003e04 <HAL_DAC_ConfigChannel+0x28c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	f040 8081 	bne.w	8003cac <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003baa:	f7fe fdb3 	bl	8002714 <HAL_GetTick>
 8003bae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d140      	bne.n	8003c38 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bb6:	e018      	b.n	8003bea <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bb8:	f7fe fdac 	bl	8002714 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d911      	bls.n	8003bea <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f043 0208 	orr.w	r2, r3, #8
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2203      	movs	r2, #3
 8003be4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e10c      	b.n	8003e04 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1df      	bne.n	8003bb8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7fe fd97 	bl	800272c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	69d2      	ldr	r2, [r2, #28]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
 8003c08:	e023      	b.n	8003c52 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c0a:	f7fe fd83 	bl	8002714 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d90f      	bls.n	8003c38 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da0a      	bge.n	8003c38 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f043 0208 	orr.w	r2, r3, #8
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2203      	movs	r2, #3
 8003c32:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0e5      	b.n	8003e04 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dbe3      	blt.n	8003c0a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7fe fd72 	bl	800272c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	69d2      	ldr	r2, [r2, #28]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	ea02 0103 	and.w	r1, r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	21ff      	movs	r1, #255	; 0xff
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	ea02 0103 	and.w	r1, r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d11d      	bne.n	8003cf0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	221f      	movs	r2, #31
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2207      	movs	r2, #7
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43da      	mvns	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d94:	d104      	bne.n	8003da0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	e018      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e00f      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003db2:	f001 fae5 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 8003db6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <HAL_DAC_ConfigChannel+0x294>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d904      	bls.n	8003dca <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e003      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dd0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	22c0      	movs	r2, #192	; 0xc0
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	04c4b400 	.word	0x04c4b400

08003e10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e08d      	b.n	8003f3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_DMA_Init+0x138>)
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d80f      	bhi.n	8003e4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b45      	ldr	r3, [pc, #276]	; (8003f4c <HAL_DMA_Init+0x13c>)
 8003e36:	4413      	add	r3, r2
 8003e38:	4a45      	ldr	r2, [pc, #276]	; (8003f50 <HAL_DMA_Init+0x140>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	009a      	lsls	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a42      	ldr	r2, [pc, #264]	; (8003f54 <HAL_DMA_Init+0x144>)
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e4c:	e00e      	b.n	8003e6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b40      	ldr	r3, [pc, #256]	; (8003f58 <HAL_DMA_Init+0x148>)
 8003e56:	4413      	add	r3, r2
 8003e58:	4a3d      	ldr	r2, [pc, #244]	; (8003f50 <HAL_DMA_Init+0x140>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	009a      	lsls	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <HAL_DMA_Init+0x14c>)
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b6 	bl	8004230 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ecc:	d102      	bne.n	8003ed4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ee8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_DMA_Init+0x104>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d80c      	bhi.n	8003f14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9d6 	bl	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e008      	b.n	8003f26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40020407 	.word	0x40020407
 8003f4c:	bffdfff8 	.word	0xbffdfff8
 8003f50:	cccccccd 	.word	0xcccccccd
 8003f54:	40020000 	.word	0x40020000
 8003f58:	bffdfbf8 	.word	0xbffdfbf8
 8003f5c:	40020400 	.word	0x40020400

08003f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_DMA_Start_IT+0x20>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e066      	b.n	800404e <HAL_DMA_Start_IT+0xee>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d155      	bne.n	8004040 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f8fb 	bl	80041b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 020e 	orr.w	r2, r2, #14
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e00f      	b.n	8003ff8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0204 	bic.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 020a 	orr.w	r2, r2, #10
 8003ff6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004014:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e005      	b.n	800404c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004048:	2302      	movs	r3, #2
 800404a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f003 031c 	and.w	r3, r3, #28
 8004076:	2204      	movs	r2, #4
 8004078:	409a      	lsls	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d026      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x7a>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d021      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f003 021c 	and.w	r2, r3, #28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2104      	movs	r1, #4
 80040b8:	fa01 f202 	lsl.w	r2, r1, r2
 80040bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d071      	beq.n	80041aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040ce:	e06c      	b.n	80041aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f003 031c 	and.w	r3, r3, #28
 80040d8:	2202      	movs	r2, #2
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02e      	beq.n	8004142 <HAL_DMA_IRQHandler+0xec>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d029      	beq.n	8004142 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020a 	bic.w	r2, r2, #10
 800410a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	f003 021c 	and.w	r2, r3, #28
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2102      	movs	r1, #2
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d038      	beq.n	80041aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004140:	e033      	b.n	80041aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f003 031c 	and.w	r3, r3, #28
 800414a:	2208      	movs	r2, #8
 800414c:	409a      	lsls	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02a      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d025      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020e 	bic.w	r2, r2, #14
 800416e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	f003 021c 	and.w	r2, r3, #28
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	2101      	movs	r1, #1
 800417e:	fa01 f202 	lsl.w	r2, r1, r2
 8004182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
}
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041dc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f003 021c 	and.w	r2, r3, #28
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d108      	bne.n	8004214 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004212:	e007      	b.n	8004224 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d80a      	bhi.n	800425a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004250:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6493      	str	r3, [r2, #72]	; 0x48
 8004258:	e007      	b.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	009a      	lsls	r2, r3, #2
 8004262:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004264:	4413      	add	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3b08      	subs	r3, #8
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004280:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2201      	movs	r2, #1
 800428a:	409a      	lsls	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40020407 	.word	0x40020407
 80042a0:	4002081c 	.word	0x4002081c
 80042a4:	cccccccd 	.word	0xcccccccd
 80042a8:	40020880 	.word	0x40020880

080042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	1000823f 	.word	0x1000823f
 80042f0:	40020940 	.word	0x40020940

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004302:	e166      	b.n	80045d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	4013      	ands	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8158 	beq.w	80045cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d005      	beq.n	8004334 <HAL_GPIO_Init+0x40>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d130      	bne.n	8004396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800436a:	2201      	movs	r2, #1
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 0201 	and.w	r2, r3, #1
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d017      	beq.n	80043d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	2203      	movs	r2, #3
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d123      	bne.n	8004426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	08da      	lsrs	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3208      	adds	r2, #8
 80043e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	08da      	lsrs	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3208      	adds	r2, #8
 8004420:	6939      	ldr	r1, [r7, #16]
 8004422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	2203      	movs	r2, #3
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80b2 	beq.w	80045cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004468:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_GPIO_Init+0x2fc>)
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	4a60      	ldr	r2, [pc, #384]	; (80045f0 <HAL_GPIO_Init+0x2fc>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6613      	str	r3, [r2, #96]	; 0x60
 8004474:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_GPIO_Init+0x2fc>)
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004480:	4a5c      	ldr	r2, [pc, #368]	; (80045f4 <HAL_GPIO_Init+0x300>)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	3302      	adds	r3, #2
 8004488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220f      	movs	r2, #15
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044aa:	d02b      	beq.n	8004504 <HAL_GPIO_Init+0x210>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_GPIO_Init+0x304>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d025      	beq.n	8004500 <HAL_GPIO_Init+0x20c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a51      	ldr	r2, [pc, #324]	; (80045fc <HAL_GPIO_Init+0x308>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01f      	beq.n	80044fc <HAL_GPIO_Init+0x208>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a50      	ldr	r2, [pc, #320]	; (8004600 <HAL_GPIO_Init+0x30c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d019      	beq.n	80044f8 <HAL_GPIO_Init+0x204>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a4f      	ldr	r2, [pc, #316]	; (8004604 <HAL_GPIO_Init+0x310>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <HAL_GPIO_Init+0x200>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a4e      	ldr	r2, [pc, #312]	; (8004608 <HAL_GPIO_Init+0x314>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00d      	beq.n	80044f0 <HAL_GPIO_Init+0x1fc>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a4d      	ldr	r2, [pc, #308]	; (800460c <HAL_GPIO_Init+0x318>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <HAL_GPIO_Init+0x1f8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a4c      	ldr	r2, [pc, #304]	; (8004610 <HAL_GPIO_Init+0x31c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <HAL_GPIO_Init+0x1f4>
 80044e4:	2307      	movs	r3, #7
 80044e6:	e00e      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044e8:	2308      	movs	r3, #8
 80044ea:	e00c      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044ec:	2306      	movs	r3, #6
 80044ee:	e00a      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044f0:	2305      	movs	r3, #5
 80044f2:	e008      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044f4:	2304      	movs	r3, #4
 80044f6:	e006      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044f8:	2303      	movs	r3, #3
 80044fa:	e004      	b.n	8004506 <HAL_GPIO_Init+0x212>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e002      	b.n	8004506 <HAL_GPIO_Init+0x212>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <HAL_GPIO_Init+0x212>
 8004504:	2300      	movs	r3, #0
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	f002 0203 	and.w	r2, r2, #3
 800450c:	0092      	lsls	r2, r2, #2
 800450e:	4093      	lsls	r3, r2
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004516:	4937      	ldr	r1, [pc, #220]	; (80045f4 <HAL_GPIO_Init+0x300>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	3302      	adds	r3, #2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_GPIO_Init+0x320>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	43db      	mvns	r3, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_GPIO_Init+0x320>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_GPIO_Init+0x320>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004572:	4a28      	ldr	r2, [pc, #160]	; (8004614 <HAL_GPIO_Init+0x320>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004578:	4b26      	ldr	r3, [pc, #152]	; (8004614 <HAL_GPIO_Init+0x320>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <HAL_GPIO_Init+0x320>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <HAL_GPIO_Init+0x320>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <HAL_GPIO_Init+0x320>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f ae91 	bne.w	8004304 <HAL_GPIO_Init+0x10>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40010000 	.word	0x40010000
 80045f8:	48000400 	.word	0x48000400
 80045fc:	48000800 	.word	0x48000800
 8004600:	48000c00 	.word	0x48000c00
 8004604:	48001000 	.word	0x48001000
 8004608:	48001400 	.word	0x48001400
 800460c:	48001800 	.word	0x48001800
 8004610:	48001c00 	.word	0x48001c00
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_PWREx_GetVoltageRange+0x3c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004628:	d102      	bne.n	8004630 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800462a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462e:	e00b      	b.n	8004648 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d102      	bne.n	8004646 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004644:	e000      	b.n	8004648 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004646:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40007000 	.word	0x40007000

08004658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d141      	bne.n	80046ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d131      	bne.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467a:	4a46      	ldr	r2, [pc, #280]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800468c:	4a41      	ldr	r2, [pc, #260]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2232      	movs	r2, #50	; 0x32
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	4a3f      	ldr	r2, [pc, #252]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	0c9b      	lsrs	r3, r3, #18
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046aa:	e002      	b.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b2:	4b38      	ldr	r3, [pc, #224]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046be:	d102      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f2      	bne.n	80046ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046c6:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d158      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e057      	b.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046de:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046e8:	e04d      	b.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d141      	bne.n	8004776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d131      	bne.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004710:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800471e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2232      	movs	r2, #50	; 0x32
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	0c9b      	lsrs	r3, r3, #18
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004736:	e002      	b.n	800473e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473e:	4b15      	ldr	r3, [pc, #84]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d102      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f2      	bne.n	8004738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004752:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d112      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e011      	b.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004774:	e007      	b.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004784:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40007000 	.word	0x40007000
 8004798:	20000000 	.word	0x20000000
 800479c:	431bde83 	.word	0x431bde83

080047a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ae:	6053      	str	r3, [r2, #4]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40007000 	.word	0x40007000

080047c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f000 bc08 	b.w	8004fe4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d4:	4b96      	ldr	r3, [pc, #600]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047de:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80e4 	beq.w	80049be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_RCC_OscConfig+0x4c>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	f040 808b 	bne.w	800491a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b01      	cmp	r3, #1
 8004808:	f040 8087 	bne.w	800491a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800480c:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_OscConfig+0x64>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e3df      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_RCC_OscConfig+0x7e>
 8004834:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483c:	e005      	b.n	800484a <HAL_RCC_OscConfig+0x8a>
 800483e:	4b7c      	ldr	r3, [pc, #496]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484a:	4293      	cmp	r3, r2
 800484c:	d223      	bcs.n	8004896 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fdcc 	bl	80053f0 <RCC_SetFlashLatencyFromMSIRange>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e3c0      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004862:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a72      	ldr	r2, [pc, #456]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b70      	ldr	r3, [pc, #448]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	496d      	ldr	r1, [pc, #436]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004880:	4b6b      	ldr	r3, [pc, #428]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	4968      	ldr	r1, [pc, #416]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
 8004894:	e025      	b.n	80048e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004896:	4b66      	ldr	r3, [pc, #408]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	4960      	ldr	r1, [pc, #384]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b4:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	495b      	ldr	r1, [pc, #364]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fd8c 	bl	80053f0 <RCC_SetFlashLatencyFromMSIRange>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e380      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048e2:	f000 fcc1 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	4950      	ldr	r1, [pc, #320]	; (8004a34 <HAL_RCC_OscConfig+0x274>)
 80048f4:	5ccb      	ldrb	r3, [r1, r3]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <HAL_RCC_OscConfig+0x278>)
 8004900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004902:	4b4e      	ldr	r3, [pc, #312]	; (8004a3c <HAL_RCC_OscConfig+0x27c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd feb4 	bl	8002674 <HAL_InitTick>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d052      	beq.n	80049bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	e364      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d032      	beq.n	8004988 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800492e:	f7fd fef1 	bl	8002714 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004936:	f7fd feed 	bl	8002714 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e34d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a35      	ldr	r2, [pc, #212]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b33      	ldr	r3, [pc, #204]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	4930      	ldr	r1, [pc, #192]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004972:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	492b      	ldr	r1, [pc, #172]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e01a      	b.n	80049be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004994:	f7fd febe 	bl	8002714 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800499c:	f7fd feba 	bl	8002714 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e31a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x1dc>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d073      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_OscConfig+0x21c>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	d10e      	bne.n	80049f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d10b      	bne.n	80049f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d063      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d15f      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e2f7      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x24c>
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e025      	b.n	8004a58 <HAL_RCC_OscConfig+0x298>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a14:	d114      	bne.n	8004a40 <HAL_RCC_OscConfig+0x280>
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a02      	ldr	r2, [pc, #8]	; (8004a30 <HAL_RCC_OscConfig+0x270>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e013      	b.n	8004a58 <HAL_RCC_OscConfig+0x298>
 8004a30:	40021000 	.word	0x40021000
 8004a34:	0800b44c 	.word	0x0800b44c
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	20000004 	.word	0x20000004
 8004a40:	4ba0      	ldr	r3, [pc, #640]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a9f      	ldr	r2, [pc, #636]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4b9d      	ldr	r3, [pc, #628]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a9c      	ldr	r2, [pc, #624]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d013      	beq.n	8004a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fd fe58 	bl	8002714 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a68:	f7fd fe54 	bl	8002714 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e2b4      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7a:	4b92      	ldr	r3, [pc, #584]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x2a8>
 8004a86:	e014      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd fe44 	bl	8002714 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fd fe40 	bl	8002714 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e2a0      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa2:	4b88      	ldr	r3, [pc, #544]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2d0>
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d060      	beq.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x310>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d119      	bne.n	8004afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d116      	bne.n	8004afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad0:	4b7c      	ldr	r3, [pc, #496]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x328>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e27d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b76      	ldr	r3, [pc, #472]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	4973      	ldr	r1, [pc, #460]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afc:	e040      	b.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d023      	beq.n	8004b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b06:	4b6f      	ldr	r3, [pc, #444]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a6e      	ldr	r2, [pc, #440]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fdff 	bl	8002714 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fd fdfb 	bl	8002714 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e25b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2c:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b62      	ldr	r3, [pc, #392]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	495f      	ldr	r1, [pc, #380]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
 8004b4c:	e018      	b.n	8004b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd fddb 	bl	8002714 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fd fdd7 	bl	8002714 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e237      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b74:	4b53      	ldr	r3, [pc, #332]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d03c      	beq.n	8004c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01c      	beq.n	8004bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b94:	4b4b      	ldr	r3, [pc, #300]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9a:	4a4a      	ldr	r2, [pc, #296]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fd fdb6 	bl	8002714 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bac:	f7fd fdb2 	bl	8002714 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e212      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bbe:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCC_OscConfig+0x3ec>
 8004bcc:	e01b      	b.n	8004c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bce:	4b3d      	ldr	r3, [pc, #244]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd4:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fd fd99 	bl	8002714 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fd fd95 	bl	8002714 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1f5      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ef      	bne.n	8004be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a6 	beq.w	8004d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10d      	bne.n	8004c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCC_OscConfig+0x508>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d118      	bne.n	8004c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCC_OscConfig+0x508>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x508>)
 8004c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c58:	f7fd fd5c 	bl	8002714 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c60:	f7fd fd58 	bl	8002714 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e1b8      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <HAL_RCC_OscConfig+0x508>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d108      	bne.n	8004c98 <HAL_RCC_OscConfig+0x4d8>
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c96:	e029      	b.n	8004cec <HAL_RCC_OscConfig+0x52c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d115      	bne.n	8004ccc <HAL_RCC_OscConfig+0x50c>
 8004ca0:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004ca8:	f043 0304 	orr.w	r3, r3, #4
 8004cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc0:	e014      	b.n	8004cec <HAL_RCC_OscConfig+0x52c>
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	4b9d      	ldr	r3, [pc, #628]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	4a9c      	ldr	r2, [pc, #624]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cdc:	4b99      	ldr	r3, [pc, #612]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	4a98      	ldr	r2, [pc, #608]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d016      	beq.n	8004d22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fd0e 	bl	8002714 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fd0a 	bl	8002714 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e168      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	4b8c      	ldr	r3, [pc, #560]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ed      	beq.n	8004cfc <HAL_RCC_OscConfig+0x53c>
 8004d20:	e015      	b.n	8004d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd fcf7 	bl	8002714 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fd fcf3 	bl	8002714 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e151      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d40:	4b80      	ldr	r3, [pc, #512]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ed      	bne.n	8004d2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	4a7a      	ldr	r2, [pc, #488]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03c      	beq.n	8004de6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d74:	4b73      	ldr	r3, [pc, #460]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d7a:	4a72      	ldr	r2, [pc, #456]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fd fcc6 	bl	8002714 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d8c:	f7fd fcc2 	bl	8002714 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e122      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d9e:	4b69      	ldr	r3, [pc, #420]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ef      	beq.n	8004d8c <HAL_RCC_OscConfig+0x5cc>
 8004dac:	e01b      	b.n	8004de6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db4:	4a63      	ldr	r2, [pc, #396]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fd fca9 	bl	8002714 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc6:	f7fd fca5 	bl	8002714 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e105      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ef      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80f9 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f040 80cf 	bne.w	8004f98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dfa:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0203 	and.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d12c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d123      	bne.n	8004e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d11b      	bne.n	8004e68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d113      	bne.n	8004e68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d109      	bne.n	8004e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	3b01      	subs	r3, #1
 8004e62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d071      	beq.n	8004f4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d068      	beq.n	8004f40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e6e:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e7a:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e0ac      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e96:	f7fd fc3d 	bl	8002714 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fd fc39 	bl	8002714 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e099      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebc:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	4b21      	ldr	r3, [pc, #132]	; (8004f48 <HAL_RCC_OscConfig+0x788>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0112      	lsls	r2, r2, #4
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ed6:	0212      	lsls	r2, r2, #8
 8004ed8:	4311      	orrs	r1, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ede:	0852      	lsrs	r2, r2, #1
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004eea:	0852      	lsrs	r2, r2, #1
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0652      	lsls	r2, r2, #25
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef6:	06d2      	lsls	r2, r2, #27
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4912      	ldr	r1, [pc, #72]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f18:	f7fd fbfc 	bl	8002714 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fd fbf8 	bl	8002714 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e058      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_RCC_OscConfig+0x784>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f3e:	e050      	b.n	8004fe2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e04f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
 8004f44:	40021000 	.word	0x40021000
 8004f48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d144      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f58:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a23      	ldr	r2, [pc, #140]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f64:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a20      	ldr	r2, [pc, #128]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f70:	f7fd fbd0 	bl	8002714 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fd fbcc 	bl	8002714 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e02c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0x7b8>
 8004f96:	e024      	b.n	8004fe2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a12      	ldr	r2, [pc, #72]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fd fbb3 	bl	8002714 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fd fbaf 	bl	8002714 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e00f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	4905      	ldr	r1, [pc, #20]	; (8004fec <HAL_RCC_OscConfig+0x82c>)
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_OscConfig+0x830>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
 8004fdc:	e001      	b.n	8004fe2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	feeefffc 	.word	0xfeeefffc

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e11d      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b90      	ldr	r3, [pc, #576]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d910      	bls.n	800503c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b8d      	ldr	r3, [pc, #564]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	498b      	ldr	r1, [pc, #556]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b89      	ldr	r3, [pc, #548]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e105      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d010      	beq.n	800506a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005054:	429a      	cmp	r2, r3
 8005056:	d908      	bls.n	800506a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005058:	4b7e      	ldr	r3, [pc, #504]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	497b      	ldr	r1, [pc, #492]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d079      	beq.n	800516a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d11e      	bne.n	80050bc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507e:	4b75      	ldr	r3, [pc, #468]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0dc      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800508e:	f000 fa09 	bl	80054a4 <RCC_GetSysClockFreqFromPLLSource>
 8005092:	4603      	mov	r3, r0
 8005094:	4a70      	ldr	r2, [pc, #448]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d946      	bls.n	8005128 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800509a:	4b6e      	ldr	r3, [pc, #440]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d140      	bne.n	8005128 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050a6:	4b6b      	ldr	r3, [pc, #428]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ae:	4a69      	ldr	r2, [pc, #420]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e035      	b.n	8005128 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c4:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d115      	bne.n	80050fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0b9      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050dc:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0ad      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ec:	4b59      	ldr	r3, [pc, #356]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a5      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80050fc:	f000 f8b4 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005100:	4603      	mov	r3, r0
 8005102:	4a55      	ldr	r2, [pc, #340]	; (8005258 <HAL_RCC_ClockConfig+0x264>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d90f      	bls.n	8005128 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005108:	4b52      	ldr	r3, [pc, #328]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005114:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511c:	4a4d      	ldr	r2, [pc, #308]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005128:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f023 0203 	bic.w	r2, r3, #3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4947      	ldr	r1, [pc, #284]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513a:	f7fd faeb 	bl	8002714 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005140:	e00a      	b.n	8005158 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005142:	f7fd fae7 	bl	8002714 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e077      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005158:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 020c 	and.w	r2, r3, #12
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	429a      	cmp	r2, r3
 8005168:	d1eb      	bne.n	8005142 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d105      	bne.n	800517c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005170:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a37      	ldr	r2, [pc, #220]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005194:	429a      	cmp	r2, r3
 8005196:	d208      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	492b      	ldr	r1, [pc, #172]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d210      	bcs.n	80051da <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 020f 	bic.w	r2, r3, #15
 80051c0:	4923      	ldr	r1, [pc, #140]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <HAL_RCC_ClockConfig+0x25c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d001      	beq.n	80051da <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e036      	b.n	8005248 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4918      	ldr	r1, [pc, #96]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4910      	ldr	r1, [pc, #64]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005218:	f000 f826 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_RCC_ClockConfig+0x260>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	490c      	ldr	r1, [pc, #48]	; (800525c <HAL_RCC_ClockConfig+0x268>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x26c>)
 8005236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fd fa19 	bl	8002674 <HAL_InitTick>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]

  return status;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40022000 	.word	0x40022000
 8005254:	40021000 	.word	0x40021000
 8005258:	04c4b400 	.word	0x04c4b400
 800525c:	0800b44c 	.word	0x0800b44c
 8005260:	20000000 	.word	0x20000000
 8005264:	20000004 	.word	0x20000004

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005276:	4b3e      	ldr	r3, [pc, #248]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005280:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x34>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d121      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d11e      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e005      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b8:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052c4:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d102      	bne.n	80052e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052e0:	4b25      	ldr	r3, [pc, #148]	; (8005378 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e004      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <HAL_RCC_GetSysClockFreq+0x114>)
 80052ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d134      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052f6:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d003      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0xa6>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d003      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0xac>
 800530c:	e005      	b.n	800531a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCC_GetSysClockFreq+0x110>)
 8005310:	617b      	str	r3, [r7, #20]
      break;
 8005312:	e005      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_GetSysClockFreq+0x114>)
 8005316:	617b      	str	r3, [r7, #20]
      break;
 8005318:	e002      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	617b      	str	r3, [r7, #20]
      break;
 800531e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005320:	4b13      	ldr	r3, [pc, #76]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	3301      	adds	r3, #1
 800532c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	fb03 f202 	mul.w	r2, r3, r2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_RCC_GetSysClockFreq+0x108>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	0e5b      	lsrs	r3, r3, #25
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	3301      	adds	r3, #1
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005360:	69bb      	ldr	r3, [r7, #24]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	0800b464 	.word	0x0800b464
 8005378:	00f42400 	.word	0x00f42400
 800537c:	007a1200 	.word	0x007a1200

08005380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <HAL_RCC_GetHCLKFreq+0x14>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000000 	.word	0x20000000

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800539c:	f7ff fff0 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	0800b45c 	.word	0x0800b45c

080053c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c8:	f7ff ffda 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0adb      	lsrs	r3, r3, #11
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4904      	ldr	r1, [pc, #16]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000
 80053ec:	0800b45c 	.word	0x0800b45c

080053f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053fc:	4b27      	ldr	r3, [pc, #156]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005408:	f7ff f906 	bl	8004618 <HAL_PWREx_GetVoltageRange>
 800540c:	6178      	str	r0, [r7, #20]
 800540e:	e014      	b.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	6593      	str	r3, [r2, #88]	; 0x58
 800541c:	4b1f      	ldr	r3, [pc, #124]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005428:	f7ff f8f6 	bl	8004618 <HAL_PWREx_GetVoltageRange>
 800542c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	4a1a      	ldr	r2, [pc, #104]	; (800549c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d10b      	bne.n	800545a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b80      	cmp	r3, #128	; 0x80
 8005446:	d913      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2ba0      	cmp	r3, #160	; 0xa0
 800544c:	d902      	bls.n	8005454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800544e:	2302      	movs	r3, #2
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e00d      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005454:	2301      	movs	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e00a      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d902      	bls.n	8005466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005460:	2302      	movs	r3, #2
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e004      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b70      	cmp	r3, #112	; 0x70
 800546a:	d101      	bne.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800546c:	2301      	movs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f023 020f 	bic.w	r2, r3, #15
 8005478:	4909      	ldr	r1, [pc, #36]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	40022000 	.word	0x40022000

080054a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054aa:	4b2d      	ldr	r3, [pc, #180]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d00b      	beq.n	80054d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d008      	beq.n	80054d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d11f      	bne.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054ce:	613b      	str	r3, [r7, #16]
    break;
 80054d0:	e01f      	b.n	8005512 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054d2:	4b25      	ldr	r3, [pc, #148]	; (8005568 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80054d4:	613b      	str	r3, [r7, #16]
    break;
 80054d6:	e01c      	b.n	8005512 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d107      	bne.n	80054f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054e4:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e005      	b.n	8005500 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005500:	4a1a      	ldr	r2, [pc, #104]	; (800556c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	613b      	str	r3, [r7, #16]
    break;
 800550a:	e002      	b.n	8005512 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
    break;
 8005510:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005512:	4b13      	ldr	r3, [pc, #76]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	3301      	adds	r3, #1
 800551e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	fb03 f202 	mul.w	r2, r3, r2
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	0e5b      	lsrs	r3, r3, #25
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	3301      	adds	r3, #1
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005552:	683b      	ldr	r3, [r7, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40021000 	.word	0x40021000
 8005564:	00f42400 	.word	0x00f42400
 8005568:	007a1200 	.word	0x007a1200
 800556c:	0800b464 	.word	0x0800b464

08005570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005578:	2300      	movs	r3, #0
 800557a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800557c:	2300      	movs	r3, #0
 800557e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005588:	2b00      	cmp	r3, #0
 800558a:	d040      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d02a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005594:	2b80      	cmp	r3, #128	; 0x80
 8005596:	d825      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005598:	2b60      	cmp	r3, #96	; 0x60
 800559a:	d026      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800559c:	2b60      	cmp	r3, #96	; 0x60
 800559e:	d821      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d006      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d81d      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d010      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80055b0:	e018      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055b2:	4b89      	ldr	r3, [pc, #548]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	4a88      	ldr	r2, [pc, #544]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055be:	e015      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 fa24 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055d0:	e00c      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3320      	adds	r3, #32
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 fb0f 	bl	8006bfc <RCCEx_PLLSAI2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055e2:	e003      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	74fb      	strb	r3, [r7, #19]
      break;
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80055ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f2:	4b79      	ldr	r3, [pc, #484]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005600:	4975      	ldr	r1, [pc, #468]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005608:	e001      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d047      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d030      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005628:	d82a      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800562a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562e:	d02a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005634:	d824      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800563c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005640:	d81e      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d010      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800564c:	e018      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800564e:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4a61      	ldr	r2, [pc, #388]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800565a:	e015      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f001 f9d6 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800566c:	e00c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3320      	adds	r3, #32
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fac1 	bl	8006bfc <RCCEx_PLLSAI2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	74fb      	strb	r3, [r7, #19]
      break;
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800568e:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	494e      	ldr	r1, [pc, #312]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056a4:	e001      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 809f 	beq.w	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b8:	2300      	movs	r3, #0
 80056ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056bc:	4b46      	ldr	r3, [pc, #280]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6593      	str	r3, [r2, #88]	; 0x58
 80056de:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ea:	2301      	movs	r3, #1
 80056ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ee:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056fa:	f7fd f80b 	bl	8002714 <HAL_GetTick>
 80056fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005700:	e009      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fd f807 	bl	8002714 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d902      	bls.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	74fb      	strb	r3, [r7, #19]
        break;
 8005714:	e005      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ef      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005722:	7cfb      	ldrb	r3, [r7, #19]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d15b      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005728:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01f      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	429a      	cmp	r2, r3
 8005744:	d019      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005746:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005762:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005772:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d016      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fc ffc6 	bl	8002714 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578a:	e00b      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fc ffc2 	bl	8002714 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d902      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	74fb      	strb	r3, [r7, #19]
            break;
 80057a2:	e006      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ec      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80057b2:	7cfb      	ldrb	r3, [r7, #19]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10c      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	4903      	ldr	r1, [pc, #12]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057d0:	e008      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	74bb      	strb	r3, [r7, #18]
 80057d6:	e005      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057e4:	7c7b      	ldrb	r3, [r7, #17]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ea:	4ba0      	ldr	r3, [pc, #640]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	4a9f      	ldr	r2, [pc, #636]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005802:	4b9a      	ldr	r3, [pc, #616]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f023 0203 	bic.w	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	4996      	ldr	r1, [pc, #600]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005824:	4b91      	ldr	r3, [pc, #580]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f023 020c 	bic.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	498e      	ldr	r1, [pc, #568]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005846:	4b89      	ldr	r3, [pc, #548]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	4985      	ldr	r1, [pc, #532]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005868:	4b80      	ldr	r3, [pc, #512]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005876:	497d      	ldr	r1, [pc, #500]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800588a:	4b78      	ldr	r3, [pc, #480]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	4974      	ldr	r1, [pc, #464]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ac:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	496c      	ldr	r1, [pc, #432]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ce:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058dc:	4963      	ldr	r1, [pc, #396]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058f0:	4b5e      	ldr	r3, [pc, #376]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fe:	495b      	ldr	r1, [pc, #364]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	4952      	ldr	r1, [pc, #328]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005934:	4b4d      	ldr	r3, [pc, #308]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	494a      	ldr	r1, [pc, #296]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005956:	4b45      	ldr	r3, [pc, #276]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	4941      	ldr	r1, [pc, #260]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005978:	4b3c      	ldr	r3, [pc, #240]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800597e:	f023 0203 	bic.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	4939      	ldr	r1, [pc, #228]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d028      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800599a:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	4930      	ldr	r1, [pc, #192]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b8:	d106      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ba:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c4:	60d3      	str	r3, [r2, #12]
 80059c6:	e011      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d0:	d10c      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3304      	adds	r3, #4
 80059d6:	2101      	movs	r1, #1
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f81b 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059e2:	7cfb      	ldrb	r3, [r7, #19]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d04d      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a00:	d108      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a02:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a12:	e012      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a1a:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a32:	490e      	ldr	r1, [pc, #56]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a42:	d106      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4e:	60d3      	str	r3, [r2, #12]
 8005a50:	e020      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a02      	ldr	r2, [pc, #8]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a66:	60d3      	str	r3, [r2, #12]
 8005a68:	e014      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 ffc7 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d028      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aa0:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	4947      	ldr	r1, [pc, #284]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005abe:	d106      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac0:	4b42      	ldr	r3, [pc, #264]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a41      	ldr	r2, [pc, #260]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aca:	60d3      	str	r3, [r2, #12]
 8005acc:	e011      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad6:	d10c      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 ff98 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005afe:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0e:	492f      	ldr	r1, [pc, #188]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 ff73 	bl	8006a14 <RCCEx_PLLSAI1_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b48:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b4e:	f023 0204 	bic.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b58:	491c      	ldr	r1, [pc, #112]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b6c:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b72:	f023 0218 	bic.w	r2, r3, #24
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	4913      	ldr	r1, [pc, #76]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d017      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba0:	490a      	ldr	r1, [pc, #40]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d13e      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005be4:	4bb6      	ldr	r3, [pc, #728]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf6:	d028      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfe:	f200 86f4 	bhi.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c08:	d005      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c10:	d00e      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005c12:	f000 beea 	b.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c16:	4baa      	ldr	r3, [pc, #680]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	f040 86e4 	bne.w	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	61fb      	str	r3, [r7, #28]
      break;
 8005c2c:	f000 bedf 	b.w	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c30:	4ba3      	ldr	r3, [pc, #652]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	f040 86d9 	bne.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005c40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c44:	61fb      	str	r3, [r7, #28]
      break;
 8005c46:	f000 bed4 	b.w	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c4a:	4b9d      	ldr	r3, [pc, #628]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c56:	f040 86ce 	bne.w	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005c5a:	4b9a      	ldr	r3, [pc, #616]	; (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005c5c:	61fb      	str	r3, [r7, #28]
      break;
 8005c5e:	f000 beca 	b.w	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c62:	4b97      	ldr	r3, [pc, #604]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d036      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d840      	bhi.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d020      	beq.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005c84:	e039      	b.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c86:	4b8e      	ldr	r3, [pc, #568]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d116      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c92:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005c9e:	4b88      	ldr	r3, [pc, #544]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a84      	ldr	r2, [pc, #528]	; (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cbe:	e01f      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
      break;
 8005cc4:	e01c      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc6:	4b7e      	ldr	r3, [pc, #504]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d102      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005cd4:	4b7d      	ldr	r3, [pc, #500]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005cd6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cd8:	e012      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
      break;
 8005cde:	e00f      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ce0:	4b77      	ldr	r3, [pc, #476]	; (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cec:	d102      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005cee:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005cf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005cf2:	e005      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61bb      	str	r3, [r7, #24]
      break;
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
      break;
 8005cfe:	bf00      	nop
    }

    switch(PeriphClk)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d06:	f000 8606 	beq.w	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d10:	f200 8673 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d1a:	f000 8469 	beq.w	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d24:	f200 8669 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2e:	f000 8531 	beq.w	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	f200 865f 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d42:	f000 8187 	beq.w	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d4c:	f200 8655 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d56:	f000 80cd 	beq.w	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d60:	f200 864b 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6a:	f000 8430 	beq.w	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d74:	f200 8641 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d7e:	f000 83e4 	beq.w	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d88:	f200 8637 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	f000 80af 	beq.w	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9c:	f200 862d 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	f000 809d 	beq.w	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	f200 8623 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dba:	f000 808b 	beq.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc4:	f200 8619 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	f000 8554 	beq.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd8:	f200 860f 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de2:	f000 8500 	beq.w	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	f200 8605 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	f000 84a1 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	f200 85fb 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	f000 846c 	beq.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	f200 85f3 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d84c      	bhi.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 85ec 	beq.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	2b1f      	cmp	r3, #31
 8005e28:	f200 85e7 	bhi.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08006249 	.word	0x08006249
 8005e38:	080062b7 	.word	0x080062b7
 8005e3c:	080069fb 	.word	0x080069fb
 8005e40:	0800634b 	.word	0x0800634b
 8005e44:	080069fb 	.word	0x080069fb
 8005e48:	080069fb 	.word	0x080069fb
 8005e4c:	080069fb 	.word	0x080069fb
 8005e50:	080063c3 	.word	0x080063c3
 8005e54:	080069fb 	.word	0x080069fb
 8005e58:	080069fb 	.word	0x080069fb
 8005e5c:	080069fb 	.word	0x080069fb
 8005e60:	080069fb 	.word	0x080069fb
 8005e64:	080069fb 	.word	0x080069fb
 8005e68:	080069fb 	.word	0x080069fb
 8005e6c:	080069fb 	.word	0x080069fb
 8005e70:	08006447 	.word	0x08006447
 8005e74:	080069fb 	.word	0x080069fb
 8005e78:	080069fb 	.word	0x080069fb
 8005e7c:	080069fb 	.word	0x080069fb
 8005e80:	080069fb 	.word	0x080069fb
 8005e84:	080069fb 	.word	0x080069fb
 8005e88:	080069fb 	.word	0x080069fb
 8005e8c:	080069fb 	.word	0x080069fb
 8005e90:	080069fb 	.word	0x080069fb
 8005e94:	080069fb 	.word	0x080069fb
 8005e98:	080069fb 	.word	0x080069fb
 8005e9c:	080069fb 	.word	0x080069fb
 8005ea0:	080069fb 	.word	0x080069fb
 8005ea4:	080069fb 	.word	0x080069fb
 8005ea8:	080069fb 	.word	0x080069fb
 8005eac:	080069fb 	.word	0x080069fb
 8005eb0:	080064c9 	.word	0x080064c9
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	f000 83e8 	beq.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005ebc:	f000 bd9d 	b.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	0003d090 	.word	0x0003d090
 8005ec8:	0800b464 	.word	0x0800b464
 8005ecc:	00f42400 	.word	0x00f42400
 8005ed0:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005eda:	f000 ff83 	bl	8006de4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005ede:	61f8      	str	r0, [r7, #28]
      break;
 8005ee0:	f000 bd8e 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005eea:	f000 ff7b 	bl	8006de4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005eee:	61f8      	str	r0, [r7, #28]
      break;
 8005ef0:	f000 bd86 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005ef4:	4b9a      	ldr	r3, [pc, #616]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f06:	d015      	beq.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f0e:	f200 8092 	bhi.w	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f18:	d029      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f20:	f200 8089 	bhi.w	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d07b      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f30:	d04a      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005f32:	e080      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f34:	4b8a      	ldr	r3, [pc, #552]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d17d      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f40:	4b87      	ldr	r3, [pc, #540]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005f4c:	4b84      	ldr	r3, [pc, #528]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	e005      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005f58:	4b81      	ldr	r3, [pc, #516]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	4a7f      	ldr	r2, [pc, #508]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6a:	61fb      	str	r3, [r7, #28]
          break;
 8005f6c:	e066      	b.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f6e:	4b7c      	ldr	r3, [pc, #496]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f7a:	d162      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005f7c:	4b78      	ldr	r3, [pc, #480]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f88:	d15b      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f8a:	4b75      	ldr	r3, [pc, #468]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f94:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	fb03 f202 	mul.w	r2, r3, r2
 8005f9e:	4b70      	ldr	r3, [pc, #448]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	3301      	adds	r3, #1
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005fb0:	4b6b      	ldr	r3, [pc, #428]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	0d5b      	lsrs	r3, r3, #21
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	61fb      	str	r3, [r7, #28]
          break;
 8005fc6:	e03c      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005fc8:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fd4:	d138      	bne.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005fd6:	4b62      	ldr	r3, [pc, #392]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe2:	d131      	bne.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005fe4:	4b5e      	ldr	r3, [pc, #376]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	0a1b      	lsrs	r3, r3, #8
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	fb03 f202 	mul.w	r2, r3, r2
 8005ff8:	4b59      	ldr	r3, [pc, #356]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3301      	adds	r3, #1
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800600a:	4b55      	ldr	r3, [pc, #340]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	0d5b      	lsrs	r3, r3, #21
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	3301      	adds	r3, #1
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	61fb      	str	r3, [r7, #28]
          break;
 8006020:	e012      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006022:	4b4f      	ldr	r3, [pc, #316]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d10e      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006030:	4b4d      	ldr	r3, [pc, #308]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006032:	61fb      	str	r3, [r7, #28]
          break;
 8006034:	e00b      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006036:	bf00      	nop
 8006038:	f000 bce2 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800603c:	bf00      	nop
 800603e:	f000 bcdf 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006042:	bf00      	nop
 8006044:	f000 bcdc 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006048:	bf00      	nop
 800604a:	f000 bcd9 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800604e:	bf00      	nop
        break;
 8006050:	f000 bcd6 	b.w	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006054:	4b42      	ldr	r3, [pc, #264]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006062:	d13d      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006064:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006070:	f040 84c5 	bne.w	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006074:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	f040 84bd 	bne.w	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	fb03 f202 	mul.w	r2, r3, r2
 8006098:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	3301      	adds	r3, #1
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80060aa:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	0edb      	lsrs	r3, r3, #27
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80060c8:	2311      	movs	r3, #17
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e001      	b.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80060ce:	2307      	movs	r3, #7
 80060d0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	61fb      	str	r3, [r7, #28]
      break;
 80060dc:	f000 bc8f 	b.w	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060f2:	d016      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060fa:	f200 809b 	bhi.w	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006104:	d032      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610c:	f200 8092 	bhi.w	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8084 	beq.w	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800611e:	d052      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006120:	e088      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006122:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	f040 8084 	bne.w	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	e005      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800614a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	4a03      	ldr	r2, [pc, #12]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615a:	61fb      	str	r3, [r7, #28]
          break;
 800615c:	e06c      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	0800b464 	.word	0x0800b464
 8006168:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800616c:	4ba5      	ldr	r3, [pc, #660]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006178:	d160      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800617a:	4ba2      	ldr	r3, [pc, #648]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006186:	d159      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006188:	4b9e      	ldr	r3, [pc, #632]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006192:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	fb03 f202 	mul.w	r2, r3, r2
 800619c:	4b99      	ldr	r3, [pc, #612]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	3301      	adds	r3, #1
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80061ae:	4b95      	ldr	r3, [pc, #596]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	0d5b      	lsrs	r3, r3, #21
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	3301      	adds	r3, #1
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	61fb      	str	r3, [r7, #28]
          break;
 80061c4:	e03a      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80061c6:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d2:	d135      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80061d4:	4b8b      	ldr	r3, [pc, #556]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e0:	d12e      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061e2:	4b88      	ldr	r3, [pc, #544]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ec:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	fb03 f202 	mul.w	r2, r3, r2
 80061f6:	4b83      	ldr	r3, [pc, #524]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	3301      	adds	r3, #1
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006208:	4b7e      	ldr	r3, [pc, #504]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	0d5b      	lsrs	r3, r3, #21
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	3301      	adds	r3, #1
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	61fb      	str	r3, [r7, #28]
          break;
 800621e:	e00f      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006220:	4b78      	ldr	r3, [pc, #480]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d10a      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800622e:	4b76      	ldr	r3, [pc, #472]	; (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006230:	61fb      	str	r3, [r7, #28]
          break;
 8006232:	e007      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006234:	bf00      	nop
 8006236:	e3e2      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006238:	bf00      	nop
 800623a:	e3e0      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800623c:	bf00      	nop
 800623e:	e3de      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006240:	bf00      	nop
 8006242:	e3dc      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006244:	bf00      	nop
      break;
 8006246:	e3da      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006248:	4b6e      	ldr	r3, [pc, #440]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d827      	bhi.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006271 	.word	0x08006271
 8006264:	08006279 	.word	0x08006279
 8006268:	08006281 	.word	0x08006281
 800626c:	08006295 	.word	0x08006295
          frequency = HAL_RCC_GetPCLK2Freq();
 8006270:	f7ff f8a8 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 8006274:	61f8      	str	r0, [r7, #28]
          break;
 8006276:	e01d      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006278:	f7fe fff6 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800627c:	61f8      	str	r0, [r7, #28]
          break;
 800627e:	e019      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006280:	4b60      	ldr	r3, [pc, #384]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d10f      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800628e:	4b5f      	ldr	r3, [pc, #380]	; (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006290:	61fb      	str	r3, [r7, #28]
          break;
 8006292:	e00c      	b.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006294:	4b5b      	ldr	r3, [pc, #364]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d107      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a6:	61fb      	str	r3, [r7, #28]
          break;
 80062a8:	e003      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80062aa:	bf00      	nop
 80062ac:	e3a8      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ae:	bf00      	nop
 80062b0:	e3a6      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062b2:	bf00      	nop
        break;
 80062b4:	e3a4      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80062b6:	4b53      	ldr	r3, [pc, #332]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	d83a      	bhi.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006305 	.word	0x08006305
 80062d4:	0800633f 	.word	0x0800633f
 80062d8:	0800633f 	.word	0x0800633f
 80062dc:	0800633f 	.word	0x0800633f
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	0800633f 	.word	0x0800633f
 80062e8:	0800633f 	.word	0x0800633f
 80062ec:	0800633f 	.word	0x0800633f
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800633f 	.word	0x0800633f
 80062f8:	0800633f 	.word	0x0800633f
 80062fc:	0800633f 	.word	0x0800633f
 8006300:	08006329 	.word	0x08006329
          frequency = HAL_RCC_GetPCLK1Freq();
 8006304:	f7ff f848 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006308:	61f8      	str	r0, [r7, #28]
          break;
 800630a:	e01d      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800630c:	f7fe ffac 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006310:	61f8      	str	r0, [r7, #28]
          break;
 8006312:	e019      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006314:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d10f      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006322:	4b3a      	ldr	r3, [pc, #232]	; (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006324:	61fb      	str	r3, [r7, #28]
          break;
 8006326:	e00c      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006328:	4b36      	ldr	r3, [pc, #216]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d107      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	61fb      	str	r3, [r7, #28]
          break;
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800633e:	bf00      	nop
 8006340:	e35e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006342:	bf00      	nop
 8006344:	e35c      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006346:	bf00      	nop
        break;
 8006348:	e35a      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800634a:	4b2e      	ldr	r3, [pc, #184]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b30      	cmp	r3, #48	; 0x30
 800635a:	d021      	beq.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b30      	cmp	r3, #48	; 0x30
 8006360:	d829      	bhi.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b20      	cmp	r3, #32
 8006366:	d011      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b20      	cmp	r3, #32
 800636c:	d823      	bhi.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b10      	cmp	r3, #16
 8006378:	d004      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800637a:	e01c      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800637c:	f7ff f80c 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006380:	61f8      	str	r0, [r7, #28]
          break;
 8006382:	e01d      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006384:	f7fe ff70 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006388:	61f8      	str	r0, [r7, #28]
          break;
 800638a:	e019      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800638c:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d10f      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800639a:	4b1c      	ldr	r3, [pc, #112]	; (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800639c:	61fb      	str	r3, [r7, #28]
          break;
 800639e:	e00c      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d107      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	61fb      	str	r3, [r7, #28]
          break;
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80063b6:	bf00      	nop
 80063b8:	e322      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063ba:	bf00      	nop
 80063bc:	e320      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063be:	bf00      	nop
        break;
 80063c0:	e31e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063c2:	4b10      	ldr	r3, [pc, #64]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2bc0      	cmp	r3, #192	; 0xc0
 80063d2:	d027      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2bc0      	cmp	r3, #192	; 0xc0
 80063d8:	d82f      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b80      	cmp	r3, #128	; 0x80
 80063de:	d017      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d829      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d004      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80063f2:	e022      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063f4:	f7fe ffd0 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80063f8:	61f8      	str	r0, [r7, #28]
          break;
 80063fa:	e023      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80063fc:	f7fe ff34 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006400:	61f8      	str	r0, [r7, #28]
          break;
 8006402:	e01f      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006404:	40021000 	.word	0x40021000
 8006408:	02dc6c00 	.word	0x02dc6c00
 800640c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006410:	4b9b      	ldr	r3, [pc, #620]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d10f      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800641e:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006420:	61fb      	str	r3, [r7, #28]
          break;
 8006422:	e00c      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006424:	4b96      	ldr	r3, [pc, #600]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d107      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	61fb      	str	r3, [r7, #28]
          break;
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800643a:	bf00      	nop
 800643c:	e2e0      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643e:	bf00      	nop
 8006440:	e2de      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006442:	bf00      	nop
        break;
 8006444:	e2dc      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006446:	4b8e      	ldr	r3, [pc, #568]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006458:	d025      	beq.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006460:	d82c      	bhi.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006468:	d013      	beq.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d824      	bhi.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647e:	d004      	beq.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006480:	e01c      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006482:	f7fe ff89 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006486:	61f8      	str	r0, [r7, #28]
          break;
 8006488:	e01d      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800648a:	f7fe feed 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800648e:	61f8      	str	r0, [r7, #28]
          break;
 8006490:	e019      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006492:	4b7b      	ldr	r3, [pc, #492]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649e:	d10f      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80064a0:	4b78      	ldr	r3, [pc, #480]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80064a2:	61fb      	str	r3, [r7, #28]
          break;
 80064a4:	e00c      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064a6:	4b76      	ldr	r3, [pc, #472]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d107      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80064b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b8:	61fb      	str	r3, [r7, #28]
          break;
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80064bc:	bf00      	nop
 80064be:	e29f      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064c0:	bf00      	nop
 80064c2:	e29d      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064c4:	bf00      	nop
        break;
 80064c6:	e29b      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80064c8:	4b6d      	ldr	r3, [pc, #436]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064da:	d025      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e2:	d82c      	bhi.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	d013      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f2:	d824      	bhi.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d004      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006502:	e01c      	b.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fe ff48 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006508:	61f8      	str	r0, [r7, #28]
          break;
 800650a:	e01d      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800650c:	f7fe feac 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006510:	61f8      	str	r0, [r7, #28]
          break;
 8006512:	e019      	b.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006514:	4b5a      	ldr	r3, [pc, #360]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006520:	d10f      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006522:	4b58      	ldr	r3, [pc, #352]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006524:	61fb      	str	r3, [r7, #28]
          break;
 8006526:	e00c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006528:	4b55      	ldr	r3, [pc, #340]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d107      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653a:	61fb      	str	r3, [r7, #28]
          break;
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800653e:	bf00      	nop
 8006540:	e25e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006542:	bf00      	nop
 8006544:	e25c      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006546:	bf00      	nop
        break;
 8006548:	e25a      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655c:	d007      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006564:	d12f      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006566:	f7fe fe7f 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800656a:	61f8      	str	r0, [r7, #28]
          break;
 800656c:	e02e      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800656e:	4b44      	ldr	r3, [pc, #272]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800657a:	d126      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800657c:	4b40      	ldr	r3, [pc, #256]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006588:	4b3d      	ldr	r3, [pc, #244]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	fb03 f202 	mul.w	r2, r3, r2
 800659c:	4b38      	ldr	r3, [pc, #224]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3301      	adds	r3, #1
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80065ae:	4b34      	ldr	r3, [pc, #208]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	0e5b      	lsrs	r3, r3, #25
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	3301      	adds	r3, #1
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	61fb      	str	r3, [r7, #28]
          break;
 80065c4:	e001      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80065c6:	bf00      	nop
 80065c8:	e21a      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ca:	bf00      	nop
        break;
 80065cc:	e218      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80065ce:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d103      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7fe fef0 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 80065e4:	61f8      	str	r0, [r7, #28]
        break;
 80065e6:	e20b      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80065e8:	f7fe fe3e 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e207      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80065f0:	4b23      	ldr	r3, [pc, #140]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f6:	f003 0318 	and.w	r3, r3, #24
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d010      	beq.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b10      	cmp	r3, #16
 8006606:	d834      	bhi.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d024      	beq.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006614:	e02d      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800661c:	f000 fbe2 	bl	8006de4 <RCCEx_GetSAIxPeriphCLKFreq>
 8006620:	61f8      	str	r0, [r7, #28]
          break;
 8006622:	e02b      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006624:	4b16      	ldr	r3, [pc, #88]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d122      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800663c:	4b10      	ldr	r3, [pc, #64]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	e005      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800664a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665a:	61fb      	str	r3, [r7, #28]
          break;
 800665c:	e00b      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800665e:	4b08      	ldr	r3, [pc, #32]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	d106      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800666e:	61fb      	str	r3, [r7, #28]
          break;
 8006670:	e003      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006672:	bf00      	nop
 8006674:	e1c4      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006676:	bf00      	nop
 8006678:	e1c2      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800667a:	bf00      	nop
        break;
 800667c:	e1c0      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800667e:	bf00      	nop
 8006680:	40021000 	.word	0x40021000
 8006684:	00f42400 	.word	0x00f42400
 8006688:	0800b464 	.word	0x0800b464
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800668c:	4b96      	ldr	r3, [pc, #600]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669e:	d013      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d819      	bhi.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b4:	d004      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fe6e 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
          break;
 80066be:	e010      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c0:	f7fe fdd2 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80066c4:	61f8      	str	r0, [r7, #28]
          break;
 80066c6:	e00c      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c8:	4b87      	ldr	r3, [pc, #540]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d104      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80066d6:	4b85      	ldr	r3, [pc, #532]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80066d8:	61fb      	str	r3, [r7, #28]
          break;
 80066da:	e001      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80066dc:	bf00      	nop
 80066de:	e18f      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066e0:	bf00      	nop
        break;
 80066e2:	e18d      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80066e4:	4b80      	ldr	r3, [pc, #512]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f6:	d013      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fe:	d819      	bhi.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800670c:	d004      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800670e:	e011      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe fe42 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006714:	61f8      	str	r0, [r7, #28]
          break;
 8006716:	e010      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006718:	f7fe fda6 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800671c:	61f8      	str	r0, [r7, #28]
          break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006720:	4b71      	ldr	r3, [pc, #452]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672c:	d104      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800672e:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006730:	61fb      	str	r3, [r7, #28]
          break;
 8006732:	e001      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006734:	bf00      	nop
 8006736:	e163      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006738:	bf00      	nop
        break;
 800673a:	e161      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800673c:	4b6a      	ldr	r3, [pc, #424]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674e:	d013      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006756:	d819      	bhi.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006764:	d004      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006766:	e011      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe fe16 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 800676c:	61f8      	str	r0, [r7, #28]
          break;
 800676e:	e010      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006770:	f7fe fd7a 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006774:	61f8      	str	r0, [r7, #28]
          break;
 8006776:	e00c      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006778:	4b5b      	ldr	r3, [pc, #364]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006784:	d104      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006786:	4b59      	ldr	r3, [pc, #356]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006788:	61fb      	str	r3, [r7, #28]
          break;
 800678a:	e001      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800678c:	bf00      	nop
 800678e:	e137      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006790:	bf00      	nop
        break;
 8006792:	e135      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006794:	4b54      	ldr	r3, [pc, #336]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d011      	beq.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d818      	bhi.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d004      	beq.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80067b8:	e011      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067ba:	f7fe fded 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80067be:	61f8      	str	r0, [r7, #28]
          break;
 80067c0:	e010      	b.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fe fd51 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 80067c6:	61f8      	str	r0, [r7, #28]
          break;
 80067c8:	e00c      	b.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d104      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80067d8:	4b44      	ldr	r3, [pc, #272]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067da:	61fb      	str	r3, [r7, #28]
          break;
 80067dc:	e001      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80067de:	bf00      	nop
 80067e0:	e10e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80067e2:	bf00      	nop
        break;
 80067e4:	e10c      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80067e6:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067f8:	d02c      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006800:	d833      	bhi.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006808:	d01a      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006810:	d82b      	bhi.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800681e:	d004      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006820:	e023      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fe fdb9 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8006826:	61f8      	str	r0, [r7, #28]
          break;
 8006828:	e026      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800682a:	4b2f      	ldr	r3, [pc, #188]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d11a      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006838:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800683c:	61fb      	str	r3, [r7, #28]
          break;
 800683e:	e016      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006840:	4b29      	ldr	r3, [pc, #164]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684c:	d111      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800684e:	4b27      	ldr	r3, [pc, #156]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006850:	61fb      	str	r3, [r7, #28]
          break;
 8006852:	e00e      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006854:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b02      	cmp	r3, #2
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006866:	61fb      	str	r3, [r7, #28]
          break;
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800686a:	bf00      	nop
 800686c:	e0c8      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800686e:	bf00      	nop
 8006870:	e0c6      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006872:	bf00      	nop
 8006874:	e0c4      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006876:	bf00      	nop
        break;
 8006878:	e0c2      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688c:	d030      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006894:	d837      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800689c:	d01a      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a4:	d82f      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b2:	d004      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80068b4:	e027      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7fe fd6f 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80068ba:	61f8      	str	r0, [r7, #28]
          break;
 80068bc:	e02a      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d11e      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80068cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068d0:	61fb      	str	r3, [r7, #28]
          break;
 80068d2:	e01a      	b.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e0:	d115      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80068e2:	4b02      	ldr	r3, [pc, #8]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068e4:	61fb      	str	r3, [r7, #28]
          break;
 80068e6:	e012      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80068e8:	40021000 	.word	0x40021000
 80068ec:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068f0:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d109      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80068fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006902:	61fb      	str	r3, [r7, #28]
          break;
 8006904:	e005      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006906:	bf00      	nop
 8006908:	e07a      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800690a:	bf00      	nop
 800690c:	e078      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800690e:	bf00      	nop
 8006910:	e076      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006912:	bf00      	nop
        break;
 8006914:	e074      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006916:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006918:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800691c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006928:	d02c      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006930:	d855      	bhi.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d004      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006940:	e04d      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006942:	f7fe fc91 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8006946:	61f8      	str	r0, [r7, #28]
          break;
 8006948:	e04e      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800694a:	4b30      	ldr	r3, [pc, #192]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d145      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006956:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006962:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	091b      	lsrs	r3, r3, #4
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	e005      	b.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800696e:	4b27      	ldr	r3, [pc, #156]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800697c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006980:	61fb      	str	r3, [r7, #28]
          break;
 8006982:	e02e      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006984:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006990:	d129      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d122      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	fb03 f202 	mul.w	r2, r3, r2
 80069b4:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	3301      	adds	r3, #1
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	0d5b      	lsrs	r3, r3, #21
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	3301      	adds	r3, #1
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	61fb      	str	r3, [r7, #28]
          break;
 80069dc:	e003      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80069de:	bf00      	nop
 80069e0:	e00e      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069e2:	bf00      	nop
 80069e4:	e00c      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069e6:	bf00      	nop
        break;
 80069e8:	e00a      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069ea:	bf00      	nop
 80069ec:	e008      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069ee:	bf00      	nop
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069f2:	bf00      	nop
 80069f4:	e004      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069f6:	bf00      	nop
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80069fe:	bf00      	nop
    }
  }

  return(frequency);
 8006a00:	69fb      	ldr	r3, [r7, #28]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	0800b464 	.word	0x0800b464

08006a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a22:	4b72      	ldr	r3, [pc, #456]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a2e:	4b6f      	ldr	r3, [pc, #444]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0203 	and.w	r2, r3, #3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d103      	bne.n	8006a46 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
       ||
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d142      	bne.n	8006acc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	e03f      	b.n	8006acc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d018      	beq.n	8006a86 <RCCEx_PLLSAI1_Config+0x72>
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d825      	bhi.n	8006aa4 <RCCEx_PLLSAI1_Config+0x90>
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d002      	beq.n	8006a62 <RCCEx_PLLSAI1_Config+0x4e>
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d009      	beq.n	8006a74 <RCCEx_PLLSAI1_Config+0x60>
 8006a60:	e020      	b.n	8006aa4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a62:	4b62      	ldr	r3, [pc, #392]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d11d      	bne.n	8006aaa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a72:	e01a      	b.n	8006aaa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a74:	4b5d      	ldr	r3, [pc, #372]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d116      	bne.n	8006aae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a84:	e013      	b.n	8006aae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a86:	4b59      	ldr	r3, [pc, #356]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10f      	bne.n	8006ab2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a92:	4b56      	ldr	r3, [pc, #344]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aa2:	e006      	b.n	8006ab2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa8:	e004      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e002      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006aae:	bf00      	nop
 8006ab0:	e000      	b.n	8006ab4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d108      	bne.n	8006acc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006aba:	4b4c      	ldr	r3, [pc, #304]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4949      	ldr	r1, [pc, #292]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8086 	bne.w	8006be0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ad4:	4b45      	ldr	r3, [pc, #276]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a44      	ldr	r2, [pc, #272]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fb fe18 	bl	8002714 <HAL_GetTick>
 8006ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ae6:	e009      	b.n	8006afc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae8:	f7fb fe14 	bl	8002714 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d902      	bls.n	8006afc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	73fb      	strb	r3, [r7, #15]
        break;
 8006afa:	e005      	b.n	8006b08 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006afc:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1ef      	bne.n	8006ae8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d168      	bne.n	8006be0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d113      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b14:	4b35      	ldr	r3, [pc, #212]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	4b35      	ldr	r3, [pc, #212]	; (8006bf0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6892      	ldr	r2, [r2, #8]
 8006b20:	0211      	lsls	r1, r2, #8
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68d2      	ldr	r2, [r2, #12]
 8006b26:	06d2      	lsls	r2, r2, #27
 8006b28:	4311      	orrs	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6852      	ldr	r2, [r2, #4]
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	0112      	lsls	r2, r2, #4
 8006b32:	430a      	orrs	r2, r1
 8006b34:	492d      	ldr	r1, [pc, #180]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
 8006b3a:	e02d      	b.n	8006b98 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d115      	bne.n	8006b6e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b44:	691a      	ldr	r2, [r3, #16]
 8006b46:	4b2b      	ldr	r3, [pc, #172]	; (8006bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6892      	ldr	r2, [r2, #8]
 8006b4e:	0211      	lsls	r1, r2, #8
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6912      	ldr	r2, [r2, #16]
 8006b54:	0852      	lsrs	r2, r2, #1
 8006b56:	3a01      	subs	r2, #1
 8006b58:	0552      	lsls	r2, r2, #21
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6852      	ldr	r2, [r2, #4]
 8006b60:	3a01      	subs	r2, #1
 8006b62:	0112      	lsls	r2, r2, #4
 8006b64:	430a      	orrs	r2, r1
 8006b66:	4921      	ldr	r1, [pc, #132]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	610b      	str	r3, [r1, #16]
 8006b6c:	e014      	b.n	8006b98 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b6e:	4b1f      	ldr	r3, [pc, #124]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6892      	ldr	r2, [r2, #8]
 8006b7a:	0211      	lsls	r1, r2, #8
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6952      	ldr	r2, [r2, #20]
 8006b80:	0852      	lsrs	r2, r2, #1
 8006b82:	3a01      	subs	r2, #1
 8006b84:	0652      	lsls	r2, r2, #25
 8006b86:	4311      	orrs	r1, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6852      	ldr	r2, [r2, #4]
 8006b8c:	3a01      	subs	r2, #1
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	430a      	orrs	r2, r1
 8006b92:	4916      	ldr	r1, [pc, #88]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b98:	4b14      	ldr	r3, [pc, #80]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ba2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba4:	f7fb fdb6 	bl	8002714 <HAL_GetTick>
 8006ba8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006baa:	e009      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bac:	f7fb fdb2 	bl	8002714 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d902      	bls.n	8006bc0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	73fb      	strb	r3, [r7, #15]
          break;
 8006bbe:	e005      	b.n	8006bcc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ef      	beq.n	8006bac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	4904      	ldr	r1, [pc, #16]	; (8006bec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	07ff800f 	.word	0x07ff800f
 8006bf4:	ff9f800f 	.word	0xff9f800f
 8006bf8:	f9ff800f 	.word	0xf9ff800f

08006bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c0a:	4b72      	ldr	r3, [pc, #456]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00e      	beq.n	8006c34 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c16:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0203 	and.w	r2, r3, #3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d103      	bne.n	8006c2e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
       ||
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d142      	bne.n	8006cb4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e03f      	b.n	8006cb4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d018      	beq.n	8006c6e <RCCEx_PLLSAI2_Config+0x72>
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d825      	bhi.n	8006c8c <RCCEx_PLLSAI2_Config+0x90>
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d002      	beq.n	8006c4a <RCCEx_PLLSAI2_Config+0x4e>
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d009      	beq.n	8006c5c <RCCEx_PLLSAI2_Config+0x60>
 8006c48:	e020      	b.n	8006c8c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c4a:	4b62      	ldr	r3, [pc, #392]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11d      	bne.n	8006c92 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c5a:	e01a      	b.n	8006c92 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c5c:	4b5d      	ldr	r3, [pc, #372]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d116      	bne.n	8006c96 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c6c:	e013      	b.n	8006c96 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c6e:	4b59      	ldr	r3, [pc, #356]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10f      	bne.n	8006c9a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c7a:	4b56      	ldr	r3, [pc, #344]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c8a:	e006      	b.n	8006c9a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e004      	b.n	8006c9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c92:	bf00      	nop
 8006c94:	e002      	b.n	8006c9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d108      	bne.n	8006cb4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006ca2:	4b4c      	ldr	r3, [pc, #304]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f023 0203 	bic.w	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4949      	ldr	r1, [pc, #292]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8086 	bne.w	8006dc8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006cbc:	4b45      	ldr	r3, [pc, #276]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a44      	ldr	r2, [pc, #272]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc8:	f7fb fd24 	bl	8002714 <HAL_GetTick>
 8006ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cce:	e009      	b.n	8006ce4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cd0:	f7fb fd20 	bl	8002714 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d902      	bls.n	8006ce4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ce2:	e005      	b.n	8006cf0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ce4:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ef      	bne.n	8006cd0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d168      	bne.n	8006dc8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d113      	bne.n	8006d24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cfc:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cfe:	695a      	ldr	r2, [r3, #20]
 8006d00:	4b35      	ldr	r3, [pc, #212]	; (8006dd8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6892      	ldr	r2, [r2, #8]
 8006d08:	0211      	lsls	r1, r2, #8
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	68d2      	ldr	r2, [r2, #12]
 8006d0e:	06d2      	lsls	r2, r2, #27
 8006d10:	4311      	orrs	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6852      	ldr	r2, [r2, #4]
 8006d16:	3a01      	subs	r2, #1
 8006d18:	0112      	lsls	r2, r2, #4
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	492d      	ldr	r1, [pc, #180]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	614b      	str	r3, [r1, #20]
 8006d22:	e02d      	b.n	8006d80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d115      	bne.n	8006d56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d2c:	695a      	ldr	r2, [r3, #20]
 8006d2e:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6892      	ldr	r2, [r2, #8]
 8006d36:	0211      	lsls	r1, r2, #8
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6912      	ldr	r2, [r2, #16]
 8006d3c:	0852      	lsrs	r2, r2, #1
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	0552      	lsls	r2, r2, #21
 8006d42:	4311      	orrs	r1, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6852      	ldr	r2, [r2, #4]
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	4921      	ldr	r1, [pc, #132]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	614b      	str	r3, [r1, #20]
 8006d54:	e014      	b.n	8006d80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d56:	4b1f      	ldr	r3, [pc, #124]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6892      	ldr	r2, [r2, #8]
 8006d62:	0211      	lsls	r1, r2, #8
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6952      	ldr	r2, [r2, #20]
 8006d68:	0852      	lsrs	r2, r2, #1
 8006d6a:	3a01      	subs	r2, #1
 8006d6c:	0652      	lsls	r2, r2, #25
 8006d6e:	4311      	orrs	r1, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6852      	ldr	r2, [r2, #4]
 8006d74:	3a01      	subs	r2, #1
 8006d76:	0112      	lsls	r2, r2, #4
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d80:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fb fcc2 	bl	8002714 <HAL_GetTick>
 8006d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d92:	e009      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d94:	f7fb fcbe 	bl	8002714 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d902      	bls.n	8006da8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	73fb      	strb	r3, [r7, #15]
          break;
 8006da6:	e005      	b.n	8006db4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ef      	beq.n	8006d94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	4904      	ldr	r1, [pc, #16]	; (8006dd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	07ff800f 	.word	0x07ff800f
 8006ddc:	ff9f800f 	.word	0xff9f800f
 8006de0:	f9ff800f 	.word	0xf9ff800f

08006de4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e00:	d10b      	bne.n	8006e1a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e02:	4b7e      	ldr	r3, [pc, #504]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e08:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e0c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b60      	cmp	r3, #96	; 0x60
 8006e12:	d112      	bne.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e14:	4b7a      	ldr	r3, [pc, #488]	; (8007000 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e00f      	b.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d10b      	bne.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006e22:	4b76      	ldr	r3, [pc, #472]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e34:	d101      	bne.n	8006e3a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006e36:	4b72      	ldr	r3, [pc, #456]	; (8007000 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e38:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f040 80d6 	bne.w	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	d003      	beq.n	8006e54 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e52:	d13b      	bne.n	8006ecc <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e54:	4b69      	ldr	r3, [pc, #420]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e60:	f040 80c4 	bne.w	8006fec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006e64:	4b65      	ldr	r3, [pc, #404]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80bd 	beq.w	8006fec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e72:	4b62      	ldr	r3, [pc, #392]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	091b      	lsrs	r3, r3, #4
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006e86:	4b5d      	ldr	r3, [pc, #372]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e90:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006e92:	4b5a      	ldr	r3, [pc, #360]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	0edb      	lsrs	r3, r3, #27
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006ea4:	4b55      	ldr	r3, [pc, #340]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006eb0:	2311      	movs	r3, #17
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e001      	b.n	8006eba <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006eb6:	2307      	movs	r3, #7
 8006eb8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	fb03 f202 	mul.w	r2, r3, r2
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006eca:	e08f      	b.n	8006fec <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d13a      	bne.n	8006f48 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006ed2:	4b4a      	ldr	r3, [pc, #296]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ede:	f040 8086 	bne.w	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006ee2:	4b46      	ldr	r3, [pc, #280]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d07f      	beq.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006eee:	4b43      	ldr	r3, [pc, #268]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	3301      	adds	r3, #1
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006f02:	4b3e      	ldr	r3, [pc, #248]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	0edb      	lsrs	r3, r3, #27
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006f20:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006f2c:	2311      	movs	r3, #17
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e001      	b.n	8006f36 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006f32:	2307      	movs	r3, #7
 8006f34:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	fb03 f202 	mul.w	r2, r3, r2
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e052      	b.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b80      	cmp	r3, #128	; 0x80
 8006f4c:	d003      	beq.n	8006f56 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f54:	d109      	bne.n	8006f6a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f56:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f62:	d144      	bne.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006f66:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f68:	e041      	b.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d003      	beq.n	8006f78 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f76:	d13a      	bne.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006f78:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f84:	d133      	bne.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02d      	beq.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006fb2:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	0edb      	lsrs	r3, r3, #27
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006fd0:	2311      	movs	r3, #17
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e001      	b.n	8006fda <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006fd6:	2307      	movs	r3, #7
 8006fd8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	fb03 f202 	mul.w	r2, r3, r2
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	e000      	b.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fec:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006fee:	69fb      	ldr	r3, [r7, #28]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3724      	adds	r7, #36	; 0x24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	40021000 	.word	0x40021000
 8007000:	001fff68 	.word	0x001fff68
 8007004:	00f42400 	.word	0x00f42400

08007008 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d904      	bls.n	8007026 <HAL_SAI_InitProtocol+0x1e>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3b03      	subs	r3, #3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d812      	bhi.n	800704a <HAL_SAI_InitProtocol+0x42>
 8007024:	e008      	b.n	8007038 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f9fb 	bl	8007428 <SAI_InitI2S>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]
      break;
 8007036:	e00b      	b.n	8007050 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 faa4 	bl	800758c <SAI_InitPCM>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
      break;
 8007048:	e002      	b.n	8007050 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f808 	bl	800706c <HAL_SAI_Init>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	; 0x28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1c7      	b.n	800740e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10e      	bne.n	80070a6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a81      	ldr	r2, [pc, #516]	; (8007294 <HAL_SAI_Init+0x228>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d107      	bne.n	80070a2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007096:	2b01      	cmp	r3, #1
 8007098:	d103      	bne.n	80070a2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e1b3      	b.n	800740e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fb fa06 	bl	80024cc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fae5 	bl	8007690 <SAI_Disable>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e19e      	b.n	800740e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d00c      	beq.n	80070fa <HAL_SAI_Init+0x8e>
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d80d      	bhi.n	8007100 <HAL_SAI_Init+0x94>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_SAI_Init+0x82>
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d003      	beq.n	80070f4 <HAL_SAI_Init+0x88>
 80070ec:	e008      	b.n	8007100 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070f2:	e008      	b.n	8007106 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80070f4:	2310      	movs	r3, #16
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070f8:	e005      	b.n	8007106 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80070fa:	2320      	movs	r3, #32
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80070fe:	e002      	b.n	8007106 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007104:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d81d      	bhi.n	800714a <HAL_SAI_Init+0xde>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <HAL_SAI_Init+0xa8>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007125 	.word	0x08007125
 8007118:	0800712b 	.word	0x0800712b
 800711c:	08007133 	.word	0x08007133
 8007120:	0800713b 	.word	0x0800713b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
      break;
 8007128:	e012      	b.n	8007150 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800712a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712e:	61fb      	str	r3, [r7, #28]
      break;
 8007130:	e00e      	b.n	8007150 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007136:	61fb      	str	r3, [r7, #28]
      break;
 8007138:	e00a      	b.n	8007150 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800713a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800713e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007148:	e002      	b.n	8007150 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
      break;
 800714e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a4f      	ldr	r2, [pc, #316]	; (8007294 <HAL_SAI_Init+0x228>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_SAI_Init+0xf8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a4e      	ldr	r2, [pc, #312]	; (8007298 <HAL_SAI_Init+0x22c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d103      	bne.n	800716c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007164:	4a4d      	ldr	r2, [pc, #308]	; (800729c <HAL_SAI_Init+0x230>)
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e002      	b.n	8007172 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800716c:	4a4c      	ldr	r2, [pc, #304]	; (80072a0 <HAL_SAI_Init+0x234>)
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d073      	beq.n	8007262 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a45      	ldr	r2, [pc, #276]	; (8007294 <HAL_SAI_Init+0x228>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_SAI_Init+0x122>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a43      	ldr	r2, [pc, #268]	; (8007298 <HAL_SAI_Init+0x22c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d105      	bne.n	800719a <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800718e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007192:	f7fe fd1d 	bl	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007196:	61b8      	str	r0, [r7, #24]
 8007198:	e004      	b.n	80071a4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800719a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800719e:	f7fe fd17 	bl	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80071a2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071ac:	d120      	bne.n	80071f0 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d102      	bne.n	80071bc <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	e00a      	b.n	80071d2 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d103      	bne.n	80071cc <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80071c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	e002      	b.n	80071d2 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4619      	mov	r1, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e017      	b.n	8007220 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f8:	d101      	bne.n	80071fe <HAL_SAI_Init+0x192>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e000      	b.n	8007200 <HAL_SAI_Init+0x194>
 80071fe:	2301      	movs	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4619      	mov	r1, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	fb02 f303 	mul.w	r3, r2, r3
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	fbb1 f3f3 	udiv	r3, r1, r3
 800721e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <HAL_SAI_Init+0x238>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	08da      	lsrs	r2, r3, #3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <HAL_SAI_Init+0x238>)
 8007232:	fba3 2301 	umull	r2, r3, r3, r1
 8007236:	08da      	lsrs	r2, r3, #3
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	1aca      	subs	r2, r1, r3
 8007242:	2a08      	cmp	r2, #8
 8007244:	d904      	bls.n	8007250 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	2b04      	cmp	r3, #4
 8007256:	d104      	bne.n	8007262 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	085a      	lsrs	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_SAI_Init+0x206>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d109      	bne.n	8007286 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_SAI_Init+0x212>
 800727a:	2300      	movs	r3, #0
 800727c:	e001      	b.n	8007282 <HAL_SAI_Init+0x216>
 800727e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	e012      	b.n	80072ac <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10c      	bne.n	80072a8 <HAL_SAI_Init+0x23c>
 800728e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007292:	e00a      	b.n	80072aa <HAL_SAI_Init+0x23e>
 8007294:	40015404 	.word	0x40015404
 8007298:	40015424 	.word	0x40015424
 800729c:	40015400 	.word	0x40015400
 80072a0:	40015800 	.word	0x40015800
 80072a4:	cccccccd 	.word	0xcccccccd
 80072a8:	2300      	movs	r3, #0
 80072aa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6819      	ldr	r1, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b58      	ldr	r3, [pc, #352]	; (8007418 <HAL_SAI_Init+0x3ac>)
 80072b8:	400b      	ands	r3, r1
 80072ba:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072d0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d6:	431a      	orrs	r2, r3
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80072e4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072f0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80072fe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6812      	ldr	r2, [r2, #0]
 8007312:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007316:	f023 030f 	bic.w	r3, r3, #15
 800731a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6859      	ldr	r1, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6899      	ldr	r1, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b35      	ldr	r3, [pc, #212]	; (800741c <HAL_SAI_Init+0x3b0>)
 8007346:	400b      	ands	r3, r1
 8007348:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800735a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007360:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8007366:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	3b01      	subs	r3, #1
 800736e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007370:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68d9      	ldr	r1, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007388:	400b      	ands	r3, r1
 800738a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68d9      	ldr	r1, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800739a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80073a2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a8:	3b01      	subs	r3, #1
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a19      	ldr	r2, [pc, #100]	; (8007420 <HAL_SAI_Init+0x3b4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d119      	bne.n	80073f4 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80073c0:	4b18      	ldr	r3, [pc, #96]	; (8007424 <HAL_SAI_Init+0x3b8>)
 80073c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c4:	4a17      	ldr	r2, [pc, #92]	; (8007424 <HAL_SAI_Init+0x3b8>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10e      	bne.n	80073f4 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	3b01      	subs	r3, #1
 80073e0:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80073e2:	4910      	ldr	r1, [pc, #64]	; (8007424 <HAL_SAI_Init+0x3b8>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80073e8:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <HAL_SAI_Init+0x3b8>)
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	4a0d      	ldr	r2, [pc, #52]	; (8007424 <HAL_SAI_Init+0x3b8>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	; 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	f805c010 	.word	0xf805c010
 800741c:	fff88000 	.word	0xfff88000
 8007420:	40015404 	.word	0x40015404
 8007424:	40015400 	.word	0x40015400

08007428 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <SAI_InitI2S+0x2e>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	64da      	str	r2, [r3, #76]	; 0x4c
 800745c:	e002      	b.n	8007464 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800746a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007472:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e077      	b.n	800757e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d107      	bne.n	80074a4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80074a0:	661a      	str	r2, [r3, #96]	; 0x60
 80074a2:	e006      	b.n	80074b2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074aa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d84f      	bhi.n	8007558 <SAI_InitI2S+0x130>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <SAI_InitI2S+0x98>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	08007515 	.word	0x08007515
 80074cc:	08007537 	.word	0x08007537
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2280      	movs	r2, #128	; 0x80
 80074d4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	011a      	lsls	r2, r3, #4
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2240      	movs	r2, #64	; 0x40
 80074ee:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80074f0:	e035      	b.n	800755e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2280      	movs	r2, #128	; 0x80
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	019a      	lsls	r2, r3, #6
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007512:	e024      	b.n	800755e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	22c0      	movs	r2, #192	; 0xc0
 8007518:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	019a      	lsls	r2, r3, #6
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2280      	movs	r2, #128	; 0x80
 8007532:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007534:	e013      	b.n	800755e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	22e0      	movs	r2, #224	; 0xe0
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	019a      	lsls	r2, r3, #6
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2280      	movs	r2, #128	; 0x80
 8007554:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007556:	e002      	b.n	800755e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
      break;
 800755c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d10b      	bne.n	800757c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d102      	bne.n	8007570 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2210      	movs	r2, #16
 800756e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d102      	bne.n	800757c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2208      	movs	r2, #8
 800757a:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop

0800758c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <SAI_InitPCM+0x2e>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d103      	bne.n	80075c2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	64da      	str	r2, [r3, #76]	; 0x4c
 80075c0:	e002      	b.n	80075c8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075f0:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d103      	bne.n	8007600 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54
 80075fe:	e002      	b.n	8007606 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	220d      	movs	r2, #13
 8007604:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d837      	bhi.n	800767c <SAI_InitPCM+0xf0>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <SAI_InitPCM+0x88>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007625 	.word	0x08007625
 8007618:	0800763b 	.word	0x0800763b
 800761c:	08007651 	.word	0x08007651
 8007620:	08007667 	.word	0x08007667
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2280      	movs	r2, #128	; 0x80
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	011a      	lsls	r2, r3, #4
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2240      	movs	r2, #64	; 0x40
 8007636:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007638:	e023      	b.n	8007682 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800764e:	e018      	b.n	8007682 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	22c0      	movs	r2, #192	; 0xc0
 8007654:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2280      	movs	r2, #128	; 0x80
 8007662:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007664:	e00d      	b.n	8007682 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	22e0      	movs	r2, #224	; 0xe0
 800766a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2280      	movs	r2, #128	; 0x80
 8007678:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800767a:	e002      	b.n	8007682 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      break;
 8007680:	bf00      	nop
  }

  return status;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007698:	4b18      	ldr	r3, [pc, #96]	; (80076fc <SAI_Disable+0x6c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a18      	ldr	r2, [pc, #96]	; (8007700 <SAI_Disable+0x70>)
 800769e:	fba2 2303 	umull	r2, r3, r2, r3
 80076a2:	0b1b      	lsrs	r3, r3, #12
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80076ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	72fb      	strb	r3, [r7, #11]
      break;
 80076d6:	e009      	b.n	80076ec <SAI_Disable+0x5c>
    }
    count--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e7      	bne.n	80076bc <SAI_Disable+0x2c>

  return status;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20000000 	.word	0x20000000
 8007700:	95cbec1b 	.word	0x95cbec1b

08007704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e049      	b.n	80077aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fa fdb6 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f000 fcbc 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d001      	beq.n	80077cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e04f      	b.n	800786c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a23      	ldr	r2, [pc, #140]	; (8007878 <HAL_TIM_Base_Start_IT+0xc4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f6:	d018      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1f      	ldr	r2, [pc, #124]	; (800787c <HAL_TIM_Base_Start_IT+0xc8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <HAL_TIM_Base_Start_IT+0xcc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1c      	ldr	r2, [pc, #112]	; (8007884 <HAL_TIM_Base_Start_IT+0xd0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <HAL_TIM_Base_Start_IT+0xd4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_TIM_Base_Start_IT+0x76>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <HAL_TIM_Base_Start_IT+0xd8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d115      	bne.n	8007856 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	4b17      	ldr	r3, [pc, #92]	; (8007890 <HAL_TIM_Base_Start_IT+0xdc>)
 8007832:	4013      	ands	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b06      	cmp	r3, #6
 800783a:	d015      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0xb4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007842:	d011      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007854:	e008      	b.n	8007868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e000      	b.n	800786a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007868:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40013400 	.word	0x40013400
 800788c:	40014000 	.word	0x40014000
 8007890:	00010007 	.word	0x00010007

08007894 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e049      	b.n	800793a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f841 	bl	8007942 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f000 fbf4 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e049      	b.n	80079fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fa fce3 	bl	8002348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f000 fb93 	bl	80080c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <HAL_TIM_PWM_Start+0x24>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e03c      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x9e>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d109      	bne.n	8007a42 <HAL_TIM_PWM_Start+0x3e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	bf14      	ite	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	e02f      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x9e>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d109      	bne.n	8007a5c <HAL_TIM_PWM_Start+0x58>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	bf14      	ite	ne
 8007a54:	2301      	movne	r3, #1
 8007a56:	2300      	moveq	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	e022      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x9e>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	d109      	bne.n	8007a76 <HAL_TIM_PWM_Start+0x72>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	bf14      	ite	ne
 8007a6e:	2301      	movne	r3, #1
 8007a70:	2300      	moveq	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	e015      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x9e>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d109      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x8c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	e008      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x9e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	bf14      	ite	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	2300      	moveq	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e09c      	b.n	8007be4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_PWM_Start+0xb6>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab8:	e023      	b.n	8007b02 <HAL_TIM_PWM_Start+0xfe>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d104      	bne.n	8007aca <HAL_TIM_PWM_Start+0xc6>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac8:	e01b      	b.n	8007b02 <HAL_TIM_PWM_Start+0xfe>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d104      	bne.n	8007ada <HAL_TIM_PWM_Start+0xd6>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ad8:	e013      	b.n	8007b02 <HAL_TIM_PWM_Start+0xfe>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b0c      	cmp	r3, #12
 8007ade:	d104      	bne.n	8007aea <HAL_TIM_PWM_Start+0xe6>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ae8:	e00b      	b.n	8007b02 <HAL_TIM_PWM_Start+0xfe>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	d104      	bne.n	8007afa <HAL_TIM_PWM_Start+0xf6>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af8:	e003      	b.n	8007b02 <HAL_TIM_PWM_Start+0xfe>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2201      	movs	r2, #1
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fee2 	bl	80088d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a35      	ldr	r2, [pc, #212]	; (8007bec <HAL_TIM_PWM_Start+0x1e8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x13e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a34      	ldr	r2, [pc, #208]	; (8007bf0 <HAL_TIM_PWM_Start+0x1ec>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x13e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a32      	ldr	r2, [pc, #200]	; (8007bf4 <HAL_TIM_PWM_Start+0x1f0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x13e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a31      	ldr	r2, [pc, #196]	; (8007bf8 <HAL_TIM_PWM_Start+0x1f4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIM_PWM_Start+0x13e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2f      	ldr	r2, [pc, #188]	; (8007bfc <HAL_TIM_PWM_Start+0x1f8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_PWM_Start+0x142>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <HAL_TIM_PWM_Start+0x144>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a22      	ldr	r2, [pc, #136]	; (8007bec <HAL_TIM_PWM_Start+0x1e8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d01d      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6e:	d018      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <HAL_TIM_PWM_Start+0x1fc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <HAL_TIM_PWM_Start+0x200>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00e      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_TIM_PWM_Start+0x204>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <HAL_TIM_PWM_Start+0x1ec>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d004      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x19e>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <HAL_TIM_PWM_Start+0x1f0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d115      	bne.n	8007bce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <HAL_TIM_PWM_Start+0x208>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d015      	beq.n	8007be0 <HAL_TIM_PWM_Start+0x1dc>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bba:	d011      	beq.n	8007be0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bcc:	e008      	b.n	8007be0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e000      	b.n	8007be2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	00010007 	.word	0x00010007

08007c10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e066      	b.n	8007cfc <HAL_TIM_OC_ConfigChannel+0xec>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b14      	cmp	r3, #20
 8007c3a:	d857      	bhi.n	8007cec <HAL_TIM_OC_ConfigChannel+0xdc>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007ced 	.word	0x08007ced
 8007c4c:	08007ced 	.word	0x08007ced
 8007c50:	08007ced 	.word	0x08007ced
 8007c54:	08007ca7 	.word	0x08007ca7
 8007c58:	08007ced 	.word	0x08007ced
 8007c5c:	08007ced 	.word	0x08007ced
 8007c60:	08007ced 	.word	0x08007ced
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007ced 	.word	0x08007ced
 8007c6c:	08007ced 	.word	0x08007ced
 8007c70:	08007ced 	.word	0x08007ced
 8007c74:	08007cc3 	.word	0x08007cc3
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007ced 	.word	0x08007ced
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007ced 	.word	0x08007ced
 8007c94:	08007cdf 	.word	0x08007cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 faa8 	bl	80081f4 <TIM_OC1_SetConfig>
      break;
 8007ca4:	e025      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fb31 	bl	8008314 <TIM_OC2_SetConfig>
      break;
 8007cb2:	e01e      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fbb4 	bl	8008428 <TIM_OC3_SetConfig>
      break;
 8007cc0:	e017      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fc35 	bl	8008538 <TIM_OC4_SetConfig>
      break;
 8007cce:	e010      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fc98 	bl	800860c <TIM_OC5_SetConfig>
      break;
 8007cdc:	e009      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fcf5 	bl	80086d4 <TIM_OC6_SetConfig>
      break;
 8007cea:	e002      	b.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e0ff      	b.n	8007f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b14      	cmp	r3, #20
 8007d2e:	f200 80f0 	bhi.w	8007f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007f13 	.word	0x08007f13
 8007d40:	08007f13 	.word	0x08007f13
 8007d44:	08007f13 	.word	0x08007f13
 8007d48:	08007dcd 	.word	0x08007dcd
 8007d4c:	08007f13 	.word	0x08007f13
 8007d50:	08007f13 	.word	0x08007f13
 8007d54:	08007f13 	.word	0x08007f13
 8007d58:	08007e0f 	.word	0x08007e0f
 8007d5c:	08007f13 	.word	0x08007f13
 8007d60:	08007f13 	.word	0x08007f13
 8007d64:	08007f13 	.word	0x08007f13
 8007d68:	08007e4f 	.word	0x08007e4f
 8007d6c:	08007f13 	.word	0x08007f13
 8007d70:	08007f13 	.word	0x08007f13
 8007d74:	08007f13 	.word	0x08007f13
 8007d78:	08007e91 	.word	0x08007e91
 8007d7c:	08007f13 	.word	0x08007f13
 8007d80:	08007f13 	.word	0x08007f13
 8007d84:	08007f13 	.word	0x08007f13
 8007d88:	08007ed1 	.word	0x08007ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fa2e 	bl	80081f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0208 	orr.w	r2, r2, #8
 8007da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0204 	bic.w	r2, r2, #4
 8007db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6999      	ldr	r1, [r3, #24]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	619a      	str	r2, [r3, #24]
      break;
 8007dca:	e0a5      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fa9e 	bl	8008314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6999      	ldr	r1, [r3, #24]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	619a      	str	r2, [r3, #24]
      break;
 8007e0c:	e084      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fb07 	bl	8008428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0208 	orr.w	r2, r2, #8
 8007e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0204 	bic.w	r2, r2, #4
 8007e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69d9      	ldr	r1, [r3, #28]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	61da      	str	r2, [r3, #28]
      break;
 8007e4c:	e064      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fb6f 	bl	8008538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69d9      	ldr	r1, [r3, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	021a      	lsls	r2, r3, #8
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	61da      	str	r2, [r3, #28]
      break;
 8007e8e:	e043      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fbb8 	bl	800860c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0208 	orr.w	r2, r2, #8
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ece:	e023      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fbfc 	bl	80086d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	021a      	lsls	r2, r3, #8
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f10:	e002      	b.n	8007f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]
      break;
 8007f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop

08007f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e0b6      	b.n	80080b6 <HAL_TIM_ConfigClockSource+0x18a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f84:	d03e      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0xd8>
 8007f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8a:	f200 8087 	bhi.w	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	f000 8086 	beq.w	80080a2 <HAL_TIM_ConfigClockSource+0x176>
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	d87f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007f9c:	2b70      	cmp	r3, #112	; 0x70
 8007f9e:	d01a      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0xaa>
 8007fa0:	2b70      	cmp	r3, #112	; 0x70
 8007fa2:	d87b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fa4:	2b60      	cmp	r3, #96	; 0x60
 8007fa6:	d050      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x11e>
 8007fa8:	2b60      	cmp	r3, #96	; 0x60
 8007faa:	d877      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fac:	2b50      	cmp	r3, #80	; 0x50
 8007fae:	d03c      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xfe>
 8007fb0:	2b50      	cmp	r3, #80	; 0x50
 8007fb2:	d873      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d058      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x13e>
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d86f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fbc:	2b30      	cmp	r3, #48	; 0x30
 8007fbe:	d064      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fc0:	2b30      	cmp	r3, #48	; 0x30
 8007fc2:	d86b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d060      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d867      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d05c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d05a      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
 8007fd4:	e062      	b.n	800809c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe6:	f000 fc55 	bl	8008894 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      break;
 8008002:	e04f      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	f000 fc3e 	bl	8008894 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008026:	609a      	str	r2, [r3, #8]
      break;
 8008028:	e03c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fbb2 	bl	80087a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2150      	movs	r1, #80	; 0x50
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc0b 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008048:	e02c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fbd1 	bl	80087fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2160      	movs	r1, #96	; 0x60
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fbfb 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008068:	e01c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	461a      	mov	r2, r3
 8008078:	f000 fb92 	bl	80087a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fbeb 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008088:	e00c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f000 fbe2 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 800809a:	e003      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80080a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a40      	ldr	r2, [pc, #256]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a3d      	ldr	r2, [pc, #244]	; (80081d8 <TIM_Base_SetConfig+0x118>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3c      	ldr	r2, [pc, #240]	; (80081dc <TIM_Base_SetConfig+0x11c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3b      	ldr	r2, [pc, #236]	; (80081e0 <TIM_Base_SetConfig+0x120>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a3a      	ldr	r2, [pc, #232]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2f      	ldr	r2, [pc, #188]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01f      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008120:	d01b      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2c      	ldr	r2, [pc, #176]	; (80081d8 <TIM_Base_SetConfig+0x118>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d017      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2b      	ldr	r2, [pc, #172]	; (80081dc <TIM_Base_SetConfig+0x11c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2a      	ldr	r2, [pc, #168]	; (80081e0 <TIM_Base_SetConfig+0x120>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00f      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00b      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a28      	ldr	r2, [pc, #160]	; (80081e8 <TIM_Base_SetConfig+0x128>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d007      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a27      	ldr	r2, [pc, #156]	; (80081ec <TIM_Base_SetConfig+0x12c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_Base_SetConfig+0x9a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <TIM_Base_SetConfig+0x130>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d108      	bne.n	800816c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <TIM_Base_SetConfig+0x114>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <TIM_Base_SetConfig+0x124>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <TIM_Base_SetConfig+0x128>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <TIM_Base_SetConfig+0x12c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0xf8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <TIM_Base_SetConfig+0x130>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d103      	bne.n	80081c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	615a      	str	r2, [r3, #20]
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40013400 	.word	0x40013400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400
 80081f0:	40014800 	.word	0x40014800

080081f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0201 	bic.w	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f023 0302 	bic.w	r3, r3, #2
 8008240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a2c      	ldr	r2, [pc, #176]	; (8008300 <TIM_OC1_SetConfig+0x10c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00f      	beq.n	8008274 <TIM_OC1_SetConfig+0x80>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a2b      	ldr	r2, [pc, #172]	; (8008304 <TIM_OC1_SetConfig+0x110>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d00b      	beq.n	8008274 <TIM_OC1_SetConfig+0x80>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a2a      	ldr	r2, [pc, #168]	; (8008308 <TIM_OC1_SetConfig+0x114>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d007      	beq.n	8008274 <TIM_OC1_SetConfig+0x80>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a29      	ldr	r2, [pc, #164]	; (800830c <TIM_OC1_SetConfig+0x118>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_OC1_SetConfig+0x80>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a28      	ldr	r2, [pc, #160]	; (8008310 <TIM_OC1_SetConfig+0x11c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d10c      	bne.n	800828e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f023 0308 	bic.w	r3, r3, #8
 800827a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f023 0304 	bic.w	r3, r3, #4
 800828c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <TIM_OC1_SetConfig+0x10c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00f      	beq.n	80082b6 <TIM_OC1_SetConfig+0xc2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <TIM_OC1_SetConfig+0x110>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00b      	beq.n	80082b6 <TIM_OC1_SetConfig+0xc2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <TIM_OC1_SetConfig+0x114>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d007      	beq.n	80082b6 <TIM_OC1_SetConfig+0xc2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a18      	ldr	r2, [pc, #96]	; (800830c <TIM_OC1_SetConfig+0x118>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC1_SetConfig+0xc2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a17      	ldr	r2, [pc, #92]	; (8008310 <TIM_OC1_SetConfig+0x11c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d111      	bne.n	80082da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	621a      	str	r2, [r3, #32]
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40013400 	.word	0x40013400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800

08008314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f023 0210 	bic.w	r2, r3, #16
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800834e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f023 0320 	bic.w	r3, r3, #32
 8008362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a28      	ldr	r2, [pc, #160]	; (8008414 <TIM_OC2_SetConfig+0x100>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_OC2_SetConfig+0x6c>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a27      	ldr	r2, [pc, #156]	; (8008418 <TIM_OC2_SetConfig+0x104>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10d      	bne.n	800839c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <TIM_OC2_SetConfig+0x100>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00f      	beq.n	80083c4 <TIM_OC2_SetConfig+0xb0>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <TIM_OC2_SetConfig+0x104>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00b      	beq.n	80083c4 <TIM_OC2_SetConfig+0xb0>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a1b      	ldr	r2, [pc, #108]	; (800841c <TIM_OC2_SetConfig+0x108>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d007      	beq.n	80083c4 <TIM_OC2_SetConfig+0xb0>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <TIM_OC2_SetConfig+0x10c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d003      	beq.n	80083c4 <TIM_OC2_SetConfig+0xb0>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a19      	ldr	r2, [pc, #100]	; (8008424 <TIM_OC2_SetConfig+0x110>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d113      	bne.n	80083ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4313      	orrs	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40012c00 	.word	0x40012c00
 8008418:	40013400 	.word	0x40013400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800

08008428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	4313      	orrs	r3, r2
 8008480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a27      	ldr	r2, [pc, #156]	; (8008524 <TIM_OC3_SetConfig+0xfc>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d003      	beq.n	8008492 <TIM_OC3_SetConfig+0x6a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a26      	ldr	r2, [pc, #152]	; (8008528 <TIM_OC3_SetConfig+0x100>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d10d      	bne.n	80084ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1c      	ldr	r2, [pc, #112]	; (8008524 <TIM_OC3_SetConfig+0xfc>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00f      	beq.n	80084d6 <TIM_OC3_SetConfig+0xae>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a1b      	ldr	r2, [pc, #108]	; (8008528 <TIM_OC3_SetConfig+0x100>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_OC3_SetConfig+0xae>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a1a      	ldr	r2, [pc, #104]	; (800852c <TIM_OC3_SetConfig+0x104>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_OC3_SetConfig+0xae>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a19      	ldr	r2, [pc, #100]	; (8008530 <TIM_OC3_SetConfig+0x108>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC3_SetConfig+0xae>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a18      	ldr	r2, [pc, #96]	; (8008534 <TIM_OC3_SetConfig+0x10c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d113      	bne.n	80084fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	40012c00 	.word	0x40012c00
 8008528:	40013400 	.word	0x40013400
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	031b      	lsls	r3, r3, #12
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <TIM_OC4_SetConfig+0xc0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00f      	beq.n	80085bc <TIM_OC4_SetConfig+0x84>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a17      	ldr	r2, [pc, #92]	; (80085fc <TIM_OC4_SetConfig+0xc4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00b      	beq.n	80085bc <TIM_OC4_SetConfig+0x84>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a16      	ldr	r2, [pc, #88]	; (8008600 <TIM_OC4_SetConfig+0xc8>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d007      	beq.n	80085bc <TIM_OC4_SetConfig+0x84>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a15      	ldr	r2, [pc, #84]	; (8008604 <TIM_OC4_SetConfig+0xcc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_OC4_SetConfig+0x84>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <TIM_OC4_SetConfig+0xd0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d109      	bne.n	80085d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	019b      	lsls	r3, r3, #6
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	621a      	str	r2, [r3, #32]
}
 80085ea:	bf00      	nop
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40013400 	.word	0x40013400
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800

0800860c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a17      	ldr	r2, [pc, #92]	; (80086c0 <TIM_OC5_SetConfig+0xb4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00f      	beq.n	8008686 <TIM_OC5_SetConfig+0x7a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a16      	ldr	r2, [pc, #88]	; (80086c4 <TIM_OC5_SetConfig+0xb8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00b      	beq.n	8008686 <TIM_OC5_SetConfig+0x7a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <TIM_OC5_SetConfig+0xbc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_OC5_SetConfig+0x7a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <TIM_OC5_SetConfig+0xc0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_OC5_SetConfig+0x7a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <TIM_OC5_SetConfig+0xc4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d109      	bne.n	800869a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800868c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40013400 	.word	0x40013400
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800

080086d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800871a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a18      	ldr	r2, [pc, #96]	; (800878c <TIM_OC6_SetConfig+0xb8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d00f      	beq.n	8008750 <TIM_OC6_SetConfig+0x7c>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a17      	ldr	r2, [pc, #92]	; (8008790 <TIM_OC6_SetConfig+0xbc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00b      	beq.n	8008750 <TIM_OC6_SetConfig+0x7c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a16      	ldr	r2, [pc, #88]	; (8008794 <TIM_OC6_SetConfig+0xc0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d007      	beq.n	8008750 <TIM_OC6_SetConfig+0x7c>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a15      	ldr	r2, [pc, #84]	; (8008798 <TIM_OC6_SetConfig+0xc4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_OC6_SetConfig+0x7c>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a14      	ldr	r2, [pc, #80]	; (800879c <TIM_OC6_SetConfig+0xc8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d109      	bne.n	8008764 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	029b      	lsls	r3, r3, #10
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4313      	orrs	r3, r2
 8008762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	621a      	str	r2, [r3, #32]
}
 800877e:	bf00      	nop
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40012c00 	.word	0x40012c00
 8008790:	40013400 	.word	0x40013400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800

080087a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f023 0201 	bic.w	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f023 030a 	bic.w	r3, r3, #10
 80087dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f023 0210 	bic.w	r2, r3, #16
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	031b      	lsls	r3, r3, #12
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800883a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	f043 0307 	orr.w	r3, r3, #7
 8008880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	609a      	str	r2, [r3, #8]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	021a      	lsls	r2, r3, #8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	609a      	str	r2, [r3, #8]
}
 80088c8:	bf00      	nop
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2201      	movs	r2, #1
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	43db      	mvns	r3, r3
 80088f6:	401a      	ands	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	fa01 f303 	lsl.w	r3, r1, r3
 800890c:	431a      	orrs	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
	...

08008920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008934:	2302      	movs	r3, #2
 8008936:	e068      	b.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2e      	ldr	r2, [pc, #184]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2d      	ldr	r2, [pc, #180]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d108      	bne.n	800897e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01d      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089aa:	d018      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00e      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a13      	ldr	r2, [pc, #76]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a14      	ldr	r2, [pc, #80]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d10c      	bne.n	80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00
 8008a2c:	40014000 	.word	0x40014000

08008a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e065      	b.n	8008b18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a16      	ldr	r2, [pc, #88]	; (8008b24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d004      	beq.n	8008ada <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d115      	bne.n	8008b06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	051b      	lsls	r3, r3, #20
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	40013400 	.word	0x40013400

08008b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e042      	b.n	8008bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7f9 fb43 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2224      	movs	r2, #36	; 0x24
 8008b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fb24 	bl	80091c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f825 	bl	8008bcc <UART_SetConfig>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e01b      	b.n	8008bc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fba3 	bl	8009308 <UART_CheckIdleState>
 8008bc2:	4603      	mov	r3, r0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd0:	b08c      	sub	sp, #48	; 0x30
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	431a      	orrs	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4baa      	ldr	r3, [pc, #680]	; (8008ea4 <UART_SetConfig+0x2d8>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a9f      	ldr	r2, [pc, #636]	; (8008ea8 <UART_SetConfig+0x2dc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c34:	4313      	orrs	r3, r2
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	6812      	ldr	r2, [r2, #0]
 8008c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	f023 010f 	bic.w	r1, r3, #15
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a90      	ldr	r2, [pc, #576]	; (8008eac <UART_SetConfig+0x2e0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d125      	bne.n	8008cbc <UART_SetConfig+0xf0>
 8008c70:	4b8f      	ldr	r3, [pc, #572]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d81a      	bhi.n	8008cb4 <UART_SetConfig+0xe8>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <UART_SetConfig+0xb8>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008ca5 	.word	0x08008ca5
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008cad 	.word	0x08008cad
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9a:	e116      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca2:	e112      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008ca4:	2304      	movs	r3, #4
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008caa:	e10e      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008cac:	2308      	movs	r3, #8
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb2:	e10a      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cba:	e106      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a7c      	ldr	r2, [pc, #496]	; (8008eb4 <UART_SetConfig+0x2e8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d138      	bne.n	8008d38 <UART_SetConfig+0x16c>
 8008cc6:	4b7a      	ldr	r3, [pc, #488]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ccc:	f003 030c 	and.w	r3, r3, #12
 8008cd0:	2b0c      	cmp	r3, #12
 8008cd2:	d82d      	bhi.n	8008d30 <UART_SetConfig+0x164>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0x110>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d31 	.word	0x08008d31
 8008ce4:	08008d31 	.word	0x08008d31
 8008ce8:	08008d31 	.word	0x08008d31
 8008cec:	08008d21 	.word	0x08008d21
 8008cf0:	08008d31 	.word	0x08008d31
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d31 	.word	0x08008d31
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	08008d31 	.word	0x08008d31
 8008d04:	08008d31 	.word	0x08008d31
 8008d08:	08008d31 	.word	0x08008d31
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d16:	e0d8      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1e:	e0d4      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d26:	e0d0      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2e:	e0cc      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d36:	e0c8      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a5e      	ldr	r2, [pc, #376]	; (8008eb8 <UART_SetConfig+0x2ec>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d125      	bne.n	8008d8e <UART_SetConfig+0x1c2>
 8008d42:	4b5b      	ldr	r3, [pc, #364]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d4c:	2b30      	cmp	r3, #48	; 0x30
 8008d4e:	d016      	beq.n	8008d7e <UART_SetConfig+0x1b2>
 8008d50:	2b30      	cmp	r3, #48	; 0x30
 8008d52:	d818      	bhi.n	8008d86 <UART_SetConfig+0x1ba>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d00a      	beq.n	8008d6e <UART_SetConfig+0x1a2>
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d814      	bhi.n	8008d86 <UART_SetConfig+0x1ba>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <UART_SetConfig+0x19a>
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d008      	beq.n	8008d76 <UART_SetConfig+0x1aa>
 8008d64:	e00f      	b.n	8008d86 <UART_SetConfig+0x1ba>
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6c:	e0ad      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d74:	e0a9      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d76:	2304      	movs	r3, #4
 8008d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d7c:	e0a5      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d7e:	2308      	movs	r3, #8
 8008d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d84:	e0a1      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d86:	2310      	movs	r3, #16
 8008d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d8c:	e09d      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a4a      	ldr	r2, [pc, #296]	; (8008ebc <UART_SetConfig+0x2f0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d125      	bne.n	8008de4 <UART_SetConfig+0x218>
 8008d98:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008da2:	2bc0      	cmp	r3, #192	; 0xc0
 8008da4:	d016      	beq.n	8008dd4 <UART_SetConfig+0x208>
 8008da6:	2bc0      	cmp	r3, #192	; 0xc0
 8008da8:	d818      	bhi.n	8008ddc <UART_SetConfig+0x210>
 8008daa:	2b80      	cmp	r3, #128	; 0x80
 8008dac:	d00a      	beq.n	8008dc4 <UART_SetConfig+0x1f8>
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d814      	bhi.n	8008ddc <UART_SetConfig+0x210>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <UART_SetConfig+0x1f0>
 8008db6:	2b40      	cmp	r3, #64	; 0x40
 8008db8:	d008      	beq.n	8008dcc <UART_SetConfig+0x200>
 8008dba:	e00f      	b.n	8008ddc <UART_SetConfig+0x210>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e082      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dca:	e07e      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd2:	e07a      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dda:	e076      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de2:	e072      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a35      	ldr	r2, [pc, #212]	; (8008ec0 <UART_SetConfig+0x2f4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d12a      	bne.n	8008e44 <UART_SetConfig+0x278>
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfc:	d01a      	beq.n	8008e34 <UART_SetConfig+0x268>
 8008dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e02:	d81b      	bhi.n	8008e3c <UART_SetConfig+0x270>
 8008e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e08:	d00c      	beq.n	8008e24 <UART_SetConfig+0x258>
 8008e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e0e:	d815      	bhi.n	8008e3c <UART_SetConfig+0x270>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <UART_SetConfig+0x250>
 8008e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e18:	d008      	beq.n	8008e2c <UART_SetConfig+0x260>
 8008e1a:	e00f      	b.n	8008e3c <UART_SetConfig+0x270>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e052      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e24:	2302      	movs	r3, #2
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e2a:	e04e      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e32:	e04a      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e34:	2308      	movs	r3, #8
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e3a:	e046      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e42:	e042      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <UART_SetConfig+0x2dc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d13a      	bne.n	8008ec4 <UART_SetConfig+0x2f8>
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <UART_SetConfig+0x2e4>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e5c:	d01a      	beq.n	8008e94 <UART_SetConfig+0x2c8>
 8008e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e62:	d81b      	bhi.n	8008e9c <UART_SetConfig+0x2d0>
 8008e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e68:	d00c      	beq.n	8008e84 <UART_SetConfig+0x2b8>
 8008e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e6e:	d815      	bhi.n	8008e9c <UART_SetConfig+0x2d0>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <UART_SetConfig+0x2b0>
 8008e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e78:	d008      	beq.n	8008e8c <UART_SetConfig+0x2c0>
 8008e7a:	e00f      	b.n	8008e9c <UART_SetConfig+0x2d0>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e82:	e022      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e84:	2302      	movs	r3, #2
 8008e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8a:	e01e      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e92:	e01a      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e94:	2308      	movs	r3, #8
 8008e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9a:	e016      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008e9c:	2310      	movs	r3, #16
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea2:	e012      	b.n	8008eca <UART_SetConfig+0x2fe>
 8008ea4:	cfff69f3 	.word	0xcfff69f3
 8008ea8:	40008000 	.word	0x40008000
 8008eac:	40013800 	.word	0x40013800
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	40004400 	.word	0x40004400
 8008eb8:	40004800 	.word	0x40004800
 8008ebc:	40004c00 	.word	0x40004c00
 8008ec0:	40005000 	.word	0x40005000
 8008ec4:	2310      	movs	r3, #16
 8008ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4aae      	ldr	r2, [pc, #696]	; (8009188 <UART_SetConfig+0x5bc>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	f040 8097 	bne.w	8009004 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d823      	bhi.n	8008f26 <UART_SetConfig+0x35a>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <UART_SetConfig+0x318>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f09 	.word	0x08008f09
 8008ee8:	08008f27 	.word	0x08008f27
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	08008f27 	.word	0x08008f27
 8008ef4:	08008f17 	.word	0x08008f17
 8008ef8:	08008f27 	.word	0x08008f27
 8008efc:	08008f27 	.word	0x08008f27
 8008f00:	08008f27 	.word	0x08008f27
 8008f04:	08008f1f 	.word	0x08008f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f08:	f7fc fa46 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8008f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f0e:	e010      	b.n	8008f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f10:	4b9e      	ldr	r3, [pc, #632]	; (800918c <UART_SetConfig+0x5c0>)
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f14:	e00d      	b.n	8008f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f16:	f7fc f9a7 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8008f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f1c:	e009      	b.n	8008f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f24:	e005      	b.n	8008f32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 8130 	beq.w	800919a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	4a94      	ldr	r2, [pc, #592]	; (8009190 <UART_SetConfig+0x5c4>)
 8008f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4413      	add	r3, r2
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d305      	bcc.n	8008f6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d903      	bls.n	8008f72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f70:	e113      	b.n	800919a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	2200      	movs	r2, #0
 8008f76:	60bb      	str	r3, [r7, #8]
 8008f78:	60fa      	str	r2, [r7, #12]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	4a84      	ldr	r2, [pc, #528]	; (8009190 <UART_SetConfig+0x5c4>)
 8008f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2200      	movs	r2, #0
 8008f88:	603b      	str	r3, [r7, #0]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f94:	f7f7 fd84 	bl	8000aa0 <__aeabi_uldivmod>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	020b      	lsls	r3, r1, #8
 8008faa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fae:	0202      	lsls	r2, r0, #8
 8008fb0:	6979      	ldr	r1, [r7, #20]
 8008fb2:	6849      	ldr	r1, [r1, #4]
 8008fb4:	0849      	lsrs	r1, r1, #1
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4605      	mov	r5, r0
 8008fbc:	eb12 0804 	adds.w	r8, r2, r4
 8008fc0:	eb43 0905 	adc.w	r9, r3, r5
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	469a      	mov	sl, r3
 8008fcc:	4693      	mov	fp, r2
 8008fce:	4652      	mov	r2, sl
 8008fd0:	465b      	mov	r3, fp
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fd63 	bl	8000aa0 <__aeabi_uldivmod>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4613      	mov	r3, r2
 8008fe0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fe8:	d308      	bcc.n	8008ffc <UART_SetConfig+0x430>
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff0:	d204      	bcs.n	8008ffc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6a3a      	ldr	r2, [r7, #32]
 8008ff8:	60da      	str	r2, [r3, #12]
 8008ffa:	e0ce      	b.n	800919a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009002:	e0ca      	b.n	800919a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800900c:	d166      	bne.n	80090dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800900e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009012:	2b08      	cmp	r3, #8
 8009014:	d827      	bhi.n	8009066 <UART_SetConfig+0x49a>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <UART_SetConfig+0x450>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009041 	.word	0x08009041
 8009020:	08009049 	.word	0x08009049
 8009024:	08009051 	.word	0x08009051
 8009028:	08009067 	.word	0x08009067
 800902c:	08009057 	.word	0x08009057
 8009030:	08009067 	.word	0x08009067
 8009034:	08009067 	.word	0x08009067
 8009038:	08009067 	.word	0x08009067
 800903c:	0800905f 	.word	0x0800905f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009040:	f7fc f9aa 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8009044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009046:	e014      	b.n	8009072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009048:	f7fc f9bc 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 800904c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800904e:	e010      	b.n	8009072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009050:	4b4e      	ldr	r3, [pc, #312]	; (800918c <UART_SetConfig+0x5c0>)
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009054:	e00d      	b.n	8009072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009056:	f7fc f907 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800905c:	e009      	b.n	8009072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009064:	e005      	b.n	8009072 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8090 	beq.w	800919a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	4a44      	ldr	r2, [pc, #272]	; (8009190 <UART_SetConfig+0x5c4>)
 8009080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009084:	461a      	mov	r2, r3
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	fbb3 f3f2 	udiv	r3, r3, r2
 800908c:	005a      	lsls	r2, r3, #1
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	441a      	add	r2, r3
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	fbb2 f3f3 	udiv	r3, r2, r3
 800909e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d916      	bls.n	80090d4 <UART_SetConfig+0x508>
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ac:	d212      	bcs.n	80090d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f023 030f 	bic.w	r3, r3, #15
 80090b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	8bfb      	ldrh	r3, [r7, #30]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	8bfa      	ldrh	r2, [r7, #30]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	e062      	b.n	800919a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090da:	e05e      	b.n	800919a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d828      	bhi.n	8009136 <UART_SetConfig+0x56a>
 80090e4:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0x520>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009111 	.word	0x08009111
 80090f0:	08009119 	.word	0x08009119
 80090f4:	08009121 	.word	0x08009121
 80090f8:	08009137 	.word	0x08009137
 80090fc:	08009127 	.word	0x08009127
 8009100:	08009137 	.word	0x08009137
 8009104:	08009137 	.word	0x08009137
 8009108:	08009137 	.word	0x08009137
 800910c:	0800912f 	.word	0x0800912f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009110:	f7fc f942 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 8009114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009116:	e014      	b.n	8009142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009118:	f7fc f954 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 800911c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800911e:	e010      	b.n	8009142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009120:	4b1a      	ldr	r3, [pc, #104]	; (800918c <UART_SetConfig+0x5c0>)
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009124:	e00d      	b.n	8009142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009126:	f7fc f89f 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 800912a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800912c:	e009      	b.n	8009142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009134:	e005      	b.n	8009142 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009140:	bf00      	nop
    }

    if (pclk != 0U)
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	2b00      	cmp	r3, #0
 8009146:	d028      	beq.n	800919a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	4a10      	ldr	r2, [pc, #64]	; (8009190 <UART_SetConfig+0x5c4>)
 800914e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009152:	461a      	mov	r2, r3
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	fbb3 f2f2 	udiv	r2, r3, r2
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	441a      	add	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	2b0f      	cmp	r3, #15
 8009170:	d910      	bls.n	8009194 <UART_SetConfig+0x5c8>
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009178:	d20c      	bcs.n	8009194 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	b29a      	uxth	r2, r3
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60da      	str	r2, [r3, #12]
 8009184:	e009      	b.n	800919a <UART_SetConfig+0x5ce>
 8009186:	bf00      	nop
 8009188:	40008000 	.word	0x40008000
 800918c:	00f42400 	.word	0x00f42400
 8009190:	0800b494 	.word	0x0800b494
      }
      else
      {
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2201      	movs	r2, #1
 800919e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2200      	movs	r2, #0
 80091b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80091b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3730      	adds	r7, #48	; 0x30
 80091be:	46bd      	mov	sp, r7
 80091c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d01a      	beq.n	80092da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092c2:	d10a      	bne.n	80092da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b098      	sub	sp, #96	; 0x60
 800930c:	af02      	add	r7, sp, #8
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009318:	f7f9 f9fc 	bl	8002714 <HAL_GetTick>
 800931c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b08      	cmp	r3, #8
 800932a:	d12f      	bne.n	800938c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800932c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009334:	2200      	movs	r2, #0
 8009336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f88e 	bl	800945c <UART_WaitOnFlagUntilTimeout>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d022      	beq.n	800938c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800935a:	653b      	str	r3, [r7, #80]	; 0x50
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009364:	647b      	str	r3, [r7, #68]	; 0x44
 8009366:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800936a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e6      	bne.n	8009346 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e063      	b.n	8009454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b04      	cmp	r3, #4
 8009398:	d149      	bne.n	800942e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800939a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a2:	2200      	movs	r2, #0
 80093a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f857 	bl	800945c <UART_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d03c      	beq.n	800942e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	623b      	str	r3, [r7, #32]
   return(result);
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d2:	633b      	str	r3, [r7, #48]	; 0x30
 80093d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e6      	bne.n	80093b4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009406:	61fa      	str	r2, [r7, #28]
 8009408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	69b9      	ldr	r1, [r7, #24]
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	617b      	str	r3, [r7, #20]
   return(result);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e012      	b.n	8009454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3758      	adds	r7, #88	; 0x58
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	4613      	mov	r3, r2
 800946a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800946c:	e049      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d045      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009476:	f7f9 f94d 	bl	8002714 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	429a      	cmp	r2, r3
 8009484:	d302      	bcc.n	800948c <UART_WaitOnFlagUntilTimeout+0x30>
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e048      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d031      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d110      	bne.n	80094ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f838 	bl	800952a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2208      	movs	r2, #8
 80094be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e029      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094dc:	d111      	bne.n	8009502 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f81e 	bl	800952a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e00f      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69da      	ldr	r2, [r3, #28]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4013      	ands	r3, r2
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	bf0c      	ite	eq
 8009512:	2301      	moveq	r3, #1
 8009514:	2300      	movne	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	429a      	cmp	r2, r3
 800951e:	d0a6      	beq.n	800946e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800952a:	b480      	push	{r7}
 800952c:	b095      	sub	sp, #84	; 0x54
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009550:	643b      	str	r3, [r7, #64]	; 0x40
 8009552:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e6      	bne.n	8009532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	61fb      	str	r3, [r7, #28]
   return(result);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800958a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800958e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e3      	bne.n	8009564 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d118      	bne.n	80095d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f023 0310 	bic.w	r3, r3, #16
 80095b8:	647b      	str	r3, [r7, #68]	; 0x44
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e6      	bne.n	80095a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80095ea:	bf00      	nop
 80095ec:	3754      	adds	r7, #84	; 0x54
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_UARTEx_DisableFifoMode+0x16>
 8009608:	2302      	movs	r3, #2
 800960a:	e027      	b.n	800965c <HAL_UARTEx_DisableFifoMode+0x66>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2224      	movs	r2, #36	; 0x24
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800963a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800967c:	2302      	movs	r3, #2
 800967e:	e02d      	b.n	80096dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2224      	movs	r2, #36	; 0x24
 800968c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0201 	bic.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f84f 	bl	8009760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e02d      	b.n	8009758 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	; 0x24
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0201 	bic.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f811 	bl	8009760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800976c:	2b00      	cmp	r3, #0
 800976e:	d108      	bne.n	8009782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009780:	e031      	b.n	80097e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009782:	2308      	movs	r3, #8
 8009784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009786:	2308      	movs	r3, #8
 8009788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	0e5b      	lsrs	r3, r3, #25
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	0f5b      	lsrs	r3, r3, #29
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	7b3a      	ldrb	r2, [r7, #12]
 80097ae:	4911      	ldr	r1, [pc, #68]	; (80097f4 <UARTEx_SetNbDataToProcess+0x94>)
 80097b0:	5c8a      	ldrb	r2, [r1, r2]
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b6:	7b3a      	ldrb	r2, [r7, #12]
 80097b8:	490f      	ldr	r1, [pc, #60]	; (80097f8 <UARTEx_SetNbDataToProcess+0x98>)
 80097ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	7b7a      	ldrb	r2, [r7, #13]
 80097cc:	4909      	ldr	r1, [pc, #36]	; (80097f4 <UARTEx_SetNbDataToProcess+0x94>)
 80097ce:	5c8a      	ldrb	r2, [r1, r2]
 80097d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097d4:	7b7a      	ldrb	r2, [r7, #13]
 80097d6:	4908      	ldr	r1, [pc, #32]	; (80097f8 <UARTEx_SetNbDataToProcess+0x98>)
 80097d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097da:	fb93 f3f2 	sdiv	r3, r3, r2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	0800b4ac 	.word	0x0800b4ac
 80097f8:	0800b4b4 	.word	0x0800b4b4

080097fc <arm_rfft_32_fast_init_f32>:
 80097fc:	b178      	cbz	r0, 800981e <arm_rfft_32_fast_init_f32+0x22>
 80097fe:	b430      	push	{r4, r5}
 8009800:	4908      	ldr	r1, [pc, #32]	; (8009824 <arm_rfft_32_fast_init_f32+0x28>)
 8009802:	4a09      	ldr	r2, [pc, #36]	; (8009828 <arm_rfft_32_fast_init_f32+0x2c>)
 8009804:	2310      	movs	r3, #16
 8009806:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800980a:	8003      	strh	r3, [r0, #0]
 800980c:	2520      	movs	r5, #32
 800980e:	2414      	movs	r4, #20
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <arm_rfft_32_fast_init_f32+0x30>)
 8009812:	8205      	strh	r5, [r0, #16]
 8009814:	8184      	strh	r4, [r0, #12]
 8009816:	6143      	str	r3, [r0, #20]
 8009818:	bc30      	pop	{r4, r5}
 800981a:	2000      	movs	r0, #0
 800981c:	4770      	bx	lr
 800981e:	f04f 30ff 	mov.w	r0, #4294967295
 8009822:	4770      	bx	lr
 8009824:	0800c46c 	.word	0x0800c46c
 8009828:	08010da4 	.word	0x08010da4
 800982c:	08019b24 	.word	0x08019b24

08009830 <arm_rfft_64_fast_init_f32>:
 8009830:	b178      	cbz	r0, 8009852 <arm_rfft_64_fast_init_f32+0x22>
 8009832:	b430      	push	{r4, r5}
 8009834:	4908      	ldr	r1, [pc, #32]	; (8009858 <arm_rfft_64_fast_init_f32+0x28>)
 8009836:	4a09      	ldr	r2, [pc, #36]	; (800985c <arm_rfft_64_fast_init_f32+0x2c>)
 8009838:	2320      	movs	r3, #32
 800983a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800983e:	8003      	strh	r3, [r0, #0]
 8009840:	2540      	movs	r5, #64	; 0x40
 8009842:	2430      	movs	r4, #48	; 0x30
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <arm_rfft_64_fast_init_f32+0x30>)
 8009846:	8205      	strh	r5, [r0, #16]
 8009848:	8184      	strh	r4, [r0, #12]
 800984a:	6143      	str	r3, [r0, #20]
 800984c:	bc30      	pop	{r4, r5}
 800984e:	2000      	movs	r0, #0
 8009850:	4770      	bx	lr
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
 8009856:	4770      	bx	lr
 8009858:	0800e5c4 	.word	0x0800e5c4
 800985c:	08015624 	.word	0x08015624
 8009860:	0801e3a4 	.word	0x0801e3a4

08009864 <arm_rfft_256_fast_init_f32>:
 8009864:	b180      	cbz	r0, 8009888 <arm_rfft_256_fast_init_f32+0x24>
 8009866:	b430      	push	{r4, r5}
 8009868:	4909      	ldr	r1, [pc, #36]	; (8009890 <arm_rfft_256_fast_init_f32+0x2c>)
 800986a:	4a0a      	ldr	r2, [pc, #40]	; (8009894 <arm_rfft_256_fast_init_f32+0x30>)
 800986c:	2380      	movs	r3, #128	; 0x80
 800986e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009872:	8003      	strh	r3, [r0, #0]
 8009874:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009878:	24d0      	movs	r4, #208	; 0xd0
 800987a:	4b07      	ldr	r3, [pc, #28]	; (8009898 <arm_rfft_256_fast_init_f32+0x34>)
 800987c:	8205      	strh	r5, [r0, #16]
 800987e:	8184      	strh	r4, [r0, #12]
 8009880:	6143      	str	r3, [r0, #20]
 8009882:	bc30      	pop	{r4, r5}
 8009884:	2000      	movs	r0, #0
 8009886:	4770      	bx	lr
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	0800c2cc 	.word	0x0800c2cc
 8009894:	080109a4 	.word	0x080109a4
 8009898:	08019724 	.word	0x08019724

0800989c <arm_rfft_512_fast_init_f32>:
 800989c:	b190      	cbz	r0, 80098c4 <arm_rfft_512_fast_init_f32+0x28>
 800989e:	b430      	push	{r4, r5}
 80098a0:	490a      	ldr	r1, [pc, #40]	; (80098cc <arm_rfft_512_fast_init_f32+0x30>)
 80098a2:	4a0b      	ldr	r2, [pc, #44]	; (80098d0 <arm_rfft_512_fast_init_f32+0x34>)
 80098a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80098ac:	8003      	strh	r3, [r0, #0]
 80098ae:	f44f 7500 	mov.w	r5, #512	; 0x200
 80098b2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80098b6:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <arm_rfft_512_fast_init_f32+0x38>)
 80098b8:	8205      	strh	r5, [r0, #16]
 80098ba:	8184      	strh	r4, [r0, #12]
 80098bc:	6143      	str	r3, [r0, #20]
 80098be:	bc30      	pop	{r4, r5}
 80098c0:	2000      	movs	r0, #0
 80098c2:	4770      	bx	lr
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	0800e254 	.word	0x0800e254
 80098d0:	08014e24 	.word	0x08014e24
 80098d4:	0801dba4 	.word	0x0801dba4

080098d8 <arm_rfft_1024_fast_init_f32>:
 80098d8:	b190      	cbz	r0, 8009900 <arm_rfft_1024_fast_init_f32+0x28>
 80098da:	b430      	push	{r4, r5}
 80098dc:	490a      	ldr	r1, [pc, #40]	; (8009908 <arm_rfft_1024_fast_init_f32+0x30>)
 80098de:	4a0b      	ldr	r2, [pc, #44]	; (800990c <arm_rfft_1024_fast_init_f32+0x34>)
 80098e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80098e8:	8003      	strh	r3, [r0, #0]
 80098ea:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80098ee:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <arm_rfft_1024_fast_init_f32+0x38>)
 80098f4:	8205      	strh	r5, [r0, #16]
 80098f6:	8184      	strh	r4, [r0, #12]
 80098f8:	6143      	str	r3, [r0, #20]
 80098fa:	bc30      	pop	{r4, r5}
 80098fc:	2000      	movs	r0, #0
 80098fe:	4770      	bx	lr
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	0800e624 	.word	0x0800e624
 800990c:	08015724 	.word	0x08015724
 8009910:	08016724 	.word	0x08016724

08009914 <arm_rfft_2048_fast_init_f32>:
 8009914:	b190      	cbz	r0, 800993c <arm_rfft_2048_fast_init_f32+0x28>
 8009916:	b430      	push	{r4, r5}
 8009918:	490a      	ldr	r1, [pc, #40]	; (8009944 <arm_rfft_2048_fast_init_f32+0x30>)
 800991a:	4a0b      	ldr	r2, [pc, #44]	; (8009948 <arm_rfft_2048_fast_init_f32+0x34>)
 800991c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009920:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009924:	8003      	strh	r3, [r0, #0]
 8009926:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800992a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <arm_rfft_2048_fast_init_f32+0x38>)
 8009930:	8205      	strh	r5, [r0, #16]
 8009932:	8184      	strh	r4, [r0, #12]
 8009934:	6143      	str	r3, [r0, #20]
 8009936:	bc30      	pop	{r4, r5}
 8009938:	2000      	movs	r0, #0
 800993a:	4770      	bx	lr
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	0800b4bc 	.word	0x0800b4bc
 8009948:	0800e9a4 	.word	0x0800e9a4
 800994c:	08017724 	.word	0x08017724

08009950 <arm_rfft_4096_fast_init_f32>:
 8009950:	b190      	cbz	r0, 8009978 <arm_rfft_4096_fast_init_f32+0x28>
 8009952:	b430      	push	{r4, r5}
 8009954:	490a      	ldr	r1, [pc, #40]	; (8009980 <arm_rfft_4096_fast_init_f32+0x30>)
 8009956:	4a0b      	ldr	r2, [pc, #44]	; (8009984 <arm_rfft_4096_fast_init_f32+0x34>)
 8009958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800995c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009960:	8003      	strh	r3, [r0, #0]
 8009962:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009966:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <arm_rfft_4096_fast_init_f32+0x38>)
 800996c:	8205      	strh	r5, [r0, #16]
 800996e:	8184      	strh	r4, [r0, #12]
 8009970:	6143      	str	r3, [r0, #20]
 8009972:	bc30      	pop	{r4, r5}
 8009974:	2000      	movs	r0, #0
 8009976:	4770      	bx	lr
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	0800c494 	.word	0x0800c494
 8009984:	08010e24 	.word	0x08010e24
 8009988:	08019ba4 	.word	0x08019ba4

0800998c <arm_rfft_fast_init_f32>:
 800998c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009990:	d01f      	beq.n	80099d2 <arm_rfft_fast_init_f32+0x46>
 8009992:	d90b      	bls.n	80099ac <arm_rfft_fast_init_f32+0x20>
 8009994:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009998:	d019      	beq.n	80099ce <arm_rfft_fast_init_f32+0x42>
 800999a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800999e:	d012      	beq.n	80099c6 <arm_rfft_fast_init_f32+0x3a>
 80099a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80099a4:	d00d      	beq.n	80099c2 <arm_rfft_fast_init_f32+0x36>
 80099a6:	f04f 30ff 	mov.w	r0, #4294967295
 80099aa:	4770      	bx	lr
 80099ac:	2940      	cmp	r1, #64	; 0x40
 80099ae:	d00c      	beq.n	80099ca <arm_rfft_fast_init_f32+0x3e>
 80099b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80099b4:	d003      	beq.n	80099be <arm_rfft_fast_init_f32+0x32>
 80099b6:	2920      	cmp	r1, #32
 80099b8:	d1f5      	bne.n	80099a6 <arm_rfft_fast_init_f32+0x1a>
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <arm_rfft_fast_init_f32+0x4c>)
 80099bc:	4718      	bx	r3
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <arm_rfft_fast_init_f32+0x50>)
 80099c0:	4718      	bx	r3
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <arm_rfft_fast_init_f32+0x54>)
 80099c4:	4718      	bx	r3
 80099c6:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <arm_rfft_fast_init_f32+0x58>)
 80099c8:	4718      	bx	r3
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <arm_rfft_fast_init_f32+0x5c>)
 80099cc:	e7f6      	b.n	80099bc <arm_rfft_fast_init_f32+0x30>
 80099ce:	4b07      	ldr	r3, [pc, #28]	; (80099ec <arm_rfft_fast_init_f32+0x60>)
 80099d0:	e7f4      	b.n	80099bc <arm_rfft_fast_init_f32+0x30>
 80099d2:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <arm_rfft_fast_init_f32+0x64>)
 80099d4:	e7f2      	b.n	80099bc <arm_rfft_fast_init_f32+0x30>
 80099d6:	bf00      	nop
 80099d8:	080097fd 	.word	0x080097fd
 80099dc:	08009865 	.word	0x08009865
 80099e0:	080098d9 	.word	0x080098d9
 80099e4:	08009951 	.word	0x08009951
 80099e8:	08009831 	.word	0x08009831
 80099ec:	08009915 	.word	0x08009915
 80099f0:	0800989d 	.word	0x0800989d

080099f4 <stage_rfft_f32>:
 80099f4:	b410      	push	{r4}
 80099f6:	edd1 7a00 	vldr	s15, [r1]
 80099fa:	ed91 7a01 	vldr	s14, [r1, #4]
 80099fe:	8804      	ldrh	r4, [r0, #0]
 8009a00:	6940      	ldr	r0, [r0, #20]
 8009a02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009a06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a0a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009a0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a16:	3c01      	subs	r4, #1
 8009a18:	ee26 7a84 	vmul.f32	s14, s13, s8
 8009a1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009a20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8009a24:	ed82 7a00 	vstr	s14, [r2]
 8009a28:	edc2 7a01 	vstr	s15, [r2, #4]
 8009a2c:	3010      	adds	r0, #16
 8009a2e:	3210      	adds	r2, #16
 8009a30:	3b08      	subs	r3, #8
 8009a32:	3110      	adds	r1, #16
 8009a34:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009a38:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009a40:	edd3 4a03 	vldr	s9, [r3, #12]
 8009a44:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009a48:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009a4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009a50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009a54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009a58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009a5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009a60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009a64:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009a68:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009a6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009a70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009a74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009a7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009a80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009a84:	3c01      	subs	r4, #1
 8009a86:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009a8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009a8e:	f1a3 0308 	sub.w	r3, r3, #8
 8009a92:	f101 0108 	add.w	r1, r1, #8
 8009a96:	f100 0008 	add.w	r0, r0, #8
 8009a9a:	f102 0208 	add.w	r2, r2, #8
 8009a9e:	d1c9      	bne.n	8009a34 <stage_rfft_f32+0x40>
 8009aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop

08009aa8 <merge_rfft_f32>:
 8009aa8:	b410      	push	{r4}
 8009aaa:	edd1 7a00 	vldr	s15, [r1]
 8009aae:	edd1 6a01 	vldr	s13, [r1, #4]
 8009ab2:	8804      	ldrh	r4, [r0, #0]
 8009ab4:	6940      	ldr	r0, [r0, #20]
 8009ab6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009aba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009abe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009ac2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009ac6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009aca:	3c01      	subs	r4, #1
 8009acc:	ed82 7a00 	vstr	s14, [r2]
 8009ad0:	edc2 7a01 	vstr	s15, [r2, #4]
 8009ad4:	b3dc      	cbz	r4, 8009b4e <merge_rfft_f32+0xa6>
 8009ad6:	00e3      	lsls	r3, r4, #3
 8009ad8:	3b08      	subs	r3, #8
 8009ada:	440b      	add	r3, r1
 8009adc:	3010      	adds	r0, #16
 8009ade:	3210      	adds	r2, #16
 8009ae0:	3110      	adds	r1, #16
 8009ae2:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009ae6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009aea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009aee:	edd3 4a03 	vldr	s9, [r3, #12]
 8009af2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009af6:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009afa:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009afe:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009b02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009b06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009b0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009b0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009b12:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009b16:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009b1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009b1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009b22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009b2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009b2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009b32:	3c01      	subs	r4, #1
 8009b34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009b38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009b3c:	f1a3 0308 	sub.w	r3, r3, #8
 8009b40:	f101 0108 	add.w	r1, r1, #8
 8009b44:	f100 0008 	add.w	r0, r0, #8
 8009b48:	f102 0208 	add.w	r2, r2, #8
 8009b4c:	d1c9      	bne.n	8009ae2 <merge_rfft_f32+0x3a>
 8009b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <arm_rfft_fast_f32>:
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	8a05      	ldrh	r5, [r0, #16]
 8009b5a:	086d      	lsrs	r5, r5, #1
 8009b5c:	8005      	strh	r5, [r0, #0]
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4616      	mov	r6, r2
 8009b62:	461d      	mov	r5, r3
 8009b64:	b14b      	cbz	r3, 8009b7a <arm_rfft_fast_f32+0x26>
 8009b66:	f7ff ff9f 	bl	8009aa8 <merge_rfft_f32>
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4620      	mov	r0, r4
 8009b70:	2301      	movs	r3, #1
 8009b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b76:	f000 bb33 	b.w	800a1e0 <arm_cfft_f32>
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f000 fb2e 	bl	800a1e0 <arm_cfft_f32>
 8009b84:	4632      	mov	r2, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	4620      	mov	r0, r4
 8009b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8e:	f7ff bf31 	b.w	80099f4 <stage_rfft_f32>
 8009b92:	bf00      	nop

08009b94 <arm_cfft_radix8by2_f32>:
 8009b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b98:	ed2d 8b08 	vpush	{d8-d11}
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	f8b7 c000 	ldrh.w	ip, [r7]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009baa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009bb2:	f000 80b0 	beq.w	8009d16 <arm_cfft_radix8by2_f32+0x182>
 8009bb6:	008c      	lsls	r4, r1, #2
 8009bb8:	3410      	adds	r4, #16
 8009bba:	f100 0310 	add.w	r3, r0, #16
 8009bbe:	1906      	adds	r6, r0, r4
 8009bc0:	3210      	adds	r2, #16
 8009bc2:	4444      	add	r4, r8
 8009bc4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009bc8:	f108 0510 	add.w	r5, r8, #16
 8009bcc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009bd0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009bd4:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009bd8:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009bdc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009be0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009be4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009be8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009bec:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009bf0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009bf4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009bf8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009bfc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009c00:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009c04:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009c08:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009c0c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009c10:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009c14:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009c18:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009c1c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009c20:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009c24:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009c28:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009c2c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009c30:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009c34:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009c38:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009c3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009c40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009c44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009c48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009c4c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009c50:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009c54:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009c58:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009c5c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009c60:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009c64:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009c68:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009c6c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009c70:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009c74:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009c78:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009c7c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009c80:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009c84:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009c88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009c8c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009c90:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009c94:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009c98:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009c9c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009ca0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009ca4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009ca8:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009cac:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009cb0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009cb4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009cb8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009cbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009cc0:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009cc4:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009cc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ccc:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009cd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009cd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009cd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009cdc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009ce0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009ce4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009ce8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009cec:	3310      	adds	r3, #16
 8009cee:	4563      	cmp	r3, ip
 8009cf0:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009cf4:	f106 0610 	add.w	r6, r6, #16
 8009cf8:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009cfc:	f102 0210 	add.w	r2, r2, #16
 8009d00:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009d04:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009d08:	f105 0510 	add.w	r5, r5, #16
 8009d0c:	f104 0410 	add.w	r4, r4, #16
 8009d10:	f47f af5c 	bne.w	8009bcc <arm_cfft_radix8by2_f32+0x38>
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	b28c      	uxth	r4, r1
 8009d18:	4621      	mov	r1, r4
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	f000 fb3c 	bl	800a398 <arm_radix8_butterfly_f32>
 8009d20:	ecbd 8b08 	vpop	{d8-d11}
 8009d24:	4621      	mov	r1, r4
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4640      	mov	r0, r8
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	f000 bb32 	b.w	800a398 <arm_radix8_butterfly_f32>

08009d34 <arm_cfft_radix8by4_f32>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	ed2d 8b0a 	vpush	{d8-d12}
 8009d3c:	b08d      	sub	sp, #52	; 0x34
 8009d3e:	460d      	mov	r5, r1
 8009d40:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d42:	8801      	ldrh	r1, [r0, #0]
 8009d44:	6842      	ldr	r2, [r0, #4]
 8009d46:	900a      	str	r0, [sp, #40]	; 0x28
 8009d48:	0849      	lsrs	r1, r1, #1
 8009d4a:	008b      	lsls	r3, r1, #2
 8009d4c:	18ee      	adds	r6, r5, r3
 8009d4e:	18f0      	adds	r0, r6, r3
 8009d50:	edd0 5a00 	vldr	s11, [r0]
 8009d54:	edd5 7a00 	vldr	s15, [r5]
 8009d58:	ed96 7a00 	vldr	s14, [r6]
 8009d5c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009d60:	ed96 4a01 	vldr	s8, [r6, #4]
 8009d64:	ed95 5a01 	vldr	s10, [r5, #4]
 8009d68:	9008      	str	r0, [sp, #32]
 8009d6a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009d6e:	18c7      	adds	r7, r0, r3
 8009d70:	edd7 4a00 	vldr	s9, [r7]
 8009d74:	ed97 3a01 	vldr	s6, [r7, #4]
 8009d78:	9701      	str	r7, [sp, #4]
 8009d7a:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009d7e:	462c      	mov	r4, r5
 8009d80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009d84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009d88:	ee16 ca90 	vmov	ip, s13
 8009d8c:	f844 cb08 	str.w	ip, [r4], #8
 8009d90:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009d94:	edd6 5a01 	vldr	s11, [r6, #4]
 8009d98:	edd7 2a01 	vldr	s5, [r7, #4]
 8009d9c:	9404      	str	r4, [sp, #16]
 8009d9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009da2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009da6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009daa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009dae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009db2:	0849      	lsrs	r1, r1, #1
 8009db4:	f102 0e08 	add.w	lr, r2, #8
 8009db8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009dbc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8009dc2:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009dc6:	f1a1 0902 	sub.w	r9, r1, #2
 8009dca:	f8cd e00c 	str.w	lr, [sp, #12]
 8009dce:	4631      	mov	r1, r6
 8009dd0:	ee13 ea90 	vmov	lr, s7
 8009dd4:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009dd8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009ddc:	4604      	mov	r4, r0
 8009dde:	edc5 5a01 	vstr	s11, [r5, #4]
 8009de2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009de6:	f841 eb08 	str.w	lr, [r1], #8
 8009dea:	ee34 5a24 	vadd.f32	s10, s8, s9
 8009dee:	ee16 ea10 	vmov	lr, s12
 8009df2:	ed86 5a01 	vstr	s10, [r6, #4]
 8009df6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009dfa:	f844 eb08 	str.w	lr, [r4], #8
 8009dfe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009e02:	edc0 6a01 	vstr	s13, [r0, #4]
 8009e06:	9405      	str	r4, [sp, #20]
 8009e08:	4604      	mov	r4, r0
 8009e0a:	ee17 0a90 	vmov	r0, s15
 8009e0e:	9106      	str	r1, [sp, #24]
 8009e10:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009e14:	f102 0110 	add.w	r1, r2, #16
 8009e18:	46bc      	mov	ip, r7
 8009e1a:	9100      	str	r1, [sp, #0]
 8009e1c:	f847 0b08 	str.w	r0, [r7], #8
 8009e20:	f102 0118 	add.w	r1, r2, #24
 8009e24:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009e28:	9102      	str	r1, [sp, #8]
 8009e2a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009e2e:	9007      	str	r0, [sp, #28]
 8009e30:	f000 8134 	beq.w	800a09c <arm_cfft_radix8by4_f32+0x368>
 8009e34:	f102 0920 	add.w	r9, r2, #32
 8009e38:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8009e3c:	9a01      	ldr	r2, [sp, #4]
 8009e3e:	f8dd a000 	ldr.w	sl, [sp]
 8009e42:	3b0c      	subs	r3, #12
 8009e44:	4683      	mov	fp, r0
 8009e46:	4463      	add	r3, ip
 8009e48:	f105 0e10 	add.w	lr, r5, #16
 8009e4c:	f1a4 010c 	sub.w	r1, r4, #12
 8009e50:	f104 0510 	add.w	r5, r4, #16
 8009e54:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009e58:	f1a2 040c 	sub.w	r4, r2, #12
 8009e5c:	f106 0010 	add.w	r0, r6, #16
 8009e60:	3210      	adds	r2, #16
 8009e62:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009e66:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009e6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009e6e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009e72:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009e76:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8009e7a:	ed12 1a01 	vldr	s2, [r2, #-4]
 8009e7e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009e82:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009e86:	ee30 6a26 	vadd.f32	s12, s0, s13
 8009e8a:	ee37 7a84 	vadd.f32	s14, s15, s8
 8009e8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009e92:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009e96:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009e9a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009e9e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009ea2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009ea6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009eaa:	ee78 aa25 	vadd.f32	s21, s16, s11
 8009eae:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009eb2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009eb6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009eba:	ed94 7a02 	vldr	s14, [r4, #8]
 8009ebe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009ec2:	ed91 ba02 	vldr	s22, [r1, #8]
 8009ec6:	edd3 9a02 	vldr	s19, [r3, #8]
 8009eca:	edd4 2a01 	vldr	s5, [r4, #4]
 8009ece:	ed9c 9a01 	vldr	s18, [ip, #4]
 8009ed2:	ed93 5a01 	vldr	s10, [r3, #4]
 8009ed6:	edd1 0a01 	vldr	s1, [r1, #4]
 8009eda:	ee72 6a07 	vadd.f32	s13, s4, s14
 8009ede:	ee32 2a47 	vsub.f32	s4, s4, s14
 8009ee2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8009ee6:	ee79 4a22 	vadd.f32	s9, s18, s5
 8009eea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8009eee:	ee79 2a62 	vsub.f32	s5, s18, s5
 8009ef2:	ed8c 7a02 	vstr	s14, [ip, #8]
 8009ef6:	ed91 7a01 	vldr	s14, [r1, #4]
 8009efa:	edd3 8a01 	vldr	s17, [r3, #4]
 8009efe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8009f02:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8009f06:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009f0a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8009f0e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009f12:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8009f16:	ed1a aa02 	vldr	s20, [sl, #-8]
 8009f1a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8009f1e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8009f22:	ee7a aac1 	vsub.f32	s21, s21, s2
 8009f26:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009f2a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8009f2e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8009f32:	ee6a aa87 	vmul.f32	s21, s21, s14
 8009f36:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8009f3a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8009f3e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009f42:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009f46:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009f4a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8009f4e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009f52:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009f56:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009f5a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8009f5e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009f62:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009f66:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009f6a:	ed00 7a02 	vstr	s14, [r0, #-8]
 8009f6e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009f72:	edc1 8a01 	vstr	s17, [r1, #4]
 8009f76:	ed81 aa02 	vstr	s20, [r1, #8]
 8009f7a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8009f7e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009f82:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009f86:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009f8a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009f8e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009f92:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009f96:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009f9a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009f9e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009fa2:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009fa6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009faa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009fae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009fb2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009fb6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009fba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009fbe:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009fc2:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009fc6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009fca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009fce:	ed45 3a02 	vstr	s7, [r5, #-8]
 8009fd2:	ed05 6a01 	vstr	s12, [r5, #-4]
 8009fd6:	ed84 7a01 	vstr	s14, [r4, #4]
 8009fda:	ed84 4a02 	vstr	s8, [r4, #8]
 8009fde:	ee35 6a81 	vadd.f32	s12, s11, s2
 8009fe2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8009fe6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8009fea:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8009fee:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009ff2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8009ff6:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009ffa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009ffe:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a002:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a006:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a00a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a00e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a012:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a016:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a01a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a01e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a022:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a026:	f1bb 0b01 	subs.w	fp, fp, #1
 800a02a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a02e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a032:	f10e 0e08 	add.w	lr, lr, #8
 800a036:	ed83 3a02 	vstr	s6, [r3, #8]
 800a03a:	ed83 7a01 	vstr	s14, [r3, #4]
 800a03e:	f1ac 0c08 	sub.w	ip, ip, #8
 800a042:	f10a 0a08 	add.w	sl, sl, #8
 800a046:	f100 0008 	add.w	r0, r0, #8
 800a04a:	f1a1 0108 	sub.w	r1, r1, #8
 800a04e:	f109 0910 	add.w	r9, r9, #16
 800a052:	f105 0508 	add.w	r5, r5, #8
 800a056:	f1a4 0408 	sub.w	r4, r4, #8
 800a05a:	f108 0818 	add.w	r8, r8, #24
 800a05e:	f102 0208 	add.w	r2, r2, #8
 800a062:	f1a3 0308 	sub.w	r3, r3, #8
 800a066:	f47f aefc 	bne.w	8009e62 <arm_cfft_radix8by4_f32+0x12e>
 800a06a:	9907      	ldr	r1, [sp, #28]
 800a06c:	9800      	ldr	r0, [sp, #0]
 800a06e:	00cb      	lsls	r3, r1, #3
 800a070:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a074:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a078:	9100      	str	r1, [sp, #0]
 800a07a:	9904      	ldr	r1, [sp, #16]
 800a07c:	4419      	add	r1, r3
 800a07e:	9104      	str	r1, [sp, #16]
 800a080:	9903      	ldr	r1, [sp, #12]
 800a082:	4419      	add	r1, r3
 800a084:	9103      	str	r1, [sp, #12]
 800a086:	9906      	ldr	r1, [sp, #24]
 800a088:	4419      	add	r1, r3
 800a08a:	9106      	str	r1, [sp, #24]
 800a08c:	9905      	ldr	r1, [sp, #20]
 800a08e:	441f      	add	r7, r3
 800a090:	4419      	add	r1, r3
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	9105      	str	r1, [sp, #20]
 800a096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a09a:	9302      	str	r3, [sp, #8]
 800a09c:	9904      	ldr	r1, [sp, #16]
 800a09e:	9805      	ldr	r0, [sp, #20]
 800a0a0:	ed91 4a00 	vldr	s8, [r1]
 800a0a4:	edd0 6a00 	vldr	s13, [r0]
 800a0a8:	9b06      	ldr	r3, [sp, #24]
 800a0aa:	ed97 3a00 	vldr	s6, [r7]
 800a0ae:	edd3 7a00 	vldr	s15, [r3]
 800a0b2:	edd0 4a01 	vldr	s9, [r0, #4]
 800a0b6:	edd1 3a01 	vldr	s7, [r1, #4]
 800a0ba:	ed97 2a01 	vldr	s4, [r7, #4]
 800a0be:	ed93 7a01 	vldr	s14, [r3, #4]
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a0c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a0cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a0d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a0d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a0d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a0dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a0e0:	ed81 5a00 	vstr	s10, [r1]
 800a0e4:	ed93 5a01 	vldr	s10, [r3, #4]
 800a0e8:	edd7 4a01 	vldr	s9, [r7, #4]
 800a0ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a0f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a0f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a0f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a0fc:	ed81 5a01 	vstr	s10, [r1, #4]
 800a100:	edd2 1a00 	vldr	s3, [r2]
 800a104:	edd2 2a01 	vldr	s5, [r2, #4]
 800a108:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a10c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a110:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a114:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a118:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a11c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a120:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a124:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a128:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a12c:	edc3 2a00 	vstr	s5, [r3]
 800a130:	ed83 5a01 	vstr	s10, [r3, #4]
 800a134:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a138:	9b00      	ldr	r3, [sp, #0]
 800a13a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a13e:	ed93 4a01 	vldr	s8, [r3, #4]
 800a142:	ed93 5a00 	vldr	s10, [r3]
 800a146:	9b02      	ldr	r3, [sp, #8]
 800a148:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a14c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a150:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a154:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a158:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a15c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a160:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a164:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a168:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a16c:	ed80 6a01 	vstr	s12, [r0, #4]
 800a170:	edc0 5a00 	vstr	s11, [r0]
 800a174:	edd3 5a01 	vldr	s11, [r3, #4]
 800a178:	edd3 6a00 	vldr	s13, [r3]
 800a17c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a180:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a184:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a188:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a18c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a190:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a194:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a198:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a19c:	ed87 7a01 	vstr	s14, [r7, #4]
 800a1a0:	edc7 7a00 	vstr	s15, [r7]
 800a1a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	686a      	ldr	r2, [r5, #4]
 800a1ac:	2304      	movs	r3, #4
 800a1ae:	f000 f8f3 	bl	800a398 <arm_radix8_butterfly_f32>
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	686a      	ldr	r2, [r5, #4]
 800a1b8:	2304      	movs	r3, #4
 800a1ba:	f000 f8ed 	bl	800a398 <arm_radix8_butterfly_f32>
 800a1be:	9808      	ldr	r0, [sp, #32]
 800a1c0:	686a      	ldr	r2, [r5, #4]
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f000 f8e7 	bl	800a398 <arm_radix8_butterfly_f32>
 800a1ca:	686a      	ldr	r2, [r5, #4]
 800a1cc:	9801      	ldr	r0, [sp, #4]
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	b00d      	add	sp, #52	; 0x34
 800a1d4:	ecbd 8b0a 	vpop	{d8-d12}
 800a1d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	f000 b8dc 	b.w	800a398 <arm_radix8_butterfly_f32>

0800a1e0 <arm_cfft_f32>:
 800a1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e4:	2a01      	cmp	r2, #1
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	4617      	mov	r7, r2
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	8805      	ldrh	r5, [r0, #0]
 800a1f0:	d056      	beq.n	800a2a0 <arm_cfft_f32+0xc0>
 800a1f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a1f6:	d063      	beq.n	800a2c0 <arm_cfft_f32+0xe0>
 800a1f8:	d916      	bls.n	800a228 <arm_cfft_f32+0x48>
 800a1fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a1fe:	d01a      	beq.n	800a236 <arm_cfft_f32+0x56>
 800a200:	d947      	bls.n	800a292 <arm_cfft_f32+0xb2>
 800a202:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a206:	d05b      	beq.n	800a2c0 <arm_cfft_f32+0xe0>
 800a208:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a20c:	d105      	bne.n	800a21a <arm_cfft_f32+0x3a>
 800a20e:	2301      	movs	r3, #1
 800a210:	6872      	ldr	r2, [r6, #4]
 800a212:	4629      	mov	r1, r5
 800a214:	4620      	mov	r0, r4
 800a216:	f000 f8bf 	bl	800a398 <arm_radix8_butterfly_f32>
 800a21a:	f1b8 0f00 	cmp.w	r8, #0
 800a21e:	d111      	bne.n	800a244 <arm_cfft_f32+0x64>
 800a220:	2f01      	cmp	r7, #1
 800a222:	d016      	beq.n	800a252 <arm_cfft_f32+0x72>
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	2d20      	cmp	r5, #32
 800a22a:	d049      	beq.n	800a2c0 <arm_cfft_f32+0xe0>
 800a22c:	d935      	bls.n	800a29a <arm_cfft_f32+0xba>
 800a22e:	2d40      	cmp	r5, #64	; 0x40
 800a230:	d0ed      	beq.n	800a20e <arm_cfft_f32+0x2e>
 800a232:	2d80      	cmp	r5, #128	; 0x80
 800a234:	d1f1      	bne.n	800a21a <arm_cfft_f32+0x3a>
 800a236:	4621      	mov	r1, r4
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff fcab 	bl	8009b94 <arm_cfft_radix8by2_f32>
 800a23e:	f1b8 0f00 	cmp.w	r8, #0
 800a242:	d0ed      	beq.n	800a220 <arm_cfft_f32+0x40>
 800a244:	68b2      	ldr	r2, [r6, #8]
 800a246:	89b1      	ldrh	r1, [r6, #12]
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 f841 	bl	800a2d0 <arm_bitreversal_32>
 800a24e:	2f01      	cmp	r7, #1
 800a250:	d1e8      	bne.n	800a224 <arm_cfft_f32+0x44>
 800a252:	ee07 5a90 	vmov	s15, r5
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a25e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a262:	2d00      	cmp	r5, #0
 800a264:	d0de      	beq.n	800a224 <arm_cfft_f32+0x44>
 800a266:	f104 0108 	add.w	r1, r4, #8
 800a26a:	2300      	movs	r3, #0
 800a26c:	3301      	adds	r3, #1
 800a26e:	429d      	cmp	r5, r3
 800a270:	f101 0108 	add.w	r1, r1, #8
 800a274:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a278:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a27c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a280:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a284:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a288:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a28c:	d1ee      	bne.n	800a26c <arm_cfft_f32+0x8c>
 800a28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a292:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a296:	d0ba      	beq.n	800a20e <arm_cfft_f32+0x2e>
 800a298:	e7bf      	b.n	800a21a <arm_cfft_f32+0x3a>
 800a29a:	2d10      	cmp	r5, #16
 800a29c:	d0cb      	beq.n	800a236 <arm_cfft_f32+0x56>
 800a29e:	e7bc      	b.n	800a21a <arm_cfft_f32+0x3a>
 800a2a0:	b19d      	cbz	r5, 800a2ca <arm_cfft_f32+0xea>
 800a2a2:	f101 030c 	add.w	r3, r1, #12
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a2ac:	3201      	adds	r2, #1
 800a2ae:	eef1 7a67 	vneg.f32	s15, s15
 800a2b2:	4295      	cmp	r5, r2
 800a2b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a2b8:	f103 0308 	add.w	r3, r3, #8
 800a2bc:	d1f4      	bne.n	800a2a8 <arm_cfft_f32+0xc8>
 800a2be:	e798      	b.n	800a1f2 <arm_cfft_f32+0x12>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff fd36 	bl	8009d34 <arm_cfft_radix8by4_f32>
 800a2c8:	e7a7      	b.n	800a21a <arm_cfft_f32+0x3a>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0aa      	beq.n	800a224 <arm_cfft_f32+0x44>
 800a2ce:	e7b9      	b.n	800a244 <arm_cfft_f32+0x64>

0800a2d0 <arm_bitreversal_32>:
 800a2d0:	b1e9      	cbz	r1, 800a30e <arm_bitreversal_32+0x3e>
 800a2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	f102 0e02 	add.w	lr, r2, #2
 800a2da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a2de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a2e2:	08a4      	lsrs	r4, r4, #2
 800a2e4:	089b      	lsrs	r3, r3, #2
 800a2e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a2ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a2ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a2f2:	00a6      	lsls	r6, r4, #2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	1d34      	adds	r4, r6, #4
 800a2fe:	3502      	adds	r5, #2
 800a300:	58c6      	ldr	r6, [r0, r3]
 800a302:	5907      	ldr	r7, [r0, r4]
 800a304:	50c7      	str	r7, [r0, r3]
 800a306:	428d      	cmp	r5, r1
 800a308:	5106      	str	r6, [r0, r4]
 800a30a:	d3e6      	bcc.n	800a2da <arm_bitreversal_32+0xa>
 800a30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a30e:	4770      	bx	lr

0800a310 <arm_abs_f32>:
 800a310:	b470      	push	{r4, r5, r6}
 800a312:	0896      	lsrs	r6, r2, #2
 800a314:	d025      	beq.n	800a362 <arm_abs_f32+0x52>
 800a316:	f100 0410 	add.w	r4, r0, #16
 800a31a:	f101 0310 	add.w	r3, r1, #16
 800a31e:	4635      	mov	r5, r6
 800a320:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a324:	eef0 7ae7 	vabs.f32	s15, s15
 800a328:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a32c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a330:	eef0 7ae7 	vabs.f32	s15, s15
 800a334:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a338:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a33c:	eef0 7ae7 	vabs.f32	s15, s15
 800a340:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a344:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a348:	3d01      	subs	r5, #1
 800a34a:	eef0 7ae7 	vabs.f32	s15, s15
 800a34e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800a352:	f104 0410 	add.w	r4, r4, #16
 800a356:	f103 0310 	add.w	r3, r3, #16
 800a35a:	d1e1      	bne.n	800a320 <arm_abs_f32+0x10>
 800a35c:	0136      	lsls	r6, r6, #4
 800a35e:	4430      	add	r0, r6
 800a360:	4431      	add	r1, r6
 800a362:	f012 0203 	ands.w	r2, r2, #3
 800a366:	d015      	beq.n	800a394 <arm_abs_f32+0x84>
 800a368:	edd0 7a00 	vldr	s15, [r0]
 800a36c:	3a01      	subs	r2, #1
 800a36e:	eef0 7ae7 	vabs.f32	s15, s15
 800a372:	edc1 7a00 	vstr	s15, [r1]
 800a376:	d00d      	beq.n	800a394 <arm_abs_f32+0x84>
 800a378:	edd0 7a01 	vldr	s15, [r0, #4]
 800a37c:	2a01      	cmp	r2, #1
 800a37e:	eef0 7ae7 	vabs.f32	s15, s15
 800a382:	edc1 7a01 	vstr	s15, [r1, #4]
 800a386:	d005      	beq.n	800a394 <arm_abs_f32+0x84>
 800a388:	edd0 7a02 	vldr	s15, [r0, #8]
 800a38c:	eef0 7ae7 	vabs.f32	s15, s15
 800a390:	edc1 7a02 	vstr	s15, [r1, #8]
 800a394:	bc70      	pop	{r4, r5, r6}
 800a396:	4770      	bx	lr

0800a398 <arm_radix8_butterfly_f32>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	ed2d 8b10 	vpush	{d8-d15}
 800a3a0:	b095      	sub	sp, #84	; 0x54
 800a3a2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800a690 <arm_radix8_butterfly_f32+0x2f8>
 800a3ae:	9012      	str	r0, [sp, #72]	; 0x48
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3b4:	4689      	mov	r9, r1
 800a3b6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3bc:	960f      	str	r6, [sp, #60]	; 0x3c
 800a3be:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a3c2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a3c6:	eb03 0508 	add.w	r5, r3, r8
 800a3ca:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a3ce:	eb05 040e 	add.w	r4, r5, lr
 800a3d2:	0137      	lsls	r7, r6, #4
 800a3d4:	eba6 030a 	sub.w	r3, r6, sl
 800a3d8:	eb04 000e 	add.w	r0, r4, lr
 800a3dc:	44b2      	add	sl, r6
 800a3de:	1d3a      	adds	r2, r7, #4
 800a3e0:	9702      	str	r7, [sp, #8]
 800a3e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a3e6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a3ea:	ebae 0c06 	sub.w	ip, lr, r6
 800a3ee:	9703      	str	r7, [sp, #12]
 800a3f0:	eb03 0708 	add.w	r7, r3, r8
 800a3f4:	9701      	str	r7, [sp, #4]
 800a3f6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a3fa:	9706      	str	r7, [sp, #24]
 800a3fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a3fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a402:	f10e 0104 	add.w	r1, lr, #4
 800a406:	4439      	add	r1, r7
 800a408:	443a      	add	r2, r7
 800a40a:	0137      	lsls	r7, r6, #4
 800a40c:	00f6      	lsls	r6, r6, #3
 800a40e:	9704      	str	r7, [sp, #16]
 800a410:	9605      	str	r6, [sp, #20]
 800a412:	9f01      	ldr	r7, [sp, #4]
 800a414:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a416:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a41a:	f04f 0c00 	mov.w	ip, #0
 800a41e:	edd4 6a00 	vldr	s13, [r4]
 800a422:	edd7 1a00 	vldr	s3, [r7]
 800a426:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a42a:	edd5 5a00 	vldr	s11, [r5]
 800a42e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a432:	ed90 6a00 	vldr	s12, [r0]
 800a436:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a43a:	ed93 3a00 	vldr	s6, [r3]
 800a43e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a442:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a446:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a44a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a44e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a452:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a45a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a45e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a462:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a466:	ed85 4a00 	vstr	s8, [r5]
 800a46a:	edd1 6a00 	vldr	s13, [r1]
 800a46e:	ed94 9a01 	vldr	s18, [r4, #4]
 800a472:	edd3 2a01 	vldr	s5, [r3, #4]
 800a476:	edd7 8a01 	vldr	s17, [r7, #4]
 800a47a:	edd6 0a00 	vldr	s1, [r6]
 800a47e:	edd5 3a01 	vldr	s7, [r5, #4]
 800a482:	ed90 8a01 	vldr	s16, [r0, #4]
 800a486:	ed92 7a00 	vldr	s14, [r2]
 800a48a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a48e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a492:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a496:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a49a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a49e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a4a2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a4a6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a4aa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a4ae:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a4b2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a4b6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a4ba:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a4be:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a4c2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a4c6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a4ca:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a4ce:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a4d2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a4d6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a4da:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a4de:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a4e2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a4e6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a4ea:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a4ee:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a4f2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a4f6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a4fa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a4fe:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a502:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a506:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a50a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a50e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a512:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a516:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a51a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a51e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a522:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a526:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a52a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a52e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a532:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a536:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a53a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a53e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a542:	44dc      	add	ip, fp
 800a544:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a548:	45e1      	cmp	r9, ip
 800a54a:	ed86 8a00 	vstr	s16, [r6]
 800a54e:	ed85 2a01 	vstr	s4, [r5, #4]
 800a552:	4456      	add	r6, sl
 800a554:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a558:	4455      	add	r5, sl
 800a55a:	edc0 6a00 	vstr	s13, [r0]
 800a55e:	ed82 1a00 	vstr	s2, [r2]
 800a562:	ed80 5a01 	vstr	s10, [r0, #4]
 800a566:	4452      	add	r2, sl
 800a568:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a56c:	4450      	add	r0, sl
 800a56e:	edc7 2a00 	vstr	s5, [r7]
 800a572:	edc4 4a00 	vstr	s9, [r4]
 800a576:	ed83 7a00 	vstr	s14, [r3]
 800a57a:	edc1 5a00 	vstr	s11, [r1]
 800a57e:	edc7 3a01 	vstr	s7, [r7, #4]
 800a582:	4451      	add	r1, sl
 800a584:	ed84 6a01 	vstr	s12, [r4, #4]
 800a588:	4457      	add	r7, sl
 800a58a:	edc3 7a01 	vstr	s15, [r3, #4]
 800a58e:	4454      	add	r4, sl
 800a590:	4453      	add	r3, sl
 800a592:	f63f af44 	bhi.w	800a41e <arm_radix8_butterfly_f32+0x86>
 800a596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a598:	2b07      	cmp	r3, #7
 800a59a:	f240 81b7 	bls.w	800a90c <arm_radix8_butterfly_f32+0x574>
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	9903      	ldr	r1, [sp, #12]
 800a5a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5a4:	9e05      	ldr	r6, [sp, #20]
 800a5a6:	9a04      	ldr	r2, [sp, #16]
 800a5a8:	f103 0c08 	add.w	ip, r3, #8
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	3108      	adds	r1, #8
 800a5b0:	f108 0808 	add.w	r8, r8, #8
 800a5b4:	1841      	adds	r1, r0, r1
 800a5b6:	3608      	adds	r6, #8
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4444      	add	r4, r8
 800a5be:	18c3      	adds	r3, r0, r3
 800a5c0:	9109      	str	r1, [sp, #36]	; 0x24
 800a5c2:	1981      	adds	r1, r0, r6
 800a5c4:	f10e 0e08 	add.w	lr, lr, #8
 800a5c8:	3208      	adds	r2, #8
 800a5ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5cc:	9107      	str	r1, [sp, #28]
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	9304      	str	r3, [sp, #16]
 800a5d4:	f100 030c 	add.w	r3, r0, #12
 800a5d8:	4474      	add	r4, lr
 800a5da:	f04f 0801 	mov.w	r8, #1
 800a5de:	1882      	adds	r2, r0, r2
 800a5e0:	4461      	add	r1, ip
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	940a      	str	r4, [sp, #40]	; 0x28
 800a5e8:	46c1      	mov	r9, r8
 800a5ea:	9208      	str	r2, [sp, #32]
 800a5ec:	46d8      	mov	r8, fp
 800a5ee:	9106      	str	r1, [sp, #24]
 800a5f0:	f04f 0e00 	mov.w	lr, #0
 800a5f4:	469b      	mov	fp, r3
 800a5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5fa:	449e      	add	lr, r3
 800a5fc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800a600:	441a      	add	r2, r3
 800a602:	920e      	str	r2, [sp, #56]	; 0x38
 800a604:	441a      	add	r2, r3
 800a606:	18d4      	adds	r4, r2, r3
 800a608:	18e5      	adds	r5, r4, r3
 800a60a:	18ee      	adds	r6, r5, r3
 800a60c:	18f7      	adds	r7, r6, r3
 800a60e:	eb07 0c03 	add.w	ip, r7, r3
 800a612:	920d      	str	r2, [sp, #52]	; 0x34
 800a614:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800a618:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800a61c:	910c      	str	r1, [sp, #48]	; 0x30
 800a61e:	4419      	add	r1, r3
 800a620:	9103      	str	r1, [sp, #12]
 800a622:	4419      	add	r1, r3
 800a624:	18ca      	adds	r2, r1, r3
 800a626:	9202      	str	r2, [sp, #8]
 800a628:	441a      	add	r2, r3
 800a62a:	18d0      	adds	r0, r2, r3
 800a62c:	ed92 ea01 	vldr	s28, [r2, #4]
 800a630:	9a02      	ldr	r2, [sp, #8]
 800a632:	edd4 7a00 	vldr	s15, [r4]
 800a636:	edd2 da01 	vldr	s27, [r2, #4]
 800a63a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a63c:	ed91 da01 	vldr	s26, [r1, #4]
 800a640:	ed92 ca01 	vldr	s24, [r2, #4]
 800a644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a646:	9903      	ldr	r1, [sp, #12]
 800a648:	edcd 7a03 	vstr	s15, [sp, #12]
 800a64c:	edd2 7a00 	vldr	s15, [r2]
 800a650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a652:	edcd 7a02 	vstr	s15, [sp, #8]
 800a656:	edd2 7a00 	vldr	s15, [r2]
 800a65a:	edd0 ea01 	vldr	s29, [r0, #4]
 800a65e:	edd1 ca01 	vldr	s25, [r1, #4]
 800a662:	eddc ba00 	vldr	s23, [ip]
 800a666:	edd7 aa00 	vldr	s21, [r7]
 800a66a:	ed96 aa00 	vldr	s20, [r6]
 800a66e:	edd5 9a00 	vldr	s19, [r5]
 800a672:	edcd 7a01 	vstr	s15, [sp, #4]
 800a676:	4403      	add	r3, r0
 800a678:	ed93 fa01 	vldr	s30, [r3, #4]
 800a67c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a680:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a688:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a68c:	46cc      	mov	ip, r9
 800a68e:	e001      	b.n	800a694 <arm_radix8_butterfly_f32+0x2fc>
 800a690:	3f3504f3 	.word	0x3f3504f3
 800a694:	ed91 6a00 	vldr	s12, [r1]
 800a698:	ed93 5a00 	vldr	s10, [r3]
 800a69c:	edd0 fa00 	vldr	s31, [r0]
 800a6a0:	edd4 7a00 	vldr	s15, [r4]
 800a6a4:	ed95 7a00 	vldr	s14, [r5]
 800a6a8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a6ac:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a6b0:	ed92 2a00 	vldr	s4, [r2]
 800a6b4:	ed96 0a00 	vldr	s0, [r6]
 800a6b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a6bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a6c0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a6c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a6c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a6cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a6d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a6d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a6d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6dc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a6e0:	edd4 8a01 	vldr	s17, [r4, #4]
 800a6e4:	ed92 9a01 	vldr	s18, [r2, #4]
 800a6e8:	edd7 0a00 	vldr	s1, [r7]
 800a6ec:	edd1 2a01 	vldr	s5, [r1, #4]
 800a6f0:	ed95 7a01 	vldr	s14, [r5, #4]
 800a6f4:	ed93 6a01 	vldr	s12, [r3, #4]
 800a6f8:	edd0 5a01 	vldr	s11, [r0, #4]
 800a6fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a700:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a704:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a708:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a70c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a710:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a714:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a718:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a71c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a720:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a724:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a728:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a72c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a730:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a734:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a738:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a73c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a740:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a744:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a748:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a74c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a750:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a754:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a758:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a75c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a760:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a764:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a768:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a76c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a770:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a774:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a778:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a77c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a780:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a784:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a788:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a78c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a790:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a794:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a798:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a79c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a7a0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a7a4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a7a8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a7ac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a7b0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a7b4:	eddd 1a02 	vldr	s3, [sp, #8]
 800a7b8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a7bc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a7c0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a7c4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a7c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a7cc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a7d0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a7d4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a7d8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a7dc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a7e0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a7e4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a7e8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a7ec:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a7f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a7f4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a7f8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a7fc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a800:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a804:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a808:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a80c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a810:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a814:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a818:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a81c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a820:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a824:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a828:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a82c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a830:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a834:	eddd 5a03 	vldr	s11, [sp, #12]
 800a838:	edc6 fa00 	vstr	s31, [r6]
 800a83c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a840:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a844:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a848:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a84c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a850:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a854:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a858:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a85c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a860:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a864:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a868:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a86c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a870:	44c4      	add	ip, r8
 800a872:	45e3      	cmp	fp, ip
 800a874:	edc3 3a00 	vstr	s7, [r3]
 800a878:	edc3 6a01 	vstr	s13, [r3, #4]
 800a87c:	4456      	add	r6, sl
 800a87e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a882:	edc7 0a00 	vstr	s1, [r7]
 800a886:	4453      	add	r3, sl
 800a888:	ed80 2a00 	vstr	s4, [r0]
 800a88c:	edc0 2a01 	vstr	s5, [r0, #4]
 800a890:	4457      	add	r7, sl
 800a892:	edc2 1a00 	vstr	s3, [r2]
 800a896:	ed82 7a01 	vstr	s14, [r2, #4]
 800a89a:	4450      	add	r0, sl
 800a89c:	ed85 8a00 	vstr	s16, [r5]
 800a8a0:	ed85 0a01 	vstr	s0, [r5, #4]
 800a8a4:	4452      	add	r2, sl
 800a8a6:	edc1 4a00 	vstr	s9, [r1]
 800a8aa:	4455      	add	r5, sl
 800a8ac:	ed81 3a01 	vstr	s6, [r1, #4]
 800a8b0:	edc4 8a00 	vstr	s17, [r4]
 800a8b4:	ed84 6a01 	vstr	s12, [r4, #4]
 800a8b8:	4451      	add	r1, sl
 800a8ba:	4454      	add	r4, sl
 800a8bc:	f63f aeea 	bhi.w	800a694 <arm_radix8_butterfly_f32+0x2fc>
 800a8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d2:	9b08      	ldr	r3, [sp, #32]
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	9308      	str	r3, [sp, #32]
 800a8d8:	9b07      	ldr	r3, [sp, #28]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9306      	str	r3, [sp, #24]
 800a8e4:	9b05      	ldr	r3, [sp, #20]
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8f2:	f109 0901 	add.w	r9, r9, #1
 800a8f6:	454b      	cmp	r3, r9
 800a8f8:	f47f ae7d 	bne.w	800a5f6 <arm_radix8_butterfly_f32+0x25e>
 800a8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	b29b      	uxth	r3, r3
 800a902:	46d9      	mov	r9, fp
 800a904:	9310      	str	r3, [sp, #64]	; 0x40
 800a906:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800a90a:	e554      	b.n	800a3b6 <arm_radix8_butterfly_f32+0x1e>
 800a90c:	b015      	add	sp, #84	; 0x54
 800a90e:	ecbd 8b10 	vpop	{d8-d15}
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	bf00      	nop

0800a918 <memset>:
 800a918:	4402      	add	r2, r0
 800a91a:	4603      	mov	r3, r0
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d100      	bne.n	800a922 <memset+0xa>
 800a920:	4770      	bx	lr
 800a922:	f803 1b01 	strb.w	r1, [r3], #1
 800a926:	e7f9      	b.n	800a91c <memset+0x4>

0800a928 <__libc_init_array>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4d0d      	ldr	r5, [pc, #52]	; (800a960 <__libc_init_array+0x38>)
 800a92c:	4c0d      	ldr	r4, [pc, #52]	; (800a964 <__libc_init_array+0x3c>)
 800a92e:	1b64      	subs	r4, r4, r5
 800a930:	10a4      	asrs	r4, r4, #2
 800a932:	2600      	movs	r6, #0
 800a934:	42a6      	cmp	r6, r4
 800a936:	d109      	bne.n	800a94c <__libc_init_array+0x24>
 800a938:	4d0b      	ldr	r5, [pc, #44]	; (800a968 <__libc_init_array+0x40>)
 800a93a:	4c0c      	ldr	r4, [pc, #48]	; (800a96c <__libc_init_array+0x44>)
 800a93c:	f000 fd50 	bl	800b3e0 <_init>
 800a940:	1b64      	subs	r4, r4, r5
 800a942:	10a4      	asrs	r4, r4, #2
 800a944:	2600      	movs	r6, #0
 800a946:	42a6      	cmp	r6, r4
 800a948:	d105      	bne.n	800a956 <__libc_init_array+0x2e>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a950:	4798      	blx	r3
 800a952:	3601      	adds	r6, #1
 800a954:	e7ee      	b.n	800a934 <__libc_init_array+0xc>
 800a956:	f855 3b04 	ldr.w	r3, [r5], #4
 800a95a:	4798      	blx	r3
 800a95c:	3601      	adds	r6, #1
 800a95e:	e7f2      	b.n	800a946 <__libc_init_array+0x1e>
 800a960:	0801e87c 	.word	0x0801e87c
 800a964:	0801e87c 	.word	0x0801e87c
 800a968:	0801e87c 	.word	0x0801e87c
 800a96c:	0801e880 	.word	0x0801e880

0800a970 <cosf>:
 800a970:	ee10 3a10 	vmov	r3, s0
 800a974:	b507      	push	{r0, r1, r2, lr}
 800a976:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <cosf+0x80>)
 800a978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a97c:	4293      	cmp	r3, r2
 800a97e:	dc06      	bgt.n	800a98e <cosf+0x1e>
 800a980:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a9f4 <cosf+0x84>
 800a984:	b003      	add	sp, #12
 800a986:	f85d eb04 	ldr.w	lr, [sp], #4
 800a98a:	f000 b835 	b.w	800a9f8 <__kernel_cosf>
 800a98e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a992:	db04      	blt.n	800a99e <cosf+0x2e>
 800a994:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a998:	b003      	add	sp, #12
 800a99a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a99e:	4668      	mov	r0, sp
 800a9a0:	f000 f8d0 	bl	800ab44 <__ieee754_rem_pio2f>
 800a9a4:	f000 0003 	and.w	r0, r0, #3
 800a9a8:	2801      	cmp	r0, #1
 800a9aa:	d009      	beq.n	800a9c0 <cosf+0x50>
 800a9ac:	2802      	cmp	r0, #2
 800a9ae:	d010      	beq.n	800a9d2 <cosf+0x62>
 800a9b0:	b9b0      	cbnz	r0, 800a9e0 <cosf+0x70>
 800a9b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9b6:	ed9d 0a00 	vldr	s0, [sp]
 800a9ba:	f000 f81d 	bl	800a9f8 <__kernel_cosf>
 800a9be:	e7eb      	b.n	800a998 <cosf+0x28>
 800a9c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9c4:	ed9d 0a00 	vldr	s0, [sp]
 800a9c8:	f000 f874 	bl	800aab4 <__kernel_sinf>
 800a9cc:	eeb1 0a40 	vneg.f32	s0, s0
 800a9d0:	e7e2      	b.n	800a998 <cosf+0x28>
 800a9d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9d6:	ed9d 0a00 	vldr	s0, [sp]
 800a9da:	f000 f80d 	bl	800a9f8 <__kernel_cosf>
 800a9de:	e7f5      	b.n	800a9cc <cosf+0x5c>
 800a9e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9e4:	ed9d 0a00 	vldr	s0, [sp]
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	f000 f863 	bl	800aab4 <__kernel_sinf>
 800a9ee:	e7d3      	b.n	800a998 <cosf+0x28>
 800a9f0:	3f490fd8 	.word	0x3f490fd8
 800a9f4:	00000000 	.word	0x00000000

0800a9f8 <__kernel_cosf>:
 800a9f8:	ee10 3a10 	vmov	r3, s0
 800a9fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aa04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa08:	da05      	bge.n	800aa16 <__kernel_cosf+0x1e>
 800aa0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aa0e:	ee17 2a90 	vmov	r2, s15
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	d03b      	beq.n	800aa8e <__kernel_cosf+0x96>
 800aa16:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aa1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800aa94 <__kernel_cosf+0x9c>
 800aa1e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800aa98 <__kernel_cosf+0xa0>
 800aa22:	4a1e      	ldr	r2, [pc, #120]	; (800aa9c <__kernel_cosf+0xa4>)
 800aa24:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800aaa0 <__kernel_cosf+0xa8>
 800aa2e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa32:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800aaa4 <__kernel_cosf+0xac>
 800aa36:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa3a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800aaa8 <__kernel_cosf+0xb0>
 800aa3e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa42:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800aaac <__kernel_cosf+0xb4>
 800aa46:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa4a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800aa4e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800aa52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aa56:	eee7 0a06 	vfma.f32	s1, s14, s12
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	dc04      	bgt.n	800aa6a <__kernel_cosf+0x72>
 800aa60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aa64:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800aa68:	4770      	bx	lr
 800aa6a:	4a11      	ldr	r2, [pc, #68]	; (800aab0 <__kernel_cosf+0xb8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	bfda      	itte	le
 800aa70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aa74:	ee07 3a10 	vmovle	s14, r3
 800aa78:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800aa7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa80:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800aa84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aa88:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa8c:	4770      	bx	lr
 800aa8e:	eeb0 0a66 	vmov.f32	s0, s13
 800aa92:	4770      	bx	lr
 800aa94:	ad47d74e 	.word	0xad47d74e
 800aa98:	310f74f6 	.word	0x310f74f6
 800aa9c:	3e999999 	.word	0x3e999999
 800aaa0:	b493f27c 	.word	0xb493f27c
 800aaa4:	37d00d01 	.word	0x37d00d01
 800aaa8:	bab60b61 	.word	0xbab60b61
 800aaac:	3d2aaaab 	.word	0x3d2aaaab
 800aab0:	3f480000 	.word	0x3f480000

0800aab4 <__kernel_sinf>:
 800aab4:	ee10 3a10 	vmov	r3, s0
 800aab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aabc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800aac0:	da04      	bge.n	800aacc <__kernel_sinf+0x18>
 800aac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aac6:	ee17 3a90 	vmov	r3, s15
 800aaca:	b35b      	cbz	r3, 800ab24 <__kernel_sinf+0x70>
 800aacc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aad0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ab28 <__kernel_sinf+0x74>
 800aad4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ab2c <__kernel_sinf+0x78>
 800aad8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aadc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ab30 <__kernel_sinf+0x7c>
 800aae0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aae4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ab34 <__kernel_sinf+0x80>
 800aae8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aaec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ab38 <__kernel_sinf+0x84>
 800aaf0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aaf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aaf8:	b930      	cbnz	r0, 800ab08 <__kernel_sinf+0x54>
 800aafa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ab3c <__kernel_sinf+0x88>
 800aafe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab02:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ab06:	4770      	bx	lr
 800ab08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ab0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ab10:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ab14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ab18:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ab40 <__kernel_sinf+0x8c>
 800ab1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ab20:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	2f2ec9d3 	.word	0x2f2ec9d3
 800ab2c:	b2d72f34 	.word	0xb2d72f34
 800ab30:	3638ef1b 	.word	0x3638ef1b
 800ab34:	b9500d01 	.word	0xb9500d01
 800ab38:	3c088889 	.word	0x3c088889
 800ab3c:	be2aaaab 	.word	0xbe2aaaab
 800ab40:	3e2aaaab 	.word	0x3e2aaaab

0800ab44 <__ieee754_rem_pio2f>:
 800ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab46:	ee10 6a10 	vmov	r6, s0
 800ab4a:	4b86      	ldr	r3, [pc, #536]	; (800ad64 <__ieee754_rem_pio2f+0x220>)
 800ab4c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ab50:	429d      	cmp	r5, r3
 800ab52:	b087      	sub	sp, #28
 800ab54:	4604      	mov	r4, r0
 800ab56:	dc05      	bgt.n	800ab64 <__ieee754_rem_pio2f+0x20>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	ed80 0a00 	vstr	s0, [r0]
 800ab5e:	6043      	str	r3, [r0, #4]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e020      	b.n	800aba6 <__ieee754_rem_pio2f+0x62>
 800ab64:	4b80      	ldr	r3, [pc, #512]	; (800ad68 <__ieee754_rem_pio2f+0x224>)
 800ab66:	429d      	cmp	r5, r3
 800ab68:	dc38      	bgt.n	800abdc <__ieee754_rem_pio2f+0x98>
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800ad6c <__ieee754_rem_pio2f+0x228>
 800ab70:	4b7f      	ldr	r3, [pc, #508]	; (800ad70 <__ieee754_rem_pio2f+0x22c>)
 800ab72:	f025 050f 	bic.w	r5, r5, #15
 800ab76:	dd18      	ble.n	800abaa <__ieee754_rem_pio2f+0x66>
 800ab78:	429d      	cmp	r5, r3
 800ab7a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ab7e:	bf09      	itett	eq
 800ab80:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800ad74 <__ieee754_rem_pio2f+0x230>
 800ab84:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800ad78 <__ieee754_rem_pio2f+0x234>
 800ab88:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ab8c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800ad7c <__ieee754_rem_pio2f+0x238>
 800ab90:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ab94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ab98:	edc0 6a00 	vstr	s13, [r0]
 800ab9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aba0:	edc0 7a01 	vstr	s15, [r0, #4]
 800aba4:	2001      	movs	r0, #1
 800aba6:	b007      	add	sp, #28
 800aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abaa:	429d      	cmp	r5, r3
 800abac:	ee70 7a07 	vadd.f32	s15, s0, s14
 800abb0:	bf09      	itett	eq
 800abb2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800ad74 <__ieee754_rem_pio2f+0x230>
 800abb6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800ad78 <__ieee754_rem_pio2f+0x234>
 800abba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800abbe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800ad7c <__ieee754_rem_pio2f+0x238>
 800abc2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abca:	edc0 6a00 	vstr	s13, [r0]
 800abce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd2:	edc0 7a01 	vstr	s15, [r0, #4]
 800abd6:	f04f 30ff 	mov.w	r0, #4294967295
 800abda:	e7e4      	b.n	800aba6 <__ieee754_rem_pio2f+0x62>
 800abdc:	4b68      	ldr	r3, [pc, #416]	; (800ad80 <__ieee754_rem_pio2f+0x23c>)
 800abde:	429d      	cmp	r5, r3
 800abe0:	dc71      	bgt.n	800acc6 <__ieee754_rem_pio2f+0x182>
 800abe2:	f000 f8db 	bl	800ad9c <fabsf>
 800abe6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ad84 <__ieee754_rem_pio2f+0x240>
 800abea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800abee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800abf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abfa:	ee17 0a90 	vmov	r0, s15
 800abfe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ad6c <__ieee754_rem_pio2f+0x228>
 800ac02:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ac06:	281f      	cmp	r0, #31
 800ac08:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ad78 <__ieee754_rem_pio2f+0x234>
 800ac0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac10:	eeb1 6a47 	vneg.f32	s12, s14
 800ac14:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ac18:	ee16 2a90 	vmov	r2, s13
 800ac1c:	dc1c      	bgt.n	800ac58 <__ieee754_rem_pio2f+0x114>
 800ac1e:	495a      	ldr	r1, [pc, #360]	; (800ad88 <__ieee754_rem_pio2f+0x244>)
 800ac20:	1e47      	subs	r7, r0, #1
 800ac22:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ac26:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ac2a:	428b      	cmp	r3, r1
 800ac2c:	d014      	beq.n	800ac58 <__ieee754_rem_pio2f+0x114>
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	ed94 7a00 	vldr	s14, [r4]
 800ac34:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac3e:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac42:	dab0      	bge.n	800aba6 <__ieee754_rem_pio2f+0x62>
 800ac44:	eeb1 7a47 	vneg.f32	s14, s14
 800ac48:	eeb1 0a40 	vneg.f32	s0, s0
 800ac4c:	ed84 7a00 	vstr	s14, [r4]
 800ac50:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac54:	4240      	negs	r0, r0
 800ac56:	e7a6      	b.n	800aba6 <__ieee754_rem_pio2f+0x62>
 800ac58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ac5c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800ac60:	2908      	cmp	r1, #8
 800ac62:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ac66:	dde2      	ble.n	800ac2e <__ieee754_rem_pio2f+0xea>
 800ac68:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ad74 <__ieee754_rem_pio2f+0x230>
 800ac6c:	eef0 6a40 	vmov.f32	s13, s0
 800ac70:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ac74:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ac78:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ac7c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad7c <__ieee754_rem_pio2f+0x238>
 800ac80:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ac84:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ac88:	ee15 2a90 	vmov	r2, s11
 800ac8c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ac90:	1a5b      	subs	r3, r3, r1
 800ac92:	2b19      	cmp	r3, #25
 800ac94:	dc04      	bgt.n	800aca0 <__ieee754_rem_pio2f+0x15c>
 800ac96:	edc4 5a00 	vstr	s11, [r4]
 800ac9a:	eeb0 0a66 	vmov.f32	s0, s13
 800ac9e:	e7c7      	b.n	800ac30 <__ieee754_rem_pio2f+0xec>
 800aca0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ad8c <__ieee754_rem_pio2f+0x248>
 800aca4:	eeb0 0a66 	vmov.f32	s0, s13
 800aca8:	eea6 0a25 	vfma.f32	s0, s12, s11
 800acac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800acb0:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ad90 <__ieee754_rem_pio2f+0x24c>
 800acb4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800acb8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800acbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800acc0:	ed84 7a00 	vstr	s14, [r4]
 800acc4:	e7b4      	b.n	800ac30 <__ieee754_rem_pio2f+0xec>
 800acc6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800acca:	db06      	blt.n	800acda <__ieee754_rem_pio2f+0x196>
 800accc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800acd0:	edc0 7a01 	vstr	s15, [r0, #4]
 800acd4:	edc0 7a00 	vstr	s15, [r0]
 800acd8:	e742      	b.n	800ab60 <__ieee754_rem_pio2f+0x1c>
 800acda:	15ea      	asrs	r2, r5, #23
 800acdc:	3a86      	subs	r2, #134	; 0x86
 800acde:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800acea:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ad94 <__ieee754_rem_pio2f+0x250>
 800acee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acf6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800acfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800acfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ad02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ad06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ad0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad1a:	edcd 7a05 	vstr	s15, [sp, #20]
 800ad1e:	d11e      	bne.n	800ad5e <__ieee754_rem_pio2f+0x21a>
 800ad20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ad24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad28:	bf14      	ite	ne
 800ad2a:	2302      	movne	r3, #2
 800ad2c:	2301      	moveq	r3, #1
 800ad2e:	491a      	ldr	r1, [pc, #104]	; (800ad98 <__ieee754_rem_pio2f+0x254>)
 800ad30:	9101      	str	r1, [sp, #4]
 800ad32:	2102      	movs	r1, #2
 800ad34:	9100      	str	r1, [sp, #0]
 800ad36:	a803      	add	r0, sp, #12
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f000 f837 	bl	800adac <__kernel_rem_pio2f>
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	f6bf af31 	bge.w	800aba6 <__ieee754_rem_pio2f+0x62>
 800ad44:	edd4 7a00 	vldr	s15, [r4]
 800ad48:	eef1 7a67 	vneg.f32	s15, s15
 800ad4c:	edc4 7a00 	vstr	s15, [r4]
 800ad50:	edd4 7a01 	vldr	s15, [r4, #4]
 800ad54:	eef1 7a67 	vneg.f32	s15, s15
 800ad58:	edc4 7a01 	vstr	s15, [r4, #4]
 800ad5c:	e77a      	b.n	800ac54 <__ieee754_rem_pio2f+0x110>
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e7e5      	b.n	800ad2e <__ieee754_rem_pio2f+0x1ea>
 800ad62:	bf00      	nop
 800ad64:	3f490fd8 	.word	0x3f490fd8
 800ad68:	4016cbe3 	.word	0x4016cbe3
 800ad6c:	3fc90f80 	.word	0x3fc90f80
 800ad70:	3fc90fd0 	.word	0x3fc90fd0
 800ad74:	37354400 	.word	0x37354400
 800ad78:	37354443 	.word	0x37354443
 800ad7c:	2e85a308 	.word	0x2e85a308
 800ad80:	43490f80 	.word	0x43490f80
 800ad84:	3f22f984 	.word	0x3f22f984
 800ad88:	0801e4a4 	.word	0x0801e4a4
 800ad8c:	2e85a300 	.word	0x2e85a300
 800ad90:	248d3132 	.word	0x248d3132
 800ad94:	43800000 	.word	0x43800000
 800ad98:	0801e524 	.word	0x0801e524

0800ad9c <fabsf>:
 800ad9c:	ee10 3a10 	vmov	r3, s0
 800ada0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	ee00 3a10 	vmov	s0, r3
 800ada8:	4770      	bx	lr
	...

0800adac <__kernel_rem_pio2f>:
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	ed2d 8b04 	vpush	{d8-d9}
 800adb4:	b0d9      	sub	sp, #356	; 0x164
 800adb6:	4688      	mov	r8, r1
 800adb8:	9002      	str	r0, [sp, #8]
 800adba:	49b8      	ldr	r1, [pc, #736]	; (800b09c <__kernel_rem_pio2f+0x2f0>)
 800adbc:	9866      	ldr	r0, [sp, #408]	; 0x198
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800adc4:	9901      	ldr	r1, [sp, #4]
 800adc6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800adc8:	f101 3bff 	add.w	fp, r1, #4294967295
 800adcc:	1d11      	adds	r1, r2, #4
 800adce:	db25      	blt.n	800ae1c <__kernel_rem_pio2f+0x70>
 800add0:	1ed0      	subs	r0, r2, #3
 800add2:	bf48      	it	mi
 800add4:	1d10      	addmi	r0, r2, #4
 800add6:	10c0      	asrs	r0, r0, #3
 800add8:	1c45      	adds	r5, r0, #1
 800adda:	00e9      	lsls	r1, r5, #3
 800addc:	eba0 070b 	sub.w	r7, r0, fp
 800ade0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800ade4:	9103      	str	r1, [sp, #12]
 800ade6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800adea:	eb0a 0c0b 	add.w	ip, sl, fp
 800adee:	ae1c      	add	r6, sp, #112	; 0x70
 800adf0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800adf4:	2400      	movs	r4, #0
 800adf6:	4564      	cmp	r4, ip
 800adf8:	dd12      	ble.n	800ae20 <__kernel_rem_pio2f+0x74>
 800adfa:	9901      	ldr	r1, [sp, #4]
 800adfc:	ac1c      	add	r4, sp, #112	; 0x70
 800adfe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ae02:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ae06:	f04f 0c00 	mov.w	ip, #0
 800ae0a:	45d4      	cmp	ip, sl
 800ae0c:	dc27      	bgt.n	800ae5e <__kernel_rem_pio2f+0xb2>
 800ae0e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ae12:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800ae16:	4627      	mov	r7, r4
 800ae18:	2600      	movs	r6, #0
 800ae1a:	e016      	b.n	800ae4a <__kernel_rem_pio2f+0x9e>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7db      	b.n	800add8 <__kernel_rem_pio2f+0x2c>
 800ae20:	42e7      	cmn	r7, r4
 800ae22:	bf5d      	ittte	pl
 800ae24:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800ae28:	ee07 1a90 	vmovpl	s15, r1
 800ae2c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ae30:	eef0 7a47 	vmovmi.f32	s15, s14
 800ae34:	ece6 7a01 	vstmia	r6!, {s15}
 800ae38:	3401      	adds	r4, #1
 800ae3a:	e7dc      	b.n	800adf6 <__kernel_rem_pio2f+0x4a>
 800ae3c:	ecfe 6a01 	vldmia	lr!, {s13}
 800ae40:	ed97 7a00 	vldr	s14, [r7]
 800ae44:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae48:	3601      	adds	r6, #1
 800ae4a:	455e      	cmp	r6, fp
 800ae4c:	f1a7 0704 	sub.w	r7, r7, #4
 800ae50:	ddf4      	ble.n	800ae3c <__kernel_rem_pio2f+0x90>
 800ae52:	ece9 7a01 	vstmia	r9!, {s15}
 800ae56:	f10c 0c01 	add.w	ip, ip, #1
 800ae5a:	3404      	adds	r4, #4
 800ae5c:	e7d5      	b.n	800ae0a <__kernel_rem_pio2f+0x5e>
 800ae5e:	a908      	add	r1, sp, #32
 800ae60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ae68:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800b0a8 <__kernel_rem_pio2f+0x2fc>
 800ae6c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800b0a4 <__kernel_rem_pio2f+0x2f8>
 800ae70:	9105      	str	r1, [sp, #20]
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	4656      	mov	r6, sl
 800ae76:	00b3      	lsls	r3, r6, #2
 800ae78:	9306      	str	r3, [sp, #24]
 800ae7a:	ab58      	add	r3, sp, #352	; 0x160
 800ae7c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ae80:	ac08      	add	r4, sp, #32
 800ae82:	ab44      	add	r3, sp, #272	; 0x110
 800ae84:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ae88:	46a4      	mov	ip, r4
 800ae8a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ae8e:	4637      	mov	r7, r6
 800ae90:	2f00      	cmp	r7, #0
 800ae92:	f1a0 0004 	sub.w	r0, r0, #4
 800ae96:	dc4a      	bgt.n	800af2e <__kernel_rem_pio2f+0x182>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	9207      	str	r2, [sp, #28]
 800ae9c:	f000 f9f8 	bl	800b290 <scalbnf>
 800aea0:	eeb0 8a40 	vmov.f32	s16, s0
 800aea4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800aea8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800aeac:	f000 fa56 	bl	800b35c <floorf>
 800aeb0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800aeb4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	9a07      	ldr	r2, [sp, #28]
 800aebc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800aec0:	ee17 9a90 	vmov	r9, s15
 800aec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800aecc:	dd41      	ble.n	800af52 <__kernel_rem_pio2f+0x1a6>
 800aece:	f106 3cff 	add.w	ip, r6, #4294967295
 800aed2:	ab08      	add	r3, sp, #32
 800aed4:	f1c5 0e08 	rsb	lr, r5, #8
 800aed8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800aedc:	fa47 f00e 	asr.w	r0, r7, lr
 800aee0:	4481      	add	r9, r0
 800aee2:	fa00 f00e 	lsl.w	r0, r0, lr
 800aee6:	1a3f      	subs	r7, r7, r0
 800aee8:	f1c5 0007 	rsb	r0, r5, #7
 800aeec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800aef0:	4107      	asrs	r7, r0
 800aef2:	2f00      	cmp	r7, #0
 800aef4:	dd3c      	ble.n	800af70 <__kernel_rem_pio2f+0x1c4>
 800aef6:	f04f 0e00 	mov.w	lr, #0
 800aefa:	f109 0901 	add.w	r9, r9, #1
 800aefe:	4671      	mov	r1, lr
 800af00:	4576      	cmp	r6, lr
 800af02:	dc67      	bgt.n	800afd4 <__kernel_rem_pio2f+0x228>
 800af04:	2d00      	cmp	r5, #0
 800af06:	dd03      	ble.n	800af10 <__kernel_rem_pio2f+0x164>
 800af08:	2d01      	cmp	r5, #1
 800af0a:	d074      	beq.n	800aff6 <__kernel_rem_pio2f+0x24a>
 800af0c:	2d02      	cmp	r5, #2
 800af0e:	d07b      	beq.n	800b008 <__kernel_rem_pio2f+0x25c>
 800af10:	2f02      	cmp	r7, #2
 800af12:	d12d      	bne.n	800af70 <__kernel_rem_pio2f+0x1c4>
 800af14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af18:	ee30 8a48 	vsub.f32	s16, s0, s16
 800af1c:	b341      	cbz	r1, 800af70 <__kernel_rem_pio2f+0x1c4>
 800af1e:	4628      	mov	r0, r5
 800af20:	9207      	str	r2, [sp, #28]
 800af22:	f000 f9b5 	bl	800b290 <scalbnf>
 800af26:	9a07      	ldr	r2, [sp, #28]
 800af28:	ee38 8a40 	vsub.f32	s16, s16, s0
 800af2c:	e020      	b.n	800af70 <__kernel_rem_pio2f+0x1c4>
 800af2e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800af32:	3f01      	subs	r7, #1
 800af34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800af38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af3c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800af40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800af44:	ecac 0a01 	vstmia	ip!, {s0}
 800af48:	ed90 0a00 	vldr	s0, [r0]
 800af4c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800af50:	e79e      	b.n	800ae90 <__kernel_rem_pio2f+0xe4>
 800af52:	d105      	bne.n	800af60 <__kernel_rem_pio2f+0x1b4>
 800af54:	1e70      	subs	r0, r6, #1
 800af56:	ab08      	add	r3, sp, #32
 800af58:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800af5c:	11ff      	asrs	r7, r7, #7
 800af5e:	e7c8      	b.n	800aef2 <__kernel_rem_pio2f+0x146>
 800af60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800af64:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	da30      	bge.n	800afd0 <__kernel_rem_pio2f+0x224>
 800af6e:	2700      	movs	r7, #0
 800af70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800af74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af78:	f040 809a 	bne.w	800b0b0 <__kernel_rem_pio2f+0x304>
 800af7c:	1e74      	subs	r4, r6, #1
 800af7e:	46a4      	mov	ip, r4
 800af80:	2100      	movs	r1, #0
 800af82:	45d4      	cmp	ip, sl
 800af84:	da47      	bge.n	800b016 <__kernel_rem_pio2f+0x26a>
 800af86:	2900      	cmp	r1, #0
 800af88:	d063      	beq.n	800b052 <__kernel_rem_pio2f+0x2a6>
 800af8a:	ab08      	add	r3, sp, #32
 800af8c:	3d08      	subs	r5, #8
 800af8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d07f      	beq.n	800b096 <__kernel_rem_pio2f+0x2ea>
 800af96:	4628      	mov	r0, r5
 800af98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af9c:	f000 f978 	bl	800b290 <scalbnf>
 800afa0:	1c63      	adds	r3, r4, #1
 800afa2:	aa44      	add	r2, sp, #272	; 0x110
 800afa4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b0a8 <__kernel_rem_pio2f+0x2fc>
 800afa8:	0099      	lsls	r1, r3, #2
 800afaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800afae:	4623      	mov	r3, r4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f280 80ad 	bge.w	800b110 <__kernel_rem_pio2f+0x364>
 800afb6:	4623      	mov	r3, r4
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f2c0 80cb 	blt.w	800b154 <__kernel_rem_pio2f+0x3a8>
 800afbe:	aa44      	add	r2, sp, #272	; 0x110
 800afc0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800afc4:	4e36      	ldr	r6, [pc, #216]	; (800b0a0 <__kernel_rem_pio2f+0x2f4>)
 800afc6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800afca:	2000      	movs	r0, #0
 800afcc:	1ae2      	subs	r2, r4, r3
 800afce:	e0b6      	b.n	800b13e <__kernel_rem_pio2f+0x392>
 800afd0:	2702      	movs	r7, #2
 800afd2:	e790      	b.n	800aef6 <__kernel_rem_pio2f+0x14a>
 800afd4:	6820      	ldr	r0, [r4, #0]
 800afd6:	b949      	cbnz	r1, 800afec <__kernel_rem_pio2f+0x240>
 800afd8:	b118      	cbz	r0, 800afe2 <__kernel_rem_pio2f+0x236>
 800afda:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800afde:	6020      	str	r0, [r4, #0]
 800afe0:	2001      	movs	r0, #1
 800afe2:	f10e 0e01 	add.w	lr, lr, #1
 800afe6:	3404      	adds	r4, #4
 800afe8:	4601      	mov	r1, r0
 800afea:	e789      	b.n	800af00 <__kernel_rem_pio2f+0x154>
 800afec:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800aff0:	6020      	str	r0, [r4, #0]
 800aff2:	4608      	mov	r0, r1
 800aff4:	e7f5      	b.n	800afe2 <__kernel_rem_pio2f+0x236>
 800aff6:	1e74      	subs	r4, r6, #1
 800aff8:	ab08      	add	r3, sp, #32
 800affa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800affe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b002:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b006:	e783      	b.n	800af10 <__kernel_rem_pio2f+0x164>
 800b008:	1e74      	subs	r4, r6, #1
 800b00a:	ab08      	add	r3, sp, #32
 800b00c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b010:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b014:	e7f5      	b.n	800b002 <__kernel_rem_pio2f+0x256>
 800b016:	ab08      	add	r3, sp, #32
 800b018:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800b01c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b020:	4301      	orrs	r1, r0
 800b022:	e7ae      	b.n	800af82 <__kernel_rem_pio2f+0x1d6>
 800b024:	3001      	adds	r0, #1
 800b026:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800b02a:	2f00      	cmp	r7, #0
 800b02c:	d0fa      	beq.n	800b024 <__kernel_rem_pio2f+0x278>
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b034:	eb0d 0403 	add.w	r4, sp, r3
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	18f7      	adds	r7, r6, r3
 800b03c:	ab1c      	add	r3, sp, #112	; 0x70
 800b03e:	f106 0c01 	add.w	ip, r6, #1
 800b042:	3c4c      	subs	r4, #76	; 0x4c
 800b044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b048:	4430      	add	r0, r6
 800b04a:	4560      	cmp	r0, ip
 800b04c:	da04      	bge.n	800b058 <__kernel_rem_pio2f+0x2ac>
 800b04e:	4606      	mov	r6, r0
 800b050:	e711      	b.n	800ae76 <__kernel_rem_pio2f+0xca>
 800b052:	9c05      	ldr	r4, [sp, #20]
 800b054:	2001      	movs	r0, #1
 800b056:	e7e6      	b.n	800b026 <__kernel_rem_pio2f+0x27a>
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b05e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b06c:	2600      	movs	r6, #0
 800b06e:	ece7 7a01 	vstmia	r7!, {s15}
 800b072:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800b076:	46b9      	mov	r9, r7
 800b078:	455e      	cmp	r6, fp
 800b07a:	dd04      	ble.n	800b086 <__kernel_rem_pio2f+0x2da>
 800b07c:	ece4 7a01 	vstmia	r4!, {s15}
 800b080:	f10c 0c01 	add.w	ip, ip, #1
 800b084:	e7e1      	b.n	800b04a <__kernel_rem_pio2f+0x29e>
 800b086:	ecfe 6a01 	vldmia	lr!, {s13}
 800b08a:	ed39 7a01 	vldmdb	r9!, {s14}
 800b08e:	3601      	adds	r6, #1
 800b090:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b094:	e7f0      	b.n	800b078 <__kernel_rem_pio2f+0x2cc>
 800b096:	3c01      	subs	r4, #1
 800b098:	e777      	b.n	800af8a <__kernel_rem_pio2f+0x1de>
 800b09a:	bf00      	nop
 800b09c:	0801e868 	.word	0x0801e868
 800b0a0:	0801e83c 	.word	0x0801e83c
 800b0a4:	43800000 	.word	0x43800000
 800b0a8:	3b800000 	.word	0x3b800000
 800b0ac:	00000000 	.word	0x00000000
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	eeb0 0a48 	vmov.f32	s0, s16
 800b0b6:	1a98      	subs	r0, r3, r2
 800b0b8:	f000 f8ea 	bl	800b290 <scalbnf>
 800b0bc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b0a4 <__kernel_rem_pio2f+0x2f8>
 800b0c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c8:	db19      	blt.n	800b0fe <__kernel_rem_pio2f+0x352>
 800b0ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b0a8 <__kernel_rem_pio2f+0x2fc>
 800b0ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b0d2:	aa08      	add	r2, sp, #32
 800b0d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0d8:	1c74      	adds	r4, r6, #1
 800b0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0de:	3508      	adds	r5, #8
 800b0e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b0e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b0ec:	ee10 3a10 	vmov	r3, s0
 800b0f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b0f4:	ee17 3a90 	vmov	r3, s15
 800b0f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b0fc:	e74b      	b.n	800af96 <__kernel_rem_pio2f+0x1ea>
 800b0fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b102:	aa08      	add	r2, sp, #32
 800b104:	ee10 3a10 	vmov	r3, s0
 800b108:	4634      	mov	r4, r6
 800b10a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b10e:	e742      	b.n	800af96 <__kernel_rem_pio2f+0x1ea>
 800b110:	a808      	add	r0, sp, #32
 800b112:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b116:	9001      	str	r0, [sp, #4]
 800b118:	ee07 0a90 	vmov	s15, r0
 800b11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b120:	3b01      	subs	r3, #1
 800b122:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b126:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b12a:	ed62 7a01 	vstmdb	r2!, {s15}
 800b12e:	e73f      	b.n	800afb0 <__kernel_rem_pio2f+0x204>
 800b130:	ecf6 6a01 	vldmia	r6!, {s13}
 800b134:	ecb5 7a01 	vldmia	r5!, {s14}
 800b138:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b13c:	3001      	adds	r0, #1
 800b13e:	4550      	cmp	r0, sl
 800b140:	dc01      	bgt.n	800b146 <__kernel_rem_pio2f+0x39a>
 800b142:	4290      	cmp	r0, r2
 800b144:	ddf4      	ble.n	800b130 <__kernel_rem_pio2f+0x384>
 800b146:	a858      	add	r0, sp, #352	; 0x160
 800b148:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b14c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800b150:	3b01      	subs	r3, #1
 800b152:	e731      	b.n	800afb8 <__kernel_rem_pio2f+0x20c>
 800b154:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b156:	2b02      	cmp	r3, #2
 800b158:	dc09      	bgt.n	800b16e <__kernel_rem_pio2f+0x3c2>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dc2b      	bgt.n	800b1b6 <__kernel_rem_pio2f+0x40a>
 800b15e:	d044      	beq.n	800b1ea <__kernel_rem_pio2f+0x43e>
 800b160:	f009 0007 	and.w	r0, r9, #7
 800b164:	b059      	add	sp, #356	; 0x164
 800b166:	ecbd 8b04 	vpop	{d8-d9}
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b170:	2b03      	cmp	r3, #3
 800b172:	d1f5      	bne.n	800b160 <__kernel_rem_pio2f+0x3b4>
 800b174:	aa30      	add	r2, sp, #192	; 0xc0
 800b176:	1f0b      	subs	r3, r1, #4
 800b178:	4413      	add	r3, r2
 800b17a:	461a      	mov	r2, r3
 800b17c:	4620      	mov	r0, r4
 800b17e:	2800      	cmp	r0, #0
 800b180:	f1a2 0204 	sub.w	r2, r2, #4
 800b184:	dc52      	bgt.n	800b22c <__kernel_rem_pio2f+0x480>
 800b186:	4622      	mov	r2, r4
 800b188:	2a01      	cmp	r2, #1
 800b18a:	f1a3 0304 	sub.w	r3, r3, #4
 800b18e:	dc5d      	bgt.n	800b24c <__kernel_rem_pio2f+0x4a0>
 800b190:	ab30      	add	r3, sp, #192	; 0xc0
 800b192:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800b196:	440b      	add	r3, r1
 800b198:	2c01      	cmp	r4, #1
 800b19a:	dc67      	bgt.n	800b26c <__kernel_rem_pio2f+0x4c0>
 800b19c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b1a0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b1a4:	2f00      	cmp	r7, #0
 800b1a6:	d167      	bne.n	800b278 <__kernel_rem_pio2f+0x4cc>
 800b1a8:	edc8 6a00 	vstr	s13, [r8]
 800b1ac:	ed88 7a01 	vstr	s14, [r8, #4]
 800b1b0:	edc8 7a02 	vstr	s15, [r8, #8]
 800b1b4:	e7d4      	b.n	800b160 <__kernel_rem_pio2f+0x3b4>
 800b1b6:	ab30      	add	r3, sp, #192	; 0xc0
 800b1b8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800b1bc:	440b      	add	r3, r1
 800b1be:	4622      	mov	r2, r4
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	da24      	bge.n	800b20e <__kernel_rem_pio2f+0x462>
 800b1c4:	b34f      	cbz	r7, 800b21a <__kernel_rem_pio2f+0x46e>
 800b1c6:	eef1 7a47 	vneg.f32	s15, s14
 800b1ca:	edc8 7a00 	vstr	s15, [r8]
 800b1ce:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1d6:	aa31      	add	r2, sp, #196	; 0xc4
 800b1d8:	2301      	movs	r3, #1
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	da20      	bge.n	800b220 <__kernel_rem_pio2f+0x474>
 800b1de:	b10f      	cbz	r7, 800b1e4 <__kernel_rem_pio2f+0x438>
 800b1e0:	eef1 7a67 	vneg.f32	s15, s15
 800b1e4:	edc8 7a01 	vstr	s15, [r8, #4]
 800b1e8:	e7ba      	b.n	800b160 <__kernel_rem_pio2f+0x3b4>
 800b1ea:	ab30      	add	r3, sp, #192	; 0xc0
 800b1ec:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800b0ac <__kernel_rem_pio2f+0x300>
 800b1f0:	440b      	add	r3, r1
 800b1f2:	2c00      	cmp	r4, #0
 800b1f4:	da05      	bge.n	800b202 <__kernel_rem_pio2f+0x456>
 800b1f6:	b10f      	cbz	r7, 800b1fc <__kernel_rem_pio2f+0x450>
 800b1f8:	eef1 7a67 	vneg.f32	s15, s15
 800b1fc:	edc8 7a00 	vstr	s15, [r8]
 800b200:	e7ae      	b.n	800b160 <__kernel_rem_pio2f+0x3b4>
 800b202:	ed33 7a01 	vldmdb	r3!, {s14}
 800b206:	3c01      	subs	r4, #1
 800b208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b20c:	e7f1      	b.n	800b1f2 <__kernel_rem_pio2f+0x446>
 800b20e:	ed73 7a01 	vldmdb	r3!, {s15}
 800b212:	3a01      	subs	r2, #1
 800b214:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b218:	e7d2      	b.n	800b1c0 <__kernel_rem_pio2f+0x414>
 800b21a:	eef0 7a47 	vmov.f32	s15, s14
 800b21e:	e7d4      	b.n	800b1ca <__kernel_rem_pio2f+0x41e>
 800b220:	ecb2 7a01 	vldmia	r2!, {s14}
 800b224:	3301      	adds	r3, #1
 800b226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b22a:	e7d6      	b.n	800b1da <__kernel_rem_pio2f+0x42e>
 800b22c:	edd2 7a00 	vldr	s15, [r2]
 800b230:	edd2 6a01 	vldr	s13, [r2, #4]
 800b234:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b238:	3801      	subs	r0, #1
 800b23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b23e:	ed82 7a00 	vstr	s14, [r2]
 800b242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b246:	edc2 7a01 	vstr	s15, [r2, #4]
 800b24a:	e798      	b.n	800b17e <__kernel_rem_pio2f+0x3d2>
 800b24c:	edd3 7a00 	vldr	s15, [r3]
 800b250:	edd3 6a01 	vldr	s13, [r3, #4]
 800b254:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b258:	3a01      	subs	r2, #1
 800b25a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b25e:	ed83 7a00 	vstr	s14, [r3]
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b266:	edc3 7a01 	vstr	s15, [r3, #4]
 800b26a:	e78d      	b.n	800b188 <__kernel_rem_pio2f+0x3dc>
 800b26c:	ed33 7a01 	vldmdb	r3!, {s14}
 800b270:	3c01      	subs	r4, #1
 800b272:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b276:	e78f      	b.n	800b198 <__kernel_rem_pio2f+0x3ec>
 800b278:	eef1 6a66 	vneg.f32	s13, s13
 800b27c:	eeb1 7a47 	vneg.f32	s14, s14
 800b280:	edc8 6a00 	vstr	s13, [r8]
 800b284:	ed88 7a01 	vstr	s14, [r8, #4]
 800b288:	eef1 7a67 	vneg.f32	s15, s15
 800b28c:	e790      	b.n	800b1b0 <__kernel_rem_pio2f+0x404>
 800b28e:	bf00      	nop

0800b290 <scalbnf>:
 800b290:	ee10 3a10 	vmov	r3, s0
 800b294:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b298:	d02b      	beq.n	800b2f2 <scalbnf+0x62>
 800b29a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b29e:	d302      	bcc.n	800b2a6 <scalbnf+0x16>
 800b2a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2a4:	4770      	bx	lr
 800b2a6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b2aa:	d123      	bne.n	800b2f4 <scalbnf+0x64>
 800b2ac:	4b24      	ldr	r3, [pc, #144]	; (800b340 <scalbnf+0xb0>)
 800b2ae:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b344 <scalbnf+0xb4>
 800b2b2:	4298      	cmp	r0, r3
 800b2b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2b8:	db17      	blt.n	800b2ea <scalbnf+0x5a>
 800b2ba:	ee10 3a10 	vmov	r3, s0
 800b2be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b2c2:	3a19      	subs	r2, #25
 800b2c4:	f24c 3150 	movw	r1, #50000	; 0xc350
 800b2c8:	4288      	cmp	r0, r1
 800b2ca:	dd15      	ble.n	800b2f8 <scalbnf+0x68>
 800b2cc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b348 <scalbnf+0xb8>
 800b2d0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b34c <scalbnf+0xbc>
 800b2d4:	ee10 3a10 	vmov	r3, s0
 800b2d8:	eeb0 7a67 	vmov.f32	s14, s15
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bfb8      	it	lt
 800b2e0:	eef0 7a66 	vmovlt.f32	s15, s13
 800b2e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b2e8:	4770      	bx	lr
 800b2ea:	eddf 7a19 	vldr	s15, [pc, #100]	; 800b350 <scalbnf+0xc0>
 800b2ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b2f2:	4770      	bx	lr
 800b2f4:	0dd2      	lsrs	r2, r2, #23
 800b2f6:	e7e5      	b.n	800b2c4 <scalbnf+0x34>
 800b2f8:	4410      	add	r0, r2
 800b2fa:	28fe      	cmp	r0, #254	; 0xfe
 800b2fc:	dce6      	bgt.n	800b2cc <scalbnf+0x3c>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	dd06      	ble.n	800b310 <scalbnf+0x80>
 800b302:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b306:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b30a:	ee00 3a10 	vmov	s0, r3
 800b30e:	4770      	bx	lr
 800b310:	f110 0f16 	cmn.w	r0, #22
 800b314:	da09      	bge.n	800b32a <scalbnf+0x9a>
 800b316:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b350 <scalbnf+0xc0>
 800b31a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800b354 <scalbnf+0xc4>
 800b31e:	ee10 3a10 	vmov	r3, s0
 800b322:	eeb0 7a67 	vmov.f32	s14, s15
 800b326:	2b00      	cmp	r3, #0
 800b328:	e7d9      	b.n	800b2de <scalbnf+0x4e>
 800b32a:	3019      	adds	r0, #25
 800b32c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b330:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b334:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800b358 <scalbnf+0xc8>
 800b338:	ee07 3a90 	vmov	s15, r3
 800b33c:	e7d7      	b.n	800b2ee <scalbnf+0x5e>
 800b33e:	bf00      	nop
 800b340:	ffff3cb0 	.word	0xffff3cb0
 800b344:	4c000000 	.word	0x4c000000
 800b348:	7149f2ca 	.word	0x7149f2ca
 800b34c:	f149f2ca 	.word	0xf149f2ca
 800b350:	0da24260 	.word	0x0da24260
 800b354:	8da24260 	.word	0x8da24260
 800b358:	33000000 	.word	0x33000000

0800b35c <floorf>:
 800b35c:	ee10 3a10 	vmov	r3, s0
 800b360:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b364:	3a7f      	subs	r2, #127	; 0x7f
 800b366:	2a16      	cmp	r2, #22
 800b368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b36c:	dc2a      	bgt.n	800b3c4 <floorf+0x68>
 800b36e:	2a00      	cmp	r2, #0
 800b370:	da11      	bge.n	800b396 <floorf+0x3a>
 800b372:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b3d4 <floorf+0x78>
 800b376:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b37a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b382:	dd05      	ble.n	800b390 <floorf+0x34>
 800b384:	2b00      	cmp	r3, #0
 800b386:	da23      	bge.n	800b3d0 <floorf+0x74>
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <floorf+0x7c>)
 800b38a:	2900      	cmp	r1, #0
 800b38c:	bf18      	it	ne
 800b38e:	4613      	movne	r3, r2
 800b390:	ee00 3a10 	vmov	s0, r3
 800b394:	4770      	bx	lr
 800b396:	4911      	ldr	r1, [pc, #68]	; (800b3dc <floorf+0x80>)
 800b398:	4111      	asrs	r1, r2
 800b39a:	420b      	tst	r3, r1
 800b39c:	d0fa      	beq.n	800b394 <floorf+0x38>
 800b39e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b3d4 <floorf+0x78>
 800b3a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b3a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ae:	ddef      	ble.n	800b390 <floorf+0x34>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bfbe      	ittt	lt
 800b3b4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b3b8:	fa40 f202 	asrlt.w	r2, r0, r2
 800b3bc:	189b      	addlt	r3, r3, r2
 800b3be:	ea23 0301 	bic.w	r3, r3, r1
 800b3c2:	e7e5      	b.n	800b390 <floorf+0x34>
 800b3c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b3c8:	d3e4      	bcc.n	800b394 <floorf+0x38>
 800b3ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b3ce:	4770      	bx	lr
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e7dd      	b.n	800b390 <floorf+0x34>
 800b3d4:	7149f2ca 	.word	0x7149f2ca
 800b3d8:	bf800000 	.word	0xbf800000
 800b3dc:	007fffff 	.word	0x007fffff

0800b3e0 <_init>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr

0800b3ec <_fini>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr
