<<<<<<< Updated upstream

lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c068  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  0800c228  0800c228  0000d228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6a4  0801f6a4  0002105c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f6a4  0801f6a4  000206a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6ac  0801f6ac  0002105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6ac  0801f6ac  000206ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f6b0  0801f6b0  000206b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801f6b4  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000005c  0801f710  0002105c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0801f710  000214c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002105c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a1e  00000000  00000000  0002108c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a8  00000000  00000000  00045aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  00049d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000120e  00000000  00000000  0004b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018b65  00000000  00000000  0004c7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008491  00000000  00000000  0006533b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0006d7cc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006ce8  00000000  00000000  0006d884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  0007456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  000745df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  00077bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c210 	.word	0x0800c210

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	0800c210 	.word	0x0800c210

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b96a 	b.w	8000ec8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9d08      	ldr	r5, [sp, #32]
 8000c12:	460c      	mov	r4, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14e      	bne.n	8000cb6 <__udivmoddi4+0xaa>
 8000c18:	4694      	mov	ip, r2
 8000c1a:	458c      	cmp	ip, r1
 8000c1c:	4686      	mov	lr, r0
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	d962      	bls.n	8000cea <__udivmoddi4+0xde>
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	4091      	lsls	r1, r2
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	4319      	orrs	r1, r3
 8000c36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f f68c 	uxth.w	r6, ip
 8000c42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb04 f106 	mul.w	r1, r4, r6
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x64>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c62:	f080 8112 	bcs.w	8000e8a <__udivmoddi4+0x27e>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 810f 	bls.w	8000e8a <__udivmoddi4+0x27e>
 8000c6c:	3c02      	subs	r4, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	fa1f f38e 	uxth.w	r3, lr
 8000c76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb00 f606 	mul.w	r6, r0, r6
 8000c86:	429e      	cmp	r6, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x94>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c92:	f080 80fc 	bcs.w	8000e8e <__udivmoddi4+0x282>
 8000c96:	429e      	cmp	r6, r3
 8000c98:	f240 80f9 	bls.w	8000e8e <__udivmoddi4+0x282>
 8000c9c:	4463      	add	r3, ip
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	1b9b      	subs	r3, r3, r6
 8000ca2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	b11d      	cbz	r5, 8000cb2 <__udivmoddi4+0xa6>
 8000caa:	40d3      	lsrs	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d905      	bls.n	8000cc6 <__udivmoddi4+0xba>
 8000cba:	b10d      	cbz	r5, 8000cc0 <__udivmoddi4+0xb4>
 8000cbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e7f5      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cc6:	fab3 f183 	clz	r1, r3
 8000cca:	2900      	cmp	r1, #0
 8000ccc:	d146      	bne.n	8000d5c <__udivmoddi4+0x150>
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xcc>
 8000cd2:	4290      	cmp	r0, r2
 8000cd4:	f0c0 80f0 	bcc.w	8000eb8 <__udivmoddi4+0x2ac>
 8000cd8:	1a86      	subs	r6, r0, r2
 8000cda:	eb64 0303 	sbc.w	r3, r4, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	2d00      	cmp	r5, #0
 8000ce2:	d0e6      	beq.n	8000cb2 <__udivmoddi4+0xa6>
 8000ce4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce8:	e7e3      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	f040 8090 	bne.w	8000e10 <__udivmoddi4+0x204>
 8000cf0:	eba1 040c 	sub.w	r4, r1, ip
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa1f f78c 	uxth.w	r7, ip
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0e:	fb07 f006 	mul.w	r0, r7, r6
 8000d12:	4298      	cmp	r0, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x11c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x11a>
 8000d20:	4298      	cmp	r0, r3
 8000d22:	f200 80cd 	bhi.w	8000ec0 <__udivmoddi4+0x2b4>
 8000d26:	4626      	mov	r6, r4
 8000d28:	1a1c      	subs	r4, r3, r0
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d32:	fb08 4410 	mls	r4, r8, r0, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb00 f707 	mul.w	r7, r0, r7
 8000d3e:	429f      	cmp	r7, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x148>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x146>
 8000d4c:	429f      	cmp	r7, r3
 8000d4e:	f200 80b0 	bhi.w	8000eb2 <__udivmoddi4+0x2a6>
 8000d52:	4620      	mov	r0, r4
 8000d54:	1bdb      	subs	r3, r3, r7
 8000d56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0x9c>
 8000d5c:	f1c1 0620 	rsb	r6, r1, #32
 8000d60:	408b      	lsls	r3, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	431f      	orrs	r7, r3
 8000d68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d70:	ea43 030c 	orr.w	r3, r3, ip
 8000d74:	40f4      	lsrs	r4, r6
 8000d76:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7a:	0c38      	lsrs	r0, r7, #16
 8000d7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d80:	fbb4 fef0 	udiv	lr, r4, r0
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	fb00 441e 	mls	r4, r0, lr, r4
 8000d8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d90:	fb0e f90c 	mul.w	r9, lr, ip
 8000d94:	45a1      	cmp	r9, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	d90a      	bls.n	8000db2 <__udivmoddi4+0x1a6>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da2:	f080 8084 	bcs.w	8000eae <__udivmoddi4+0x2a2>
 8000da6:	45a1      	cmp	r9, r4
 8000da8:	f240 8081 	bls.w	8000eae <__udivmoddi4+0x2a2>
 8000dac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	eba4 0409 	sub.w	r4, r4, r9
 8000db6:	fa1f f983 	uxth.w	r9, r3
 8000dba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x1d2>
 8000dce:	193c      	adds	r4, r7, r4
 8000dd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd4:	d267      	bcs.n	8000ea6 <__udivmoddi4+0x29a>
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0x29a>
 8000dda:	3b02      	subs	r3, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de2:	fba0 9302 	umull	r9, r3, r0, r2
 8000de6:	eba4 040c 	sub.w	r4, r4, ip
 8000dea:	429c      	cmp	r4, r3
 8000dec:	46ce      	mov	lr, r9
 8000dee:	469c      	mov	ip, r3
 8000df0:	d351      	bcc.n	8000e96 <__udivmoddi4+0x28a>
 8000df2:	d04e      	beq.n	8000e92 <__udivmoddi4+0x286>
 8000df4:	b155      	cbz	r5, 8000e0c <__udivmoddi4+0x200>
 8000df6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000e02:	40cb      	lsrs	r3, r1
 8000e04:	431e      	orrs	r6, r3
 8000e06:	40cc      	lsrs	r4, r1
 8000e08:	e9c5 6400 	strd	r6, r4, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	e750      	b.n	8000cb2 <__udivmoddi4+0xa6>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f103 	lsr.w	r1, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e20:	4094      	lsls	r4, r2
 8000e22:	430c      	orrs	r4, r1
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e2c:	fa1f f78c 	uxth.w	r7, ip
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3110 	mls	r1, r8, r0, r3
 8000e38:	0c23      	lsrs	r3, r4, #16
 8000e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3e:	fb00 f107 	mul.w	r1, r0, r7
 8000e42:	4299      	cmp	r1, r3
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x24c>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4e:	d22c      	bcs.n	8000eaa <__udivmoddi4+0x29e>
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d92a      	bls.n	8000eaa <__udivmoddi4+0x29e>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e60:	fb08 3311 	mls	r3, r8, r1, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb01 f307 	mul.w	r3, r1, r7
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x276>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e78:	d213      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d911      	bls.n	8000ea2 <__udivmoddi4+0x296>
 8000e7e:	3902      	subs	r1, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	1ae4      	subs	r4, r4, r3
 8000e84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e88:	e739      	b.n	8000cfe <__udivmoddi4+0xf2>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	e6f0      	b.n	8000c70 <__udivmoddi4+0x64>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e706      	b.n	8000ca0 <__udivmoddi4+0x94>
 8000e92:	45c8      	cmp	r8, r9
 8000e94:	d2ae      	bcs.n	8000df4 <__udivmoddi4+0x1e8>
 8000e96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9e:	3801      	subs	r0, #1
 8000ea0:	e7a8      	b.n	8000df4 <__udivmoddi4+0x1e8>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	e7ed      	b.n	8000e82 <__udivmoddi4+0x276>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e799      	b.n	8000dde <__udivmoddi4+0x1d2>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e7d4      	b.n	8000e58 <__udivmoddi4+0x24c>
 8000eae:	46d6      	mov	lr, sl
 8000eb0:	e77f      	b.n	8000db2 <__udivmoddi4+0x1a6>
 8000eb2:	4463      	add	r3, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e74d      	b.n	8000d54 <__udivmoddi4+0x148>
 8000eb8:	4606      	mov	r6, r0
 8000eba:	4623      	mov	r3, r4
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e70f      	b.n	8000ce0 <__udivmoddi4+0xd4>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	e730      	b.n	8000d28 <__udivmoddi4+0x11c>
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000378 	.word	0x20000378

08000eec <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e033      	b.n	8000f64 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f06:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000f78 <apply_hanning_window+0x8c>
 8000f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f1e:	eeb0 0a66 	vmov.f32	s0, s13
 8000f22:	f00a fbbb 	bl	800b69c <cosf>
 8000f26:	eef0 7a40 	vmov.f32	s15, s0
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3a:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8c7      	bhi.n	8000efc <apply_hanning_window+0x10>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40c90fdb 	.word	0x40c90fdb
 8000f7c:	00000000 	.word	0x00000000

08000f80 <set_motor_speed>:

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}


void set_motor_speed(int motor_speed) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fa8b 	bl	80004a4 <__aeabi_i2d>
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <set_motor_speed+0xa0>)
 8000f94:	f7ff fc1a 	bl	80007cc <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a319      	add	r3, pc, #100	@ (adr r3, 8001008 <set_motor_speed+0x88>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fae7 	bl	8000578 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	a317      	add	r3, pc, #92	@ (adr r3, 8001010 <set_motor_speed+0x90>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff f928 	bl	800020c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <set_motor_speed+0xa4>)
 8000fca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fce:	f7ff fbfd 	bl	80007cc <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	a30f      	add	r3, pc, #60	@ (adr r3, 8001018 <set_motor_speed+0x98>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff faca 	bl	8000578 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd5e 	bl	8000aac <__aeabi_d2iz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <set_motor_speed+0xa8>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	c28f5c29 	.word	0xc28f5c29
 800100c:	3fdc28f5 	.word	0x3fdc28f5
 8001010:	47ae147b 	.word	0x47ae147b
 8001014:	3ff47ae1 	.word	0x3ff47ae1
 8001018:	00000000 	.word	0x00000000
 800101c:	412e8480 	.word	0x412e8480
 8001020:	40590000 	.word	0x40590000
 8001024:	408f4000 	.word	0x408f4000
 8001028:	40000800 	.word	0x40000800

0800102c <HAL_GPIO_EXTI_Callback>:

        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == 64) {
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2b40      	cmp	r3, #64	@ 0x40
 800103a:	d10a      	bne.n	8001052 <HAL_GPIO_EXTI_Callback+0x26>
		if (startFlag) {
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x34>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_EXTI_Callback+0x20>
			startFlag = 0;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x34>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		} else {
			startFlag = 1;
		}
	}
}
 800104a:	e002      	b.n	8001052 <HAL_GPIO_EXTI_Callback+0x26>
			startFlag = 1;
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x34>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000037c 	.word	0x2000037c
 8001064:	00000000 	.word	0x00000000

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 800106e:	b0b6      	sub	sp, #216	@ 0xd8
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	convFlag = 0;
 8001072:	4ba4      	ldr	r3, [pc, #656]	@ (8001304 <main+0x29c>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8001078:	4ba3      	ldr	r3, [pc, #652]	@ (8001308 <main+0x2a0>)
 800107a:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 800107e:	f104 0458 	add.w	r4, r4, #88	@ 0x58
 8001082:	461d      	mov	r5, r3
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108c:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8001090:	4b9e      	ldr	r3, [pc, #632]	@ (800130c <main+0x2a4>)
 8001092:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 8001096:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010a4:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f001 ffc1 	bl	800302e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 ff7e 	bl	8001fac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010b0:	f000 ffc2 	bl	8002038 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f001 fa7c 	bl	80025b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b8:	f001 fa50 	bl	800255c <MX_DMA_Init>
  MX_ADC1_Init();
 80010bc:	f000 ffec 	bl	8002098 <MX_ADC1_Init>
  MX_DAC1_Init();
 80010c0:	f001 f850 	bl	8002164 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 80010c4:	f001 f882 	bl	80021cc <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 80010c8:	f001 f8cc 	bl	8002264 <MX_SAI1_Init>
  MX_TIM1_Init();
 80010cc:	f001 f93e 	bl	800234c <MX_TIM1_Init>
  MX_TIM4_Init();
 80010d0:	f001 f9e8 	bl	80024a4 <MX_TIM4_Init>
  MX_SPI1_Init();
 80010d4:	f001 f8fc 	bl	80022d0 <MX_SPI1_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 80010d8:	2304      	movs	r3, #4
 80010da:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80010de:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 80010e2:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 80010e4:	2329      	movs	r3, #41	@ 0x29
 80010e6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80010ea:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80010ee:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 80010f0:	4887      	ldr	r0, [pc, #540]	@ (8001310 <main+0x2a8>)
 80010f2:	f007 f927 	bl	8008344 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010f6:	2104      	movs	r1, #4
 80010f8:	4886      	ldr	r0, [pc, #536]	@ (8001314 <main+0x2ac>)
 80010fa:	f007 fa4b 	bl	8008594 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while (startFlag) {
 80010fe:	f000 bf4a 	b.w	8001f96 <main+0xf2e>
	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 8001102:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001106:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800110a:	3b98      	subs	r3, #152	@ 0x98
 800110c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001110:	4619      	mov	r1, r3
 8001112:	4881      	ldr	r0, [pc, #516]	@ (8001318 <main+0x2b0>)
 8001114:	f002 fb44 	bl	80037a0 <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 8001118:	bf00      	nop
 800111a:	4b7a      	ldr	r3, [pc, #488]	@ (8001304 <main+0x29c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0fb      	beq.n	800111a <main+0xb2>

	  float32_t output[BUFFER_LENGTH];
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001128:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e069      	b.n	8001204 <main+0x19c>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001130:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001134:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001138:	461a      	mov	r2, r3
 800113a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800113e:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	f833 3c98 	ldrh.w	r3, [r3, #-152]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f998 	bl	8000484 <__aeabi_ui2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fcee 	bl	8000b3c <__aeabi_d2f>
 8001160:	4602      	mov	r2, r0
 8001162:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001166:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800116a:	4619      	mov	r1, r3
 800116c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001170:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3b98      	subs	r3, #152	@ 0x98
 800117c:	601a      	str	r2, [r3, #0]



	apply_hanning_window(&signal, BUFFER_LENGTH);
 800117e:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001182:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001186:	3b18      	subs	r3, #24
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fead 	bl	8000eec <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 8001192:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001196:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800119a:	3bd4      	subs	r3, #212	@ 0xd4
 800119c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fa65 	bl	800a670 <arm_rfft_fast_init_f32>


    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 80011a6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80011aa:	f102 0218 	add.w	r2, r2, #24
 80011ae:	3ad4      	subs	r2, #212	@ 0xd4
 80011b0:	f507 4140 	add.w	r1, r7, #49152	@ 0xc000
 80011b4:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 80011b8:	3918      	subs	r1, #24
 80011ba:	f507 40c1 	add.w	r0, r7, #24704	@ 0x6080
 80011be:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 80011c2:	38d4      	subs	r0, #212	@ 0xd4
 80011c4:	2300      	movs	r3, #0
 80011c6:	f009 fb37 	bl	800a838 <arm_rfft_fast_f32>

    output[0] = 0;
 80011ca:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80011ce:	f103 0318 	add.w	r3, r3, #24
 80011d2:	461a      	mov	r2, r3
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	f842 3cd4 	str.w	r3, [r2, #-212]
    output[1] = 0;
 80011dc:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80011e0:	f103 0318 	add.w	r3, r3, #24
 80011e4:	461a      	mov	r2, r3
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	f842 3cd0 	str.w	r3, [r2, #-208]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 80011ee:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80011f2:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80011fe:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001208:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001212:	db8d      	blt.n	8001130 <main+0xc8>



    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001214:	2300      	movs	r3, #0
 8001216:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800121a:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e061      	b.n	80012e6 <main+0x27e>
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 8001222:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001226:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001232:	f102 0218 	add.w	r2, r2, #24
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	3bd4      	subs	r3, #212	@ 0xd4
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001244:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001250:	f102 0218 	add.w	r2, r2, #24
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3bd4      	subs	r3, #212	@ 0xd4
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001262:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001266:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	3301      	adds	r3, #1
 8001270:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001274:	f102 0218 	add.w	r2, r2, #24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3bd4      	subs	r3, #212	@ 0xd4
 800127e:	edd3 6a00 	vldr	s13, [r3]
 8001282:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001286:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3301      	adds	r3, #1
 8001290:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001294:	f102 0218 	add.w	r2, r2, #24
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3bd4      	subs	r3, #212	@ 0xd4
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	f00a f9d7 	bl	800b660 <sqrtf>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80012ba:	461a      	mov	r2, r3
 80012bc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80012c0:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3bd4      	subs	r3, #212	@ 0xd4
 80012cc:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80012d0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80012d4:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80012e0:	f102 02d0 	add.w	r2, r2, #208	@ 0xd0
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80012ea:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012f4:	d395      	bcc.n	8001222 <main+0x1ba>
    }
//
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80012fc:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e0f4      	b.n	80014ee <main+0x486>
 8001304:	20000378 	.word	0x20000378
 8001308:	0800c228 	.word	0x0800c228
 800130c:	0800c264 	.word	0x0800c264
 8001310:	200002e0 	.word	0x200002e0
 8001314:	2000032c 	.word	0x2000032c
 8001318:	20000078 	.word	0x20000078
 800131c:	442a8000 	.word	0x442a8000
 8001320:	44000000 	.word	0x44000000
 8001324:	43cc8000 	.word	0x43cc8000

      HPS[i] = HPS[i] * HPS[2*i];
 8001328:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800132c:	461a      	mov	r2, r3
 800132e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001332:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3bd4      	subs	r3, #212	@ 0xd4
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001346:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3bd4      	subs	r3, #212	@ 0xd4
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001364:	461a      	mov	r2, r3
 8001366:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800136a:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	3bd4      	subs	r3, #212	@ 0xd4
 8001376:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 800137a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800137e:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 800131c <main+0x2b4>
 8001390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d52a      	bpl.n	80013f0 <main+0x388>
        HPS[i] = HPS[i] * HPS[3*i];
 800139a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800139e:	461a      	mov	r2, r3
 80013a0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80013a4:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3bd4      	subs	r3, #212	@ 0xd4
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80013b8:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3bd4      	subs	r3, #212	@ 0xd4
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80013da:	461a      	mov	r2, r3
 80013dc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80013e0:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3bd4      	subs	r3, #212	@ 0xd4
 80013ec:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 80013f0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80013f4:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed1f 7a39 	vldr	s14, [pc, #-228]	@ 8001320 <main+0x2b8>
 8001406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d528      	bpl.n	8001462 <main+0x3fa>
        HPS[i] = HPS[i] * HPS[4*i];
 8001410:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001414:	461a      	mov	r2, r3
 8001416:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800141a:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3bd4      	subs	r3, #212	@ 0xd4
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800142e:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3bd4      	subs	r3, #212	@ 0xd4
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800144c:	461a      	mov	r2, r3
 800144e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001452:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3bd4      	subs	r3, #212	@ 0xd4
 800145e:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 8001462:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001466:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001474:	ed1f 7a55 	vldr	s14, [pc, #-340]	@ 8001324 <main+0x2bc>
 8001478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	d52a      	bpl.n	80014d8 <main+0x470>
    	  HPS[i] = HPS[i] * HPS[5*i];
 8001482:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001486:	461a      	mov	r2, r3
 8001488:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800148c:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3bd4      	subs	r3, #212	@ 0xd4
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80014a0:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3bd4      	subs	r3, #212	@ 0xd4
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80014c2:	461a      	mov	r2, r3
 80014c4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80014c8:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3bd4      	subs	r3, #212	@ 0xd4
 80014d4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80014d8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80014dc:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80014e8:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80014f2:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fc:	f6ff af14 	blt.w	8001328 <main+0x2c0>
    }



    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 50; ++i){
 8001500:	2300      	movs	r3, #0
 8001502:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001506:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e018      	b.n	8001540 <main+0x4d8>
    	HPS[i] = 0;
 800150e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001512:	461a      	mov	r2, r3
 8001514:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001518:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3bd4      	subs	r3, #212	@ 0xd4
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 50; ++i){
 800152a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800152e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800153a:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001544:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b31      	cmp	r3, #49	@ 0x31
 800154c:	dddf      	ble.n	800150e <main+0x4a6>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 800154e:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8001552:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001556:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e018      	b.n	8001590 <main+0x528>
    	HPS[i] = 0;
 800155e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001562:	461a      	mov	r2, r3
 8001564:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001568:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3bd4      	subs	r3, #212	@ 0xd4
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 800157a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800157e:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800158a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001594:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800159e:	dbde      	blt.n	800155e <main+0x4f6>
    }

    float32_t average;
	arm_mean_f32(HPS, BUFFER_LENGTH/2, &average);
 80015a0:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 80015a4:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80015a8:	3a9c      	subs	r2, #156	@ 0x9c
 80015aa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80015ae:	3bd4      	subs	r3, #212	@ 0xd4
 80015b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b4:	4618      	mov	r0, r3
 80015b6:	f008 fee9 	bl	800a38c <arm_mean_f32>
	if(average < (1E20)){ //Based on sampled data,see spreadsheet
 80015ba:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80015be:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80015c2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff7e 	bl	80004c8 <__aeabi_f2d>
 80015cc:	f20f 53f8 	addw	r3, pc, #1528	@ 0x5f8
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff fa42 	bl	8000a5c <__aeabi_dcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 84da 	bne.w	8001f94 <main+0xf2c>
		continue;
	}


    int max_peak = 0;
 80015e0:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80015e4:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80015e8:	461a      	mov	r2, r3
 80015ea:	2300      	movs	r3, #0
 80015ec:	f842 3ca0 	str.w	r3, [r2, #-160]
    int max_mag = 0;
 80015f0:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80015f4:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80015f8:	461a      	mov	r2, r3
 80015fa:	2300      	movs	r3, #0
 80015fc:	f842 3ca4 	str.w	r3, [r2, #-164]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 8001600:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001604:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001608:	3ba0      	subs	r3, #160	@ 0xa0
 800160a:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 800160e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001612:	3aa4      	subs	r2, #164	@ 0xa4
 8001614:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001618:	38d4      	subs	r0, #212	@ 0xd4
 800161a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800161e:	f008 fef3 	bl	800a408 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 8001622:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001626:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800162a:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff38 	bl	80004a4 <__aeabi_i2d>
 8001634:	f20f 5398 	addw	r3, pc, #1432	@ 0x598
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe ff9c 	bl	8000578 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fa78 	bl	8000b3c <__aeabi_d2f>
 800164c:	4603      	mov	r3, r0
 800164e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001652:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8001656:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001658:	2300      	movs	r3, #0
 800165a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800165e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e02f      	b.n	80016c6 <main+0x65e>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8001666:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800166a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001676:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 800167a:	443b      	add	r3, r7
 800167c:	3b80      	subs	r3, #128	@ 0x80
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001686:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001696:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800169a:	461a      	mov	r2, r3
 800169c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80016a0:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3bbc      	subs	r3, #188	@ 0xbc
 80016ac:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 80016b0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80016b4:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80016c0:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80016ca:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	ddc8      	ble.n	8001666 <main+0x5fe>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 80016d4:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 80016d8:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 80016dc:	39bc      	subs	r1, #188	@ 0xbc
 80016de:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80016e2:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80016e6:	3bbc      	subs	r3, #188	@ 0xbc
 80016e8:	2206      	movs	r2, #6
 80016ea:	4618      	mov	r0, r3
 80016ec:	f009 fc82 	bl	800aff4 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 80016f0:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80016f4:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80016f8:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 80016fc:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001700:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8001704:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800170c:	f102 02bb 	add.w	r2, r2, #187	@ 0xbb
 8001710:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001712:	2300      	movs	r3, #0
 8001714:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001718:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e041      	b.n	80017a4 <main+0x73c>
	    	 if (min_freqs[i] < current_min){
 8001720:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001724:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001728:	461a      	mov	r2, r3
 800172a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800172e:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3bbc      	subs	r3, #188	@ 0xbc
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001742:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	dd1c      	ble.n	800178e <main+0x726>
	    		 current_min = min_freqs[i];
 8001754:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001758:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800175c:	461a      	mov	r2, r3
 800175e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001762:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3bbc      	subs	r3, #188	@ 0xbc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001774:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8001778:	6013      	str	r3, [r2, #0]
	    		 index = i;
 800177a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800177e:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001788:	f102 02bb 	add.w	r2, r2, #187	@ 0xbb
 800178c:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 800178e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001792:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800179e:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017a8:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	ddb6      	ble.n	8001720 <main+0x6b8>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 80017b2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017b6:	f103 03bb 	add.w	r3, r3, #187	@ 0xbb
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80017c2:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80017c6:	443b      	add	r3, r7
 80017c8:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80017cc:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80017d0:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 80017d4:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 80017d6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017da:	f103 03bb 	add.w	r3, r3, #187	@ 0xbb
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80017e6:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80017ea:	443b      	add	r3, r7
 80017ec:	3b80      	subs	r3, #128	@ 0x80
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017f6:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001802:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001806:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800180a:	edc3 7a00 	vstr	s15, [r3]
//	     ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
//	     ILI9341_WriteString(10, 120, "Desired Frequency:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
//	     ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);

	     //Tune strings (yeah yeah)
	     switch (index){
 800180e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001812:	f103 03bb 	add.w	r3, r3, #187	@ 0xbb
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b05      	cmp	r3, #5
 800181a:	f200 83b3 	bhi.w	8001f84 <main+0xf1c>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <main+0x7bc>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001965 	.word	0x08001965
 800182c:	08001a8d 	.word	0x08001a8d
 8001830:	08001bf1 	.word	0x08001bf1
 8001834:	08001d35 	.word	0x08001d35
 8001838:	08001e5d 	.word	0x08001e5d
	     	 case 0: //E low
	     		if(string_offset > 0){
 800183c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001840:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd3c      	ble.n	80018cc <main+0x864>
				 uint32_t delay = floor(70 * string_offset);
 8001852:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001856:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8001bb8 <main+0xb50>
 8001862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001866:	ee17 0a90 	vmov	r0, s15
 800186a:	f7fe fe2d 	bl	80004c8 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	ec43 2b10 	vmov	d0, r2, r3
 8001876:	f009 ff5b 	bl	800b730 <floor>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f93b 	bl	8000afc <__aeabi_d2uiz>
 8001886:	4603      	mov	r3, r0
 8001888:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800188c:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8001890:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001892:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001896:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018a0:	d906      	bls.n	80018b0 <main+0x848>
					delay = MAX_DELAY;
 80018a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018a6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80018aa:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 80018ae:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 80018b0:	2046      	movs	r0, #70	@ 0x46
 80018b2:	f7ff fb65 	bl	8000f80 <set_motor_speed>
				  HAL_Delay(delay);
 80018b6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80018ba:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f001 fc2a 	bl	8003118 <HAL_Delay>
				  set_motor_speed(50);
 80018c4:	2032      	movs	r0, #50	@ 0x32
 80018c6:	f7ff fb5b 	bl	8000f80 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 80018ca:	e35b      	b.n	8001f84 <main+0xf1c>
				else if(string_offset < 0){
 80018cc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80018d0:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d400      	bmi.n	80018e4 <main+0x87c>
	     		 break;
 80018e2:	e34f      	b.n	8001f84 <main+0xf1c>
				 uint32_t delay = floor(-1* (50 * string_offset));
 80018e4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80018e8:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001bbc <main+0xb54>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	eef1 7a67 	vneg.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fde1 	bl	80004c8 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	ec43 2b10 	vmov	d0, r2, r3
 800190e:	f009 ff0f 	bl	800b730 <floor>
 8001912:	ec53 2b10 	vmov	r2, r3, d0
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f8ef 	bl	8000afc <__aeabi_d2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001924:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8001928:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800192a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800192e:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001938:	d906      	bls.n	8001948 <main+0x8e0>
					delay = MAX_DELAY;
 800193a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800193e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001942:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8001946:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001948:	2012      	movs	r0, #18
 800194a:	f7ff fb19 	bl	8000f80 <set_motor_speed>
				 HAL_Delay(delay);
 800194e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001952:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	f001 fbde 	bl	8003118 <HAL_Delay>
				 set_motor_speed(50);
 800195c:	2032      	movs	r0, #50	@ 0x32
 800195e:	f7ff fb0f 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001962:	e30f      	b.n	8001f84 <main+0xf1c>

	     	 case 1: //A
	     		if(string_offset > 0){
 8001964:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001968:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dd3c      	ble.n	80019f4 <main+0x98c>
				 uint32_t delay = floor(90 * string_offset);
 800197a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800197e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001bc0 <main+0xb58>
 800198a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7fe fd99 	bl	80004c8 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	ec43 2b10 	vmov	d0, r2, r3
 800199e:	f009 fec7 	bl	800b730 <floor>
 80019a2:	ec53 2b10 	vmov	r2, r3, d0
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f8a7 	bl	8000afc <__aeabi_d2uiz>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80019b4:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80019b8:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80019ba:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019be:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019c8:	d906      	bls.n	80019d8 <main+0x970>
					delay = MAX_DELAY;
 80019ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019ce:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80019d2:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80019d6:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 80019d8:	2046      	movs	r0, #70	@ 0x46
 80019da:	f7ff fad1 	bl	8000f80 <set_motor_speed>
				  HAL_Delay(delay);
 80019de:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019e2:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f001 fb96 	bl	8003118 <HAL_Delay>
				  set_motor_speed(50);
 80019ec:	2032      	movs	r0, #50	@ 0x32
 80019ee:	f7ff fac7 	bl	8000f80 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 80019f2:	e2c7      	b.n	8001f84 <main+0xf1c>
				else if(string_offset < 0){
 80019f4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019f8:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d400      	bmi.n	8001a0c <main+0x9a4>
	     		 break;
 8001a0a:	e2bb      	b.n	8001f84 <main+0xf1c>
				 uint32_t delay = floor(-1* (100 * string_offset));
 8001a0c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a10:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001bec <main+0xb84>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eef1 7a67 	vneg.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd4d 	bl	80004c8 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ec43 2b10 	vmov	d0, r2, r3
 8001a36:	f009 fe7b 	bl	800b730 <floor>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f85b 	bl	8000afc <__aeabi_d2uiz>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001a4c:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001a50:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001a52:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a56:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a60:	d906      	bls.n	8001a70 <main+0xa08>
					delay = MAX_DELAY;
 8001a62:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a66:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001a6a:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8001a6e:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001a70:	2012      	movs	r0, #18
 8001a72:	f7ff fa85 	bl	8000f80 <set_motor_speed>
				 HAL_Delay(delay);
 8001a76:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a7a:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f001 fb4a 	bl	8003118 <HAL_Delay>
				 set_motor_speed(50);
 8001a84:	2032      	movs	r0, #50	@ 0x32
 8001a86:	f7ff fa7b 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001a8a:	e27b      	b.n	8001f84 <main+0xf1c>

	     	 case 2: //D
	     		if(string_offset > 0){
 8001a8c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a90:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd3c      	ble.n	8001b1c <main+0xab4>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 8001aa2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001aa6:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001bc4 <main+0xb5c>
 8001ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab6:	ee17 0a90 	vmov	r0, s15
 8001aba:	f7fe fd05 	bl	80004c8 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	ec43 2b10 	vmov	d0, r2, r3
 8001ac6:	f009 fe33 	bl	800b730 <floor>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f813 	bl	8000afc <__aeabi_d2uiz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001adc:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8001ae0:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001ae2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ae6:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001af0:	d906      	bls.n	8001b00 <main+0xa98>
					delay = MAX_DELAY;
 8001af2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001af6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001afa:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8001afe:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(70);
 8001b00:	2046      	movs	r0, #70	@ 0x46
 8001b02:	f7ff fa3d 	bl	8000f80 <set_motor_speed>
				  HAL_Delay(delay);
 8001b06:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b0a:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f001 fb02 	bl	8003118 <HAL_Delay>
				  set_motor_speed(50);
 8001b14:	2032      	movs	r0, #50	@ 0x32
 8001b16:	f7ff fa33 	bl	8000f80 <set_motor_speed>
				 }
				 set_motor_speed(18);
				 HAL_Delay(delay);
				 set_motor_speed(50);
	     		}
	     		 break;
 8001b1a:	e233      	b.n	8001f84 <main+0xf1c>
				else if(string_offset < 0){
 8001b1c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b20:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	d400      	bmi.n	8001b34 <main+0xacc>
	     		 break;
 8001b32:	e227      	b.n	8001f84 <main+0xf1c>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 8001b34:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b38:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001bc4 <main+0xb5c>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	eef1 7a67 	vneg.f32	s15, s15
 8001b4c:	ee17 3a90 	vmov	r3, s15
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcb9 	bl	80004c8 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ec43 2b10 	vmov	d0, r2, r3
 8001b5e:	f009 fde7 	bl	800b730 <floor>
 8001b62:	ec53 2b10 	vmov	r2, r3, d0
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7fe ffc7 	bl	8000afc <__aeabi_d2uiz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001b74:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001b78:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001b7a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b7e:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b88:	d906      	bls.n	8001b98 <main+0xb30>
					delay = MAX_DELAY;
 8001b8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b8e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001b92:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001b96:	6013      	str	r3, [r2, #0]
				 set_motor_speed(18);
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f7ff f9f1 	bl	8000f80 <set_motor_speed>
				 HAL_Delay(delay);
 8001b9e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ba2:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f001 fab6 	bl	8003118 <HAL_Delay>
				 set_motor_speed(50);
 8001bac:	2032      	movs	r0, #50	@ 0x32
 8001bae:	f7ff f9e7 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001bb2:	e1e7      	b.n	8001f84 <main+0xf1c>
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	428c0000 	.word	0x428c0000
 8001bbc:	42480000 	.word	0x42480000
 8001bc0:	42b40000 	.word	0x42b40000
 8001bc4:	43020000 	.word	0x43020000
 8001bc8:	78b58c40 	.word	0x78b58c40
 8001bcc:	4415af1d 	.word	0x4415af1d
 8001bd0:	624dd2f2 	.word	0x624dd2f2
 8001bd4:	3ff00690 	.word	0x3ff00690
 8001bd8:	42e60000 	.word	0x42e60000
 8001bdc:	43200000 	.word	0x43200000
 8001be0:	42a00000 	.word	0x42a00000
 8001be4:	42700000 	.word	0x42700000
 8001be8:	43160000 	.word	0x43160000
 8001bec:	42c80000 	.word	0x42c80000

	     	 case 3: //G
	     		if(string_offset > 0){
 8001bf0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001bf4:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	dd3c      	ble.n	8001c80 <main+0xc18>
				 uint32_t delay = floor(115 * string_offset);
 8001c06:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c0a:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 8001bd8 <main+0xb70>
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	ee17 0a90 	vmov	r0, s15
 8001c1e:	f7fe fc53 	bl	80004c8 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ec43 2b10 	vmov	d0, r2, r3
 8001c2a:	f009 fd81 	bl	800b730 <floor>
 8001c2e:	ec53 2b10 	vmov	r2, r3, d0
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ff61 	bl	8000afc <__aeabi_d2uiz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c40:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001c44:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001c46:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c4a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c54:	d906      	bls.n	8001c64 <main+0xbfc>
				 	delay = MAX_DELAY;
 8001c56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c5a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c5e:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001c62:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(72);
 8001c64:	2048      	movs	r0, #72	@ 0x48
 8001c66:	f7ff f98b 	bl	8000f80 <set_motor_speed>
				  HAL_Delay(delay);
 8001c6a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c6e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f001 fa50 	bl	8003118 <HAL_Delay>
				  set_motor_speed(50);
 8001c78:	2032      	movs	r0, #50	@ 0x32
 8001c7a:	f7ff f981 	bl	8000f80 <set_motor_speed>
				 }
				 set_motor_speed(20);
				 HAL_Delay(delay);
				 set_motor_speed(50);
				}
	     		 break;
 8001c7e:	e181      	b.n	8001f84 <main+0xf1c>
				else if(string_offset < 0 && string_offset < -1){
 8001c80:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c84:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d400      	bmi.n	8001c98 <main+0xc30>
	     		 break;
 8001c96:	e175      	b.n	8001f84 <main+0xf1c>
				else if(string_offset < 0 && string_offset < -1){
 8001c98:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c9c:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d400      	bmi.n	8001cb4 <main+0xc4c>
	     		 break;
 8001cb2:	e167      	b.n	8001f84 <main+0xf1c>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8001cb4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001cb8:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 8001bdc <main+0xb74>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	eef1 7a67 	vneg.f32	s15, s15
 8001ccc:	ee17 3a90 	vmov	r3, s15
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fbf9 	bl	80004c8 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	ec43 2b10 	vmov	d0, r2, r3
 8001cde:	f009 fd27 	bl	800b730 <floor>
 8001ce2:	ec53 2b10 	vmov	r2, r3, d0
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff07 	bl	8000afc <__aeabi_d2uiz>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001cf4:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8001cf8:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001cfa:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001cfe:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d08:	d906      	bls.n	8001d18 <main+0xcb0>
				 	delay = MAX_DELAY;
 8001d0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d0e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d12:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8001d16:	6013      	str	r3, [r2, #0]
				 set_motor_speed(20);
 8001d18:	2014      	movs	r0, #20
 8001d1a:	f7ff f931 	bl	8000f80 <set_motor_speed>
				 HAL_Delay(delay);
 8001d1e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d22:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f001 f9f6 	bl	8003118 <HAL_Delay>
				 set_motor_speed(50);
 8001d2c:	2032      	movs	r0, #50	@ 0x32
 8001d2e:	f7ff f927 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001d32:	e127      	b.n	8001f84 <main+0xf1c>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8001d34:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d38:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd3c      	ble.n	8001dc4 <main+0xd5c>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 8001d4a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d4e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ed1f 7a5e 	vldr	s14, [pc, #-376]	@ 8001be0 <main+0xb78>
 8001d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fbb1 	bl	80004c8 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	ec43 2b10 	vmov	d0, r2, r3
 8001d6e:	f009 fcdf 	bl	800b730 <floor>
 8001d72:	ec53 2b10 	vmov	r2, r3, d0
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe febf 	bl	8000afc <__aeabi_d2uiz>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d84:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8001d88:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 8001d8a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d8e:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d98:	d906      	bls.n	8001da8 <main+0xd40>
				 	delay = MAX_DELAY;
 8001d9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d9e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001da2:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8001da6:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed(65);
 8001da8:	2041      	movs	r0, #65	@ 0x41
 8001daa:	f7ff f8e9 	bl	8000f80 <set_motor_speed>
				  HAL_Delay(delay);
 8001dae:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001db2:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f001 f9ae 	bl	8003118 <HAL_Delay>
				  set_motor_speed(50);
 8001dbc:	2032      	movs	r0, #50	@ 0x32
 8001dbe:	f7ff f8df 	bl	8000f80 <set_motor_speed>
				 }
				 set_motor_speed(20);
				 HAL_Delay(delay);
				 set_motor_speed(50);
	     		}
	     		 break;
 8001dc2:	e0df      	b.n	8001f84 <main+0xf1c>
	     		else if(string_offset < 0){
 8001dc4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001dc8:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	d400      	bmi.n	8001ddc <main+0xd74>
	     		 break;
 8001dda:	e0d3      	b.n	8001f84 <main+0xf1c>
				 uint32_t delay = floor(-1* (60 * string_offset));
 8001ddc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001de0:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8001be4 <main+0xb7c>
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	eef1 7a67 	vneg.f32	s15, s15
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb65 	bl	80004c8 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	ec43 2b10 	vmov	d0, r2, r3
 8001e06:	f009 fc93 	bl	800b730 <floor>
 8001e0a:	ec53 2b10 	vmov	r2, r3, d0
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fe73 	bl	8000afc <__aeabi_d2uiz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e1c:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8001e20:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001e22:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e26:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e30:	d906      	bls.n	8001e40 <main+0xdd8>
				 	delay = MAX_DELAY;
 8001e32:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e36:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e3a:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8001e3e:	6013      	str	r3, [r2, #0]
				 set_motor_speed(20);
 8001e40:	2014      	movs	r0, #20
 8001e42:	f7ff f89d 	bl	8000f80 <set_motor_speed>
				 HAL_Delay(delay);
 8001e46:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e4a:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f001 f962 	bl	8003118 <HAL_Delay>
				 set_motor_speed(50);
 8001e54:	2032      	movs	r0, #50	@ 0x32
 8001e56:	f7ff f893 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001e5a:	e093      	b.n	8001f84 <main+0xf1c>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 8001e5c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e60:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	dd3c      	ble.n	8001eec <main+0xe84>
					 uint32_t delay = floor(150 * string_offset);
 8001e72:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e76:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ed1f 7aa6 	vldr	s14, [pc, #-664]	@ 8001be8 <main+0xb80>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb1d 	bl	80004c8 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b10 	vmov	d0, r2, r3
 8001e96:	f009 fc4b 	bl	800b730 <floor>
 8001e9a:	ec53 2b10 	vmov	r2, r3, d0
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe2b 	bl	8000afc <__aeabi_d2uiz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001eac:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8001eb0:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8001eb2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001eb6:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ec0:	d906      	bls.n	8001ed0 <main+0xe68>
					 	delay = MAX_DELAY;
 8001ec2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ec6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001eca:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8001ece:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed(65);
 8001ed0:	2041      	movs	r0, #65	@ 0x41
 8001ed2:	f7ff f855 	bl	8000f80 <set_motor_speed>
					  HAL_Delay(delay);
 8001ed6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001eda:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f001 f91a 	bl	8003118 <HAL_Delay>
					  set_motor_speed(50);
 8001ee4:	2032      	movs	r0, #50	@ 0x32
 8001ee6:	f7ff f84b 	bl	8000f80 <set_motor_speed>
					 }
					 set_motor_speed(25);
					 HAL_Delay(delay);
					 set_motor_speed(50);
				 }
	     		 break;
 8001eea:	e04a      	b.n	8001f82 <main+0xf1a>
	     		else if(string_offset < 0){
 8001eec:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ef0:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d400      	bmi.n	8001f04 <main+0xe9c>
	     		 break;
 8001f02:	e03e      	b.n	8001f82 <main+0xf1a>
					 uint32_t delay = floor(-1* (100 * string_offset));
 8001f04:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f08:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 8001bec <main+0xb84>
 8001f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f18:	eef1 7a67 	vneg.f32	s15, s15
 8001f1c:	ee17 3a90 	vmov	r3, s15
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fad1 	bl	80004c8 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	ec43 2b10 	vmov	d0, r2, r3
 8001f2e:	f009 fbff 	bl	800b730 <floor>
 8001f32:	ec53 2b10 	vmov	r2, r3, d0
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fddf 	bl	8000afc <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001f44:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8001f48:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8001f4a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f4e:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f58:	d906      	bls.n	8001f68 <main+0xf00>
					 	delay = MAX_DELAY;
 8001f5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f5e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001f62:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8001f66:	6013      	str	r3, [r2, #0]
					 set_motor_speed(25);
 8001f68:	2019      	movs	r0, #25
 8001f6a:	f7ff f809 	bl	8000f80 <set_motor_speed>
					 HAL_Delay(delay);
 8001f6e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f72:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f001 f8ce 	bl	8003118 <HAL_Delay>
					 set_motor_speed(50);
 8001f7c:	2032      	movs	r0, #50	@ 0x32
 8001f7e:	f7fe ffff 	bl	8000f80 <set_motor_speed>
	     		 break;
 8001f82:	bf00      	nop
	     }



	  //To prevent strum from previous affecting next
	  HAL_Delay(1000);
 8001f84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f88:	f001 f8c6 	bl	8003118 <HAL_Delay>
	  convFlag = 0;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <main+0xf3c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e000      	b.n	8001f96 <main+0xf2e>
		continue;
 8001f94:	bf00      	nop
	 while (startFlag) {
 8001f96:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <main+0xf40>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f47f a8b1 	bne.w	8001102 <main+0x9a>
 8001fa0:	e7f9      	b.n	8001f96 <main+0xf2e>
 8001fa2:	bf00      	nop
 8001fa4:	20000378 	.word	0x20000378
 8001fa8:	2000037c 	.word	0x2000037c

08001fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b096      	sub	sp, #88	@ 0x58
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2244      	movs	r2, #68	@ 0x44
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 fb1e 	bl	800b5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fd2:	f003 f867 	bl	80050a4 <HAL_PWREx_ControlVoltageScaling>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fdc:	f000 fca6 	bl	800292c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001fec:	2370      	movs	r3, #112	@ 0x70
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f907 	bl	800520c <HAL_RCC_OscConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002004:	f000 fc92 	bl	800292c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002008:	230f      	movs	r3, #15
 800200a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fd0d 	bl	8005a40 <HAL_RCC_ClockConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800202c:	f000 fc7e 	bl	800292c <Error_Handler>
  }
}
 8002030:	bf00      	nop
 8002032:	3758      	adds	r7, #88	@ 0x58
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0a6      	sub	sp, #152	@ 0x98
 800203c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2294      	movs	r2, #148	@ 0x94
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f009 fad9 	bl	800b5fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 800204a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800204e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002050:	2300      	movs	r3, #0
 8002052:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002054:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800205c:	2301      	movs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002064:	2308      	movs	r3, #8
 8002066:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002068:	2302      	movs	r3, #2
 800206a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <PeriphCommonClock_Config+0x5c>)
 8002076:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f003 ff9e 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002086:	f000 fc51 	bl	800292c <Error_Handler>
  }
}
 800208a:	bf00      	nop
 800208c:	3798      	adds	r7, #152	@ 0x98
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	01010000 	.word	0x01010000

08002098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020b0:	4a2a      	ldr	r2, [pc, #168]	@ (800215c <MX_ADC1_Init+0xc4>)
 80020b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80020b4:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020bc:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020d0:	2204      	movs	r2, #4
 80020d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020da:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020f0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020f6:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_ADC1_Init+0xc0>)
 80020f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <MX_ADC1_Init+0xc0>)
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_ADC1_Init+0xc0>)
 8002108:	2200      	movs	r2, #0
 800210a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <MX_ADC1_Init+0xc0>)
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002114:	4810      	ldr	r0, [pc, #64]	@ (8002158 <MX_ADC1_Init+0xc0>)
 8002116:	f001 f9fd 	bl	8003514 <HAL_ADC_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002120:	f000 fc04 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <MX_ADC1_Init+0xc8>)
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002128:	2306      	movs	r3, #6
 800212a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800212c:	2307      	movs	r3, #7
 800212e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002130:	237f      	movs	r3, #127	@ 0x7f
 8002132:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002134:	2304      	movs	r3, #4
 8002136:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_ADC1_Init+0xc0>)
 8002142:	f001 fbc5 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800214c:	f000 fbee 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000078 	.word	0x20000078
 800215c:	50040000 	.word	0x50040000
 8002160:	04300002 	.word	0x04300002

08002164 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800216a:	463b      	mov	r3, r7
 800216c:	2228      	movs	r2, #40	@ 0x28
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f009 fa43 	bl	800b5fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <MX_DAC1_Init+0x60>)
 8002178:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <MX_DAC1_Init+0x64>)
 800217a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800217c:	4811      	ldr	r0, [pc, #68]	@ (80021c4 <MX_DAC1_Init+0x60>)
 800217e:	f002 f9ce 	bl	800451e <HAL_DAC_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002188:	f000 fbd0 	bl	800292c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <MX_DAC1_Init+0x60>)
 80021ac:	f002 f9da 	bl	8004564 <HAL_DAC_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 80021b6:	f000 fbb9 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	@ 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000140 	.word	0x20000140
 80021c8:	40007400 	.word	0x40007400

080021cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021d2:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <MX_LPUART1_UART_Init+0x94>)
 80021d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80021d6:	4b21      	ldr	r3, [pc, #132]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002214:	4811      	ldr	r0, [pc, #68]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 8002216:	f007 fa51 	bl	80096bc <HAL_UART_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002220:	f000 fb84 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	480d      	ldr	r0, [pc, #52]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 8002228:	f007 ffe6 	bl	800a1f8 <HAL_UARTEx_SetTxFifoThreshold>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002232:	f000 fb7b 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002236:	2100      	movs	r1, #0
 8002238:	4808      	ldr	r0, [pc, #32]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 800223a:	f008 f81b 	bl	800a274 <HAL_UARTEx_SetRxFifoThreshold>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002244:	f000 fb72 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	@ (800225c <MX_LPUART1_UART_Init+0x90>)
 800224a:	f007 ff9c 	bl	800a186 <HAL_UARTEx_DisableFifoMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002254:	f000 fb6a 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000154 	.word	0x20000154
 8002260:	40008000 	.word	0x40008000

08002264 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002268:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <MX_SAI1_Init+0x60>)
 800226a:	4a17      	ldr	r2, [pc, #92]	@ (80022c8 <MX_SAI1_Init+0x64>)
 800226c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <MX_SAI1_Init+0x60>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <MX_SAI1_Init+0x60>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <MX_SAI1_Init+0x60>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002280:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <MX_SAI1_Init+0x60>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <MX_SAI1_Init+0x60>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800228c:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <MX_SAI1_Init+0x60>)
 800228e:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <MX_SAI1_Init+0x68>)
 8002290:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002292:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <MX_SAI1_Init+0x60>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002298:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <MX_SAI1_Init+0x60>)
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <MX_SAI1_Init+0x60>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022a4:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <MX_SAI1_Init+0x60>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80022aa:	2302      	movs	r3, #2
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <MX_SAI1_Init+0x60>)
 80022b2:	f005 fbcf 	bl	8007a54 <HAL_SAI_InitProtocol>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80022bc:	f000 fb36 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200001e8 	.word	0x200001e8
 80022c8:	40015404 	.word	0x40015404
 80022cc:	0002ee00 	.word	0x0002ee00

080022d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <MX_SPI1_Init+0x78>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e2:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fc:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <MX_SPI1_Init+0x74>)
 80022fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002302:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002304:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <MX_SPI1_Init+0x74>)
 8002306:	2228      	movs	r2, #40	@ 0x28
 8002308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <MX_SPI1_Init+0x74>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <MX_SPI1_Init+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <MX_SPI1_Init+0x74>)
 8002318:	2200      	movs	r2, #0
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <MX_SPI1_Init+0x74>)
 800231e:	2207      	movs	r2, #7
 8002320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <MX_SPI1_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <MX_SPI1_Init+0x74>)
 800232a:	2208      	movs	r2, #8
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <MX_SPI1_Init+0x74>)
 8002330:	f005 ff0e 	bl	8008150 <HAL_SPI_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800233a:	f000 faf7 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000027c 	.word	0x2000027c
 8002348:	40013000 	.word	0x40013000

0800234c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b09a      	sub	sp, #104	@ 0x68
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800236c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	615a      	str	r2, [r3, #20]
 800237e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	222c      	movs	r2, #44	@ 0x2c
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f009 f938 	bl	800b5fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800238c:	4b43      	ldr	r3, [pc, #268]	@ (800249c <MX_TIM1_Init+0x150>)
 800238e:	4a44      	ldr	r2, [pc, #272]	@ (80024a0 <MX_TIM1_Init+0x154>)
 8002390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 8002392:	4b42      	ldr	r3, [pc, #264]	@ (800249c <MX_TIM1_Init+0x150>)
 8002394:	22c2      	movs	r2, #194	@ 0xc2
 8002396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b40      	ldr	r3, [pc, #256]	@ (800249c <MX_TIM1_Init+0x150>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800239e:	4b3f      	ldr	r3, [pc, #252]	@ (800249c <MX_TIM1_Init+0x150>)
 80023a0:	2209      	movs	r2, #9
 80023a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a4:	4b3d      	ldr	r3, [pc, #244]	@ (800249c <MX_TIM1_Init+0x150>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023aa:	4b3c      	ldr	r3, [pc, #240]	@ (800249c <MX_TIM1_Init+0x150>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <MX_TIM1_Init+0x150>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b6:	4839      	ldr	r0, [pc, #228]	@ (800249c <MX_TIM1_Init+0x150>)
 80023b8:	f005 ff6d 	bl	8008296 <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023c2:	f000 fab3 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023d0:	4619      	mov	r1, r3
 80023d2:	4832      	ldr	r0, [pc, #200]	@ (800249c <MX_TIM1_Init+0x150>)
 80023d4:	f006 fb72 	bl	8008abc <HAL_TIM_ConfigClockSource>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023de:	f000 faa5 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80023e2:	482e      	ldr	r0, [pc, #184]	@ (800249c <MX_TIM1_Init+0x150>)
 80023e4:	f006 f81e 	bl	8008424 <HAL_TIM_OC_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023ee:	f000 fa9d 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023f2:	2320      	movs	r3, #32
 80023f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002402:	4619      	mov	r1, r3
 8002404:	4825      	ldr	r0, [pc, #148]	@ (800249c <MX_TIM1_Init+0x150>)
 8002406:	f007 f853 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002410:	f000 fa8c 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002414:	2300      	movs	r3, #0
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 5;
 8002418:	2305      	movs	r3, #5
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002430:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4818      	ldr	r0, [pc, #96]	@ (800249c <MX_TIM1_Init+0x150>)
 800243a:	f006 f9b1 	bl	80087a0 <HAL_TIM_OC_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002444:	f000 fa72 	bl	800292c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800245c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800246a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4807      	ldr	r0, [pc, #28]	@ (800249c <MX_TIM1_Init+0x150>)
 800247e:	f007 f89f 	bl	80095c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002488:	f000 fa50 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <MX_TIM1_Init+0x150>)
 800248e:	f000 fc97 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 8002492:	bf00      	nop
 8002494:	3768      	adds	r7, #104	@ 0x68
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002e0 	.word	0x200002e0
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	463b      	mov	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024ca:	4a23      	ldr	r2, [pc, #140]	@ (8002558 <MX_TIM4_Init+0xb4>)
 80024cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80024da:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024dc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80024e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ee:	4819      	ldr	r0, [pc, #100]	@ (8002554 <MX_TIM4_Init+0xb0>)
 80024f0:	f005 fff9 	bl	80084e6 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80024fa:	f000 fa17 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4811      	ldr	r0, [pc, #68]	@ (8002554 <MX_TIM4_Init+0xb0>)
 800250e:	f006 ffcf 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002518:	f000 fa08 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	@ 0x60
 800251e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002520:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002524:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	2204      	movs	r2, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	@ (8002554 <MX_TIM4_Init+0xb0>)
 8002536:	f006 f9ad 	bl	8008894 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002540:	f000 f9f4 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002544:	4803      	ldr	r0, [pc, #12]	@ (8002554 <MX_TIM4_Init+0xb0>)
 8002546:	f000 fc3b 	bl	8002dc0 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	@ 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000032c 	.word	0x2000032c
 8002558:	40000800 	.word	0x40000800

0800255c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <MX_DMA_Init+0x50>)
 8002564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <MX_DMA_Init+0x50>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6493      	str	r3, [r2, #72]	@ 0x48
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <MX_DMA_Init+0x50>)
 8002570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800257a:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MX_DMA_Init+0x50>)
 800257c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257e:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <MX_DMA_Init+0x50>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6493      	str	r3, [r2, #72]	@ 0x48
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MX_DMA_Init+0x50>)
 8002588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	200b      	movs	r0, #11
 8002598:	f001 ff8b 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800259c:	200b      	movs	r0, #11
 800259e:	f001 ffa4 	bl	80044ea <HAL_NVIC_EnableIRQ>

}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	@ 0x38
 80025b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c6:	4bb3      	ldr	r3, [pc, #716]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	4ab2      	ldr	r2, [pc, #712]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d2:	4bb0      	ldr	r3, [pc, #704]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	4bad      	ldr	r3, [pc, #692]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4aac      	ldr	r2, [pc, #688]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4baa      	ldr	r3, [pc, #680]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025f6:	4ba7      	ldr	r3, [pc, #668]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4aa6      	ldr	r2, [pc, #664]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 80025fc:	f043 0320 	orr.w	r3, r3, #32
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4ba4      	ldr	r3, [pc, #656]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800260e:	4ba1      	ldr	r3, [pc, #644]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4aa0      	ldr	r2, [pc, #640]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b9e      	ldr	r3, [pc, #632]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b9b      	ldr	r3, [pc, #620]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a9a      	ldr	r2, [pc, #616]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b98      	ldr	r3, [pc, #608]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b95      	ldr	r3, [pc, #596]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	4a94      	ldr	r2, [pc, #592]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264a:	4b92      	ldr	r3, [pc, #584]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002656:	4b8f      	ldr	r3, [pc, #572]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	4a8e      	ldr	r2, [pc, #568]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002662:	4b8c      	ldr	r3, [pc, #560]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800266e:	4b89      	ldr	r3, [pc, #548]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	4a88      	ldr	r2, [pc, #544]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 8002674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267a:	4b86      	ldr	r3, [pc, #536]	@ (8002894 <MX_GPIO_Init+0x2e4>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002686:	f002 fdb1 	bl	80051ec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800268a:	2200      	movs	r2, #0
 800268c:	2107      	movs	r1, #7
 800268e:	4882      	ldr	r0, [pc, #520]	@ (8002898 <MX_GPIO_Init+0x2e8>)
 8002690:	f002 fcb8 	bl	8005004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002694:	2307      	movs	r3, #7
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002698:	2312      	movs	r3, #18
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026a4:	2304      	movs	r3, #4
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	487b      	ldr	r0, [pc, #492]	@ (800289c <MX_GPIO_Init+0x2ec>)
 80026b0:	f002 fb16 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026b4:	2301      	movs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c4:	2301      	movs	r3, #1
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d2:	f002 fb05 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026d6:	2340      	movs	r3, #64	@ 0x40
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ee:	f002 faf7 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80026f2:	2307      	movs	r3, #7
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	4863      	ldr	r0, [pc, #396]	@ (8002898 <MX_GPIO_Init+0x2e8>)
 800270a:	f002 fae9 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002720:	2301      	movs	r3, #1
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	485b      	ldr	r0, [pc, #364]	@ (8002898 <MX_GPIO_Init+0x2e8>)
 800272c:	f002 fad8 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002730:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002742:	230d      	movs	r3, #13
 8002744:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4852      	ldr	r0, [pc, #328]	@ (8002898 <MX_GPIO_Init+0x2e8>)
 800274e:	f002 fac7 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002752:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002764:	230e      	movs	r3, #14
 8002766:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276c:	4619      	mov	r1, r3
 800276e:	484a      	ldr	r0, [pc, #296]	@ (8002898 <MX_GPIO_Init+0x2e8>)
 8002770:	f002 fab6 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002774:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002786:	2307      	movs	r3, #7
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278e:	4619      	mov	r1, r3
 8002790:	4843      	ldr	r0, [pc, #268]	@ (80028a0 <MX_GPIO_Init+0x2f0>)
 8002792:	f002 faa5 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002796:	2340      	movs	r3, #64	@ 0x40
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027a6:	230d      	movs	r3, #13
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	483c      	ldr	r0, [pc, #240]	@ (80028a4 <MX_GPIO_Init+0x2f4>)
 80027b2:	f002 fa95 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027c6:	2302      	movs	r3, #2
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ce:	4619      	mov	r1, r3
 80027d0:	4834      	ldr	r0, [pc, #208]	@ (80028a4 <MX_GPIO_Init+0x2f4>)
 80027d2:	f002 fa85 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80027d6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027e8:	230c      	movs	r3, #12
 80027ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f0:	4619      	mov	r1, r3
 80027f2:	482c      	ldr	r0, [pc, #176]	@ (80028a4 <MX_GPIO_Init+0x2f4>)
 80027f4:	f002 fa74 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80027f8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800280a:	230a      	movs	r3, #10
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002818:	f002 fa62 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800281c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002834:	f002 fa54 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002848:	2309      	movs	r3, #9
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	4813      	ldr	r0, [pc, #76]	@ (80028a0 <MX_GPIO_Init+0x2f0>)
 8002854:	f002 fa44 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002858:	2304      	movs	r3, #4
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002868:	230c      	movs	r3, #12
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <MX_GPIO_Init+0x2f0>)
 8002874:	f002 fa34 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002878:	2378      	movs	r3, #120	@ 0x78
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002888:	2307      	movs	r3, #7
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002890:	e00a      	b.n	80028a8 <MX_GPIO_Init+0x2f8>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	48000400 	.word	0x48000400
 800289c:	48001400 	.word	0x48001400
 80028a0:	48000c00 	.word	0x48000c00
 80028a4:	48000800 	.word	0x48000800
 80028a8:	4619      	mov	r1, r3
 80028aa:	481e      	ldr	r0, [pc, #120]	@ (8002924 <MX_GPIO_Init+0x374>)
 80028ac:	f002 fa18 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80028b0:	2338      	movs	r3, #56	@ 0x38
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028c0:	2306      	movs	r3, #6
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4817      	ldr	r0, [pc, #92]	@ (8002928 <MX_GPIO_Init+0x378>)
 80028cc:	f002 fa08 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028d0:	2340      	movs	r3, #64	@ 0x40
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d4:	2303      	movs	r3, #3
 80028d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4811      	ldr	r0, [pc, #68]	@ (8002928 <MX_GPIO_Init+0x378>)
 80028e4:	f002 f9fc 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ee:	2312      	movs	r3, #18
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028fa:	2304      	movs	r3, #4
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002902:	4619      	mov	r1, r3
 8002904:	4808      	ldr	r0, [pc, #32]	@ (8002928 <MX_GPIO_Init+0x378>)
 8002906:	f002 f9eb 	bl	8004ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2017      	movs	r0, #23
 8002910:	f001 fdcf 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002914:	2017      	movs	r0, #23
 8002916:	f001 fde8 	bl	80044ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291a:	bf00      	nop
 800291c:	3738      	adds	r7, #56	@ 0x38
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	48000c00 	.word	0x48000c00
 8002928:	48000400 	.word	0x48000400

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <Error_Handler+0x8>

08002938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <HAL_MspInit+0x44>)
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	4a0e      	ldr	r2, [pc, #56]	@ (800297c <HAL_MspInit+0x44>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6613      	str	r3, [r2, #96]	@ 0x60
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <HAL_MspInit+0x44>)
 800294c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_MspInit+0x44>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	4a08      	ldr	r2, [pc, #32]	@ (800297c <HAL_MspInit+0x44>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	@ 0x58
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_MspInit+0x44>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a37      	ldr	r2, [pc, #220]	@ (8002a7c <HAL_ADC_MspInit+0xfc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d168      	bne.n	8002a74 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a6:	4a36      	ldr	r2, [pc, #216]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ae:	4b34      	ldr	r3, [pc, #208]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	4a30      	ldr	r2, [pc, #192]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_ADC_MspInit+0x100>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029ea:	233f      	movs	r3, #63	@ 0x3f
 80029ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80029ee:	230b      	movs	r3, #11
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4821      	ldr	r0, [pc, #132]	@ (8002a84 <HAL_ADC_MspInit+0x104>)
 80029fe:	f002 f96f 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002a02:	230a      	movs	r3, #10
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a06:	230b      	movs	r3, #11
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a18:	f002 f962 	bl	8004ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a8c <HAL_ADC_MspInit+0x10c>)
 8002a20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a24:	2205      	movs	r2, #5
 8002a26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a34:	4b14      	ldr	r3, [pc, #80]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a52:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002a56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a58:	480b      	ldr	r0, [pc, #44]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a5a:	f001 fecf 	bl	80047fc <HAL_DMA_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002a64:	f7ff ff62 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a6e:	4a06      	ldr	r2, [pc, #24]	@ (8002a88 <HAL_ADC_MspInit+0x108>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	@ 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	50040000 	.word	0x50040000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	48000800 	.word	0x48000800
 8002a88:	200000e0 	.word	0x200000e0
 8002a8c:	40020008 	.word	0x40020008

08002a90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <HAL_DAC_MspInit+0x74>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d124      	bne.n	8002afc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002ab8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_DAC_MspInit+0x78>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af8:	f002 f8f2 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002afc:	bf00      	nop
 8002afe:	3728      	adds	r7, #40	@ 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40007400 	.word	0x40007400
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0ae      	sub	sp, #184	@ 0xb8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	2294      	movs	r2, #148	@ 0x94
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f008 fd65 	bl	800b5fc <memset>
  if(huart->Instance==LPUART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_UART_MspInit+0xb4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d13d      	bne.n	8002bb8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fa37 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b54:	f7ff feea 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b64:	4b17      	ldr	r3, [pc, #92]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <HAL_UART_MspInit+0xb8>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002b88:	f002 fb30 	bl	80051ec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <HAL_UART_MspInit+0xbc>)
 8002bb4:	f002 f894 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002bb8:	bf00      	nop
 8002bba:	37b8      	adds	r7, #184	@ 0xb8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40008000 	.word	0x40008000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	48001800 	.word	0x48001800

08002bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_SPI_MspInit+0x7c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d128      	bne.n	8002c40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002bf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_SPI_MspInit+0x80>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002c1e:	23a0      	movs	r3, #160	@ 0xa0
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c2e:	2305      	movs	r3, #5
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	4619      	mov	r1, r3
 8002c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c3c:	f002 f850 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c40:	bf00      	nop
 8002c42:	3728      	adds	r7, #40	@ 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40013000 	.word	0x40013000
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d139      	bne.n	8002ce6 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c76:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8e:	4a19      	ldr	r2, [pc, #100]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c90:	f043 0310 	orr.w	r3, r3, #16
 8002c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c96:	4b17      	ldr	r3, [pc, #92]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002ca2:	f44f 532a 	mov.w	r3, #10880	@ 0x2a80
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480e      	ldr	r0, [pc, #56]	@ (8002cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8002cc0:	f002 f80e 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002cc4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8002ce2:	f001 fffd 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ce6:	bf00      	nop
 8002ce8:	3728      	adds	r7, #40	@ 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	48001000 	.word	0x48001000

08002cfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	@ 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a25      	ldr	r2, [pc, #148]	@ (8002db0 <HAL_TIM_PWM_MspInit+0xb4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d144      	bne.n	8002da8 <HAL_TIM_PWM_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d1e:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	4a24      	ldr	r2, [pc, #144]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	480d      	ldr	r0, [pc, #52]	@ (8002db8 <HAL_TIM_PWM_MspInit+0xbc>)
 8002d84:	f001 ffac 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	@ (8002dbc <HAL_TIM_PWM_MspInit+0xc0>)
 8002da4:	f001 ff9c 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	@ 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40021000 	.word	0x40021000
 8002db8:	48000c00 	.word	0x48000c00
 8002dbc:	48001000 	.word	0x48001000

08002dc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_TIM_MspPostInit+0xac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11d      	bne.n	8002e1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de2:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	4a22      	ldr	r2, [pc, #136]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8002dfa:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	4817      	ldr	r0, [pc, #92]	@ (8002e74 <HAL_TIM_MspPostInit+0xb4>)
 8002e18:	f001 ff62 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e1c:	e021      	b.n	8002e62 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a15      	ldr	r2, [pc, #84]	@ (8002e78 <HAL_TIM_MspPostInit+0xb8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d11c      	bne.n	8002e62 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	4a10      	ldr	r2, [pc, #64]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e34:	4b0e      	ldr	r3, [pc, #56]	@ (8002e70 <HAL_TIM_MspPostInit+0xb0>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e52:	2302      	movs	r3, #2
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4807      	ldr	r0, [pc, #28]	@ (8002e7c <HAL_TIM_MspPostInit+0xbc>)
 8002e5e:	f001 ff3f 	bl	8004ce0 <HAL_GPIO_Init>
}
 8002e62:	bf00      	nop
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	48001000 	.word	0x48001000
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	48000c00 	.word	0x48000c00

08002e80 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_SAI_MspInit+0x84>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d134      	bne.n	8002efc <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002e92:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_SAI_MspInit+0x88>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10b      	bne.n	8002eb2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_SAI_MspInit+0x8c>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_SAI_MspInit+0x8c>)
 8002ea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ea6:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_SAI_MspInit+0x8c>)
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_SAI_MspInit+0x88>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	4a13      	ldr	r2, [pc, #76]	@ (8002f08 <HAL_SAI_MspInit+0x88>)
 8002eba:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002ebc:	237c      	movs	r3, #124	@ 0x7c
 8002ebe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ecc:	230d      	movs	r3, #13
 8002ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	480e      	ldr	r0, [pc, #56]	@ (8002f10 <HAL_SAI_MspInit+0x90>)
 8002ed8:	f001 ff02 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002eec:	230d      	movs	r3, #13
 8002eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4807      	ldr	r0, [pc, #28]	@ (8002f14 <HAL_SAI_MspInit+0x94>)
 8002ef8:	f001 fef2 	bl	8004ce0 <HAL_GPIO_Init>

    }
}
 8002efc:	bf00      	nop
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40015404 	.word	0x40015404
 8002f08:	20000380 	.word	0x20000380
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48001400 	.word	0x48001400

08002f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <NMI_Handler+0x4>

08002f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <HardFault_Handler+0x4>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <MemManage_Handler+0x4>

08002f30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <BusFault_Handler+0x4>

08002f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <UsageFault_Handler+0x4>

08002f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6e:	f000 f8b3 	bl	80030d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f7c:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <DMA1_Channel1_IRQHandler+0x10>)
 8002f7e:	f001 fd60 	bl	8004a42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200000e0 	.word	0x200000e0

08002f8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  for (int i = 0; i < 90000; i++);
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	e002      	b.n	8002f9e <EXTI9_5_IRQHandler+0x12>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <EXTI9_5_IRQHandler+0x28>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	ddf8      	ble.n	8002f98 <EXTI9_5_IRQHandler+0xc>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002fa6:	2040      	movs	r0, #64	@ 0x40
 8002fa8:	f002 f844 	bl	8005034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	00015f8f 	.word	0x00015f8f

08002fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <SystemInit+0x20>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <SystemInit+0x20>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003014 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe0:	f7ff ffea 	bl	8002fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe4:	480c      	ldr	r0, [pc, #48]	@ (8003018 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fe6:	490d      	ldr	r1, [pc, #52]	@ (800301c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8003020 <LoopForever+0xe>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fec:	e002      	b.n	8002ff4 <LoopCopyDataInit>

08002fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff2:	3304      	adds	r3, #4

08002ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff8:	d3f9      	bcc.n	8002fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <LoopForever+0x16>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003000:	e001      	b.n	8003006 <LoopFillZerobss>

08003002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003004:	3204      	adds	r2, #4

08003006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003008:	d3fb      	bcc.n	8003002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300a:	f008 fb05 	bl	800b618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800300e:	f7fe f82b 	bl	8001068 <main>

08003012 <LoopForever>:

LoopForever:
    b LoopForever
 8003012:	e7fe      	b.n	8003012 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003014:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003020:	0801f6b4 	.word	0x0801f6b4
  ldr r2, =_sbss
 8003024:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003028:	200004c0 	.word	0x200004c0

0800302c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC1_IRQHandler>

0800302e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003038:	2003      	movs	r0, #3
 800303a:	f001 fa2f 	bl	800449c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800303e:	2000      	movs	r0, #0
 8003040:	f000 f80e 	bl	8003060 <HAL_InitTick>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	71fb      	strb	r3, [r7, #7]
 800304e:	e001      	b.n	8003054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003050:	f7ff fc72 	bl	8002938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003054:	79fb      	ldrb	r3, [r7, #7]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800306c:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <HAL_InitTick+0x6c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003074:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <HAL_InitTick+0x70>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_InitTick+0x6c>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003082:	fbb3 f3f1 	udiv	r3, r3, r1
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f001 fa3b 	bl	8004506 <HAL_SYSTICK_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d809      	bhi.n	80030b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800309c:	2200      	movs	r2, #0
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f001 fa05 	bl	80044b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030a8:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <HAL_InitTick+0x74>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e007      	b.n	80030c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e004      	b.n	80030c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e001      	b.n	80030c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000008 	.word	0x20000008
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000008 	.word	0x20000008
 80030fc:	20000384 	.word	0x20000384

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	@ (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000384 	.word	0x20000384

08003118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff ffee 	bl	8003100 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d005      	beq.n	800313e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003132:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <HAL_Delay+0x44>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800313e:	bf00      	nop
 8003140:	f7ff ffde 	bl	8003100 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d8f7      	bhi.n	8003140 <HAL_Delay+0x28>
  {
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000008 	.word	0x20000008

08003160 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3360      	adds	r3, #96	@ 0x60
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <LL_ADC_SetOffset+0x44>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	03fff000 	.word	0x03fff000

08003210 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3360      	adds	r3, #96	@ 0x60
 800321e:	461a      	mov	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3360      	adds	r3, #96	@ 0x60
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	431a      	orrs	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	615a      	str	r2, [r3, #20]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3330      	adds	r3, #48	@ 0x30
 80032ce:	461a      	mov	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	211f      	movs	r1, #31
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 011f 	and.w	r1, r3, #31
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003316:	b480      	push	{r7}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3314      	adds	r3, #20
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0e5b      	lsrs	r3, r3, #25
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	4413      	add	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0d1b      	lsrs	r3, r3, #20
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2107      	movs	r1, #7
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	401a      	ands	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0d1b      	lsrs	r3, r3, #20
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	431a      	orrs	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0318 	and.w	r3, r3, #24
 800338e:	4908      	ldr	r1, [pc, #32]	@ (80033b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003390:	40d9      	lsrs	r1, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	400b      	ands	r3, r1
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	431a      	orrs	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	0007ffff 	.word	0x0007ffff

080033b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6093      	str	r3, [r2, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ec:	d101      	bne.n	80033f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003414:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800343c:	d101      	bne.n	8003442 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <LL_ADC_IsEnabled+0x18>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <LL_ADC_IsEnabled+0x1a>
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b2:	f043 0204 	orr.w	r2, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d101      	bne.n	80034de <LL_ADC_REG_IsConversionOngoing+0x18>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d101      	bne.n	8003504 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e129      	b.n	8003782 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fa1f 	bl	8002980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff3f 	bl	80033d8 <LL_ADC_IsDeepPowerDownEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d004      	beq.n	800356a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff25 	bl	80033b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff5a 	bl	8003428 <LL_ADC_IsInternalRegulatorEnabled>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff3e 	bl	8003400 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003584:	4b81      	ldr	r3, [pc, #516]	@ (800378c <HAL_ADC_Init+0x278>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	4a81      	ldr	r2, [pc, #516]	@ (8003790 <HAL_ADC_Init+0x27c>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003598:	e002      	b.n	80035a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b01      	subs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f9      	bne.n	800359a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff3c 	bl	8003428 <LL_ADC_IsInternalRegulatorEnabled>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff75 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 80035dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 80c2 	bne.w	8003770 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 80be 	bne.w	8003770 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff35 	bl	8003478 <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003614:	485f      	ldr	r0, [pc, #380]	@ (8003794 <HAL_ADC_Init+0x280>)
 8003616:	f7ff ff2f 	bl	8003478 <LL_ADC_IsEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4619      	mov	r1, r3
 8003626:	485c      	ldr	r0, [pc, #368]	@ (8003798 <HAL_ADC_Init+0x284>)
 8003628:	f7ff fd9a 	bl	8003160 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7e5b      	ldrb	r3, [r3, #25]
 8003630:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003636:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800363c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003642:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	3b01      	subs	r3, #1
 8003660:	045b      	lsls	r3, r3, #17
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_ADC_Init+0x288>)
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	430b      	orrs	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff25 	bl	80034ec <LL_ADC_INJ_IsConversionOngoing>
 80036a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d140      	bne.n	800372c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d13d      	bne.n	800372c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7e1b      	ldrb	r3, [r3, #24]
 80036b8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036ba:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036d2:	f023 0306 	bic.w	r3, r3, #6
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	430b      	orrs	r3, r1
 80036de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d118      	bne.n	800371c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800370c:	430a      	orrs	r2, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e007      	b.n	800372c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10c      	bne.n	800374e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f023 010f 	bic.w	r1, r3, #15
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
 800374c:	e007      	b.n	800375e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 020f 	bic.w	r2, r2, #15
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	@ 0x58
 800376e:	e007      	b.n	8003780 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	f043 0210 	orr.w	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003780:	7ffb      	ldrb	r3, [r7, #31]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000000 	.word	0x20000000
 8003790:	053e2d63 	.word	0x053e2d63
 8003794:	50040000 	.word	0x50040000
 8003798:	50040300 	.word	0x50040300
 800379c:	fff0c007 	.word	0xfff0c007

080037a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fe88 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d167      	bne.n	800388c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_Start_DMA+0x2a>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e063      	b.n	8003892 <HAL_ADC_Start_DMA+0xf2>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fc78 	bl	80040c8 <ADC_Enable>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d14f      	bne.n	8003882 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f023 0206 	bic.w	r2, r3, #6
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800380e:	e002      	b.n	8003816 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	4a20      	ldr	r2, [pc, #128]	@ (800389c <HAL_ADC_Start_DMA+0xfc>)
 800381c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <HAL_ADC_Start_DMA+0x100>)
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <HAL_ADC_Start_DMA+0x104>)
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	221c      	movs	r2, #28
 8003834:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0210 	orr.w	r2, r2, #16
 800384c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3340      	adds	r3, #64	@ 0x40
 8003868:	4619      	mov	r1, r3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f001 f86d 	bl	800494c <HAL_DMA_Start_IT>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fe0f 	bl	800349e <LL_ADC_REG_StartConversion>
 8003880:	e006      	b.n	8003890 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800388a:	e001      	b.n	8003890 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800388c:	2302      	movs	r3, #2
 800388e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	080041d5 	.word	0x080041d5
 80038a0:	080042ad 	.word	0x080042ad
 80038a4:	080042c9 	.word	0x080042c9

080038a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0b6      	sub	sp, #216	@ 0xd8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x22>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e3d5      	b.n	800409e <HAL_ADC_ConfigChannel+0x7ce>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fde1 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 83ba 	bne.w	8004080 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b05      	cmp	r3, #5
 800391a:	d824      	bhi.n	8003966 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	3b02      	subs	r3, #2
 8003922:	2b03      	cmp	r3, #3
 8003924:	d81b      	bhi.n	800395e <HAL_ADC_ConfigChannel+0x8e>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_ADC_ConfigChannel+0x5c>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003945 	.word	0x08003945
 8003934:	0800394d 	.word	0x0800394d
 8003938:	08003955 	.word	0x08003955
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800393c:	230c      	movs	r3, #12
 800393e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003942:	e010      	b.n	8003966 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003944:	2312      	movs	r3, #18
 8003946:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800394a:	e00c      	b.n	8003966 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800394c:	2318      	movs	r3, #24
 800394e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003952:	e008      	b.n	8003966 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800395c:	e003      	b.n	8003966 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800395e:	2306      	movs	r3, #6
 8003960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003964:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003974:	f7ff fca3 	bl	80032be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fda2 	bl	80034c6 <LL_ADC_REG_IsConversionOngoing>
 8003982:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fdae 	bl	80034ec <LL_ADC_INJ_IsConversionOngoing>
 8003990:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 81bf 	bne.w	8003d1c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800399e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 81ba 	bne.w	8003d1c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039b0:	d10f      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	4619      	mov	r1, r3
 80039be:	f7ff fcaa 	bl	8003316 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fc51 	bl	8003272 <LL_ADC_SetSamplingTimeCommonConfig>
 80039d0:	e00e      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7ff fc99 	bl	8003316 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fc41 	bl	8003272 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00a      	beq.n	8003a28 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a22:	f7ff fbd1 	bl	80031c8 <LL_ADC_SetOffset>
 8003a26:	e179      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fbee 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x184>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fbe3 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	f003 021f 	and.w	r2, r3, #31
 8003a52:	e01e      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x1c2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fbd8 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003a82:	2320      	movs	r3, #32
 8003a84:	e004      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x1da>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	e018      	b.n	8003adc <HAL_ADC_ConfigChannel+0x20c>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003ac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003ace:	2320      	movs	r3, #32
 8003ad0:	e004      	b.n	8003adc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003ad2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d106      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fba7 	bl	800323c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fb8b 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x24a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fb80 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	e01e      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x288>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fb75 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003b48:	2320      	movs	r3, #32
 8003b4a:	e004      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x2a0>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	e018      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x2d2>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e004      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d106      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fb44 	bl	800323c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2102      	movs	r1, #2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fb28 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x310>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fb1d 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 021f 	and.w	r2, r3, #31
 8003bde:	e01e      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x34e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fb12 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003c0e:	2320      	movs	r3, #32
 8003c10:	e004      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x366>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e9b      	lsrs	r3, r3, #26
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	e014      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x390>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e004      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d106      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fae5 	bl	800323c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2103      	movs	r1, #3
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fac9 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x3ce>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2103      	movs	r1, #3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fabe 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	e017      	b.n	8003cce <HAL_ADC_ConfigChannel+0x3fe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fab3 	bl	8003210 <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cb0:	fa93 f3a3 	rbit	r3, r3
 8003cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	e003      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x416>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	e011      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x43a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003cf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e003      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d106      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2103      	movs	r1, #3
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fa90 	bl	800323c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fba9 	bl	8003478 <LL_ADC_IsEnabled>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 813f 	bne.w	8003fac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7ff fb16 	bl	800336c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a8e      	ldr	r2, [pc, #568]	@ (8003f80 <HAL_ADC_ConfigChannel+0x6b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f040 8130 	bne.w	8003fac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x4a4>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	3301      	adds	r3, #1
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e019      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4d8>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2b09      	cmp	r3, #9
 8003da0:	bf94      	ite	ls
 8003da2:	2301      	movls	r3, #1
 8003da4:	2300      	movhi	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d079      	beq.n	8003ea0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x4f8>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	069b      	lsls	r3, r3, #26
 8003dc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc6:	e015      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x524>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e003      	b.n	8003dec <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	069b      	lsls	r3, r3, #26
 8003df0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x544>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	3301      	adds	r3, #1
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	e017      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x574>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e24:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	e003      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x59a>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	0e9b      	lsrs	r3, r3, #26
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	051b      	lsls	r3, r3, #20
 8003e68:	e018      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x5cc>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003e82:	2320      	movs	r3, #32
 8003e84:	e003      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	e080      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x5ec>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	069b      	lsls	r3, r3, #26
 8003eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eba:	e015      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x618>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e003      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	069b      	lsls	r3, r3, #26
 8003ee4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x638>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	3301      	adds	r3, #1
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	e017      	b.n	8003f38 <HAL_ADC_ConfigChannel+0x668>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	61bb      	str	r3, [r7, #24]
  return result;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003f20:	2320      	movs	r3, #32
 8003f22:	e003      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2101      	movs	r1, #1
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	ea42 0103 	orr.w	r1, r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x694>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0e9b      	lsrs	r3, r3, #26
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	3b1e      	subs	r3, #30
 8003f5c:	051b      	lsls	r3, r3, #20
 8003f5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	e01d      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x6d0>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	fa93 f3a3 	rbit	r3, r3
 8003f70:	60fb      	str	r3, [r7, #12]
  return result;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e005      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x6bc>
 8003f80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f003 021f 	and.w	r2, r3, #31
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	3b1e      	subs	r3, #30
 8003f9a:	051b      	lsls	r3, r3, #20
 8003f9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7ff f9b5 	bl	8003316 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80040a8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d06c      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fb8:	483c      	ldr	r0, [pc, #240]	@ (80040ac <HAL_ADC_ConfigChannel+0x7dc>)
 8003fba:	f7ff f8f7 	bl	80031ac <LL_ADC_GetCommonPathInternalCh>
 8003fbe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80040b0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d127      	bne.n	800401c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d121      	bne.n	800401c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a35      	ldr	r2, [pc, #212]	@ (80040b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d157      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fea:	4619      	mov	r1, r3
 8003fec:	482f      	ldr	r0, [pc, #188]	@ (80040ac <HAL_ADC_ConfigChannel+0x7dc>)
 8003fee:	f7ff f8ca 	bl	8003186 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff2:	4b31      	ldr	r3, [pc, #196]	@ (80040b8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_ADC_ConfigChannel+0x7ec>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800400c:	e002      	b.n	8004014 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3b01      	subs	r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f9      	bne.n	800400e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800401a:	e03a      	b.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a27      	ldr	r2, [pc, #156]	@ (80040c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d113      	bne.n	800404e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800402a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1f      	ldr	r2, [pc, #124]	@ (80040b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d12a      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800403c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004044:	4619      	mov	r1, r3
 8004046:	4819      	ldr	r0, [pc, #100]	@ (80040ac <HAL_ADC_ConfigChannel+0x7dc>)
 8004048:	f7ff f89d 	bl	8003186 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800404c:	e021      	b.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1c      	ldr	r2, [pc, #112]	@ (80040c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d11c      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800405c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a12      	ldr	r2, [pc, #72]	@ (80040b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d111      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800406e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004072:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004076:	4619      	mov	r1, r3
 8004078:	480c      	ldr	r0, [pc, #48]	@ (80040ac <HAL_ADC_ConfigChannel+0x7dc>)
 800407a:	f7ff f884 	bl	8003186 <LL_ADC_SetCommonPathInternalCh>
 800407e:	e008      	b.n	8004092 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800409a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	37d8      	adds	r7, #216	@ 0xd8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	80080000 	.word	0x80080000
 80040ac:	50040300 	.word	0x50040300
 80040b0:	c7520000 	.word	0xc7520000
 80040b4:	50040000 	.word	0x50040000
 80040b8:	20000000 	.word	0x20000000
 80040bc:	053e2d63 	.word	0x053e2d63
 80040c0:	cb840000 	.word	0xcb840000
 80040c4:	80000001 	.word	0x80000001

080040c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f9cd 	bl	8003478 <LL_ADC_IsEnabled>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d169      	bne.n	80041b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <ADC_Enable+0xfc>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f6:	f043 0210 	orr.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	f043 0201 	orr.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e055      	b.n	80041ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff f99c 	bl	8003450 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004118:	482b      	ldr	r0, [pc, #172]	@ (80041c8 <ADC_Enable+0x100>)
 800411a:	f7ff f847 	bl	80031ac <LL_ADC_GetCommonPathInternalCh>
 800411e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004128:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <ADC_Enable+0x104>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <ADC_Enable+0x108>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004142:	e002      	b.n	800414a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004150:	f7fe ffd6 	bl	8003100 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004156:	e028      	b.n	80041aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff f98b 	bl	8003478 <LL_ADC_IsEnabled>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff f96f 	bl	8003450 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004172:	f7fe ffc5 	bl	8003100 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d914      	bls.n	80041aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d00d      	beq.n	80041aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004192:	f043 0210 	orr.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e007      	b.n	80041ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d1cf      	bne.n	8004158 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	8000003f 	.word	0x8000003f
 80041c8:	50040300 	.word	0x50040300
 80041cc:	20000000 	.word	0x20000000
 80041d0:	053e2d63 	.word	0x053e2d63

080041d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d14b      	bne.n	8004286 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d021      	beq.n	800424c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f843 	bl	8003298 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d032      	beq.n	800427e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d12b      	bne.n	800427e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11f      	bne.n	800427e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	659a      	str	r2, [r3, #88]	@ 0x58
 800424a:	e018      	b.n	800427e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d111      	bne.n	800427e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7fc fe24 	bl	8000ecc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004284:	e00e      	b.n	80042a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fb12 	bl	80038bc <HAL_ADC_ErrorCallback>
}
 8004298:	e004      	b.n	80042a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff faf4 	bl	80038a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fae4 	bl	80038bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <__NVIC_SetPriorityGrouping+0x44>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004318:	4013      	ands	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800432e:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <__NVIC_SetPriorityGrouping+0x44>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60d3      	str	r3, [r2, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <__NVIC_GetPriorityGrouping+0x18>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	f003 0307 	and.w	r3, r3, #7
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	db0b      	blt.n	800438a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	f003 021f 	and.w	r2, r3, #31
 8004378:	4907      	ldr	r1, [pc, #28]	@ (8004398 <__NVIC_EnableIRQ+0x38>)
 800437a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2001      	movs	r0, #1
 8004382:	fa00 f202 	lsl.w	r2, r0, r2
 8004386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	@ (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	@ (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	@ 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004468:	d301      	bcc.n	800446e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446e:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <SysTick_Config+0x40>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004476:	210f      	movs	r1, #15
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f7ff ff8e 	bl	800439c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <SysTick_Config+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004486:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <SysTick_Config+0x40>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000e010 	.word	0xe000e010

0800449c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff29 	bl	80042fc <__NVIC_SetPriorityGrouping>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044c4:	f7ff ff3e 	bl	8004344 <__NVIC_GetPriorityGrouping>
 80044c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f7ff ff8e 	bl	80043f0 <NVIC_EncodePriority>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff5d 	bl	800439c <__NVIC_SetPriority>
}
 80044e2:	bf00      	nop
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff31 	bl	8004360 <__NVIC_EnableIRQ>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ffa2 	bl	8004458 <SysTick_Config>
 8004514:	4603      	mov	r3, r0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e014      	b.n	800455a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	791b      	ldrb	r3, [r3, #4]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe faa5 	bl	8002a90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	795b      	ldrb	r3, [r3, #5]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_DAC_ConfigChannel+0x1c>
 800457c:	2302      	movs	r3, #2
 800457e:	e137      	b.n	80047f0 <HAL_DAC_ConfigChannel+0x28c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2202      	movs	r2, #2
 800458a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b04      	cmp	r3, #4
 8004592:	f040 8081 	bne.w	8004698 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004596:	f7fe fdb3 	bl	8003100 <HAL_GetTick>
 800459a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d140      	bne.n	8004624 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045a2:	e018      	b.n	80045d6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045a4:	f7fe fdac 	bl	8003100 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d911      	bls.n	80045d6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f043 0208 	orr.w	r2, r3, #8
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2203      	movs	r2, #3
 80045d0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e10c      	b.n	80047f0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1df      	bne.n	80045a4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7fe fd97 	bl	8003118 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	69d2      	ldr	r2, [r2, #28]
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80045f4:	e023      	b.n	800463e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045f6:	f7fe fd83 	bl	8003100 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d90f      	bls.n	8004624 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	da0a      	bge.n	8004624 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f043 0208 	orr.w	r2, r3, #8
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2203      	movs	r2, #3
 800461e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0e5      	b.n	80047f0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	2b00      	cmp	r3, #0
 800462c:	dbe3      	blt.n	80045f6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800462e:	2001      	movs	r0, #1
 8004630:	f7fe fd72 	bl	8003118 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	69d2      	ldr	r2, [r2, #28]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	ea02 0103 	and.w	r1, r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	409a      	lsls	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	21ff      	movs	r1, #255	@ 0xff
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	ea02 0103 	and.w	r1, r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d11d      	bne.n	80046dc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	221f      	movs	r2, #31
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2207      	movs	r2, #7
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	431a      	orrs	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	4313      	orrs	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43da      	mvns	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	400a      	ands	r2, r1
 8004740:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	4013      	ands	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	4313      	orrs	r3, r2
 8004776:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004780:	d104      	bne.n	800478c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e018      	b.n	80047be <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e00f      	b.n	80047be <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800479e:	f001 fb15 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 80047a2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4a14      	ldr	r2, [pc, #80]	@ (80047f8 <HAL_DAC_ConfigChannel+0x294>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d904      	bls.n	80047b6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	e003      	b.n	80047be <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047bc:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	22c0      	movs	r2, #192	@ 0xc0
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43da      	mvns	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	400a      	ands	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	04c4b400 	.word	0x04c4b400

080047fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e08d      	b.n	800492a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_DMA_Init+0x138>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d80f      	bhi.n	800483a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	4b45      	ldr	r3, [pc, #276]	@ (8004938 <HAL_DMA_Init+0x13c>)
 8004822:	4413      	add	r3, r2
 8004824:	4a45      	ldr	r2, [pc, #276]	@ (800493c <HAL_DMA_Init+0x140>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a42      	ldr	r2, [pc, #264]	@ (8004940 <HAL_DMA_Init+0x144>)
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40
 8004838:	e00e      	b.n	8004858 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b40      	ldr	r3, [pc, #256]	@ (8004944 <HAL_DMA_Init+0x148>)
 8004842:	4413      	add	r3, r2
 8004844:	4a3d      	ldr	r2, [pc, #244]	@ (800493c <HAL_DMA_Init+0x140>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	009a      	lsls	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a3c      	ldr	r2, [pc, #240]	@ (8004948 <HAL_DMA_Init+0x14c>)
 8004856:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800487c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9b6 	bl	8004c1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048b8:	d102      	bne.n	80048c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_DMA_Init+0x104>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d80c      	bhi.n	8004900 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9d6 	bl	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	e008      	b.n	8004912 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40020407 	.word	0x40020407
 8004938:	bffdfff8 	.word	0xbffdfff8
 800493c:	cccccccd 	.word	0xcccccccd
 8004940:	40020000 	.word	0x40020000
 8004944:	bffdfbf8 	.word	0xbffdfbf8
 8004948:	40020400 	.word	0x40020400

0800494c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_DMA_Start_IT+0x20>
 8004968:	2302      	movs	r3, #2
 800496a:	e066      	b.n	8004a3a <HAL_DMA_Start_IT+0xee>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d155      	bne.n	8004a2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f8fb 	bl	8004ba0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 020e 	orr.w	r2, r2, #14
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00f      	b.n	80049e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0204 	bic.w	r2, r2, #4
 80049d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 020a 	orr.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a18:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e005      	b.n	8004a38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
 8004a36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	f003 031c 	and.w	r3, r3, #28
 8004a62:	2204      	movs	r2, #4
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d026      	beq.n	8004abc <HAL_DMA_IRQHandler+0x7a>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d021      	beq.n	8004abc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d107      	bne.n	8004a96 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0204 	bic.w	r2, r2, #4
 8004a94:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f003 021c 	and.w	r2, r3, #28
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d071      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004aba:	e06c      	b.n	8004b96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac0:	f003 031c 	and.w	r3, r3, #28
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02e      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xec>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d029      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 020a 	bic.w	r2, r2, #10
 8004af6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	f003 021c 	and.w	r2, r3, #28
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d038      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b2c:	e033      	b.n	8004b96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f003 031c 	and.w	r3, r3, #28
 8004b36:	2208      	movs	r2, #8
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02a      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x156>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d025      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 020e 	bic.w	r2, r2, #14
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	f003 021c 	and.w	r2, r3, #28
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	2101      	movs	r1, #1
 8004b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
}
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bb6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bc8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f003 021c 	and.w	r2, r3, #28
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d108      	bne.n	8004c00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bfe:	e007      	b.n	8004c10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d80a      	bhi.n	8004c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c3c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6493      	str	r3, [r2, #72]	@ 0x48
 8004c44:	e007      	b.n	8004c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	009a      	lsls	r2, r3, #2
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	3b08      	subs	r3, #8
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2201      	movs	r2, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40020407 	.word	0x40020407
 8004c8c:	4002081c 	.word	0x4002081c
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	40020880 	.word	0x40020880

08004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	1000823f 	.word	0x1000823f
 8004cdc:	40020940 	.word	0x40020940

08004ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cee:	e166      	b.n	8004fbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8158 	beq.w	8004fb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d005      	beq.n	8004d20 <HAL_GPIO_Init+0x40>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d130      	bne.n	8004d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d56:	2201      	movs	r2, #1
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 0201 	and.w	r2, r3, #1
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d017      	beq.n	8004dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d123      	bne.n	8004e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	08da      	lsrs	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3208      	adds	r2, #8
 8004dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	220f      	movs	r2, #15
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	6939      	ldr	r1, [r7, #16]
 8004e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0203 	and.w	r2, r3, #3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80b2 	beq.w	8004fb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e54:	4b61      	ldr	r3, [pc, #388]	@ (8004fdc <HAL_GPIO_Init+0x2fc>)
 8004e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e58:	4a60      	ldr	r2, [pc, #384]	@ (8004fdc <HAL_GPIO_Init+0x2fc>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e60:	4b5e      	ldr	r3, [pc, #376]	@ (8004fdc <HAL_GPIO_Init+0x2fc>)
 8004e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe0 <HAL_GPIO_Init+0x300>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	3302      	adds	r3, #2
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	220f      	movs	r2, #15
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e96:	d02b      	beq.n	8004ef0 <HAL_GPIO_Init+0x210>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a52      	ldr	r2, [pc, #328]	@ (8004fe4 <HAL_GPIO_Init+0x304>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d025      	beq.n	8004eec <HAL_GPIO_Init+0x20c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a51      	ldr	r2, [pc, #324]	@ (8004fe8 <HAL_GPIO_Init+0x308>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d01f      	beq.n	8004ee8 <HAL_GPIO_Init+0x208>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a50      	ldr	r2, [pc, #320]	@ (8004fec <HAL_GPIO_Init+0x30c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d019      	beq.n	8004ee4 <HAL_GPIO_Init+0x204>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff0 <HAL_GPIO_Init+0x310>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_GPIO_Init+0x200>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff4 <HAL_GPIO_Init+0x314>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00d      	beq.n	8004edc <HAL_GPIO_Init+0x1fc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff8 <HAL_GPIO_Init+0x318>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <HAL_GPIO_Init+0x1f8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a4c      	ldr	r2, [pc, #304]	@ (8004ffc <HAL_GPIO_Init+0x31c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_GPIO_Init+0x1f4>
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	e00e      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	e00c      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	e00a      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004edc:	2305      	movs	r3, #5
 8004ede:	e008      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	e006      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e004      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e002      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	f002 0203 	and.w	r2, r2, #3
 8004ef8:	0092      	lsls	r2, r2, #2
 8004efa:	4093      	lsls	r3, r2
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f02:	4937      	ldr	r1, [pc, #220]	@ (8004fe0 <HAL_GPIO_Init+0x300>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	3302      	adds	r3, #2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f10:	4b3b      	ldr	r3, [pc, #236]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f34:	4a32      	ldr	r2, [pc, #200]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f3a:	4b31      	ldr	r3, [pc, #196]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4013      	ands	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f5e:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f64:	4b26      	ldr	r3, [pc, #152]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fb2:	4a13      	ldr	r2, [pc, #76]	@ (8005000 <HAL_GPIO_Init+0x320>)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f ae91 	bne.w	8004cf0 <HAL_GPIO_Init+0x10>
  }
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	48000400 	.word	0x48000400
 8004fe8:	48000800 	.word	0x48000800
 8004fec:	48000c00 	.word	0x48000c00
 8004ff0:	48001000 	.word	0x48001000
 8004ff4:	48001400 	.word	0x48001400
 8004ff8:	48001800 	.word	0x48001800
 8004ffc:	48001c00 	.word	0x48001c00
 8005000:	40010400 	.word	0x40010400

08005004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	807b      	strh	r3, [r7, #2]
 8005010:	4613      	mov	r3, r2
 8005012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005014:	787b      	ldrb	r3, [r7, #1]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005020:	e002      	b.n	8005028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800503e:	4b08      	ldr	r3, [pc, #32]	@ (8005060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800504a:	4a05      	ldr	r2, [pc, #20]	@ (8005060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb ffea 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005068:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005074:	d102      	bne.n	800507c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800507a:	e00b      	b.n	8005094 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800507c:	4b08      	ldr	r3, [pc, #32]	@ (80050a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800508a:	d102      	bne.n	8005092 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800508c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005090:	e000      	b.n	8005094 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005092:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005094:	4618      	mov	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40007000 	.word	0x40007000

080050a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d141      	bne.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b2:	4b4b      	ldr	r3, [pc, #300]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050be:	d131      	bne.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c0:	4b47      	ldr	r3, [pc, #284]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c6:	4a46      	ldr	r2, [pc, #280]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d0:	4b43      	ldr	r3, [pc, #268]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050d8:	4a41      	ldr	r2, [pc, #260]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2232      	movs	r2, #50	@ 0x32
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	4a3f      	ldr	r2, [pc, #252]	@ (80051e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	0c9b      	lsrs	r3, r3, #18
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050f6:	e002      	b.n	80050fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fe:	4b38      	ldr	r3, [pc, #224]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800510a:	d102      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f2      	bne.n	80050f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005112:	4b33      	ldr	r3, [pc, #204]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511e:	d158      	bne.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e057      	b.n	80051d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005124:	4b2e      	ldr	r3, [pc, #184]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512a:	4a2d      	ldr	r2, [pc, #180]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005134:	e04d      	b.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513c:	d141      	bne.n	80051c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800513e:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514a:	d131      	bne.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800514c:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005152:	4a23      	ldr	r2, [pc, #140]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800515c:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005164:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800516a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800516c:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2232      	movs	r2, #50	@ 0x32
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	3301      	adds	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005182:	e002      	b.n	800518a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800518a:	4b15      	ldr	r3, [pc, #84]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005196:	d102      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f2      	bne.n	8005184 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d112      	bne.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e011      	b.n	80051d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051b6:	4a0a      	ldr	r2, [pc, #40]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051c0:	e007      	b.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051c2:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051ca:	4a05      	ldr	r2, [pc, #20]	@ (80051e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40007000 	.word	0x40007000
 80051e4:	20000000 	.word	0x20000000
 80051e8:	431bde83 	.word	0x431bde83

080051ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fa:	6053      	str	r3, [r2, #4]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40007000 	.word	0x40007000

0800520c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f000 bc08 	b.w	8005a30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005220:	4b96      	ldr	r3, [pc, #600]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800522a:	4b94      	ldr	r3, [pc, #592]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80e4 	beq.w	800540a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_RCC_OscConfig+0x4c>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	f040 808b 	bne.w	8005366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b01      	cmp	r3, #1
 8005254:	f040 8087 	bne.w	8005366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_OscConfig+0x64>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e3df      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <HAL_RCC_OscConfig+0x7e>
 8005280:	4b7e      	ldr	r3, [pc, #504]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005288:	e005      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
 800528a:	4b7c      	ldr	r3, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005296:	4293      	cmp	r3, r2
 8005298:	d223      	bcs.n	80052e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fdcc 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e3c0      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ae:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a72      	ldr	r2, [pc, #456]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b70      	ldr	r3, [pc, #448]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	496d      	ldr	r1, [pc, #436]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052cc:	4b6b      	ldr	r3, [pc, #428]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	4968      	ldr	r1, [pc, #416]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	e025      	b.n	800532e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e2:	4b66      	ldr	r3, [pc, #408]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a65      	ldr	r2, [pc, #404]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052e8:	f043 0308 	orr.w	r3, r3, #8
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b63      	ldr	r3, [pc, #396]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4960      	ldr	r1, [pc, #384]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005300:	4b5e      	ldr	r3, [pc, #376]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	495b      	ldr	r1, [pc, #364]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fd8c 	bl	8005e3c <RCC_SetFlashLatencyFromMSIRange>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e380      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800532e:	f000 fcc1 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005332:	4602      	mov	r2, r0
 8005334:	4b51      	ldr	r3, [pc, #324]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	4950      	ldr	r1, [pc, #320]	@ (8005480 <HAL_RCC_OscConfig+0x274>)
 8005340:	5ccb      	ldrb	r3, [r1, r3]
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	fa22 f303 	lsr.w	r3, r2, r3
 800534a:	4a4e      	ldr	r2, [pc, #312]	@ (8005484 <HAL_RCC_OscConfig+0x278>)
 800534c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800534e:	4b4e      	ldr	r3, [pc, #312]	@ (8005488 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd fe84 	bl	8003060 <HAL_InitTick>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d052      	beq.n	8005408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	e364      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d032      	beq.n	80053d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800536e:	4b43      	ldr	r3, [pc, #268]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a42      	ldr	r2, [pc, #264]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537a:	f7fd fec1 	bl	8003100 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005382:	f7fd febd 	bl	8003100 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e34d      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a0:	4b36      	ldr	r3, [pc, #216]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a35      	ldr	r2, [pc, #212]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b33      	ldr	r3, [pc, #204]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	4930      	ldr	r1, [pc, #192]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	492b      	ldr	r1, [pc, #172]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
 80053d2:	e01a      	b.n	800540a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053d4:	4b29      	ldr	r3, [pc, #164]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a28      	ldr	r2, [pc, #160]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e0:	f7fd fe8e 	bl	8003100 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e8:	f7fd fe8a 	bl	8003100 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e31a      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053fa:	4b20      	ldr	r3, [pc, #128]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x1dc>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d073      	beq.n	80054fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d005      	beq.n	8005428 <HAL_RCC_OscConfig+0x21c>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d10e      	bne.n	8005440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d10b      	bne.n	8005440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d063      	beq.n	80054fc <HAL_RCC_OscConfig+0x2f0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d15f      	bne.n	80054fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e2f7      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x24c>
 800544a:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a0b      	ldr	r2, [pc, #44]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e025      	b.n	80054a4 <HAL_RCC_OscConfig+0x298>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005460:	d114      	bne.n	800548c <HAL_RCC_OscConfig+0x280>
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a05      	ldr	r2, [pc, #20]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b03      	ldr	r3, [pc, #12]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a02      	ldr	r2, [pc, #8]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e013      	b.n	80054a4 <HAL_RCC_OscConfig+0x298>
 800547c:	40021000 	.word	0x40021000
 8005480:	0800c27c 	.word	0x0800c27c
 8005484:	20000000 	.word	0x20000000
 8005488:	20000004 	.word	0x20000004
 800548c:	4ba0      	ldr	r3, [pc, #640]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a9f      	ldr	r2, [pc, #636]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b9d      	ldr	r3, [pc, #628]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a9c      	ldr	r2, [pc, #624]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fd fe28 	bl	8003100 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd fe24 	bl	8003100 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e2b4      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c6:	4b92      	ldr	r3, [pc, #584]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x2a8>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fd fe14 	bl	8003100 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fd fe10 	bl	8003100 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	@ 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e2a0      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ee:	4b88      	ldr	r3, [pc, #544]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x2d0>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d060      	beq.n	80055cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x310>
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d119      	bne.n	800554a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d116      	bne.n	800554a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551c:	4b7c      	ldr	r3, [pc, #496]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_OscConfig+0x328>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e27d      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005534:	4b76      	ldr	r3, [pc, #472]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	4973      	ldr	r1, [pc, #460]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005548:	e040      	b.n	80055cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d023      	beq.n	800559a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005552:	4b6f      	ldr	r3, [pc, #444]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a6e      	ldr	r2, [pc, #440]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fd fdcf 	bl	8003100 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005566:	f7fd fdcb 	bl	8003100 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e25b      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005578:	4b65      	ldr	r3, [pc, #404]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b62      	ldr	r3, [pc, #392]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	495f      	ldr	r1, [pc, #380]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	e018      	b.n	80055cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559a:	4b5d      	ldr	r3, [pc, #372]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a5c      	ldr	r2, [pc, #368]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd fdab 	bl	8003100 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fd fda7 	bl	8003100 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e237      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d03c      	beq.n	8005652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01c      	beq.n	800561a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd fd86 	bl	8003100 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fd fd82 	bl	8003100 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e212      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560a:	4b41      	ldr	r3, [pc, #260]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800560c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ef      	beq.n	80055f8 <HAL_RCC_OscConfig+0x3ec>
 8005618:	e01b      	b.n	8005652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561a:	4b3d      	ldr	r3, [pc, #244]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800561c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005620:	4a3b      	ldr	r2, [pc, #236]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fd fd69 	bl	8003100 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005632:	f7fd fd65 	bl	8003100 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1f5      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005644:	4b32      	ldr	r3, [pc, #200]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ef      	bne.n	8005632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80a6 	beq.w	80057ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005660:	2300      	movs	r3, #0
 8005662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005664:	4b2a      	ldr	r3, [pc, #168]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005670:	4b27      	ldr	r3, [pc, #156]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	4a26      	ldr	r2, [pc, #152]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567a:	6593      	str	r3, [r2, #88]	@ 0x58
 800567c:	4b24      	ldr	r3, [pc, #144]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 800567e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d118      	bne.n	80056ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a4:	f7fd fd2c 	bl	8003100 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ac:	f7fd fd28 	bl	8003100 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1b8      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <HAL_RCC_OscConfig+0x508>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d108      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4d8>
 80056d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e2:	e029      	b.n	8005738 <HAL_RCC_OscConfig+0x52c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d115      	bne.n	8005718 <HAL_RCC_OscConfig+0x50c>
 80056ec:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f2:	4a07      	ldr	r2, [pc, #28]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005702:	4a03      	ldr	r2, [pc, #12]	@ (8005710 <HAL_RCC_OscConfig+0x504>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800570c:	e014      	b.n	8005738 <HAL_RCC_OscConfig+0x52c>
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	40007000 	.word	0x40007000
 8005718:	4b9d      	ldr	r3, [pc, #628]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	4a9c      	ldr	r2, [pc, #624]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005728:	4b99      	ldr	r3, [pc, #612]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	4a98      	ldr	r2, [pc, #608]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d016      	beq.n	800576e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fd fcde 	bl	8003100 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005746:	e00a      	b.n	800575e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fd fcda 	bl	8003100 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e168      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	4b8c      	ldr	r3, [pc, #560]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ed      	beq.n	8005748 <HAL_RCC_OscConfig+0x53c>
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fd fcc7 	bl	8003100 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fd fcc3 	bl	8003100 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e151      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800578c:	4b80      	ldr	r3, [pc, #512]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ed      	bne.n	8005776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579a:	7ffb      	ldrb	r3, [r7, #31]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03c      	beq.n	8005832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01c      	beq.n	80057fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c0:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057c6:	4a72      	ldr	r2, [pc, #456]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fd fc96 	bl	8003100 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d8:	f7fd fc92 	bl	8003100 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e122      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ea:	4b69      	ldr	r3, [pc, #420]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ef      	beq.n	80057d8 <HAL_RCC_OscConfig+0x5cc>
 80057f8:	e01b      	b.n	8005832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057fa:	4b65      	ldr	r3, [pc, #404]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80057fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005800:	4a63      	ldr	r2, [pc, #396]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fd fc79 	bl	8003100 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005812:	f7fd fc75 	bl	8003100 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e105      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005824:	4b5a      	ldr	r3, [pc, #360]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ef      	bne.n	8005812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80f9 	beq.w	8005a2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	2b02      	cmp	r3, #2
 8005842:	f040 80cf 	bne.w	80059e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005846:	4b52      	ldr	r3, [pc, #328]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0203 	and.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d12c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	3b01      	subs	r3, #1
 8005866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d123      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d11b      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d113      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	3b01      	subs	r3, #1
 800589a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d109      	bne.n	80058b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	3b01      	subs	r3, #1
 80058ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d071      	beq.n	8005998 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d068      	beq.n	800598c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058ba:	4b35      	ldr	r3, [pc, #212]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058c6:	4b32      	ldr	r3, [pc, #200]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0ac      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058e2:	f7fd fc0d 	bl	8003100 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ea:	f7fd fc09 	bl	8003100 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e099      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058fc:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005908:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <HAL_RCC_OscConfig+0x788>)
 800590e:	4013      	ands	r3, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005918:	3a01      	subs	r2, #1
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005922:	0212      	lsls	r2, r2, #8
 8005924:	4311      	orrs	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800592a:	0852      	lsrs	r2, r2, #1
 800592c:	3a01      	subs	r2, #1
 800592e:	0552      	lsls	r2, r2, #21
 8005930:	4311      	orrs	r1, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005936:	0852      	lsrs	r2, r2, #1
 8005938:	3a01      	subs	r2, #1
 800593a:	0652      	lsls	r2, r2, #25
 800593c:	4311      	orrs	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005942:	06d2      	lsls	r2, r2, #27
 8005944:	430a      	orrs	r2, r1
 8005946:	4912      	ldr	r1, [pc, #72]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005948:	4313      	orrs	r3, r2
 800594a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800594c:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0f      	ldr	r2, [pc, #60]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a0c      	ldr	r2, [pc, #48]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 800595e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005964:	f7fd fbcc 	bl	8003100 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fd fbc8 	bl	8003100 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e058      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	4b04      	ldr	r3, [pc, #16]	@ (8005990 <HAL_RCC_OscConfig+0x784>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800598a:	e050      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e04f      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
 8005990:	40021000 	.word	0x40021000
 8005994:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005998:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d144      	bne.n	8005a2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059a4:	4b24      	ldr	r3, [pc, #144]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059b0:	4b21      	ldr	r3, [pc, #132]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a20      	ldr	r2, [pc, #128]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059bc:	f7fd fba0 	bl	8003100 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c4:	f7fd fb9c 	bl	8003100 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e02c      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d6:	4b18      	ldr	r3, [pc, #96]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7b8>
 80059e2:	e024      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d01f      	beq.n	8005a2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4b13      	ldr	r3, [pc, #76]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 80059f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fd fb83 	bl	8003100 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fd fb7f 	bl	8003100 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e00f      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a10:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	4905      	ldr	r1, [pc, #20]	@ (8005a38 <HAL_RCC_OscConfig+0x82c>)
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <HAL_RCC_OscConfig+0x830>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60cb      	str	r3, [r1, #12]
 8005a28:	e001      	b.n	8005a2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	feeefffc 	.word	0xfeeefffc

08005a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e11d      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b90      	ldr	r3, [pc, #576]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d910      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b8d      	ldr	r3, [pc, #564]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 020f 	bic.w	r2, r3, #15
 8005a6e:	498b      	ldr	r1, [pc, #556]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b89      	ldr	r3, [pc, #548]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e105      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	4b81      	ldr	r3, [pc, #516]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	497b      	ldr	r1, [pc, #492]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d079      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d11e      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aca:	4b75      	ldr	r3, [pc, #468]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0dc      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005ada:	f000 fa09 	bl	8005ef0 <RCC_GetSysClockFreqFromPLLSource>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4a70      	ldr	r2, [pc, #448]	@ (8005ca4 <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d946      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d140      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005af2:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005afa:	4a69      	ldr	r2, [pc, #420]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b02:	2380      	movs	r3, #128	@ 0x80
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e035      	b.n	8005b74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b10:	4b63      	ldr	r3, [pc, #396]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d115      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0b9      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b28:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0ad      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b38:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a5      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b48:	f000 f8b4 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4a55      	ldr	r2, [pc, #340]	@ (8005ca4 <HAL_RCC_ClockConfig+0x264>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d90f      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b54:	4b52      	ldr	r3, [pc, #328]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b60:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b68:	4a4d      	ldr	r2, [pc, #308]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b70:	2380      	movs	r3, #128	@ 0x80
 8005b72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b74:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f023 0203 	bic.w	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4947      	ldr	r1, [pc, #284]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b86:	f7fd fabb 	bl	8003100 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8e:	f7fd fab7 	bl	8003100 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e077      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 020c 	and.w	r2, r3, #12
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d1eb      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b80      	cmp	r3, #128	@ 0x80
 8005bba:	d105      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bc6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	4b31      	ldr	r3, [pc, #196]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d208      	bcs.n	8005bf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	492b      	ldr	r1, [pc, #172]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf6:	4b29      	ldr	r3, [pc, #164]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d210      	bcs.n	8005c26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c04:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 020f 	bic.w	r2, r3, #15
 8005c0c:	4923      	ldr	r1, [pc, #140]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c14:	4b21      	ldr	r3, [pc, #132]	@ (8005c9c <HAL_RCC_ClockConfig+0x25c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d001      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e036      	b.n	8005c94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4918      	ldr	r1, [pc, #96]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c50:	4b13      	ldr	r3, [pc, #76]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4910      	ldr	r1, [pc, #64]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c64:	f000 f826 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	490c      	ldr	r1, [pc, #48]	@ (8005ca8 <HAL_RCC_ClockConfig+0x268>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c80:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <HAL_RCC_ClockConfig+0x26c>)
 8005c82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_RCC_ClockConfig+0x270>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fd f9e9 	bl	8003060 <HAL_InitTick>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	04c4b400 	.word	0x04c4b400
 8005ca8:	0800c27c 	.word	0x0800c27c
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	20000004 	.word	0x20000004

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	@ 0x24
 8005cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d121      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d11e      	bne.n	8005d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ce8:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cf4:	4b31      	ldr	r3, [pc, #196]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e005      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d04:	4b2d      	ldr	r3, [pc, #180]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d10:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d2c:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	e004      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b0c      	cmp	r3, #12
 8005d40:	d134      	bne.n	8005dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d42:	4b1e      	ldr	r3, [pc, #120]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d003      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d003      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0xac>
 8005d58:	e005      	b.n	8005d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d5c:	617b      	str	r3, [r7, #20]
      break;
 8005d5e:	e005      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d62:	617b      	str	r3, [r7, #20]
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	617b      	str	r3, [r7, #20]
      break;
 8005d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	3301      	adds	r3, #1
 8005d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d7a:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	fb03 f202 	mul.w	r2, r3, r2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d92:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	0e5b      	lsrs	r3, r3, #25
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005dac:	69bb      	ldr	r3, [r7, #24]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3724      	adds	r7, #36	@ 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	0800c294 	.word	0x0800c294
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	007a1200 	.word	0x007a1200

08005dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000000 	.word	0x20000000

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4904      	ldr	r1, [pc, #16]	@ (8005e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0800c28c 	.word	0x0800c28c

08005e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e14:	f7ff ffda 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0adb      	lsrs	r3, r3, #11
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4904      	ldr	r1, [pc, #16]	@ (8005e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800c28c 	.word	0x0800c28c

08005e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e48:	4b27      	ldr	r3, [pc, #156]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e54:	f7ff f906 	bl	8005064 <HAL_PWREx_GetVoltageRange>
 8005e58:	6178      	str	r0, [r7, #20]
 8005e5a:	e014      	b.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e5c:	4b22      	ldr	r3, [pc, #136]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e68:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e74:	f7ff f8f6 	bl	8005064 <HAL_PWREx_GetVoltageRange>
 8005e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8c:	d10b      	bne.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b80      	cmp	r3, #128	@ 0x80
 8005e92:	d913      	bls.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e98:	d902      	bls.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e00d      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e00a      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eaa:	d902      	bls.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005eac:	2302      	movs	r3, #2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e004      	b.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b70      	cmp	r3, #112	@ 0x70
 8005eb6:	d101      	bne.n	8005ebc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 020f 	bic.w	r2, r3, #15
 8005ec4:	4909      	ldr	r1, [pc, #36]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d001      	beq.n	8005ede <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40022000 	.word	0x40022000

08005ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d00b      	beq.n	8005f1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d825      	bhi.n	8005f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d008      	beq.n	8005f24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11f      	bne.n	8005f58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f18:	4b25      	ldr	r3, [pc, #148]	@ (8005fb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f1a:	613b      	str	r3, [r7, #16]
    break;
 8005f1c:	e01f      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f1e:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f20:	613b      	str	r3, [r7, #16]
    break;
 8005f22:	e01c      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f24:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f30:	4b1e      	ldr	r3, [pc, #120]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e005      	b.n	8005f4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f40:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	613b      	str	r3, [r7, #16]
    break;
 8005f56:	e002      	b.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
    break;
 8005f5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f5e:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	fb03 f202 	mul.w	r2, r3, r2
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0e5b      	lsrs	r3, r3, #25
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f9e:	683b      	ldr	r3, [r7, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	007a1200 	.word	0x007a1200
 8005fb8:	0800c294 	.word	0x0800c294

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fc8:	2300      	movs	r3, #0
 8005fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d040      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fdc:	2b80      	cmp	r3, #128	@ 0x80
 8005fde:	d02a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fe0:	2b80      	cmp	r3, #128	@ 0x80
 8005fe2:	d825      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fe4:	2b60      	cmp	r3, #96	@ 0x60
 8005fe6:	d026      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fe8:	2b60      	cmp	r3, #96	@ 0x60
 8005fea:	d821      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d006      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d81d      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d010      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ffc:	e018      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ffe:	4b89      	ldr	r3, [pc, #548]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	4a88      	ldr	r2, [pc, #544]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006008:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800600a:	e015      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fa24 	bl	8007460 <RCCEx_PLLSAI1_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800601c:	e00c      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3320      	adds	r3, #32
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fb0f 	bl	8007648 <RCCEx_PLLSAI2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800602e:	e003      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	74fb      	strb	r3, [r7, #19]
      break;
 8006034:	e000      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800603e:	4b79      	ldr	r3, [pc, #484]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006044:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800604c:	4975      	ldr	r1, [pc, #468]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006054:	e001      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d047      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606e:	d030      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006074:	d82a      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800607a:	d02a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800607c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006080:	d824      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800608c:	d81e      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006096:	d010      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006098:	e018      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800609a:	4b62      	ldr	r3, [pc, #392]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	4a61      	ldr	r2, [pc, #388]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a6:	e015      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 f9d6 	bl	8007460 <RCCEx_PLLSAI1_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3320      	adds	r3, #32
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fac1 	bl	8007648 <RCCEx_PLLSAI2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	74fb      	strb	r3, [r7, #19]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10b      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060da:	4b52      	ldr	r3, [pc, #328]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e8:	494e      	ldr	r1, [pc, #312]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80060f0:	e001      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f2:	7cfb      	ldrb	r3, [r7, #19]
 80060f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 809f 	beq.w	8006242 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006104:	2300      	movs	r3, #0
 8006106:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006108:	4b46      	ldr	r3, [pc, #280]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611e:	4b41      	ldr	r3, [pc, #260]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006122:	4a40      	ldr	r2, [pc, #256]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006128:	6593      	str	r3, [r2, #88]	@ 0x58
 800612a:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006136:	2301      	movs	r3, #1
 8006138:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613a:	4b3b      	ldr	r3, [pc, #236]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3a      	ldr	r2, [pc, #232]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006146:	f7fc ffdb 	bl	8003100 <HAL_GetTick>
 800614a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800614c:	e009      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614e:	f7fc ffd7 	bl	8003100 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d902      	bls.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	74fb      	strb	r3, [r7, #19]
        break;
 8006160:	e005      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d15b      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006174:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d01f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	429a      	cmp	r2, r3
 8006190:	d019      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006192:	4b24      	ldr	r3, [pc, #144]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fc ff96 	bl	8003100 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d6:	e00b      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fc ff92 	bl	8003100 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d902      	bls.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	74fb      	strb	r3, [r7, #19]
            break;
 80061ee:	e006      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0ec      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006204:	4b07      	ldr	r3, [pc, #28]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	4903      	ldr	r1, [pc, #12]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	74bb      	strb	r3, [r7, #18]
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006230:	7c7b      	ldrb	r3, [r7, #17]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d105      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006236:	4ba0      	ldr	r3, [pc, #640]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	4a9f      	ldr	r2, [pc, #636]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624e:	4b9a      	ldr	r3, [pc, #616]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f023 0203 	bic.w	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625c:	4996      	ldr	r1, [pc, #600]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006270:	4b91      	ldr	r3, [pc, #580]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f023 020c 	bic.w	r2, r3, #12
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	498e      	ldr	r1, [pc, #568]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006292:	4b89      	ldr	r3, [pc, #548]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a0:	4985      	ldr	r1, [pc, #532]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b4:	4b80      	ldr	r3, [pc, #512]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	497d      	ldr	r1, [pc, #500]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062d6:	4b78      	ldr	r3, [pc, #480]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e4:	4974      	ldr	r1, [pc, #464]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062f8:	4b6f      	ldr	r3, [pc, #444]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	496c      	ldr	r1, [pc, #432]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800631a:	4b67      	ldr	r3, [pc, #412]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	4963      	ldr	r1, [pc, #396]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800633c:	4b5e      	ldr	r3, [pc, #376]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800634a:	495b      	ldr	r1, [pc, #364]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800635e:	4b56      	ldr	r3, [pc, #344]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006364:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	4952      	ldr	r1, [pc, #328]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006380:	4b4d      	ldr	r3, [pc, #308]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	494a      	ldr	r1, [pc, #296]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a2:	4b45      	ldr	r3, [pc, #276]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b0:	4941      	ldr	r1, [pc, #260]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063c4:	4b3c      	ldr	r3, [pc, #240]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ca:	f023 0203 	bic.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d2:	4939      	ldr	r1, [pc, #228]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d028      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e6:	4b34      	ldr	r3, [pc, #208]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f4:	4930      	ldr	r1, [pc, #192]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006404:	d106      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006406:	4b2c      	ldr	r3, [pc, #176]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006410:	60d3      	str	r3, [r2, #12]
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800641c:	d10c      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f81b 	bl	8007460 <RCCEx_PLLSAI1_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d04d      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800644c:	d108      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006454:	4a18      	ldr	r2, [pc, #96]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800645a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800645e:	e012      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006460:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006466:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800646c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006470:	4b11      	ldr	r3, [pc, #68]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800647e:	490e      	ldr	r1, [pc, #56]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800648a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800648e:	d106      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006490:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a08      	ldr	r2, [pc, #32]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e020      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064a6:	d109      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064a8:	4b03      	ldr	r3, [pc, #12]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a02      	ldr	r2, [pc, #8]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b2:	60d3      	str	r3, [r2, #12]
 80064b4:	e014      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80064b6:	bf00      	nop
 80064b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3304      	adds	r3, #4
 80064ca:	2101      	movs	r1, #1
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ffc7 	bl	8007460 <RCCEx_PLLSAI1_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80064dc:	7cfb      	ldrb	r3, [r7, #19]
 80064de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d028      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fa:	4947      	ldr	r1, [pc, #284]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800650c:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4a41      	ldr	r2, [pc, #260]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006516:	60d3      	str	r3, [r2, #12]
 8006518:	e011      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006522:	d10c      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	2101      	movs	r1, #1
 800652a:	4618      	mov	r0, r3
 800652c:	f000 ff98 	bl	8007460 <RCCEx_PLLSAI1_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01e      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800654a:	4b33      	ldr	r3, [pc, #204]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	492f      	ldr	r1, [pc, #188]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800656c:	d10c      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 ff73 	bl	8007460 <RCCEx_PLLSAI1_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006594:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659a:	f023 0204 	bic.w	r2, r3, #4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	491c      	ldr	r1, [pc, #112]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065be:	f023 0218 	bic.w	r2, r3, #24
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	4913      	ldr	r1, [pc, #76]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ec:	490a      	ldr	r1, [pc, #40]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065fe:	d105      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a04      	ldr	r2, [pc, #16]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800660a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800660c:	7cbb      	ldrb	r3, [r7, #18]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000

0800661c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800662e:	d13e      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006630:	4bb6      	ldr	r3, [pc, #728]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800663a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006642:	d028      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800664a:	f200 86f4 	bhi.w	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006654:	d005      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800665c:	d00e      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800665e:	f000 beea 	b.w	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006662:	4baa      	ldr	r3, [pc, #680]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	f040 86e4 	bne.w	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006676:	61fb      	str	r3, [r7, #28]
      break;
 8006678:	f000 bedf 	b.w	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800667c:	4ba3      	ldr	r3, [pc, #652]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800667e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	f040 86d9 	bne.w	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800668c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006690:	61fb      	str	r3, [r7, #28]
      break;
 8006692:	f000 bed4 	b.w	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006696:	4b9d      	ldr	r3, [pc, #628]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a2:	f040 86ce 	bne.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80066a6:	4b9a      	ldr	r3, [pc, #616]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80066a8:	61fb      	str	r3, [r7, #28]
      break;
 80066aa:	f000 beca 	b.w	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ae:	4b97      	ldr	r3, [pc, #604]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d036      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d840      	bhi.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d003      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d020      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80066d0:	e039      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066d2:	4b8e      	ldr	r3, [pc, #568]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d116      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066de:	4b8b      	ldr	r3, [pc, #556]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80066ea:	4b88      	ldr	r3, [pc, #544]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	e005      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80066f6:	4b85      	ldr	r3, [pc, #532]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	4a84      	ldr	r2, [pc, #528]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006708:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800670a:	e01f      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	61bb      	str	r3, [r7, #24]
      break;
 8006710:	e01c      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006712:	4b7e      	ldr	r3, [pc, #504]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006720:	4b7d      	ldr	r3, [pc, #500]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006722:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006724:	e012      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
      break;
 800672a:	e00f      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800672c:	4b77      	ldr	r3, [pc, #476]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006738:	d102      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800673a:	4b78      	ldr	r3, [pc, #480]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800673c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800673e:	e005      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
      break;
 8006744:	e002      	b.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
      break;
 800674a:	bf00      	nop
    }

    switch(PeriphClk)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006752:	f000 8606 	beq.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800675c:	f200 8673 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006766:	f000 8469 	beq.w	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006770:	f200 8669 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677a:	f000 8531 	beq.w	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006784:	f200 865f 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800678e:	f000 8187 	beq.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006798:	f200 8655 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067a2:	f000 80cd 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ac:	f200 864b 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b6:	f000 8430 	beq.w	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c0:	f200 8641 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ca:	f000 83e4 	beq.w	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d4:	f200 8637 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067de:	f000 80af 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e8:	f200 862d 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f2:	f000 809d 	beq.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fc:	f200 8623 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006806:	f000 808b 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006810:	f200 8619 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681a:	f000 8554 	beq.w	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006824:	f200 860f 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682e:	f000 8500 	beq.w	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006838:	f200 8605 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006842:	f000 84a1 	beq.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684c:	f200 85fb 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b80      	cmp	r3, #128	@ 0x80
 8006854:	f000 846c 	beq.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b80      	cmp	r3, #128	@ 0x80
 800685c:	f200 85f3 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b20      	cmp	r3, #32
 8006864:	d84c      	bhi.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 85ec 	beq.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3b01      	subs	r3, #1
 8006872:	2b1f      	cmp	r3, #31
 8006874:	f200 85e7 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006878:	a201      	add	r2, pc, #4	@ (adr r2, 8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006c95 	.word	0x08006c95
 8006884:	08006d03 	.word	0x08006d03
 8006888:	08007447 	.word	0x08007447
 800688c:	08006d97 	.word	0x08006d97
 8006890:	08007447 	.word	0x08007447
 8006894:	08007447 	.word	0x08007447
 8006898:	08007447 	.word	0x08007447
 800689c:	08006e0f 	.word	0x08006e0f
 80068a0:	08007447 	.word	0x08007447
 80068a4:	08007447 	.word	0x08007447
 80068a8:	08007447 	.word	0x08007447
 80068ac:	08007447 	.word	0x08007447
 80068b0:	08007447 	.word	0x08007447
 80068b4:	08007447 	.word	0x08007447
 80068b8:	08007447 	.word	0x08007447
 80068bc:	08006e93 	.word	0x08006e93
 80068c0:	08007447 	.word	0x08007447
 80068c4:	08007447 	.word	0x08007447
 80068c8:	08007447 	.word	0x08007447
 80068cc:	08007447 	.word	0x08007447
 80068d0:	08007447 	.word	0x08007447
 80068d4:	08007447 	.word	0x08007447
 80068d8:	08007447 	.word	0x08007447
 80068dc:	08007447 	.word	0x08007447
 80068e0:	08007447 	.word	0x08007447
 80068e4:	08007447 	.word	0x08007447
 80068e8:	08007447 	.word	0x08007447
 80068ec:	08007447 	.word	0x08007447
 80068f0:	08007447 	.word	0x08007447
 80068f4:	08007447 	.word	0x08007447
 80068f8:	08007447 	.word	0x08007447
 80068fc:	08006f15 	.word	0x08006f15
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b40      	cmp	r3, #64	@ 0x40
 8006904:	f000 83e8 	beq.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006908:	f000 bd9d 	b.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800690c:	40021000 	.word	0x40021000
 8006910:	0003d090 	.word	0x0003d090
 8006914:	0800c294 	.word	0x0800c294
 8006918:	00f42400 	.word	0x00f42400
 800691c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006920:	69b9      	ldr	r1, [r7, #24]
 8006922:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006926:	f000 ff83 	bl	8007830 <RCCEx_GetSAIxPeriphCLKFreq>
 800692a:	61f8      	str	r0, [r7, #28]
      break;
 800692c:	f000 bd8e 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006930:	69b9      	ldr	r1, [r7, #24]
 8006932:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006936:	f000 ff7b 	bl	8007830 <RCCEx_GetSAIxPeriphCLKFreq>
 800693a:	61f8      	str	r0, [r7, #28]
      break;
 800693c:	f000 bd86 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006940:	4b9a      	ldr	r3, [pc, #616]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006952:	d015      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800695a:	f200 8092 	bhi.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006964:	d029      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696c:	f200 8089 	bhi.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d07b      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800697c:	d04a      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800697e:	e080      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006980:	4b8a      	ldr	r3, [pc, #552]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b02      	cmp	r3, #2
 800698a:	d17d      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800698c:	4b87      	ldr	r3, [pc, #540]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006998:	4b84      	ldr	r3, [pc, #528]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	e005      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80069a4:	4b81      	ldr	r3, [pc, #516]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	4a7f      	ldr	r2, [pc, #508]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80069b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b6:	61fb      	str	r3, [r7, #28]
          break;
 80069b8:	e066      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069ba:	4b7c      	ldr	r3, [pc, #496]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069c6:	d162      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069c8:	4b78      	ldr	r3, [pc, #480]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069d4:	d15b      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069d6:	4b75      	ldr	r3, [pc, #468]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069e0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	fb03 f202 	mul.w	r2, r3, r2
 80069ea:	4b70      	ldr	r3, [pc, #448]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	3301      	adds	r3, #1
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80069fc:	4b6b      	ldr	r3, [pc, #428]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	0d5b      	lsrs	r3, r3, #21
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	3301      	adds	r3, #1
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	61fb      	str	r3, [r7, #28]
          break;
 8006a12:	e03c      	b.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a14:	4b65      	ldr	r3, [pc, #404]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a20:	d138      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a22:	4b62      	ldr	r3, [pc, #392]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2e:	d131      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a30:	4b5e      	ldr	r3, [pc, #376]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a3a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	fb03 f202 	mul.w	r2, r3, r2
 8006a44:	4b59      	ldr	r3, [pc, #356]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	3301      	adds	r3, #1
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006a56:	4b55      	ldr	r3, [pc, #340]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	0d5b      	lsrs	r3, r3, #21
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	3301      	adds	r3, #1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	61fb      	str	r3, [r7, #28]
          break;
 8006a6c:	e012      	b.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d10e      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a7e:	61fb      	str	r3, [r7, #28]
          break;
 8006a80:	e00b      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006a82:	bf00      	nop
 8006a84:	f000 bce2 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a88:	bf00      	nop
 8006a8a:	f000 bcdf 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a8e:	bf00      	nop
 8006a90:	f000 bcdc 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a94:	bf00      	nop
 8006a96:	f000 bcd9 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a9a:	bf00      	nop
        break;
 8006a9c:	f000 bcd6 	b.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006aa0:	4b42      	ldr	r3, [pc, #264]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aae:	d13d      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006abc:	f040 84c5 	bne.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006acc:	f040 84bd 	bne.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ad0:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ada:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	fb03 f202 	mul.w	r2, r3, r2
 8006ae4:	4b31      	ldr	r3, [pc, #196]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	3301      	adds	r3, #1
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006af6:	4b2d      	ldr	r3, [pc, #180]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	0edb      	lsrs	r3, r3, #27
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006b08:	4b28      	ldr	r3, [pc, #160]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006b14:	2311      	movs	r3, #17
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e001      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	61fb      	str	r3, [r7, #28]
      break;
 8006b28:	f000 bc8f 	b.w	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b32:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b3e:	d016      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b46:	f200 809b 	bhi.w	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b50:	d032      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b58:	f200 8092 	bhi.w	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8084 	beq.w	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b6a:	d052      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006b6c:	e088      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	f040 8084 	bne.w	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006b88:	4b08      	ldr	r3, [pc, #32]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	e005      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006b94:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	4a03      	ldr	r2, [pc, #12]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba6:	61fb      	str	r3, [r7, #28]
          break;
 8006ba8:	e06c      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	0800c294 	.word	0x0800c294
 8006bb4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc4:	d160      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006bc6:	4ba2      	ldr	r3, [pc, #648]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd2:	d159      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bde:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	fb03 f202 	mul.w	r2, r3, r2
 8006be8:	4b99      	ldr	r3, [pc, #612]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006bfa:	4b95      	ldr	r3, [pc, #596]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	0d5b      	lsrs	r3, r3, #21
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	3301      	adds	r3, #1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0e:	61fb      	str	r3, [r7, #28]
          break;
 8006c10:	e03a      	b.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006c12:	4b8f      	ldr	r3, [pc, #572]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c1e:	d135      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006c20:	4b8b      	ldr	r3, [pc, #556]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c2c:	d12e      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006c2e:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c38:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	fb03 f202 	mul.w	r2, r3, r2
 8006c42:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006c54:	4b7e      	ldr	r3, [pc, #504]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	0d5b      	lsrs	r3, r3, #21
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	61fb      	str	r3, [r7, #28]
          break;
 8006c6a:	e00f      	b.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006c6c:	4b78      	ldr	r3, [pc, #480]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d10a      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006c7a:	4b76      	ldr	r3, [pc, #472]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c7c:	61fb      	str	r3, [r7, #28]
          break;
 8006c7e:	e007      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006c80:	bf00      	nop
 8006c82:	e3e2      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c84:	bf00      	nop
 8006c86:	e3e0      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c88:	bf00      	nop
 8006c8a:	e3de      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c8c:	bf00      	nop
 8006c8e:	e3dc      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c90:	bf00      	nop
      break;
 8006c92:	e3da      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c94:	4b6e      	ldr	r3, [pc, #440]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d827      	bhi.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc5 	.word	0x08006cc5
 8006cb4:	08006ccd 	.word	0x08006ccd
 8006cb8:	08006ce1 	.word	0x08006ce1
          frequency = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7ff f8a8 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	61f8      	str	r0, [r7, #28]
          break;
 8006cc2:	e01d      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cc4:	f7fe fff6 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006cc8:	61f8      	str	r0, [r7, #28]
          break;
 8006cca:	e019      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ccc:	4b60      	ldr	r3, [pc, #384]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d10f      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006cda:	4b5f      	ldr	r3, [pc, #380]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cdc:	61fb      	str	r3, [r7, #28]
          break;
 8006cde:	e00c      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8006cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf2:	61fb      	str	r3, [r7, #28]
          break;
 8006cf4:	e003      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006cf6:	bf00      	nop
 8006cf8:	e3a8      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cfa:	bf00      	nop
 8006cfc:	e3a6      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cfe:	bf00      	nop
        break;
 8006d00:	e3a4      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d02:	4b53      	ldr	r3, [pc, #332]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	d83a      	bhi.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006d14:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d8b 	.word	0x08006d8b
 8006d24:	08006d8b 	.word	0x08006d8b
 8006d28:	08006d8b 	.word	0x08006d8b
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	08006d8b 	.word	0x08006d8b
 8006d34:	08006d8b 	.word	0x08006d8b
 8006d38:	08006d8b 	.word	0x08006d8b
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d8b 	.word	0x08006d8b
 8006d44:	08006d8b 	.word	0x08006d8b
 8006d48:	08006d8b 	.word	0x08006d8b
 8006d4c:	08006d75 	.word	0x08006d75
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d50:	f7ff f848 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8006d54:	61f8      	str	r0, [r7, #28]
          break;
 8006d56:	e01d      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d58:	f7fe ffac 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006d5c:	61f8      	str	r0, [r7, #28]
          break;
 8006d5e:	e019      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d60:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6c:	d10f      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8006d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d70:	61fb      	str	r3, [r7, #28]
          break;
 8006d72:	e00c      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d74:	4b36      	ldr	r3, [pc, #216]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d86:	61fb      	str	r3, [r7, #28]
          break;
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006d8a:	bf00      	nop
 8006d8c:	e35e      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d8e:	bf00      	nop
 8006d90:	e35c      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d92:	bf00      	nop
        break;
 8006d94:	e35a      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d96:	4b2e      	ldr	r3, [pc, #184]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b30      	cmp	r3, #48	@ 0x30
 8006da6:	d021      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b30      	cmp	r3, #48	@ 0x30
 8006dac:	d829      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d011      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d823      	bhi.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006dc6:	e01c      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7ff f80c 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
          break;
 8006dce:	e01d      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dd0:	f7fe ff70 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006dd4:	61f8      	str	r0, [r7, #28]
          break;
 8006dd6:	e019      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de4:	d10f      	bne.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006de6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006de8:	61fb      	str	r3, [r7, #28]
          break;
 8006dea:	e00c      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dec:	4b18      	ldr	r3, [pc, #96]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dfe:	61fb      	str	r3, [r7, #28]
          break;
 8006e00:	e003      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006e02:	bf00      	nop
 8006e04:	e322      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e06:	bf00      	nop
 8006e08:	e320      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e0a:	bf00      	nop
        break;
 8006e0c:	e31e      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e0e:	4b10      	ldr	r3, [pc, #64]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e14:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e1e:	d027      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e24:	d82f      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b80      	cmp	r3, #128	@ 0x80
 8006e2a:	d017      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b80      	cmp	r3, #128	@ 0x80
 8006e30:	d829      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8006e3e:	e022      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fe ffd0 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8006e44:	61f8      	str	r0, [r7, #28]
          break;
 8006e46:	e023      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e48:	f7fe ff34 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006e4c:	61f8      	str	r0, [r7, #28]
          break;
 8006e4e:	e01f      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006e50:	40021000 	.word	0x40021000
 8006e54:	02dc6c00 	.word	0x02dc6c00
 8006e58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e5c:	4b9b      	ldr	r3, [pc, #620]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e68:	d10f      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006e6a:	4b99      	ldr	r3, [pc, #612]	@ (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006e6c:	61fb      	str	r3, [r7, #28]
          break;
 8006e6e:	e00c      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e70:	4b96      	ldr	r3, [pc, #600]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e82:	61fb      	str	r3, [r7, #28]
          break;
 8006e84:	e003      	b.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006e86:	bf00      	nop
 8006e88:	e2e0      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e8a:	bf00      	nop
 8006e8c:	e2de      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006e8e:	bf00      	nop
        break;
 8006e90:	e2dc      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e92:	4b8e      	ldr	r3, [pc, #568]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ea4:	d025      	beq.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eac:	d82c      	bhi.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb4:	d013      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ebc:	d824      	bhi.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006ecc:	e01c      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ece:	f7fe ff89 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8006ed2:	61f8      	str	r0, [r7, #28]
          break;
 8006ed4:	e01d      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ed6:	f7fe feed 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006eda:	61f8      	str	r0, [r7, #28]
          break;
 8006edc:	e019      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ede:	4b7b      	ldr	r3, [pc, #492]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eea:	d10f      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006eec:	4b78      	ldr	r3, [pc, #480]	@ (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006eee:	61fb      	str	r3, [r7, #28]
          break;
 8006ef0:	e00c      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ef2:	4b76      	ldr	r3, [pc, #472]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d107      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f04:	61fb      	str	r3, [r7, #28]
          break;
 8006f06:	e003      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006f08:	bf00      	nop
 8006f0a:	e29f      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f0c:	bf00      	nop
 8006f0e:	e29d      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f10:	bf00      	nop
        break;
 8006f12:	e29b      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f14:	4b6d      	ldr	r3, [pc, #436]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f26:	d025      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f2e:	d82c      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f36:	d013      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f3e:	d824      	bhi.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f4c:	d004      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8006f4e:	e01c      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f50:	f7fe ff48 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8006f54:	61f8      	str	r0, [r7, #28]
          break;
 8006f56:	e01d      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fe feac 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006f5c:	61f8      	str	r0, [r7, #28]
          break;
 8006f5e:	e019      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f60:	4b5a      	ldr	r3, [pc, #360]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6c:	d10f      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006f6e:	4b58      	ldr	r3, [pc, #352]	@ (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006f70:	61fb      	str	r3, [r7, #28]
          break;
 8006f72:	e00c      	b.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f74:	4b55      	ldr	r3, [pc, #340]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d107      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f86:	61fb      	str	r3, [r7, #28]
          break;
 8006f88:	e003      	b.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006f8a:	bf00      	nop
 8006f8c:	e25e      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f8e:	bf00      	nop
 8006f90:	e25c      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006f92:	bf00      	nop
        break;
 8006f94:	e25a      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f96:	4b4d      	ldr	r3, [pc, #308]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa8:	d007      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fb0:	d12f      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fb2:	f7fe fe7f 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8006fb6:	61f8      	str	r0, [r7, #28]
          break;
 8006fb8:	e02e      	b.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006fba:	4b44      	ldr	r3, [pc, #272]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc6:	d126      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006fc8:	4b40      	ldr	r3, [pc, #256]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fde:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	fb03 f202 	mul.w	r2, r3, r2
 8006fe8:	4b38      	ldr	r3, [pc, #224]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	091b      	lsrs	r3, r3, #4
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	0e5b      	lsrs	r3, r3, #25
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	3301      	adds	r3, #1
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	61fb      	str	r3, [r7, #28]
          break;
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007012:	bf00      	nop
 8007014:	e21a      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007016:	bf00      	nop
        break;
 8007018:	e218      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800701a:	4b2c      	ldr	r3, [pc, #176]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800701c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fe fef0 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8007030:	61f8      	str	r0, [r7, #28]
        break;
 8007032:	e20b      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007034:	f7fe fe3e 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007038:	61f8      	str	r0, [r7, #28]
        break;
 800703a:	e207      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800703c:	4b23      	ldr	r3, [pc, #140]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800703e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007042:	f003 0318 	and.w	r3, r3, #24
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b10      	cmp	r3, #16
 800704c:	d010      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b10      	cmp	r3, #16
 8007052:	d834      	bhi.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d024      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007060:	e02d      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007062:	69b9      	ldr	r1, [r7, #24]
 8007064:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007068:	f000 fbe2 	bl	8007830 <RCCEx_GetSAIxPeriphCLKFreq>
 800706c:	61f8      	str	r0, [r7, #28]
          break;
 800706e:	e02b      	b.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007070:	4b16      	ldr	r3, [pc, #88]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d122      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800707c:	4b13      	ldr	r3, [pc, #76]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007088:	4b10      	ldr	r3, [pc, #64]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	e005      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007094:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	4a0c      	ldr	r2, [pc, #48]	@ (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	61fb      	str	r3, [r7, #28]
          break;
 80070a8:	e00b      	b.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070aa:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b6:	d106      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80070b8:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80070ba:	61fb      	str	r3, [r7, #28]
          break;
 80070bc:	e003      	b.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80070be:	bf00      	nop
 80070c0:	e1c4      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070c2:	bf00      	nop
 80070c4:	e1c2      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80070c6:	bf00      	nop
        break;
 80070c8:	e1c0      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80070ca:	bf00      	nop
 80070cc:	40021000 	.word	0x40021000
 80070d0:	00f42400 	.word	0x00f42400
 80070d4:	0800c294 	.word	0x0800c294
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070d8:	4b96      	ldr	r3, [pc, #600]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80070da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ea:	d013      	beq.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f2:	d819      	bhi.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007100:	d004      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8007102:	e011      	b.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007104:	f7fe fe6e 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8007108:	61f8      	str	r0, [r7, #28]
          break;
 800710a:	e010      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800710c:	f7fe fdd2 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007110:	61f8      	str	r0, [r7, #28]
          break;
 8007112:	e00c      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007114:	4b87      	ldr	r3, [pc, #540]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007120:	d104      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007122:	4b85      	ldr	r3, [pc, #532]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007124:	61fb      	str	r3, [r7, #28]
          break;
 8007126:	e001      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007128:	bf00      	nop
 800712a:	e18f      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800712c:	bf00      	nop
        break;
 800712e:	e18d      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007130:	4b80      	ldr	r3, [pc, #512]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007142:	d013      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714a:	d819      	bhi.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007158:	d004      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800715a:	e011      	b.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800715c:	f7fe fe42 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8007160:	61f8      	str	r0, [r7, #28]
          break;
 8007162:	e010      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007164:	f7fe fda6 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007168:	61f8      	str	r0, [r7, #28]
          break;
 800716a:	e00c      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800716c:	4b71      	ldr	r3, [pc, #452]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007178:	d104      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800717a:	4b6f      	ldr	r3, [pc, #444]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800717c:	61fb      	str	r3, [r7, #28]
          break;
 800717e:	e001      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007180:	bf00      	nop
 8007182:	e163      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007184:	bf00      	nop
        break;
 8007186:	e161      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007188:	4b6a      	ldr	r3, [pc, #424]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800719a:	d013      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071a2:	d819      	bhi.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b0:	d004      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80071b2:	e011      	b.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fe fe16 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 80071b8:	61f8      	str	r0, [r7, #28]
          break;
 80071ba:	e010      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80071bc:	f7fe fd7a 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 80071c0:	61f8      	str	r0, [r7, #28]
          break;
 80071c2:	e00c      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d0:	d104      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80071d2:	4b59      	ldr	r3, [pc, #356]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80071d4:	61fb      	str	r3, [r7, #28]
          break;
 80071d6:	e001      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80071d8:	bf00      	nop
 80071da:	e137      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071dc:	bf00      	nop
        break;
 80071de:	e135      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80071e0:	4b54      	ldr	r3, [pc, #336]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d011      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d818      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d004      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007204:	e011      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007206:	f7fe fded 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 800720a:	61f8      	str	r0, [r7, #28]
          break;
 800720c:	e010      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800720e:	f7fe fd51 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007212:	61f8      	str	r0, [r7, #28]
          break;
 8007214:	e00c      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007216:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800721e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007222:	d104      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007224:	4b44      	ldr	r3, [pc, #272]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007226:	61fb      	str	r3, [r7, #28]
          break;
 8007228:	e001      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800722a:	bf00      	nop
 800722c:	e10e      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800722e:	bf00      	nop
        break;
 8007230:	e10c      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007232:	4b40      	ldr	r3, [pc, #256]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007238:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007244:	d02c      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800724c:	d833      	bhi.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007254:	d01a      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800725c:	d82b      	bhi.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800726a:	d004      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800726c:	e023      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800726e:	f7fe fdb9 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8007272:	61f8      	str	r0, [r7, #28]
          break;
 8007274:	e026      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007276:	4b2f      	ldr	r3, [pc, #188]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d11a      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007284:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007288:	61fb      	str	r3, [r7, #28]
          break;
 800728a:	e016      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800728c:	4b29      	ldr	r3, [pc, #164]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d111      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800729a:	4b27      	ldr	r3, [pc, #156]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800729c:	61fb      	str	r3, [r7, #28]
          break;
 800729e:	e00e      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072a0:	4b24      	ldr	r3, [pc, #144]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d109      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80072ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072b2:	61fb      	str	r3, [r7, #28]
          break;
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80072b6:	bf00      	nop
 80072b8:	e0c8      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072ba:	bf00      	nop
 80072bc:	e0c6      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072be:	bf00      	nop
 80072c0:	e0c4      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80072c2:	bf00      	nop
        break;
 80072c4:	e0c2      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072d8:	d030      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072e0:	d837      	bhi.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072e8:	d01a      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072f0:	d82f      	bhi.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fe:	d004      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007300:	e027      	b.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007302:	f7fe fd6f 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8007306:	61f8      	str	r0, [r7, #28]
          break;
 8007308:	e02a      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800730c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b02      	cmp	r3, #2
 8007316:	d11e      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007318:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800731c:	61fb      	str	r3, [r7, #28]
          break;
 800731e:	e01a      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007320:	4b04      	ldr	r3, [pc, #16]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800732c:	d115      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800732e:	4b02      	ldr	r3, [pc, #8]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007330:	61fb      	str	r3, [r7, #28]
          break;
 8007332:	e012      	b.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007334:	40021000 	.word	0x40021000
 8007338:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800733c:	4b46      	ldr	r3, [pc, #280]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b02      	cmp	r3, #2
 8007348:	d109      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800734a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800734e:	61fb      	str	r3, [r7, #28]
          break;
 8007350:	e005      	b.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007352:	bf00      	nop
 8007354:	e07a      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007356:	bf00      	nop
 8007358:	e078      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800735a:	bf00      	nop
 800735c:	e076      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800735e:	bf00      	nop
        break;
 8007360:	e074      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007362:	4b3d      	ldr	r3, [pc, #244]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007364:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007368:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007374:	d02c      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737c:	d855      	bhi.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800738a:	d004      	beq.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800738c:	e04d      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800738e:	f7fe fc91 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007392:	61f8      	str	r0, [r7, #28]
          break;
 8007394:	e04e      	b.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007396:	4b30      	ldr	r3, [pc, #192]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d145      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80073a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80073ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	091b      	lsrs	r3, r3, #4
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	e005      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80073ba:	4b27      	ldr	r3, [pc, #156]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a25      	ldr	r2, [pc, #148]	@ (800745c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 80073c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073cc:	61fb      	str	r3, [r7, #28]
          break;
 80073ce:	e02e      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80073d0:	4b21      	ldr	r3, [pc, #132]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073dc:	d129      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80073de:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ea:	d122      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80073ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	fb03 f202 	mul.w	r2, r3, r2
 8007400:	4b15      	ldr	r3, [pc, #84]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	3301      	adds	r3, #1
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007412:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	0d5b      	lsrs	r3, r3, #21
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	3301      	adds	r3, #1
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
 8007426:	61fb      	str	r3, [r7, #28]
          break;
 8007428:	e003      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800742a:	bf00      	nop
 800742c:	e00e      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800742e:	bf00      	nop
 8007430:	e00c      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007432:	bf00      	nop
        break;
 8007434:	e00a      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007436:	bf00      	nop
 8007438:	e008      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800743a:	bf00      	nop
 800743c:	e006      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800743e:	bf00      	nop
 8007440:	e004      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007442:	bf00      	nop
 8007444:	e002      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007446:	bf00      	nop
 8007448:	e000      	b.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800744a:	bf00      	nop
    }
  }

  return(frequency);
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40021000 	.word	0x40021000
 800745c:	0800c294 	.word	0x0800c294

08007460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800746e:	4b72      	ldr	r3, [pc, #456]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00e      	beq.n	8007498 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800747a:	4b6f      	ldr	r3, [pc, #444]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0203 	and.w	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d103      	bne.n	8007492 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
       ||
 800748e:	2b00      	cmp	r3, #0
 8007490:	d142      	bne.n	8007518 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e03f      	b.n	8007518 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b03      	cmp	r3, #3
 800749e:	d018      	beq.n	80074d2 <RCCEx_PLLSAI1_Config+0x72>
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d825      	bhi.n	80074f0 <RCCEx_PLLSAI1_Config+0x90>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d002      	beq.n	80074ae <RCCEx_PLLSAI1_Config+0x4e>
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d009      	beq.n	80074c0 <RCCEx_PLLSAI1_Config+0x60>
 80074ac:	e020      	b.n	80074f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074ae:	4b62      	ldr	r3, [pc, #392]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11d      	bne.n	80074f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074be:	e01a      	b.n	80074f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074c0:	4b5d      	ldr	r3, [pc, #372]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d116      	bne.n	80074fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d0:	e013      	b.n	80074fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074d2:	4b59      	ldr	r3, [pc, #356]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10f      	bne.n	80074fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074de:	4b56      	ldr	r3, [pc, #344]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074ee:	e006      	b.n	80074fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
      break;
 80074f4:	e004      	b.n	8007500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074f6:	bf00      	nop
 80074f8:	e002      	b.n	8007500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80074fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d108      	bne.n	8007518 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007506:	4b4c      	ldr	r3, [pc, #304]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f023 0203 	bic.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4949      	ldr	r1, [pc, #292]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007514:	4313      	orrs	r3, r2
 8007516:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f040 8086 	bne.w	800762c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007520:	4b45      	ldr	r3, [pc, #276]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a44      	ldr	r2, [pc, #272]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007526:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800752a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752c:	f7fb fde8 	bl	8003100 <HAL_GetTick>
 8007530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007532:	e009      	b.n	8007548 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007534:	f7fb fde4 	bl	8003100 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d902      	bls.n	8007548 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	73fb      	strb	r3, [r7, #15]
        break;
 8007546:	e005      	b.n	8007554 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007548:	4b3b      	ldr	r3, [pc, #236]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1ef      	bne.n	8007534 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d168      	bne.n	800762c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d113      	bne.n	8007588 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007560:	4b35      	ldr	r3, [pc, #212]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	4b35      	ldr	r3, [pc, #212]	@ (800763c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007566:	4013      	ands	r3, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6892      	ldr	r2, [r2, #8]
 800756c:	0211      	lsls	r1, r2, #8
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68d2      	ldr	r2, [r2, #12]
 8007572:	06d2      	lsls	r2, r2, #27
 8007574:	4311      	orrs	r1, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6852      	ldr	r2, [r2, #4]
 800757a:	3a01      	subs	r2, #1
 800757c:	0112      	lsls	r2, r2, #4
 800757e:	430a      	orrs	r2, r1
 8007580:	492d      	ldr	r1, [pc, #180]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007582:	4313      	orrs	r3, r2
 8007584:	610b      	str	r3, [r1, #16]
 8007586:	e02d      	b.n	80075e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d115      	bne.n	80075ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800758e:	4b2a      	ldr	r3, [pc, #168]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	4b2b      	ldr	r3, [pc, #172]	@ (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007594:	4013      	ands	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6892      	ldr	r2, [r2, #8]
 800759a:	0211      	lsls	r1, r2, #8
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	0852      	lsrs	r2, r2, #1
 80075a2:	3a01      	subs	r2, #1
 80075a4:	0552      	lsls	r2, r2, #21
 80075a6:	4311      	orrs	r1, r2
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6852      	ldr	r2, [r2, #4]
 80075ac:	3a01      	subs	r2, #1
 80075ae:	0112      	lsls	r2, r2, #4
 80075b0:	430a      	orrs	r2, r1
 80075b2:	4921      	ldr	r1, [pc, #132]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	610b      	str	r3, [r1, #16]
 80075b8:	e014      	b.n	80075e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	4b21      	ldr	r3, [pc, #132]	@ (8007644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6892      	ldr	r2, [r2, #8]
 80075c6:	0211      	lsls	r1, r2, #8
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6952      	ldr	r2, [r2, #20]
 80075cc:	0852      	lsrs	r2, r2, #1
 80075ce:	3a01      	subs	r2, #1
 80075d0:	0652      	lsls	r2, r2, #25
 80075d2:	4311      	orrs	r1, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	3a01      	subs	r2, #1
 80075da:	0112      	lsls	r2, r2, #4
 80075dc:	430a      	orrs	r2, r1
 80075de:	4916      	ldr	r1, [pc, #88]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075e4:	4b14      	ldr	r3, [pc, #80]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a13      	ldr	r2, [pc, #76]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f0:	f7fb fd86 	bl	8003100 <HAL_GetTick>
 80075f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075f6:	e009      	b.n	800760c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075f8:	f7fb fd82 	bl	8003100 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d902      	bls.n	800760c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
          break;
 800760a:	e005      	b.n	8007618 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ef      	beq.n	80075f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800761e:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	4904      	ldr	r1, [pc, #16]	@ (8007638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007628:	4313      	orrs	r3, r2
 800762a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40021000 	.word	0x40021000
 800763c:	07ff800f 	.word	0x07ff800f
 8007640:	ff9f800f 	.word	0xff9f800f
 8007644:	f9ff800f 	.word	0xf9ff800f

08007648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007656:	4b72      	ldr	r3, [pc, #456]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00e      	beq.n	8007680 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007662:	4b6f      	ldr	r3, [pc, #444]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0203 	and.w	r2, r3, #3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
       ||
 8007676:	2b00      	cmp	r3, #0
 8007678:	d142      	bne.n	8007700 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
 800767e:	e03f      	b.n	8007700 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d018      	beq.n	80076ba <RCCEx_PLLSAI2_Config+0x72>
 8007688:	2b03      	cmp	r3, #3
 800768a:	d825      	bhi.n	80076d8 <RCCEx_PLLSAI2_Config+0x90>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d002      	beq.n	8007696 <RCCEx_PLLSAI2_Config+0x4e>
 8007690:	2b02      	cmp	r3, #2
 8007692:	d009      	beq.n	80076a8 <RCCEx_PLLSAI2_Config+0x60>
 8007694:	e020      	b.n	80076d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007696:	4b62      	ldr	r3, [pc, #392]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d11d      	bne.n	80076de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a6:	e01a      	b.n	80076de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076a8:	4b5d      	ldr	r3, [pc, #372]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d116      	bne.n	80076e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076b8:	e013      	b.n	80076e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076ba:	4b59      	ldr	r3, [pc, #356]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10f      	bne.n	80076e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076c6:	4b56      	ldr	r3, [pc, #344]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076d6:	e006      	b.n	80076e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
      break;
 80076dc:	e004      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80076e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80076ee:	4b4c      	ldr	r3, [pc, #304]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f023 0203 	bic.w	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4949      	ldr	r1, [pc, #292]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 8086 	bne.w	8007814 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007708:	4b45      	ldr	r3, [pc, #276]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a44      	ldr	r2, [pc, #272]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800770e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007714:	f7fb fcf4 	bl	8003100 <HAL_GetTick>
 8007718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800771a:	e009      	b.n	8007730 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800771c:	f7fb fcf0 	bl	8003100 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d902      	bls.n	8007730 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	73fb      	strb	r3, [r7, #15]
        break;
 800772e:	e005      	b.n	800773c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007730:	4b3b      	ldr	r3, [pc, #236]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1ef      	bne.n	800771c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d168      	bne.n	8007814 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d113      	bne.n	8007770 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007748:	4b35      	ldr	r3, [pc, #212]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <RCCEx_PLLSAI2_Config+0x1dc>)
 800774e:	4013      	ands	r3, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6892      	ldr	r2, [r2, #8]
 8007754:	0211      	lsls	r1, r2, #8
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68d2      	ldr	r2, [r2, #12]
 800775a:	06d2      	lsls	r2, r2, #27
 800775c:	4311      	orrs	r1, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	3a01      	subs	r2, #1
 8007764:	0112      	lsls	r2, r2, #4
 8007766:	430a      	orrs	r2, r1
 8007768:	492d      	ldr	r1, [pc, #180]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	614b      	str	r3, [r1, #20]
 800776e:	e02d      	b.n	80077cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d115      	bne.n	80077a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007776:	4b2a      	ldr	r3, [pc, #168]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	4b2b      	ldr	r3, [pc, #172]	@ (8007828 <RCCEx_PLLSAI2_Config+0x1e0>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6892      	ldr	r2, [r2, #8]
 8007782:	0211      	lsls	r1, r2, #8
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6912      	ldr	r2, [r2, #16]
 8007788:	0852      	lsrs	r2, r2, #1
 800778a:	3a01      	subs	r2, #1
 800778c:	0552      	lsls	r2, r2, #21
 800778e:	4311      	orrs	r1, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6852      	ldr	r2, [r2, #4]
 8007794:	3a01      	subs	r2, #1
 8007796:	0112      	lsls	r2, r2, #4
 8007798:	430a      	orrs	r2, r1
 800779a:	4921      	ldr	r1, [pc, #132]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800779c:	4313      	orrs	r3, r2
 800779e:	614b      	str	r3, [r1, #20]
 80077a0:	e014      	b.n	80077cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	4b21      	ldr	r3, [pc, #132]	@ (800782c <RCCEx_PLLSAI2_Config+0x1e4>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6892      	ldr	r2, [r2, #8]
 80077ae:	0211      	lsls	r1, r2, #8
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6952      	ldr	r2, [r2, #20]
 80077b4:	0852      	lsrs	r2, r2, #1
 80077b6:	3a01      	subs	r2, #1
 80077b8:	0652      	lsls	r2, r2, #25
 80077ba:	4311      	orrs	r1, r2
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6852      	ldr	r2, [r2, #4]
 80077c0:	3a01      	subs	r2, #1
 80077c2:	0112      	lsls	r2, r2, #4
 80077c4:	430a      	orrs	r2, r1
 80077c6:	4916      	ldr	r1, [pc, #88]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80077cc:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d8:	f7fb fc92 	bl	8003100 <HAL_GetTick>
 80077dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077de:	e009      	b.n	80077f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077e0:	f7fb fc8e 	bl	8003100 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d902      	bls.n	80077f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	73fb      	strb	r3, [r7, #15]
          break;
 80077f2:	e005      	b.n	8007800 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0ef      	beq.n	80077e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007806:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	4904      	ldr	r1, [pc, #16]	@ (8007820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007810:	4313      	orrs	r3, r2
 8007812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40021000 	.word	0x40021000
 8007824:	07ff800f 	.word	0x07ff800f
 8007828:	ff9f800f 	.word	0xff9f800f
 800782c:	f9ff800f 	.word	0xf9ff800f

08007830 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	@ 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800784c:	d10b      	bne.n	8007866 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800784e:	4b7e      	ldr	r3, [pc, #504]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007854:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007858:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b60      	cmp	r3, #96	@ 0x60
 800785e:	d112      	bne.n	8007886 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007860:	4b7a      	ldr	r3, [pc, #488]	@ (8007a4c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	e00f      	b.n	8007886 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786c:	d10b      	bne.n	8007886 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800786e:	4b76      	ldr	r3, [pc, #472]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007874:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007878:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007880:	d101      	bne.n	8007886 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007882:	4b72      	ldr	r3, [pc, #456]	@ (8007a4c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007884:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f040 80d6 	bne.w	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	d003      	beq.n	80078a0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800789e:	d13b      	bne.n	8007918 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80078a0:	4b69      	ldr	r3, [pc, #420]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078ac:	f040 80c4 	bne.w	8007a38 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80078b0:	4b65      	ldr	r3, [pc, #404]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80bd 	beq.w	8007a38 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078be:	4b62      	ldr	r3, [pc, #392]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	3301      	adds	r3, #1
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80078de:	4b5a      	ldr	r3, [pc, #360]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	0edb      	lsrs	r3, r3, #27
 80078e4:	f003 031f 	and.w	r3, r3, #31
 80078e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80078f0:	4b55      	ldr	r3, [pc, #340]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80078fc:	2311      	movs	r3, #17
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	e001      	b.n	8007906 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007902:	2307      	movs	r3, #7
 8007904:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	fb03 f202 	mul.w	r2, r3, r2
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007916:	e08f      	b.n	8007a38 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d13a      	bne.n	8007994 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800791e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800792a:	f040 8086 	bne.w	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800792e:	4b46      	ldr	r3, [pc, #280]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d07f      	beq.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800793a:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	3301      	adds	r3, #1
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800794e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007958:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800795a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	0edb      	lsrs	r3, r3, #27
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800796c:	4b36      	ldr	r3, [pc, #216]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007978:	2311      	movs	r3, #17
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e001      	b.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800797e:	2307      	movs	r3, #7
 8007980:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	fb03 f202 	mul.w	r2, r3, r2
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	e052      	b.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b80      	cmp	r3, #128	@ 0x80
 8007998:	d003      	beq.n	80079a2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a0:	d109      	bne.n	80079b6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079a2:	4b29      	ldr	r3, [pc, #164]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ae:	d144      	bne.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80079b0:	4b27      	ldr	r3, [pc, #156]	@ (8007a50 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80079b2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079b4:	e041      	b.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d003      	beq.n	80079c4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079c2:	d13a      	bne.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80079c4:	4b20      	ldr	r3, [pc, #128]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079d0:	d133      	bne.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80079d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02d      	beq.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80079de:	4b1a      	ldr	r3, [pc, #104]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	091b      	lsrs	r3, r3, #4
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	3301      	adds	r3, #1
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80079f2:	4b15      	ldr	r3, [pc, #84]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80079fe:	4b12      	ldr	r3, [pc, #72]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	0edb      	lsrs	r3, r3, #27
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007a10:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007a1c:	2311      	movs	r3, #17
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e001      	b.n	8007a26 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007a22:	2307      	movs	r3, #7
 8007a24:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	fb03 f202 	mul.w	r2, r3, r2
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e000      	b.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007a38:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3724      	adds	r7, #36	@ 0x24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	001fff68 	.word	0x001fff68
 8007a50:	00f42400 	.word	0x00f42400

08007a54 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d904      	bls.n	8007a72 <HAL_SAI_InitProtocol+0x1e>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3b03      	subs	r3, #3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d812      	bhi.n	8007a96 <HAL_SAI_InitProtocol+0x42>
 8007a70:	e008      	b.n	8007a84 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f9fb 	bl	8007e74 <SAI_InitI2S>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
      break;
 8007a82:	e00b      	b.n	8007a9c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 faa4 	bl	8007fd8 <SAI_InitPCM>
 8007a90:	4603      	mov	r3, r0
 8007a92:	75fb      	strb	r3, [r7, #23]
      break;
 8007a94:	e002      	b.n	8007a9c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f808 	bl	8007ab8 <HAL_SAI_Init>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	@ 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e1c7      	b.n	8007e5a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d10e      	bne.n	8007af2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a81      	ldr	r2, [pc, #516]	@ (8007ce0 <HAL_SAI_Init+0x228>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d107      	bne.n	8007aee <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d103      	bne.n	8007aee <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e1b3      	b.n	8007e5a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fb f9ba 	bl	8002e80 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fae5 	bl	80080dc <SAI_Disable>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e19e      	b.n	8007e5a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d00c      	beq.n	8007b46 <HAL_SAI_Init+0x8e>
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d80d      	bhi.n	8007b4c <HAL_SAI_Init+0x94>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_SAI_Init+0x82>
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d003      	beq.n	8007b40 <HAL_SAI_Init+0x88>
 8007b38:	e008      	b.n	8007b4c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b3e:	e008      	b.n	8007b52 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b40:	2310      	movs	r3, #16
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b44:	e005      	b.n	8007b52 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b46:	2320      	movs	r3, #32
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b4a:	e002      	b.n	8007b52 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b50:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d81d      	bhi.n	8007b96 <HAL_SAI_Init+0xde>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <HAL_SAI_Init+0xa8>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007b77 	.word	0x08007b77
 8007b68:	08007b7f 	.word	0x08007b7f
 8007b6c:	08007b87 	.word	0x08007b87
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
      break;
 8007b74:	e012      	b.n	8007b9c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b7a:	61fb      	str	r3, [r7, #28]
      break;
 8007b7c:	e00e      	b.n	8007b9c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b82:	61fb      	str	r3, [r7, #28]
      break;
 8007b84:	e00a      	b.n	8007b9c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007b86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007b8a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007b94:	e002      	b.n	8007b9c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
      break;
 8007b9a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8007ce0 <HAL_SAI_Init+0x228>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_SAI_Init+0xf8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a4e      	ldr	r2, [pc, #312]	@ (8007ce4 <HAL_SAI_Init+0x22c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d103      	bne.n	8007bb8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8007ce8 <HAL_SAI_Init+0x230>)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e002      	b.n	8007bbe <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8007cec <HAL_SAI_Init+0x234>)
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d073      	beq.n	8007cae <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a45      	ldr	r2, [pc, #276]	@ (8007ce0 <HAL_SAI_Init+0x228>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d004      	beq.n	8007bda <HAL_SAI_Init+0x122>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a43      	ldr	r2, [pc, #268]	@ (8007ce4 <HAL_SAI_Init+0x22c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d105      	bne.n	8007be6 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007bda:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007bde:	f7fe fd1d 	bl	800661c <HAL_RCCEx_GetPeriphCLKFreq>
 8007be2:	61b8      	str	r0, [r7, #24]
 8007be4:	e004      	b.n	8007bf0 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007be6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007bea:	f7fe fd17 	bl	800661c <HAL_RCCEx_GetPeriphCLKFreq>
 8007bee:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007bf8:	d120      	bne.n	8007c3c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d102      	bne.n	8007c08 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007c02:	2340      	movs	r3, #64	@ 0x40
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	e00a      	b.n	8007c1e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d103      	bne.n	8007c18 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	e002      	b.n	8007c1e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	e017      	b.n	8007c6c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c44:	d101      	bne.n	8007c4a <HAL_SAI_Init+0x192>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e000      	b.n	8007c4c <HAL_SAI_Init+0x194>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c6a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4a20      	ldr	r2, [pc, #128]	@ (8007cf0 <HAL_SAI_Init+0x238>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	08da      	lsrs	r2, r3, #3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007c7a:	6979      	ldr	r1, [r7, #20]
 8007c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf0 <HAL_SAI_Init+0x238>)
 8007c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c82:	08da      	lsrs	r2, r3, #3
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	1aca      	subs	r2, r1, r3
 8007c8e:	2a08      	cmp	r2, #8
 8007c90:	d904      	bls.n	8007c9c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d104      	bne.n	8007cae <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	085a      	lsrs	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_SAI_Init+0x206>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d109      	bne.n	8007cd2 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_SAI_Init+0x212>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e001      	b.n	8007cce <HAL_SAI_Init+0x216>
 8007cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cce:	623b      	str	r3, [r7, #32]
 8007cd0:	e012      	b.n	8007cf8 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_SAI_Init+0x23c>
 8007cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cde:	e00a      	b.n	8007cf6 <HAL_SAI_Init+0x23e>
 8007ce0:	40015404 	.word	0x40015404
 8007ce4:	40015424 	.word	0x40015424
 8007ce8:	40015400 	.word	0x40015400
 8007cec:	40015800 	.word	0x40015800
 8007cf0:	cccccccd 	.word	0xcccccccd
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6819      	ldr	r1, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b58      	ldr	r3, [pc, #352]	@ (8007e64 <HAL_SAI_Init+0x3ac>)
 8007d04:	400b      	ands	r3, r1
 8007d06:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d16:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d1c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d22:	431a      	orrs	r2, r3
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007d30:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d3c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	051b      	lsls	r3, r3, #20
 8007d44:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007d4a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007d62:	f023 030f 	bic.w	r3, r3, #15
 8007d66:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6859      	ldr	r1, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6899      	ldr	r1, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b35      	ldr	r3, [pc, #212]	@ (8007e68 <HAL_SAI_Init+0x3b0>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007da6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8007dac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8007db2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db8:	3b01      	subs	r3, #1
 8007dba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007dbc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68d9      	ldr	r1, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007dd4:	400b      	ands	r3, r1
 8007dd6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68d9      	ldr	r1, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007de6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dec:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007dee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007df4:	3b01      	subs	r3, #1
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a19      	ldr	r2, [pc, #100]	@ (8007e6c <HAL_SAI_Init+0x3b4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d119      	bne.n	8007e40 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007e0c:	4b18      	ldr	r3, [pc, #96]	@ (8007e70 <HAL_SAI_Init+0x3b8>)
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e10:	4a17      	ldr	r2, [pc, #92]	@ (8007e70 <HAL_SAI_Init+0x3b8>)
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d10e      	bne.n	8007e40 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007e2e:	4910      	ldr	r1, [pc, #64]	@ (8007e70 <HAL_SAI_Init+0x3b8>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007e34:	4b0e      	ldr	r3, [pc, #56]	@ (8007e70 <HAL_SAI_Init+0x3b8>)
 8007e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e38:	4a0d      	ldr	r2, [pc, #52]	@ (8007e70 <HAL_SAI_Init+0x3b8>)
 8007e3a:	f043 0301 	orr.w	r3, r3, #1
 8007e3e:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3728      	adds	r7, #40	@ 0x28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	f805c010 	.word	0xf805c010
 8007e68:	fff88000 	.word	0xfff88000
 8007e6c:	40015404 	.word	0x40015404
 8007e70:	40015400 	.word	0x40015400

08007e74 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <SAI_InitI2S+0x2e>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d103      	bne.n	8007eaa <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007ea8:	e002      	b.n	8007eb0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007eb6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ebe:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e077      	b.n	8007fca <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007eec:	661a      	str	r2, [r3, #96]	@ 0x60
 8007eee:	e006      	b.n	8007efe <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d84f      	bhi.n	8007fa4 <SAI_InitI2S+0x130>
 8007f04:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <SAI_InitI2S+0x98>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f3f 	.word	0x08007f3f
 8007f14:	08007f61 	.word	0x08007f61
 8007f18:	08007f83 	.word	0x08007f83
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2280      	movs	r2, #128	@ 0x80
 8007f20:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	011a      	lsls	r2, r3, #4
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2240      	movs	r2, #64	@ 0x40
 8007f3a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f3c:	e035      	b.n	8007faa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	019a      	lsls	r2, r3, #6
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	085b      	lsrs	r3, r3, #1
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2280      	movs	r2, #128	@ 0x80
 8007f5c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f5e:	e024      	b.n	8007faa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22c0      	movs	r2, #192	@ 0xc0
 8007f64:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	019a      	lsls	r2, r3, #6
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	085b      	lsrs	r3, r3, #1
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2280      	movs	r2, #128	@ 0x80
 8007f7e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007f80:	e013      	b.n	8007faa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	22e0      	movs	r2, #224	@ 0xe0
 8007f86:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	019a      	lsls	r2, r3, #6
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2280      	movs	r2, #128	@ 0x80
 8007fa0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007fa2:	e002      	b.n	8007faa <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d10b      	bne.n	8007fc8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d102      	bne.n	8007fbc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2210      	movs	r2, #16
 8007fba:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d102      	bne.n	8007fc8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <SAI_InitPCM+0x2e>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d103      	bne.n	800800e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800800c:	e002      	b.n	8008014 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008020:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008028:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800803c:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d103      	bne.n	800804c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	655a      	str	r2, [r3, #84]	@ 0x54
 800804a:	e002      	b.n	8008052 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	220d      	movs	r2, #13
 8008050:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d837      	bhi.n	80080c8 <SAI_InitPCM+0xf0>
 8008058:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <SAI_InitPCM+0x88>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008087 	.word	0x08008087
 8008068:	0800809d 	.word	0x0800809d
 800806c:	080080b3 	.word	0x080080b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2280      	movs	r2, #128	@ 0x80
 8008074:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	011a      	lsls	r2, r3, #4
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2240      	movs	r2, #64	@ 0x40
 8008082:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008084:	e023      	b.n	80080ce <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2280      	movs	r2, #128	@ 0x80
 800808a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2280      	movs	r2, #128	@ 0x80
 8008098:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800809a:	e018      	b.n	80080ce <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	22c0      	movs	r2, #192	@ 0xc0
 80080a0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2280      	movs	r2, #128	@ 0x80
 80080ae:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80080b0:	e00d      	b.n	80080ce <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	22e0      	movs	r2, #224	@ 0xe0
 80080b6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2280      	movs	r2, #128	@ 0x80
 80080c4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80080c6:	e002      	b.n	80080ce <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
      break;
 80080cc:	bf00      	nop
  }

  return status;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80080e4:	4b18      	ldr	r3, [pc, #96]	@ (8008148 <SAI_Disable+0x6c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a18      	ldr	r2, [pc, #96]	@ (800814c <SAI_Disable+0x70>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	0b1b      	lsrs	r3, r3, #12
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008106:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	72fb      	strb	r3, [r7, #11]
      break;
 8008122:	e009      	b.n	8008138 <SAI_Disable+0x5c>
    }
    count--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3b01      	subs	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e7      	bne.n	8008108 <SAI_Disable+0x2c>

  return status;
 8008138:	7afb      	ldrb	r3, [r7, #11]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000000 	.word	0x20000000
 800814c:	95cbec1b 	.word	0x95cbec1b

08008150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e095      	b.n	800828e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008172:	d009      	beq.n	8008188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	61da      	str	r2, [r3, #28]
 800817a:	e005      	b.n	8008188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fa fd12 	bl	8002bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081c8:	d902      	bls.n	80081d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e002      	b.n	80081d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80081de:	d007      	beq.n	80081f0 <HAL_SPI_Init+0xa0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081e8:	d002      	beq.n	80081f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800821e:	431a      	orrs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008232:	ea42 0103 	orr.w	r1, r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	0c1b      	lsrs	r3, r3, #16
 800824c:	f003 0204 	and.w	r2, r3, #4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800826c:	ea42 0103 	orr.w	r1, r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e049      	b.n	800833c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7fa fcc7 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f000 fcbb 	bl	8008c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d001      	beq.n	800835c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e04f      	b.n	80083fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 0201 	orr.w	r2, r2, #1
 8008372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a23      	ldr	r2, [pc, #140]	@ (8008408 <HAL_TIM_Base_Start_IT+0xc4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01d      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008386:	d018      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a1f      	ldr	r2, [pc, #124]	@ (800840c <HAL_TIM_Base_Start_IT+0xc8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a1e      	ldr	r2, [pc, #120]	@ (8008410 <HAL_TIM_Base_Start_IT+0xcc>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d00e      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008414 <HAL_TIM_Base_Start_IT+0xd0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d009      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008418 <HAL_TIM_Base_Start_IT+0xd4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0x76>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a19      	ldr	r2, [pc, #100]	@ (800841c <HAL_TIM_Base_Start_IT+0xd8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d115      	bne.n	80083e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	4b17      	ldr	r3, [pc, #92]	@ (8008420 <HAL_TIM_Base_Start_IT+0xdc>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b06      	cmp	r3, #6
 80083ca:	d015      	beq.n	80083f8 <HAL_TIM_Base_Start_IT+0xb4>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d2:	d011      	beq.n	80083f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e4:	e008      	b.n	80083f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f042 0201 	orr.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e000      	b.n	80083fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40000400 	.word	0x40000400
 8008410:	40000800 	.word	0x40000800
 8008414:	40000c00 	.word	0x40000c00
 8008418:	40013400 	.word	0x40013400
 800841c:	40014000 	.word	0x40014000
 8008420:	00010007 	.word	0x00010007

08008424 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e049      	b.n	80084ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f841 	bl	80084d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f000 fbf4 	bl	8008c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e049      	b.n	800858c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fa fbf5 	bl	8002cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f000 fb93 	bl	8008c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <HAL_TIM_PWM_Start+0x24>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	bf14      	ite	ne
 80085b0:	2301      	movne	r3, #1
 80085b2:	2300      	moveq	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	e03c      	b.n	8008632 <HAL_TIM_PWM_Start+0x9e>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d109      	bne.n	80085d2 <HAL_TIM_PWM_Start+0x3e>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	bf14      	ite	ne
 80085ca:	2301      	movne	r3, #1
 80085cc:	2300      	moveq	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	e02f      	b.n	8008632 <HAL_TIM_PWM_Start+0x9e>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d109      	bne.n	80085ec <HAL_TIM_PWM_Start+0x58>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	bf14      	ite	ne
 80085e4:	2301      	movne	r3, #1
 80085e6:	2300      	moveq	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	e022      	b.n	8008632 <HAL_TIM_PWM_Start+0x9e>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b0c      	cmp	r3, #12
 80085f0:	d109      	bne.n	8008606 <HAL_TIM_PWM_Start+0x72>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	bf14      	ite	ne
 80085fe:	2301      	movne	r3, #1
 8008600:	2300      	moveq	r3, #0
 8008602:	b2db      	uxtb	r3, r3
 8008604:	e015      	b.n	8008632 <HAL_TIM_PWM_Start+0x9e>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b10      	cmp	r3, #16
 800860a:	d109      	bne.n	8008620 <HAL_TIM_PWM_Start+0x8c>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	bf14      	ite	ne
 8008618:	2301      	movne	r3, #1
 800861a:	2300      	moveq	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	e008      	b.n	8008632 <HAL_TIM_PWM_Start+0x9e>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b01      	cmp	r3, #1
 800862a:	bf14      	ite	ne
 800862c:	2301      	movne	r3, #1
 800862e:	2300      	moveq	r3, #0
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e09c      	b.n	8008774 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <HAL_TIM_PWM_Start+0xb6>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008648:	e023      	b.n	8008692 <HAL_TIM_PWM_Start+0xfe>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b04      	cmp	r3, #4
 800864e:	d104      	bne.n	800865a <HAL_TIM_PWM_Start+0xc6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008658:	e01b      	b.n	8008692 <HAL_TIM_PWM_Start+0xfe>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b08      	cmp	r3, #8
 800865e:	d104      	bne.n	800866a <HAL_TIM_PWM_Start+0xd6>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008668:	e013      	b.n	8008692 <HAL_TIM_PWM_Start+0xfe>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b0c      	cmp	r3, #12
 800866e:	d104      	bne.n	800867a <HAL_TIM_PWM_Start+0xe6>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008678:	e00b      	b.n	8008692 <HAL_TIM_PWM_Start+0xfe>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b10      	cmp	r3, #16
 800867e:	d104      	bne.n	800868a <HAL_TIM_PWM_Start+0xf6>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008688:	e003      	b.n	8008692 <HAL_TIM_PWM_Start+0xfe>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fee2 	bl	8009464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a35      	ldr	r2, [pc, #212]	@ (800877c <HAL_TIM_PWM_Start+0x1e8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_TIM_PWM_Start+0x13e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a34      	ldr	r2, [pc, #208]	@ (8008780 <HAL_TIM_PWM_Start+0x1ec>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIM_PWM_Start+0x13e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a32      	ldr	r2, [pc, #200]	@ (8008784 <HAL_TIM_PWM_Start+0x1f0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_TIM_PWM_Start+0x13e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a31      	ldr	r2, [pc, #196]	@ (8008788 <HAL_TIM_PWM_Start+0x1f4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_TIM_PWM_Start+0x13e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a2f      	ldr	r2, [pc, #188]	@ (800878c <HAL_TIM_PWM_Start+0x1f8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <HAL_TIM_PWM_Start+0x142>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <HAL_TIM_PWM_Start+0x144>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d007      	beq.n	80086ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a22      	ldr	r2, [pc, #136]	@ (800877c <HAL_TIM_PWM_Start+0x1e8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01d      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fe:	d018      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a22      	ldr	r2, [pc, #136]	@ (8008790 <HAL_TIM_PWM_Start+0x1fc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a21      	ldr	r2, [pc, #132]	@ (8008794 <HAL_TIM_PWM_Start+0x200>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1f      	ldr	r2, [pc, #124]	@ (8008798 <HAL_TIM_PWM_Start+0x204>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a17      	ldr	r2, [pc, #92]	@ (8008780 <HAL_TIM_PWM_Start+0x1ec>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIM_PWM_Start+0x19e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a15      	ldr	r2, [pc, #84]	@ (8008784 <HAL_TIM_PWM_Start+0x1f0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d115      	bne.n	800875e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	4b18      	ldr	r3, [pc, #96]	@ (800879c <HAL_TIM_PWM_Start+0x208>)
 800873a:	4013      	ands	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b06      	cmp	r3, #6
 8008742:	d015      	beq.n	8008770 <HAL_TIM_PWM_Start+0x1dc>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800874a:	d011      	beq.n	8008770 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800875c:	e008      	b.n	8008770 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0201 	orr.w	r2, r2, #1
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e000      	b.n	8008772 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008770:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40012c00 	.word	0x40012c00
 8008780:	40013400 	.word	0x40013400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	00010007 	.word	0x00010007

080087a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_TIM_OC_ConfigChannel+0x1e>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e066      	b.n	800888c <HAL_TIM_OC_ConfigChannel+0xec>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b14      	cmp	r3, #20
 80087ca:	d857      	bhi.n	800887c <HAL_TIM_OC_ConfigChannel+0xdc>
 80087cc:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	08008829 	.word	0x08008829
 80087d8:	0800887d 	.word	0x0800887d
 80087dc:	0800887d 	.word	0x0800887d
 80087e0:	0800887d 	.word	0x0800887d
 80087e4:	08008837 	.word	0x08008837
 80087e8:	0800887d 	.word	0x0800887d
 80087ec:	0800887d 	.word	0x0800887d
 80087f0:	0800887d 	.word	0x0800887d
 80087f4:	08008845 	.word	0x08008845
 80087f8:	0800887d 	.word	0x0800887d
 80087fc:	0800887d 	.word	0x0800887d
 8008800:	0800887d 	.word	0x0800887d
 8008804:	08008853 	.word	0x08008853
 8008808:	0800887d 	.word	0x0800887d
 800880c:	0800887d 	.word	0x0800887d
 8008810:	0800887d 	.word	0x0800887d
 8008814:	08008861 	.word	0x08008861
 8008818:	0800887d 	.word	0x0800887d
 800881c:	0800887d 	.word	0x0800887d
 8008820:	0800887d 	.word	0x0800887d
 8008824:	0800886f 	.word	0x0800886f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 faa8 	bl	8008d84 <TIM_OC1_SetConfig>
      break;
 8008834:	e025      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fb31 	bl	8008ea4 <TIM_OC2_SetConfig>
      break;
 8008842:	e01e      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fbb4 	bl	8008fb8 <TIM_OC3_SetConfig>
      break;
 8008850:	e017      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fc35 	bl	80090c8 <TIM_OC4_SetConfig>
      break;
 800885e:	e010      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fc98 	bl	800919c <TIM_OC5_SetConfig>
      break;
 800886c:	e009      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fcf5 	bl	8009264 <TIM_OC6_SetConfig>
      break;
 800887a:	e002      	b.n	8008882 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
      break;
 8008880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e0ff      	b.n	8008ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b14      	cmp	r3, #20
 80088be:	f200 80f0 	bhi.w	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088c2:	a201      	add	r2, pc, #4	@ (adr r2, 80088c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	0800891d 	.word	0x0800891d
 80088cc:	08008aa3 	.word	0x08008aa3
 80088d0:	08008aa3 	.word	0x08008aa3
 80088d4:	08008aa3 	.word	0x08008aa3
 80088d8:	0800895d 	.word	0x0800895d
 80088dc:	08008aa3 	.word	0x08008aa3
 80088e0:	08008aa3 	.word	0x08008aa3
 80088e4:	08008aa3 	.word	0x08008aa3
 80088e8:	0800899f 	.word	0x0800899f
 80088ec:	08008aa3 	.word	0x08008aa3
 80088f0:	08008aa3 	.word	0x08008aa3
 80088f4:	08008aa3 	.word	0x08008aa3
 80088f8:	080089df 	.word	0x080089df
 80088fc:	08008aa3 	.word	0x08008aa3
 8008900:	08008aa3 	.word	0x08008aa3
 8008904:	08008aa3 	.word	0x08008aa3
 8008908:	08008a21 	.word	0x08008a21
 800890c:	08008aa3 	.word	0x08008aa3
 8008910:	08008aa3 	.word	0x08008aa3
 8008914:	08008aa3 	.word	0x08008aa3
 8008918:	08008a61 	.word	0x08008a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68b9      	ldr	r1, [r7, #8]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fa2e 	bl	8008d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0208 	orr.w	r2, r2, #8
 8008936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0204 	bic.w	r2, r2, #4
 8008946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6999      	ldr	r1, [r3, #24]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	691a      	ldr	r2, [r3, #16]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	619a      	str	r2, [r3, #24]
      break;
 800895a:	e0a5      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fa9e 	bl	8008ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6999      	ldr	r1, [r3, #24]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	021a      	lsls	r2, r3, #8
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	619a      	str	r2, [r3, #24]
      break;
 800899c:	e084      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fb07 	bl	8008fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0208 	orr.w	r2, r2, #8
 80089b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69da      	ldr	r2, [r3, #28]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0204 	bic.w	r2, r2, #4
 80089c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	69d9      	ldr	r1, [r3, #28]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	61da      	str	r2, [r3, #28]
      break;
 80089dc:	e064      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fb6f 	bl	80090c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69d9      	ldr	r1, [r3, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	021a      	lsls	r2, r3, #8
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	61da      	str	r2, [r3, #28]
      break;
 8008a1e:	e043      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68b9      	ldr	r1, [r7, #8]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fbb8 	bl	800919c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f042 0208 	orr.w	r2, r2, #8
 8008a3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0204 	bic.w	r2, r2, #4
 8008a4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	691a      	ldr	r2, [r3, #16]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008a5e:	e023      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fbfc 	bl	8009264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	021a      	lsls	r2, r3, #8
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008aa0:	e002      	b.n	8008aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop

08008abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e0b6      	b.n	8008c46 <HAL_TIM_ConfigClockSource+0x18a>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008af6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d03e      	beq.n	8008b94 <HAL_TIM_ConfigClockSource+0xd8>
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b1a:	f200 8087 	bhi.w	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b22:	f000 8086 	beq.w	8008c32 <HAL_TIM_ConfigClockSource+0x176>
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b2a:	d87f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b2c:	2b70      	cmp	r3, #112	@ 0x70
 8008b2e:	d01a      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0xaa>
 8008b30:	2b70      	cmp	r3, #112	@ 0x70
 8008b32:	d87b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	d050      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x11e>
 8008b38:	2b60      	cmp	r3, #96	@ 0x60
 8008b3a:	d877      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b3c:	2b50      	cmp	r3, #80	@ 0x50
 8008b3e:	d03c      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0xfe>
 8008b40:	2b50      	cmp	r3, #80	@ 0x50
 8008b42:	d873      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d058      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x13e>
 8008b48:	2b40      	cmp	r3, #64	@ 0x40
 8008b4a:	d86f      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b4c:	2b30      	cmp	r3, #48	@ 0x30
 8008b4e:	d064      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x15e>
 8008b50:	2b30      	cmp	r3, #48	@ 0x30
 8008b52:	d86b      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d060      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x15e>
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d867      	bhi.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05c      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x15e>
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d05a      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x15e>
 8008b64:	e062      	b.n	8008c2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b76:	f000 fc55 	bl	8009424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	609a      	str	r2, [r3, #8]
      break;
 8008b92:	e04f      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ba4:	f000 fc3e 	bl	8009424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb6:	609a      	str	r2, [r3, #8]
      break;
 8008bb8:	e03c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 fbb2 	bl	8009330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2150      	movs	r1, #80	@ 0x50
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fc0b 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008bd8:	e02c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 fbd1 	bl	800938e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2160      	movs	r1, #96	@ 0x60
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fbfb 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008bf8:	e01c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c06:	461a      	mov	r2, r3
 8008c08:	f000 fb92 	bl	8009330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2140      	movs	r1, #64	@ 0x40
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fbeb 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008c18:	e00c      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f000 fbe2 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008c2a:	e003      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c30:	e000      	b.n	8008c34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a40      	ldr	r2, [pc, #256]	@ (8008d64 <TIM_Base_SetConfig+0x114>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d013      	beq.n	8008c90 <TIM_Base_SetConfig+0x40>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c6e:	d00f      	beq.n	8008c90 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a3d      	ldr	r2, [pc, #244]	@ (8008d68 <TIM_Base_SetConfig+0x118>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00b      	beq.n	8008c90 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a3c      	ldr	r2, [pc, #240]	@ (8008d6c <TIM_Base_SetConfig+0x11c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d007      	beq.n	8008c90 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a3b      	ldr	r2, [pc, #236]	@ (8008d70 <TIM_Base_SetConfig+0x120>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8008d74 <TIM_Base_SetConfig+0x124>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d108      	bne.n	8008ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8008d64 <TIM_Base_SetConfig+0x114>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d01f      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb0:	d01b      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8008d68 <TIM_Base_SetConfig+0x118>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d017      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8008d6c <TIM_Base_SetConfig+0x11c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8008d70 <TIM_Base_SetConfig+0x120>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00f      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a29      	ldr	r2, [pc, #164]	@ (8008d74 <TIM_Base_SetConfig+0x124>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00b      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a28      	ldr	r2, [pc, #160]	@ (8008d78 <TIM_Base_SetConfig+0x128>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d007      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a27      	ldr	r2, [pc, #156]	@ (8008d7c <TIM_Base_SetConfig+0x12c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a26      	ldr	r2, [pc, #152]	@ (8008d80 <TIM_Base_SetConfig+0x130>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d108      	bne.n	8008cfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a10      	ldr	r2, [pc, #64]	@ (8008d64 <TIM_Base_SetConfig+0x114>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d00f      	beq.n	8008d48 <TIM_Base_SetConfig+0xf8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a12      	ldr	r2, [pc, #72]	@ (8008d74 <TIM_Base_SetConfig+0x124>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00b      	beq.n	8008d48 <TIM_Base_SetConfig+0xf8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a11      	ldr	r2, [pc, #68]	@ (8008d78 <TIM_Base_SetConfig+0x128>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d007      	beq.n	8008d48 <TIM_Base_SetConfig+0xf8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a10      	ldr	r2, [pc, #64]	@ (8008d7c <TIM_Base_SetConfig+0x12c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_Base_SetConfig+0xf8>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a0f      	ldr	r2, [pc, #60]	@ (8008d80 <TIM_Base_SetConfig+0x130>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d103      	bne.n	8008d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	615a      	str	r2, [r3, #20]
}
 8008d56:	bf00      	nop
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40012c00 	.word	0x40012c00
 8008d68:	40000400 	.word	0x40000400
 8008d6c:	40000800 	.word	0x40000800
 8008d70:	40000c00 	.word	0x40000c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400
 8008d80:	40014800 	.word	0x40014800

08008d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f023 0201 	bic.w	r2, r3, #1
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 0302 	bic.w	r3, r3, #2
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2c      	ldr	r2, [pc, #176]	@ (8008e90 <TIM_OC1_SetConfig+0x10c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC1_SetConfig+0x80>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2b      	ldr	r2, [pc, #172]	@ (8008e94 <TIM_OC1_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC1_SetConfig+0x80>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2a      	ldr	r2, [pc, #168]	@ (8008e98 <TIM_OC1_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC1_SetConfig+0x80>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a29      	ldr	r2, [pc, #164]	@ (8008e9c <TIM_OC1_SetConfig+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC1_SetConfig+0x80>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a28      	ldr	r2, [pc, #160]	@ (8008ea0 <TIM_OC1_SetConfig+0x11c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d10c      	bne.n	8008e1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f023 0308 	bic.w	r3, r3, #8
 8008e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 0304 	bic.w	r3, r3, #4
 8008e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1b      	ldr	r2, [pc, #108]	@ (8008e90 <TIM_OC1_SetConfig+0x10c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00f      	beq.n	8008e46 <TIM_OC1_SetConfig+0xc2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	@ (8008e94 <TIM_OC1_SetConfig+0x110>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00b      	beq.n	8008e46 <TIM_OC1_SetConfig+0xc2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a19      	ldr	r2, [pc, #100]	@ (8008e98 <TIM_OC1_SetConfig+0x114>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <TIM_OC1_SetConfig+0xc2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <TIM_OC1_SetConfig+0x118>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <TIM_OC1_SetConfig+0xc2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a17      	ldr	r2, [pc, #92]	@ (8008ea0 <TIM_OC1_SetConfig+0x11c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d111      	bne.n	8008e6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	bf00      	nop
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	40012c00 	.word	0x40012c00
 8008e94:	40013400 	.word	0x40013400
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800

08008ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f023 0210 	bic.w	r2, r3, #16
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a28      	ldr	r2, [pc, #160]	@ (8008fa4 <TIM_OC2_SetConfig+0x100>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x6c>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a27      	ldr	r2, [pc, #156]	@ (8008fa8 <TIM_OC2_SetConfig+0x104>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa4 <TIM_OC2_SetConfig+0x100>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_OC2_SetConfig+0xb0>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa8 <TIM_OC2_SetConfig+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_OC2_SetConfig+0xb0>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008fac <TIM_OC2_SetConfig+0x108>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC2_SetConfig+0xb0>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb0 <TIM_OC2_SetConfig+0x10c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC2_SetConfig+0xb0>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a19      	ldr	r2, [pc, #100]	@ (8008fb4 <TIM_OC2_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d113      	bne.n	8008f7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40013400 	.word	0x40013400
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	40014400 	.word	0x40014400
 8008fb4:	40014800 	.word	0x40014800

08008fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a27      	ldr	r2, [pc, #156]	@ (80090b4 <TIM_OC3_SetConfig+0xfc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_OC3_SetConfig+0x6a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a26      	ldr	r2, [pc, #152]	@ (80090b8 <TIM_OC3_SetConfig+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10d      	bne.n	800903e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800903c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1c      	ldr	r2, [pc, #112]	@ (80090b4 <TIM_OC3_SetConfig+0xfc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC3_SetConfig+0xae>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1b      	ldr	r2, [pc, #108]	@ (80090b8 <TIM_OC3_SetConfig+0x100>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC3_SetConfig+0xae>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1a      	ldr	r2, [pc, #104]	@ (80090bc <TIM_OC3_SetConfig+0x104>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC3_SetConfig+0xae>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a19      	ldr	r2, [pc, #100]	@ (80090c0 <TIM_OC3_SetConfig+0x108>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC3_SetConfig+0xae>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a18      	ldr	r2, [pc, #96]	@ (80090c4 <TIM_OC3_SetConfig+0x10c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d113      	bne.n	800908e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40012c00 	.word	0x40012c00
 80090b8:	40013400 	.word	0x40013400
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40014400 	.word	0x40014400
 80090c4:	40014800 	.word	0x40014800

080090c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a18      	ldr	r2, [pc, #96]	@ (8009188 <TIM_OC4_SetConfig+0xc0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00f      	beq.n	800914c <TIM_OC4_SetConfig+0x84>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a17      	ldr	r2, [pc, #92]	@ (800918c <TIM_OC4_SetConfig+0xc4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_OC4_SetConfig+0x84>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a16      	ldr	r2, [pc, #88]	@ (8009190 <TIM_OC4_SetConfig+0xc8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_OC4_SetConfig+0x84>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a15      	ldr	r2, [pc, #84]	@ (8009194 <TIM_OC4_SetConfig+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_OC4_SetConfig+0x84>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a14      	ldr	r2, [pc, #80]	@ (8009198 <TIM_OC4_SetConfig+0xd0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d109      	bne.n	8009160 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40012c00 	.word	0x40012c00
 800918c:	40013400 	.word	0x40013400
 8009190:	40014000 	.word	0x40014000
 8009194:	40014400 	.word	0x40014400
 8009198:	40014800 	.word	0x40014800

0800919c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a17      	ldr	r2, [pc, #92]	@ (8009250 <TIM_OC5_SetConfig+0xb4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00f      	beq.n	8009216 <TIM_OC5_SetConfig+0x7a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a16      	ldr	r2, [pc, #88]	@ (8009254 <TIM_OC5_SetConfig+0xb8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <TIM_OC5_SetConfig+0x7a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a15      	ldr	r2, [pc, #84]	@ (8009258 <TIM_OC5_SetConfig+0xbc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <TIM_OC5_SetConfig+0x7a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a14      	ldr	r2, [pc, #80]	@ (800925c <TIM_OC5_SetConfig+0xc0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC5_SetConfig+0x7a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a13      	ldr	r2, [pc, #76]	@ (8009260 <TIM_OC5_SetConfig+0xc4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d109      	bne.n	800922a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800921c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	621a      	str	r2, [r3, #32]
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	40012c00 	.word	0x40012c00
 8009254:	40013400 	.word	0x40013400
 8009258:	40014000 	.word	0x40014000
 800925c:	40014400 	.word	0x40014400
 8009260:	40014800 	.word	0x40014800

08009264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009264:	b480      	push	{r7}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a18      	ldr	r2, [pc, #96]	@ (800931c <TIM_OC6_SetConfig+0xb8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00f      	beq.n	80092e0 <TIM_OC6_SetConfig+0x7c>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <TIM_OC6_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_OC6_SetConfig+0x7c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a16      	ldr	r2, [pc, #88]	@ (8009324 <TIM_OC6_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_OC6_SetConfig+0x7c>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <TIM_OC6_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC6_SetConfig+0x7c>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a14      	ldr	r2, [pc, #80]	@ (800932c <TIM_OC6_SetConfig+0xc8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d109      	bne.n	80092f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	621a      	str	r2, [r3, #32]
}
 800930e:	bf00      	nop
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40012c00 	.word	0x40012c00
 8009320:	40013400 	.word	0x40013400
 8009324:	40014000 	.word	0x40014000
 8009328:	40014400 	.word	0x40014400
 800932c:	40014800 	.word	0x40014800

08009330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f023 0201 	bic.w	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800935a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f023 030a 	bic.w	r3, r3, #10
 800936c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938e:	b480      	push	{r7}
 8009390:	b087      	sub	sp, #28
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f023 0210 	bic.w	r2, r3, #16
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	031b      	lsls	r3, r3, #12
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	f043 0307 	orr.w	r3, r3, #7
 8009410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	609a      	str	r2, [r3, #8]
}
 8009418:	bf00      	nop
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800943e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	021a      	lsls	r2, r3, #8
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	431a      	orrs	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4313      	orrs	r3, r2
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	4313      	orrs	r3, r2
 8009450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	609a      	str	r2, [r3, #8]
}
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 031f 	and.w	r3, r3, #31
 8009476:	2201      	movs	r2, #1
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6a1a      	ldr	r2, [r3, #32]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	43db      	mvns	r3, r3
 8009486:	401a      	ands	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a1a      	ldr	r2, [r3, #32]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	fa01 f303 	lsl.w	r3, r1, r3
 800949c:	431a      	orrs	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	621a      	str	r2, [r3, #32]
}
 80094a2:	bf00      	nop
 80094a4:	371c      	adds	r7, #28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
	...

080094b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e068      	b.n	800959a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a2e      	ldr	r2, [pc, #184]	@ (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a2d      	ldr	r2, [pc, #180]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d108      	bne.n	800950e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1e      	ldr	r2, [pc, #120]	@ (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d01d      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953a:	d018      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1b      	ldr	r2, [pc, #108]	@ (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a1a      	ldr	r2, [pc, #104]	@ (80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00e      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a18      	ldr	r2, [pc, #96]	@ (80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d009      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a13      	ldr	r2, [pc, #76]	@ (80095ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d004      	beq.n	800956e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a14      	ldr	r2, [pc, #80]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d10c      	bne.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4313      	orrs	r3, r2
 800957e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	40013400 	.word	0x40013400
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40014000 	.word	0x40014000

080095c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095d8:	2302      	movs	r3, #2
 80095da:	e065      	b.n	80096a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	041b      	lsls	r3, r3, #16
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a16      	ldr	r2, [pc, #88]	@ (80096b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d004      	beq.n	800966a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a14      	ldr	r2, [pc, #80]	@ (80096b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d115      	bne.n	8009696 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009674:	051b      	lsls	r3, r3, #20
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40012c00 	.word	0x40012c00
 80096b8:	40013400 	.word	0x40013400

080096bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e042      	b.n	8009754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7f9 fa13 	bl	8002b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2224      	movs	r2, #36	@ 0x24
 80096ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fb24 	bl	8009d54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f825 	bl	800975c <UART_SetConfig>
 8009712:	4603      	mov	r3, r0
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e01b      	b.n	8009754 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800972a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800973a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fba3 	bl	8009e98 <UART_CheckIdleState>
 8009752:	4603      	mov	r3, r0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800975c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009760:	b08c      	sub	sp, #48	@ 0x30
 8009762:	af00      	add	r7, sp, #0
 8009764:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	431a      	orrs	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	431a      	orrs	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	4313      	orrs	r3, r2
 8009782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4baa      	ldr	r3, [pc, #680]	@ (8009a34 <UART_SetConfig+0x2d8>)
 800978c:	4013      	ands	r3, r2
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009794:	430b      	orrs	r3, r1
 8009796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a9f      	ldr	r2, [pc, #636]	@ (8009a38 <UART_SetConfig+0x2dc>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d004      	beq.n	80097c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097c4:	4313      	orrs	r3, r2
 80097c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80097d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	6812      	ldr	r2, [r2, #0]
 80097da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097dc:	430b      	orrs	r3, r1
 80097de:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e6:	f023 010f 	bic.w	r1, r3, #15
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a90      	ldr	r2, [pc, #576]	@ (8009a3c <UART_SetConfig+0x2e0>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d125      	bne.n	800984c <UART_SetConfig+0xf0>
 8009800:	4b8f      	ldr	r3, [pc, #572]	@ (8009a40 <UART_SetConfig+0x2e4>)
 8009802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009806:	f003 0303 	and.w	r3, r3, #3
 800980a:	2b03      	cmp	r3, #3
 800980c:	d81a      	bhi.n	8009844 <UART_SetConfig+0xe8>
 800980e:	a201      	add	r2, pc, #4	@ (adr r2, 8009814 <UART_SetConfig+0xb8>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	08009825 	.word	0x08009825
 8009818:	08009835 	.word	0x08009835
 800981c:	0800982d 	.word	0x0800982d
 8009820:	0800983d 	.word	0x0800983d
 8009824:	2301      	movs	r3, #1
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982a:	e116      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800982c:	2302      	movs	r3, #2
 800982e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009832:	e112      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983a:	e10e      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009842:	e10a      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984a:	e106      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a7c      	ldr	r2, [pc, #496]	@ (8009a44 <UART_SetConfig+0x2e8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d138      	bne.n	80098c8 <UART_SetConfig+0x16c>
 8009856:	4b7a      	ldr	r3, [pc, #488]	@ (8009a40 <UART_SetConfig+0x2e4>)
 8009858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985c:	f003 030c 	and.w	r3, r3, #12
 8009860:	2b0c      	cmp	r3, #12
 8009862:	d82d      	bhi.n	80098c0 <UART_SetConfig+0x164>
 8009864:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <UART_SetConfig+0x110>)
 8009866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986a:	bf00      	nop
 800986c:	080098a1 	.word	0x080098a1
 8009870:	080098c1 	.word	0x080098c1
 8009874:	080098c1 	.word	0x080098c1
 8009878:	080098c1 	.word	0x080098c1
 800987c:	080098b1 	.word	0x080098b1
 8009880:	080098c1 	.word	0x080098c1
 8009884:	080098c1 	.word	0x080098c1
 8009888:	080098c1 	.word	0x080098c1
 800988c:	080098a9 	.word	0x080098a9
 8009890:	080098c1 	.word	0x080098c1
 8009894:	080098c1 	.word	0x080098c1
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098b9 	.word	0x080098b9
 80098a0:	2300      	movs	r3, #0
 80098a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098a6:	e0d8      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098a8:	2302      	movs	r3, #2
 80098aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ae:	e0d4      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b6:	e0d0      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098be:	e0cc      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c6:	e0c8      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a5e      	ldr	r2, [pc, #376]	@ (8009a48 <UART_SetConfig+0x2ec>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d125      	bne.n	800991e <UART_SetConfig+0x1c2>
 80098d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009a40 <UART_SetConfig+0x2e4>)
 80098d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098dc:	2b30      	cmp	r3, #48	@ 0x30
 80098de:	d016      	beq.n	800990e <UART_SetConfig+0x1b2>
 80098e0:	2b30      	cmp	r3, #48	@ 0x30
 80098e2:	d818      	bhi.n	8009916 <UART_SetConfig+0x1ba>
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d00a      	beq.n	80098fe <UART_SetConfig+0x1a2>
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d814      	bhi.n	8009916 <UART_SetConfig+0x1ba>
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <UART_SetConfig+0x19a>
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d008      	beq.n	8009906 <UART_SetConfig+0x1aa>
 80098f4:	e00f      	b.n	8009916 <UART_SetConfig+0x1ba>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098fc:	e0ad      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80098fe:	2302      	movs	r3, #2
 8009900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009904:	e0a9      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009906:	2304      	movs	r3, #4
 8009908:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800990c:	e0a5      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800990e:	2308      	movs	r3, #8
 8009910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009914:	e0a1      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009916:	2310      	movs	r3, #16
 8009918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800991c:	e09d      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a4a      	ldr	r2, [pc, #296]	@ (8009a4c <UART_SetConfig+0x2f0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d125      	bne.n	8009974 <UART_SetConfig+0x218>
 8009928:	4b45      	ldr	r3, [pc, #276]	@ (8009a40 <UART_SetConfig+0x2e4>)
 800992a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009932:	2bc0      	cmp	r3, #192	@ 0xc0
 8009934:	d016      	beq.n	8009964 <UART_SetConfig+0x208>
 8009936:	2bc0      	cmp	r3, #192	@ 0xc0
 8009938:	d818      	bhi.n	800996c <UART_SetConfig+0x210>
 800993a:	2b80      	cmp	r3, #128	@ 0x80
 800993c:	d00a      	beq.n	8009954 <UART_SetConfig+0x1f8>
 800993e:	2b80      	cmp	r3, #128	@ 0x80
 8009940:	d814      	bhi.n	800996c <UART_SetConfig+0x210>
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <UART_SetConfig+0x1f0>
 8009946:	2b40      	cmp	r3, #64	@ 0x40
 8009948:	d008      	beq.n	800995c <UART_SetConfig+0x200>
 800994a:	e00f      	b.n	800996c <UART_SetConfig+0x210>
 800994c:	2300      	movs	r3, #0
 800994e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009952:	e082      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009954:	2302      	movs	r3, #2
 8009956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995a:	e07e      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009962:	e07a      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996a:	e076      	b.n	8009a5a <UART_SetConfig+0x2fe>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009972:	e072      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a35      	ldr	r2, [pc, #212]	@ (8009a50 <UART_SetConfig+0x2f4>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d12a      	bne.n	80099d4 <UART_SetConfig+0x278>
 800997e:	4b30      	ldr	r3, [pc, #192]	@ (8009a40 <UART_SetConfig+0x2e4>)
 8009980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009988:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800998c:	d01a      	beq.n	80099c4 <UART_SetConfig+0x268>
 800998e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009992:	d81b      	bhi.n	80099cc <UART_SetConfig+0x270>
 8009994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009998:	d00c      	beq.n	80099b4 <UART_SetConfig+0x258>
 800999a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800999e:	d815      	bhi.n	80099cc <UART_SetConfig+0x270>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <UART_SetConfig+0x250>
 80099a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099a8:	d008      	beq.n	80099bc <UART_SetConfig+0x260>
 80099aa:	e00f      	b.n	80099cc <UART_SetConfig+0x270>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b2:	e052      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80099b4:	2302      	movs	r3, #2
 80099b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ba:	e04e      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c2:	e04a      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ca:	e046      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d2:	e042      	b.n	8009a5a <UART_SetConfig+0x2fe>
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a17      	ldr	r2, [pc, #92]	@ (8009a38 <UART_SetConfig+0x2dc>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d13a      	bne.n	8009a54 <UART_SetConfig+0x2f8>
 80099de:	4b18      	ldr	r3, [pc, #96]	@ (8009a40 <UART_SetConfig+0x2e4>)
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ec:	d01a      	beq.n	8009a24 <UART_SetConfig+0x2c8>
 80099ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099f2:	d81b      	bhi.n	8009a2c <UART_SetConfig+0x2d0>
 80099f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f8:	d00c      	beq.n	8009a14 <UART_SetConfig+0x2b8>
 80099fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099fe:	d815      	bhi.n	8009a2c <UART_SetConfig+0x2d0>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <UART_SetConfig+0x2b0>
 8009a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a08:	d008      	beq.n	8009a1c <UART_SetConfig+0x2c0>
 8009a0a:	e00f      	b.n	8009a2c <UART_SetConfig+0x2d0>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e022      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009a14:	2302      	movs	r3, #2
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e01e      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e01a      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e016      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e012      	b.n	8009a5a <UART_SetConfig+0x2fe>
 8009a34:	cfff69f3 	.word	0xcfff69f3
 8009a38:	40008000 	.word	0x40008000
 8009a3c:	40013800 	.word	0x40013800
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40004400 	.word	0x40004400
 8009a48:	40004800 	.word	0x40004800
 8009a4c:	40004c00 	.word	0x40004c00
 8009a50:	40005000 	.word	0x40005000
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4aae      	ldr	r2, [pc, #696]	@ (8009d18 <UART_SetConfig+0x5bc>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	f040 8097 	bne.w	8009b94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	d823      	bhi.n	8009ab6 <UART_SetConfig+0x35a>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x318>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009ab7 	.word	0x08009ab7
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009ab7 	.word	0x08009ab7
 8009a84:	08009aa7 	.word	0x08009aa7
 8009a88:	08009ab7 	.word	0x08009ab7
 8009a8c:	08009ab7 	.word	0x08009ab7
 8009a90:	08009ab7 	.word	0x08009ab7
 8009a94:	08009aaf 	.word	0x08009aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a98:	f7fc f9a4 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a9e:	e010      	b.n	8009ac2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa0:	4b9e      	ldr	r3, [pc, #632]	@ (8009d1c <UART_SetConfig+0x5c0>)
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aa4:	e00d      	b.n	8009ac2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aa6:	f7fc f905 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8009aaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aac:	e009      	b.n	8009ac2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ab4:	e005      	b.n	8009ac2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ac0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8130 	beq.w	8009d2a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	4a94      	ldr	r2, [pc, #592]	@ (8009d20 <UART_SetConfig+0x5c4>)
 8009ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009adc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d305      	bcc.n	8009afa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d903      	bls.n	8009b02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b00:	e113      	b.n	8009d2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	2200      	movs	r2, #0
 8009b06:	60bb      	str	r3, [r7, #8]
 8009b08:	60fa      	str	r2, [r7, #12]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0e:	4a84      	ldr	r2, [pc, #528]	@ (8009d20 <UART_SetConfig+0x5c4>)
 8009b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2200      	movs	r2, #0
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b24:	f7f7 f85a 	bl	8000bdc <__aeabi_uldivmod>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4619      	mov	r1, r3
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	020b      	lsls	r3, r1, #8
 8009b3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b3e:	0202      	lsls	r2, r0, #8
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	6849      	ldr	r1, [r1, #4]
 8009b44:	0849      	lsrs	r1, r1, #1
 8009b46:	2000      	movs	r0, #0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	eb12 0804 	adds.w	r8, r2, r4
 8009b50:	eb43 0905 	adc.w	r9, r3, r5
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	469a      	mov	sl, r3
 8009b5c:	4693      	mov	fp, r2
 8009b5e:	4652      	mov	r2, sl
 8009b60:	465b      	mov	r3, fp
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f7 f839 	bl	8000bdc <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4613      	mov	r3, r2
 8009b70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b78:	d308      	bcc.n	8009b8c <UART_SetConfig+0x430>
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b80:	d204      	bcs.n	8009b8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6a3a      	ldr	r2, [r7, #32]
 8009b88:	60da      	str	r2, [r3, #12]
 8009b8a:	e0ce      	b.n	8009d2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b92:	e0ca      	b.n	8009d2a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b9c:	d166      	bne.n	8009c6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	d827      	bhi.n	8009bf6 <UART_SetConfig+0x49a>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <UART_SetConfig+0x450>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bd1 	.word	0x08009bd1
 8009bb0:	08009bd9 	.word	0x08009bd9
 8009bb4:	08009be1 	.word	0x08009be1
 8009bb8:	08009bf7 	.word	0x08009bf7
 8009bbc:	08009be7 	.word	0x08009be7
 8009bc0:	08009bf7 	.word	0x08009bf7
 8009bc4:	08009bf7 	.word	0x08009bf7
 8009bc8:	08009bf7 	.word	0x08009bf7
 8009bcc:	08009bef 	.word	0x08009bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd0:	f7fc f908 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8009bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bd6:	e014      	b.n	8009c02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bd8:	f7fc f91a 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8009bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bde:	e010      	b.n	8009c02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be0:	4b4e      	ldr	r3, [pc, #312]	@ (8009d1c <UART_SetConfig+0x5c0>)
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009be4:	e00d      	b.n	8009c02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009be6:	f7fc f865 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8009bea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bec:	e009      	b.n	8009c02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bf4:	e005      	b.n	8009c02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8090 	beq.w	8009d2a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0e:	4a44      	ldr	r2, [pc, #272]	@ (8009d20 <UART_SetConfig+0x5c4>)
 8009c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c14:	461a      	mov	r2, r3
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c1c:	005a      	lsls	r2, r3, #1
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	441a      	add	r2, r3
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2b0f      	cmp	r3, #15
 8009c34:	d916      	bls.n	8009c64 <UART_SetConfig+0x508>
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c3c:	d212      	bcs.n	8009c64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f023 030f 	bic.w	r3, r3, #15
 8009c46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	8bfb      	ldrh	r3, [r7, #30]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	8bfa      	ldrh	r2, [r7, #30]
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	e062      	b.n	8009d2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c6a:	e05e      	b.n	8009d2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d828      	bhi.n	8009cc6 <UART_SetConfig+0x56a>
 8009c74:	a201      	add	r2, pc, #4	@ (adr r2, 8009c7c <UART_SetConfig+0x520>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ca9 	.word	0x08009ca9
 8009c84:	08009cb1 	.word	0x08009cb1
 8009c88:	08009cc7 	.word	0x08009cc7
 8009c8c:	08009cb7 	.word	0x08009cb7
 8009c90:	08009cc7 	.word	0x08009cc7
 8009c94:	08009cc7 	.word	0x08009cc7
 8009c98:	08009cc7 	.word	0x08009cc7
 8009c9c:	08009cbf 	.word	0x08009cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca0:	f7fc f8a0 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca6:	e014      	b.n	8009cd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ca8:	f7fc f8b2 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8009cac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cae:	e010      	b.n	8009cd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d1c <UART_SetConfig+0x5c0>)
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cb4:	e00d      	b.n	8009cd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cb6:	f7fb fffd 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8009cba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cbc:	e009      	b.n	8009cd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cc4:	e005      	b.n	8009cd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cd0:	bf00      	nop
    }

    if (pclk != 0U)
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d028      	beq.n	8009d2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cdc:	4a10      	ldr	r2, [pc, #64]	@ (8009d20 <UART_SetConfig+0x5c4>)
 8009cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	085b      	lsrs	r3, r3, #1
 8009cf0:	441a      	add	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d910      	bls.n	8009d24 <UART_SetConfig+0x5c8>
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d08:	d20c      	bcs.n	8009d24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60da      	str	r2, [r3, #12]
 8009d14:	e009      	b.n	8009d2a <UART_SetConfig+0x5ce>
 8009d16:	bf00      	nop
 8009d18:	40008000 	.word	0x40008000
 8009d1c:	00f42400 	.word	0x00f42400
 8009d20:	0800c2c4 	.word	0x0800c2c4
      }
      else
      {
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2200      	movs	r2, #0
 8009d44:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d46:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3730      	adds	r7, #48	@ 0x30
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00a      	beq.n	8009d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da4:	f003 0302 	and.w	r3, r3, #2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00a      	beq.n	8009dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc6:	f003 0304 	and.w	r3, r3, #4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00a      	beq.n	8009e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00a      	beq.n	8009e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01a      	beq.n	8009e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e52:	d10a      	bne.n	8009e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	605a      	str	r2, [r3, #4]
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b098      	sub	sp, #96	@ 0x60
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ea8:	f7f9 f92a 	bl	8003100 <HAL_GetTick>
 8009eac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d12f      	bne.n	8009f1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f88e 	bl	8009fec <UART_WaitOnFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d022      	beq.n	8009f1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e6      	bne.n	8009ed6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e063      	b.n	8009fe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d149      	bne.n	8009fbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f32:	2200      	movs	r2, #0
 8009f34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f857 	bl	8009fec <UART_WaitOnFlagUntilTimeout>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d03c      	beq.n	8009fbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	623b      	str	r3, [r7, #32]
   return(result);
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e6      	bne.n	8009f44 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f96:	61fa      	str	r2, [r7, #28]
 8009f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	69b9      	ldr	r1, [r7, #24]
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e5      	bne.n	8009f76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e012      	b.n	8009fe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3758      	adds	r7, #88	@ 0x58
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffc:	e049      	b.n	800a092 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a004:	d045      	beq.n	800a092 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a006:	f7f9 f87b 	bl	8003100 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	429a      	cmp	r2, r3
 800a014:	d302      	bcc.n	800a01c <UART_WaitOnFlagUntilTimeout+0x30>
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e048      	b.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d031      	beq.n	800a092 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d110      	bne.n	800a05e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2208      	movs	r2, #8
 800a042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f838 	bl	800a0ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2208      	movs	r2, #8
 800a04e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e029      	b.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a06c:	d111      	bne.n	800a092 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f81e 	bl	800a0ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e00f      	b.n	800a0b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	4013      	ands	r3, r2
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	bf0c      	ite	eq
 800a0a2:	2301      	moveq	r3, #1
 800a0a4:	2300      	movne	r3, #0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d0a6      	beq.n	8009ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b095      	sub	sp, #84	@ 0x54
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e6      	bne.n	800a0c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	e853 3f00 	ldrex	r3, [r3]
 800a102:	61fb      	str	r3, [r7, #28]
   return(result);
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a10a:	f023 0301 	bic.w	r3, r3, #1
 800a10e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a11e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a120:	e841 2300 	strex	r3, r2, [r1]
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e3      	bne.n	800a0f4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a130:	2b01      	cmp	r3, #1
 800a132:	d118      	bne.n	800a166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	60bb      	str	r3, [r7, #8]
   return(result);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f023 0310 	bic.w	r3, r3, #16
 800a148:	647b      	str	r3, [r7, #68]	@ 0x44
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a152:	61bb      	str	r3, [r7, #24]
 800a154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6979      	ldr	r1, [r7, #20]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	613b      	str	r3, [r7, #16]
   return(result);
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e6      	bne.n	800a134 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a17a:	bf00      	nop
 800a17c:	3754      	adds	r7, #84	@ 0x54
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a194:	2b01      	cmp	r3, #1
 800a196:	d101      	bne.n	800a19c <HAL_UARTEx_DisableFifoMode+0x16>
 800a198:	2302      	movs	r3, #2
 800a19a:	e027      	b.n	800a1ec <HAL_UARTEx_DisableFifoMode+0x66>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2224      	movs	r2, #36	@ 0x24
 800a1a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0201 	bic.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e02d      	b.n	800a26c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2224      	movs	r2, #36	@ 0x24
 800a21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f84f 	bl	800a2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a284:	2b01      	cmp	r3, #1
 800a286:	d101      	bne.n	800a28c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a288:	2302      	movs	r3, #2
 800a28a:	e02d      	b.n	800a2e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	@ 0x24
 800a298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f022 0201 	bic.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f811 	bl	800a2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d108      	bne.n	800a312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a310:	e031      	b.n	800a376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a312:	2308      	movs	r3, #8
 800a314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a316:	2308      	movs	r3, #8
 800a318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	0e5b      	lsrs	r3, r3, #25
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	0f5b      	lsrs	r3, r3, #29
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	7b3a      	ldrb	r2, [r7, #12]
 800a33e:	4911      	ldr	r1, [pc, #68]	@ (800a384 <UARTEx_SetNbDataToProcess+0x94>)
 800a340:	5c8a      	ldrb	r2, [r1, r2]
 800a342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a346:	7b3a      	ldrb	r2, [r7, #12]
 800a348:	490f      	ldr	r1, [pc, #60]	@ (800a388 <UARTEx_SetNbDataToProcess+0x98>)
 800a34a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a34c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a350:	b29a      	uxth	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	7b7a      	ldrb	r2, [r7, #13]
 800a35c:	4909      	ldr	r1, [pc, #36]	@ (800a384 <UARTEx_SetNbDataToProcess+0x94>)
 800a35e:	5c8a      	ldrb	r2, [r1, r2]
 800a360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a364:	7b7a      	ldrb	r2, [r7, #13]
 800a366:	4908      	ldr	r1, [pc, #32]	@ (800a388 <UARTEx_SetNbDataToProcess+0x98>)
 800a368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a36a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	0800c2dc 	.word	0x0800c2dc
 800a388:	0800c2e4 	.word	0x0800c2e4

0800a38c <arm_mean_f32>:
 800a38c:	b430      	push	{r4, r5}
 800a38e:	088d      	lsrs	r5, r1, #2
 800a390:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800a404 <arm_mean_f32+0x78>
 800a394:	d018      	beq.n	800a3c8 <arm_mean_f32+0x3c>
 800a396:	f100 0310 	add.w	r3, r0, #16
 800a39a:	462c      	mov	r4, r5
 800a39c:	ed53 5a04 	vldr	s11, [r3, #-16]
 800a3a0:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a3a4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a3a8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a3ac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a3b0:	3c01      	subs	r4, #1
 800a3b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a3b6:	f103 0310 	add.w	r3, r3, #16
 800a3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3c2:	d1eb      	bne.n	800a39c <arm_mean_f32+0x10>
 800a3c4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a3c8:	f011 0303 	ands.w	r3, r1, #3
 800a3cc:	d00f      	beq.n	800a3ee <arm_mean_f32+0x62>
 800a3ce:	ed90 7a00 	vldr	s14, [r0]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3d8:	d009      	beq.n	800a3ee <arm_mean_f32+0x62>
 800a3da:	ed90 7a01 	vldr	s14, [r0, #4]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3e4:	bf1c      	itt	ne
 800a3e6:	ed90 7a02 	vldrne	s14, [r0, #8]
 800a3ea:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800a3ee:	ee07 1a10 	vmov	s14, r1
 800a3f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a3f6:	bc30      	pop	{r4, r5}
 800a3f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a3fc:	edc2 6a00 	vstr	s13, [r2]
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	00000000 	.word	0x00000000

0800a408 <arm_max_f32>:
 800a408:	f101 3cff 	add.w	ip, r1, #4294967295
 800a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40e:	4607      	mov	r7, r0
 800a410:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800a414:	ecf7 7a01 	vldmia	r7!, {s15}
 800a418:	d060      	beq.n	800a4dc <arm_max_f32+0xd4>
 800a41a:	2400      	movs	r4, #0
 800a41c:	3014      	adds	r0, #20
 800a41e:	4625      	mov	r5, r4
 800a420:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800a424:	ed10 7a04 	vldr	s14, [r0, #-16]
 800a428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a430:	bf48      	it	mi
 800a432:	eef0 7a47 	vmovmi.f32	s15, s14
 800a436:	ed10 7a03 	vldr	s14, [r0, #-12]
 800a43a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a43e:	bf48      	it	mi
 800a440:	1c65      	addmi	r5, r4, #1
 800a442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a446:	bf48      	it	mi
 800a448:	eef0 7a47 	vmovmi.f32	s15, s14
 800a44c:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a454:	bf48      	it	mi
 800a456:	1ca5      	addmi	r5, r4, #2
 800a458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45c:	bf48      	it	mi
 800a45e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a462:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a46a:	bf48      	it	mi
 800a46c:	1ce5      	addmi	r5, r4, #3
 800a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a472:	f104 0404 	add.w	r4, r4, #4
 800a476:	bf44      	itt	mi
 800a478:	eef0 7a47 	vmovmi.f32	s15, s14
 800a47c:	4625      	movmi	r5, r4
 800a47e:	42a6      	cmp	r6, r4
 800a480:	f100 0010 	add.w	r0, r0, #16
 800a484:	d1ce      	bne.n	800a424 <arm_max_f32+0x1c>
 800a486:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800a48a:	f01c 0003 	ands.w	r0, ip, #3
 800a48e:	d021      	beq.n	800a4d4 <arm_max_f32+0xcc>
 800a490:	ed97 7a00 	vldr	s14, [r7]
 800a494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49c:	bfc4      	itt	gt
 800a49e:	eef0 7a47 	vmovgt.f32	s15, s14
 800a4a2:	1a0d      	subgt	r5, r1, r0
 800a4a4:	3801      	subs	r0, #1
 800a4a6:	d015      	beq.n	800a4d4 <arm_max_f32+0xcc>
 800a4a8:	ed97 7a01 	vldr	s14, [r7, #4]
 800a4ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b4:	bf44      	itt	mi
 800a4b6:	eef0 7a47 	vmovmi.f32	s15, s14
 800a4ba:	1a0d      	submi	r5, r1, r0
 800a4bc:	2801      	cmp	r0, #1
 800a4be:	d009      	beq.n	800a4d4 <arm_max_f32+0xcc>
 800a4c0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a4c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	bfc4      	itt	gt
 800a4ce:	eef0 7a47 	vmovgt.f32	s15, s14
 800a4d2:	4665      	movgt	r5, ip
 800a4d4:	edc2 7a00 	vstr	s15, [r2]
 800a4d8:	601d      	str	r5, [r3, #0]
 800a4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4dc:	4675      	mov	r5, lr
 800a4de:	e7d4      	b.n	800a48a <arm_max_f32+0x82>

0800a4e0 <arm_rfft_32_fast_init_f32>:
 800a4e0:	b178      	cbz	r0, 800a502 <arm_rfft_32_fast_init_f32+0x22>
 800a4e2:	b430      	push	{r4, r5}
 800a4e4:	4908      	ldr	r1, [pc, #32]	@ (800a508 <arm_rfft_32_fast_init_f32+0x28>)
 800a4e6:	4a09      	ldr	r2, [pc, #36]	@ (800a50c <arm_rfft_32_fast_init_f32+0x2c>)
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a4ee:	8003      	strh	r3, [r0, #0]
 800a4f0:	2520      	movs	r5, #32
 800a4f2:	2414      	movs	r4, #20
 800a4f4:	4b06      	ldr	r3, [pc, #24]	@ (800a510 <arm_rfft_32_fast_init_f32+0x30>)
 800a4f6:	8205      	strh	r5, [r0, #16]
 800a4f8:	8184      	strh	r4, [r0, #12]
 800a4fa:	6143      	str	r3, [r0, #20]
 800a4fc:	bc30      	pop	{r4, r5}
 800a4fe:	2000      	movs	r0, #0
 800a500:	4770      	bx	lr
 800a502:	f04f 30ff 	mov.w	r0, #4294967295
 800a506:	4770      	bx	lr
 800a508:	0800d29c 	.word	0x0800d29c
 800a50c:	08011bd4 	.word	0x08011bd4
 800a510:	0801a954 	.word	0x0801a954

0800a514 <arm_rfft_64_fast_init_f32>:
 800a514:	b178      	cbz	r0, 800a536 <arm_rfft_64_fast_init_f32+0x22>
 800a516:	b430      	push	{r4, r5}
 800a518:	4908      	ldr	r1, [pc, #32]	@ (800a53c <arm_rfft_64_fast_init_f32+0x28>)
 800a51a:	4a09      	ldr	r2, [pc, #36]	@ (800a540 <arm_rfft_64_fast_init_f32+0x2c>)
 800a51c:	2320      	movs	r3, #32
 800a51e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a522:	8003      	strh	r3, [r0, #0]
 800a524:	2540      	movs	r5, #64	@ 0x40
 800a526:	2430      	movs	r4, #48	@ 0x30
 800a528:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <arm_rfft_64_fast_init_f32+0x30>)
 800a52a:	8205      	strh	r5, [r0, #16]
 800a52c:	8184      	strh	r4, [r0, #12]
 800a52e:	6143      	str	r3, [r0, #20]
 800a530:	bc30      	pop	{r4, r5}
 800a532:	2000      	movs	r0, #0
 800a534:	4770      	bx	lr
 800a536:	f04f 30ff 	mov.w	r0, #4294967295
 800a53a:	4770      	bx	lr
 800a53c:	0800f3f4 	.word	0x0800f3f4
 800a540:	08016454 	.word	0x08016454
 800a544:	0801f1d4 	.word	0x0801f1d4

0800a548 <arm_rfft_256_fast_init_f32>:
 800a548:	b180      	cbz	r0, 800a56c <arm_rfft_256_fast_init_f32+0x24>
 800a54a:	b430      	push	{r4, r5}
 800a54c:	4909      	ldr	r1, [pc, #36]	@ (800a574 <arm_rfft_256_fast_init_f32+0x2c>)
 800a54e:	4a0a      	ldr	r2, [pc, #40]	@ (800a578 <arm_rfft_256_fast_init_f32+0x30>)
 800a550:	2380      	movs	r3, #128	@ 0x80
 800a552:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a556:	8003      	strh	r3, [r0, #0]
 800a558:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800a55c:	24d0      	movs	r4, #208	@ 0xd0
 800a55e:	4b07      	ldr	r3, [pc, #28]	@ (800a57c <arm_rfft_256_fast_init_f32+0x34>)
 800a560:	8205      	strh	r5, [r0, #16]
 800a562:	8184      	strh	r4, [r0, #12]
 800a564:	6143      	str	r3, [r0, #20]
 800a566:	bc30      	pop	{r4, r5}
 800a568:	2000      	movs	r0, #0
 800a56a:	4770      	bx	lr
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	0800d0fc 	.word	0x0800d0fc
 800a578:	080117d4 	.word	0x080117d4
 800a57c:	0801a554 	.word	0x0801a554

0800a580 <arm_rfft_512_fast_init_f32>:
 800a580:	b190      	cbz	r0, 800a5a8 <arm_rfft_512_fast_init_f32+0x28>
 800a582:	b430      	push	{r4, r5}
 800a584:	490a      	ldr	r1, [pc, #40]	@ (800a5b0 <arm_rfft_512_fast_init_f32+0x30>)
 800a586:	4a0b      	ldr	r2, [pc, #44]	@ (800a5b4 <arm_rfft_512_fast_init_f32+0x34>)
 800a588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a58c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a590:	8003      	strh	r3, [r0, #0]
 800a592:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800a596:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800a59a:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <arm_rfft_512_fast_init_f32+0x38>)
 800a59c:	8205      	strh	r5, [r0, #16]
 800a59e:	8184      	strh	r4, [r0, #12]
 800a5a0:	6143      	str	r3, [r0, #20]
 800a5a2:	bc30      	pop	{r4, r5}
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	4770      	bx	lr
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	0800f084 	.word	0x0800f084
 800a5b4:	08015c54 	.word	0x08015c54
 800a5b8:	0801e9d4 	.word	0x0801e9d4

0800a5bc <arm_rfft_1024_fast_init_f32>:
 800a5bc:	b190      	cbz	r0, 800a5e4 <arm_rfft_1024_fast_init_f32+0x28>
 800a5be:	b430      	push	{r4, r5}
 800a5c0:	490a      	ldr	r1, [pc, #40]	@ (800a5ec <arm_rfft_1024_fast_init_f32+0x30>)
 800a5c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a5f0 <arm_rfft_1024_fast_init_f32+0x34>)
 800a5c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a5cc:	8003      	strh	r3, [r0, #0]
 800a5ce:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800a5d2:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800a5d6:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <arm_rfft_1024_fast_init_f32+0x38>)
 800a5d8:	8205      	strh	r5, [r0, #16]
 800a5da:	8184      	strh	r4, [r0, #12]
 800a5dc:	6143      	str	r3, [r0, #20]
 800a5de:	bc30      	pop	{r4, r5}
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4770      	bx	lr
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	0800f454 	.word	0x0800f454
 800a5f0:	08016554 	.word	0x08016554
 800a5f4:	08017554 	.word	0x08017554

0800a5f8 <arm_rfft_2048_fast_init_f32>:
 800a5f8:	b190      	cbz	r0, 800a620 <arm_rfft_2048_fast_init_f32+0x28>
 800a5fa:	b430      	push	{r4, r5}
 800a5fc:	490a      	ldr	r1, [pc, #40]	@ (800a628 <arm_rfft_2048_fast_init_f32+0x30>)
 800a5fe:	4a0b      	ldr	r2, [pc, #44]	@ (800a62c <arm_rfft_2048_fast_init_f32+0x34>)
 800a600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a604:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a608:	8003      	strh	r3, [r0, #0]
 800a60a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800a60e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800a612:	4b07      	ldr	r3, [pc, #28]	@ (800a630 <arm_rfft_2048_fast_init_f32+0x38>)
 800a614:	8205      	strh	r5, [r0, #16]
 800a616:	8184      	strh	r4, [r0, #12]
 800a618:	6143      	str	r3, [r0, #20]
 800a61a:	bc30      	pop	{r4, r5}
 800a61c:	2000      	movs	r0, #0
 800a61e:	4770      	bx	lr
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	0800c2ec 	.word	0x0800c2ec
 800a62c:	0800f7d4 	.word	0x0800f7d4
 800a630:	08018554 	.word	0x08018554

0800a634 <arm_rfft_4096_fast_init_f32>:
 800a634:	b190      	cbz	r0, 800a65c <arm_rfft_4096_fast_init_f32+0x28>
 800a636:	b430      	push	{r4, r5}
 800a638:	490a      	ldr	r1, [pc, #40]	@ (800a664 <arm_rfft_4096_fast_init_f32+0x30>)
 800a63a:	4a0b      	ldr	r2, [pc, #44]	@ (800a668 <arm_rfft_4096_fast_init_f32+0x34>)
 800a63c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a640:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a644:	8003      	strh	r3, [r0, #0]
 800a646:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800a64a:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800a64e:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <arm_rfft_4096_fast_init_f32+0x38>)
 800a650:	8205      	strh	r5, [r0, #16]
 800a652:	8184      	strh	r4, [r0, #12]
 800a654:	6143      	str	r3, [r0, #20]
 800a656:	bc30      	pop	{r4, r5}
 800a658:	2000      	movs	r0, #0
 800a65a:	4770      	bx	lr
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	0800d2c4 	.word	0x0800d2c4
 800a668:	08011c54 	.word	0x08011c54
 800a66c:	0801a9d4 	.word	0x0801a9d4

0800a670 <arm_rfft_fast_init_f32>:
 800a670:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a674:	d01f      	beq.n	800a6b6 <arm_rfft_fast_init_f32+0x46>
 800a676:	d90b      	bls.n	800a690 <arm_rfft_fast_init_f32+0x20>
 800a678:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800a67c:	d019      	beq.n	800a6b2 <arm_rfft_fast_init_f32+0x42>
 800a67e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a682:	d012      	beq.n	800a6aa <arm_rfft_fast_init_f32+0x3a>
 800a684:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a688:	d00d      	beq.n	800a6a6 <arm_rfft_fast_init_f32+0x36>
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	4770      	bx	lr
 800a690:	2940      	cmp	r1, #64	@ 0x40
 800a692:	d00c      	beq.n	800a6ae <arm_rfft_fast_init_f32+0x3e>
 800a694:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a698:	d003      	beq.n	800a6a2 <arm_rfft_fast_init_f32+0x32>
 800a69a:	2920      	cmp	r1, #32
 800a69c:	d1f5      	bne.n	800a68a <arm_rfft_fast_init_f32+0x1a>
 800a69e:	4b07      	ldr	r3, [pc, #28]	@ (800a6bc <arm_rfft_fast_init_f32+0x4c>)
 800a6a0:	4718      	bx	r3
 800a6a2:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <arm_rfft_fast_init_f32+0x50>)
 800a6a4:	4718      	bx	r3
 800a6a6:	4b07      	ldr	r3, [pc, #28]	@ (800a6c4 <arm_rfft_fast_init_f32+0x54>)
 800a6a8:	4718      	bx	r3
 800a6aa:	4b07      	ldr	r3, [pc, #28]	@ (800a6c8 <arm_rfft_fast_init_f32+0x58>)
 800a6ac:	4718      	bx	r3
 800a6ae:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <arm_rfft_fast_init_f32+0x5c>)
 800a6b0:	e7f6      	b.n	800a6a0 <arm_rfft_fast_init_f32+0x30>
 800a6b2:	4b07      	ldr	r3, [pc, #28]	@ (800a6d0 <arm_rfft_fast_init_f32+0x60>)
 800a6b4:	e7f4      	b.n	800a6a0 <arm_rfft_fast_init_f32+0x30>
 800a6b6:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <arm_rfft_fast_init_f32+0x64>)
 800a6b8:	e7f2      	b.n	800a6a0 <arm_rfft_fast_init_f32+0x30>
 800a6ba:	bf00      	nop
 800a6bc:	0800a4e1 	.word	0x0800a4e1
 800a6c0:	0800a549 	.word	0x0800a549
 800a6c4:	0800a5bd 	.word	0x0800a5bd
 800a6c8:	0800a635 	.word	0x0800a635
 800a6cc:	0800a515 	.word	0x0800a515
 800a6d0:	0800a5f9 	.word	0x0800a5f9
 800a6d4:	0800a581 	.word	0x0800a581

0800a6d8 <stage_rfft_f32>:
 800a6d8:	b410      	push	{r4}
 800a6da:	edd1 7a00 	vldr	s15, [r1]
 800a6de:	ed91 7a01 	vldr	s14, [r1, #4]
 800a6e2:	8804      	ldrh	r4, [r0, #0]
 800a6e4:	6940      	ldr	r0, [r0, #20]
 800a6e6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a6ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6ee:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a6f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a6f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6fa:	3c01      	subs	r4, #1
 800a6fc:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a700:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a704:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a708:	ed82 7a00 	vstr	s14, [r2]
 800a70c:	edc2 7a01 	vstr	s15, [r2, #4]
 800a710:	3010      	adds	r0, #16
 800a712:	3210      	adds	r2, #16
 800a714:	3b08      	subs	r3, #8
 800a716:	3110      	adds	r1, #16
 800a718:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a71c:	ed93 7a02 	vldr	s14, [r3, #8]
 800a720:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a724:	edd3 4a03 	vldr	s9, [r3, #12]
 800a728:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a72c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a730:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a734:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a738:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a73c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a740:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a744:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a748:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a74c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a750:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a754:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a758:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a75c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a760:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a764:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a768:	3c01      	subs	r4, #1
 800a76a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a76e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a772:	f1a3 0308 	sub.w	r3, r3, #8
 800a776:	f101 0108 	add.w	r1, r1, #8
 800a77a:	f100 0008 	add.w	r0, r0, #8
 800a77e:	f102 0208 	add.w	r2, r2, #8
 800a782:	d1c9      	bne.n	800a718 <stage_rfft_f32+0x40>
 800a784:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop

0800a78c <merge_rfft_f32>:
 800a78c:	b410      	push	{r4}
 800a78e:	edd1 7a00 	vldr	s15, [r1]
 800a792:	edd1 6a01 	vldr	s13, [r1, #4]
 800a796:	8804      	ldrh	r4, [r0, #0]
 800a798:	6940      	ldr	r0, [r0, #20]
 800a79a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a79e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7a2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a7a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a7aa:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a7ae:	3c01      	subs	r4, #1
 800a7b0:	ed82 7a00 	vstr	s14, [r2]
 800a7b4:	edc2 7a01 	vstr	s15, [r2, #4]
 800a7b8:	b3dc      	cbz	r4, 800a832 <merge_rfft_f32+0xa6>
 800a7ba:	00e3      	lsls	r3, r4, #3
 800a7bc:	3b08      	subs	r3, #8
 800a7be:	440b      	add	r3, r1
 800a7c0:	3010      	adds	r0, #16
 800a7c2:	3210      	adds	r2, #16
 800a7c4:	3110      	adds	r1, #16
 800a7c6:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a7ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7ce:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a7d2:	edd3 4a03 	vldr	s9, [r3, #12]
 800a7d6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a7da:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a7de:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a7e2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a7e6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a7ea:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a7ee:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a7f2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a7f6:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a7fa:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a7fe:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a802:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a806:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a80a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a80e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a812:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a816:	3c01      	subs	r4, #1
 800a818:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a81c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a820:	f1a3 0308 	sub.w	r3, r3, #8
 800a824:	f101 0108 	add.w	r1, r1, #8
 800a828:	f100 0008 	add.w	r0, r0, #8
 800a82c:	f102 0208 	add.w	r2, r2, #8
 800a830:	d1c9      	bne.n	800a7c6 <merge_rfft_f32+0x3a>
 800a832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <arm_rfft_fast_f32>:
 800a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	8a05      	ldrh	r5, [r0, #16]
 800a83e:	086d      	lsrs	r5, r5, #1
 800a840:	8005      	strh	r5, [r0, #0]
 800a842:	4604      	mov	r4, r0
 800a844:	4616      	mov	r6, r2
 800a846:	461d      	mov	r5, r3
 800a848:	b14b      	cbz	r3, 800a85e <arm_rfft_fast_f32+0x26>
 800a84a:	f7ff ff9f 	bl	800a78c <merge_rfft_f32>
 800a84e:	462a      	mov	r2, r5
 800a850:	4631      	mov	r1, r6
 800a852:	4620      	mov	r0, r4
 800a854:	2301      	movs	r3, #1
 800a856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a85a:	f000 bb33 	b.w	800aec4 <arm_cfft_f32>
 800a85e:	460f      	mov	r7, r1
 800a860:	461a      	mov	r2, r3
 800a862:	2301      	movs	r3, #1
 800a864:	f000 fb2e 	bl	800aec4 <arm_cfft_f32>
 800a868:	4632      	mov	r2, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	4620      	mov	r0, r4
 800a86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	f7ff bf31 	b.w	800a6d8 <stage_rfft_f32>
 800a876:	bf00      	nop

0800a878 <arm_cfft_radix8by2_f32>:
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	ed2d 8b08 	vpush	{d8-d11}
 800a880:	4607      	mov	r7, r0
 800a882:	4608      	mov	r0, r1
 800a884:	f8b7 c000 	ldrh.w	ip, [r7]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a88e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a896:	f000 80b0 	beq.w	800a9fa <arm_cfft_radix8by2_f32+0x182>
 800a89a:	008c      	lsls	r4, r1, #2
 800a89c:	3410      	adds	r4, #16
 800a89e:	f100 0310 	add.w	r3, r0, #16
 800a8a2:	1906      	adds	r6, r0, r4
 800a8a4:	3210      	adds	r2, #16
 800a8a6:	4444      	add	r4, r8
 800a8a8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a8ac:	f108 0510 	add.w	r5, r8, #16
 800a8b0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a8b4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a8b8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a8bc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a8c0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a8c4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a8c8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a8cc:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a8d0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a8d4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a8d8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a8dc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a8e0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a8e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a8e8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a8ec:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a8f0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a8f4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a8f8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a8fc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a900:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a904:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a908:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a90c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a910:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a914:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a918:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a91c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a920:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a924:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a928:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a92c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a930:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a934:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a938:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a93c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a940:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a944:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a948:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a94c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a950:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a954:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a958:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a95c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a960:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a964:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a968:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a96c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a970:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a974:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a978:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a97c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a980:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a984:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a988:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a98c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a990:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a994:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a998:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a99c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a9a0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a9a4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a9a8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a9ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a9b0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a9b4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a9b8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a9bc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a9c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a9c4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a9c8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a9cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	4563      	cmp	r3, ip
 800a9d4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a9d8:	f106 0610 	add.w	r6, r6, #16
 800a9dc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a9e0:	f102 0210 	add.w	r2, r2, #16
 800a9e4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a9e8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a9ec:	f105 0510 	add.w	r5, r5, #16
 800a9f0:	f104 0410 	add.w	r4, r4, #16
 800a9f4:	f47f af5c 	bne.w	800a8b0 <arm_cfft_radix8by2_f32+0x38>
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	b28c      	uxth	r4, r1
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	2302      	movs	r3, #2
 800aa00:	f000 fb3c 	bl	800b07c <arm_radix8_butterfly_f32>
 800aa04:	ecbd 8b08 	vpop	{d8-d11}
 800aa08:	4621      	mov	r1, r4
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	2302      	movs	r3, #2
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	f000 bb32 	b.w	800b07c <arm_radix8_butterfly_f32>

0800aa18 <arm_cfft_radix8by4_f32>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ed2d 8b0a 	vpush	{d8-d12}
 800aa20:	b08d      	sub	sp, #52	@ 0x34
 800aa22:	460d      	mov	r5, r1
 800aa24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa26:	8801      	ldrh	r1, [r0, #0]
 800aa28:	6842      	ldr	r2, [r0, #4]
 800aa2a:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa2c:	0849      	lsrs	r1, r1, #1
 800aa2e:	008b      	lsls	r3, r1, #2
 800aa30:	18ee      	adds	r6, r5, r3
 800aa32:	18f0      	adds	r0, r6, r3
 800aa34:	edd0 5a00 	vldr	s11, [r0]
 800aa38:	edd5 7a00 	vldr	s15, [r5]
 800aa3c:	ed96 7a00 	vldr	s14, [r6]
 800aa40:	edd0 3a01 	vldr	s7, [r0, #4]
 800aa44:	ed96 4a01 	vldr	s8, [r6, #4]
 800aa48:	ed95 5a01 	vldr	s10, [r5, #4]
 800aa4c:	9008      	str	r0, [sp, #32]
 800aa4e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800aa52:	18c7      	adds	r7, r0, r3
 800aa54:	edd7 4a00 	vldr	s9, [r7]
 800aa58:	ed97 3a01 	vldr	s6, [r7, #4]
 800aa5c:	9701      	str	r7, [sp, #4]
 800aa5e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800aa62:	462c      	mov	r4, r5
 800aa64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aa68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aa6c:	ee16 ca90 	vmov	ip, s13
 800aa70:	f844 cb08 	str.w	ip, [r4], #8
 800aa74:	ee75 6a23 	vadd.f32	s13, s10, s7
 800aa78:	edd6 5a01 	vldr	s11, [r6, #4]
 800aa7c:	edd7 2a01 	vldr	s5, [r7, #4]
 800aa80:	9404      	str	r4, [sp, #16]
 800aa82:	ee35 5a63 	vsub.f32	s10, s10, s7
 800aa86:	ee74 3a27 	vadd.f32	s7, s8, s15
 800aa8a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aa8e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aa92:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800aa96:	0849      	lsrs	r1, r1, #1
 800aa98:	f102 0e08 	add.w	lr, r2, #8
 800aa9c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aaa0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800aaa4:	9109      	str	r1, [sp, #36]	@ 0x24
 800aaa6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800aaaa:	f1a1 0902 	sub.w	r9, r1, #2
 800aaae:	f8cd e00c 	str.w	lr, [sp, #12]
 800aab2:	4631      	mov	r1, r6
 800aab4:	ee13 ea90 	vmov	lr, s7
 800aab8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800aabc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800aac0:	4604      	mov	r4, r0
 800aac2:	edc5 5a01 	vstr	s11, [r5, #4]
 800aac6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800aaca:	f841 eb08 	str.w	lr, [r1], #8
 800aace:	ee34 5a24 	vadd.f32	s10, s8, s9
 800aad2:	ee16 ea10 	vmov	lr, s12
 800aad6:	ed86 5a01 	vstr	s10, [r6, #4]
 800aada:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800aade:	f844 eb08 	str.w	lr, [r4], #8
 800aae2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800aae6:	edc0 6a01 	vstr	s13, [r0, #4]
 800aaea:	9405      	str	r4, [sp, #20]
 800aaec:	4604      	mov	r4, r0
 800aaee:	ee17 0a90 	vmov	r0, s15
 800aaf2:	9106      	str	r1, [sp, #24]
 800aaf4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800aaf8:	f102 0110 	add.w	r1, r2, #16
 800aafc:	46bc      	mov	ip, r7
 800aafe:	9100      	str	r1, [sp, #0]
 800ab00:	f847 0b08 	str.w	r0, [r7], #8
 800ab04:	f102 0118 	add.w	r1, r2, #24
 800ab08:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800ab0c:	9102      	str	r1, [sp, #8]
 800ab0e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800ab12:	9007      	str	r0, [sp, #28]
 800ab14:	f000 8134 	beq.w	800ad80 <arm_cfft_radix8by4_f32+0x368>
 800ab18:	f102 0920 	add.w	r9, r2, #32
 800ab1c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800ab20:	9a01      	ldr	r2, [sp, #4]
 800ab22:	f8dd a000 	ldr.w	sl, [sp]
 800ab26:	3b0c      	subs	r3, #12
 800ab28:	4683      	mov	fp, r0
 800ab2a:	4463      	add	r3, ip
 800ab2c:	f105 0e10 	add.w	lr, r5, #16
 800ab30:	f1a4 010c 	sub.w	r1, r4, #12
 800ab34:	f104 0510 	add.w	r5, r4, #16
 800ab38:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ab3c:	f1a2 040c 	sub.w	r4, r2, #12
 800ab40:	f106 0010 	add.w	r0, r6, #16
 800ab44:	3210      	adds	r2, #16
 800ab46:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800ab4a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ab4e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ab52:	ed52 1a02 	vldr	s3, [r2, #-8]
 800ab56:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ab5a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800ab5e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800ab62:	ed10 8a01 	vldr	s16, [r0, #-4]
 800ab66:	ee35 4a25 	vadd.f32	s8, s10, s11
 800ab6a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800ab6e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800ab72:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ab76:	ee37 7a21 	vadd.f32	s14, s14, s3
 800ab7a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ab7e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800ab82:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ab86:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ab8a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ab8e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800ab92:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ab96:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ab9a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ab9e:	ed94 7a02 	vldr	s14, [r4, #8]
 800aba2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800aba6:	ed91 ba02 	vldr	s22, [r1, #8]
 800abaa:	edd3 9a02 	vldr	s19, [r3, #8]
 800abae:	edd4 2a01 	vldr	s5, [r4, #4]
 800abb2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800abb6:	ed93 5a01 	vldr	s10, [r3, #4]
 800abba:	edd1 0a01 	vldr	s1, [r1, #4]
 800abbe:	ee72 6a07 	vadd.f32	s13, s4, s14
 800abc2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800abc6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800abca:	ee79 4a22 	vadd.f32	s9, s18, s5
 800abce:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800abd2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800abd6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800abda:	ed91 7a01 	vldr	s14, [r1, #4]
 800abde:	edd3 8a01 	vldr	s17, [r3, #4]
 800abe2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800abe6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800abea:	ee37 7a28 	vadd.f32	s14, s14, s17
 800abee:	ee32 9a60 	vsub.f32	s18, s4, s1
 800abf2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800abf6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800abfa:	ed1a aa02 	vldr	s20, [sl, #-8]
 800abfe:	ee73 8a22 	vadd.f32	s17, s6, s5
 800ac02:	ee39 9a05 	vadd.f32	s18, s18, s10
 800ac06:	ee7a aac1 	vsub.f32	s21, s21, s2
 800ac0a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ac0e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800ac12:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ac16:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ac1a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ac1e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ac22:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ac26:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ac2a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ac2e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ac32:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ac36:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ac3a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ac3e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ac42:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ac46:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ac4a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ac4e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ac52:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ac56:	edc1 8a01 	vstr	s17, [r1, #4]
 800ac5a:	ed81 aa02 	vstr	s20, [r1, #8]
 800ac5e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ac62:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ac66:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ac6a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ac6e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ac72:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ac76:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ac7a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ac7e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ac82:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ac86:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ac8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac8e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ac92:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ac96:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ac9a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ac9e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800aca2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800aca6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800acaa:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800acae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800acb2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800acb6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800acba:	ed84 7a01 	vstr	s14, [r4, #4]
 800acbe:	ed84 4a02 	vstr	s8, [r4, #8]
 800acc2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800acc6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800acca:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800acce:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800acd2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800acd6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800acda:	ee67 2a26 	vmul.f32	s5, s14, s13
 800acde:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800ace2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800ace6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acea:	ee26 6a26 	vmul.f32	s12, s12, s13
 800acee:	ee27 7a25 	vmul.f32	s14, s14, s11
 800acf2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800acf6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800acfa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800acfe:	ee75 5a24 	vadd.f32	s11, s10, s9
 800ad02:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ad06:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ad0a:	f1bb 0b01 	subs.w	fp, fp, #1
 800ad0e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800ad12:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ad16:	f10e 0e08 	add.w	lr, lr, #8
 800ad1a:	ed83 3a02 	vstr	s6, [r3, #8]
 800ad1e:	ed83 7a01 	vstr	s14, [r3, #4]
 800ad22:	f1ac 0c08 	sub.w	ip, ip, #8
 800ad26:	f10a 0a08 	add.w	sl, sl, #8
 800ad2a:	f100 0008 	add.w	r0, r0, #8
 800ad2e:	f1a1 0108 	sub.w	r1, r1, #8
 800ad32:	f109 0910 	add.w	r9, r9, #16
 800ad36:	f105 0508 	add.w	r5, r5, #8
 800ad3a:	f1a4 0408 	sub.w	r4, r4, #8
 800ad3e:	f108 0818 	add.w	r8, r8, #24
 800ad42:	f102 0208 	add.w	r2, r2, #8
 800ad46:	f1a3 0308 	sub.w	r3, r3, #8
 800ad4a:	f47f aefc 	bne.w	800ab46 <arm_cfft_radix8by4_f32+0x12e>
 800ad4e:	9907      	ldr	r1, [sp, #28]
 800ad50:	9800      	ldr	r0, [sp, #0]
 800ad52:	00cb      	lsls	r3, r1, #3
 800ad54:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ad58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ad5c:	9100      	str	r1, [sp, #0]
 800ad5e:	9904      	ldr	r1, [sp, #16]
 800ad60:	4419      	add	r1, r3
 800ad62:	9104      	str	r1, [sp, #16]
 800ad64:	9903      	ldr	r1, [sp, #12]
 800ad66:	4419      	add	r1, r3
 800ad68:	9103      	str	r1, [sp, #12]
 800ad6a:	9906      	ldr	r1, [sp, #24]
 800ad6c:	4419      	add	r1, r3
 800ad6e:	9106      	str	r1, [sp, #24]
 800ad70:	9905      	ldr	r1, [sp, #20]
 800ad72:	441f      	add	r7, r3
 800ad74:	4419      	add	r1, r3
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	9105      	str	r1, [sp, #20]
 800ad7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad7e:	9302      	str	r3, [sp, #8]
 800ad80:	9904      	ldr	r1, [sp, #16]
 800ad82:	9805      	ldr	r0, [sp, #20]
 800ad84:	ed91 4a00 	vldr	s8, [r1]
 800ad88:	edd0 6a00 	vldr	s13, [r0]
 800ad8c:	9b06      	ldr	r3, [sp, #24]
 800ad8e:	ed97 3a00 	vldr	s6, [r7]
 800ad92:	edd3 7a00 	vldr	s15, [r3]
 800ad96:	edd0 4a01 	vldr	s9, [r0, #4]
 800ad9a:	edd1 3a01 	vldr	s7, [r1, #4]
 800ad9e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ada2:	ed93 7a01 	vldr	s14, [r3, #4]
 800ada6:	9a03      	ldr	r2, [sp, #12]
 800ada8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800adac:	ee34 6a26 	vadd.f32	s12, s8, s13
 800adb0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800adb4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800adb8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800adbc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800adc0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800adc4:	ed81 5a00 	vstr	s10, [r1]
 800adc8:	ed93 5a01 	vldr	s10, [r3, #4]
 800adcc:	edd7 4a01 	vldr	s9, [r7, #4]
 800add0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800add4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800add8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800addc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800ade0:	ed81 5a01 	vstr	s10, [r1, #4]
 800ade4:	edd2 1a00 	vldr	s3, [r2]
 800ade8:	edd2 2a01 	vldr	s5, [r2, #4]
 800adec:	ee34 5a83 	vadd.f32	s10, s9, s6
 800adf0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800adf4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800adf8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800adfc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ae00:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ae04:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ae08:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ae0c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ae10:	edc3 2a00 	vstr	s5, [r3]
 800ae14:	ed83 5a01 	vstr	s10, [r3, #4]
 800ae18:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ae1c:	9b00      	ldr	r3, [sp, #0]
 800ae1e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ae22:	ed93 4a01 	vldr	s8, [r3, #4]
 800ae26:	ed93 5a00 	vldr	s10, [r3]
 800ae2a:	9b02      	ldr	r3, [sp, #8]
 800ae2c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ae30:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ae34:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ae38:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ae3c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ae40:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ae44:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ae48:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ae4c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae50:	ed80 6a01 	vstr	s12, [r0, #4]
 800ae54:	edc0 5a00 	vstr	s11, [r0]
 800ae58:	edd3 5a01 	vldr	s11, [r3, #4]
 800ae5c:	edd3 6a00 	vldr	s13, [r3]
 800ae60:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ae64:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ae68:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ae6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ae70:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ae74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae78:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae7c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ae80:	ed87 7a01 	vstr	s14, [r7, #4]
 800ae84:	edc7 7a00 	vstr	s15, [r7]
 800ae88:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	686a      	ldr	r2, [r5, #4]
 800ae90:	2304      	movs	r3, #4
 800ae92:	f000 f8f3 	bl	800b07c <arm_radix8_butterfly_f32>
 800ae96:	4630      	mov	r0, r6
 800ae98:	4621      	mov	r1, r4
 800ae9a:	686a      	ldr	r2, [r5, #4]
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	f000 f8ed 	bl	800b07c <arm_radix8_butterfly_f32>
 800aea2:	9808      	ldr	r0, [sp, #32]
 800aea4:	686a      	ldr	r2, [r5, #4]
 800aea6:	4621      	mov	r1, r4
 800aea8:	2304      	movs	r3, #4
 800aeaa:	f000 f8e7 	bl	800b07c <arm_radix8_butterfly_f32>
 800aeae:	686a      	ldr	r2, [r5, #4]
 800aeb0:	9801      	ldr	r0, [sp, #4]
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	b00d      	add	sp, #52	@ 0x34
 800aeb8:	ecbd 8b0a 	vpop	{d8-d12}
 800aebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	f000 b8dc 	b.w	800b07c <arm_radix8_butterfly_f32>

0800aec4 <arm_cfft_f32>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	2a01      	cmp	r2, #1
 800aeca:	4606      	mov	r6, r0
 800aecc:	4617      	mov	r7, r2
 800aece:	460c      	mov	r4, r1
 800aed0:	4698      	mov	r8, r3
 800aed2:	8805      	ldrh	r5, [r0, #0]
 800aed4:	d056      	beq.n	800af84 <arm_cfft_f32+0xc0>
 800aed6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aeda:	d063      	beq.n	800afa4 <arm_cfft_f32+0xe0>
 800aedc:	d916      	bls.n	800af0c <arm_cfft_f32+0x48>
 800aede:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800aee2:	d01a      	beq.n	800af1a <arm_cfft_f32+0x56>
 800aee4:	d947      	bls.n	800af76 <arm_cfft_f32+0xb2>
 800aee6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800aeea:	d05b      	beq.n	800afa4 <arm_cfft_f32+0xe0>
 800aeec:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800aef0:	d105      	bne.n	800aefe <arm_cfft_f32+0x3a>
 800aef2:	2301      	movs	r3, #1
 800aef4:	6872      	ldr	r2, [r6, #4]
 800aef6:	4629      	mov	r1, r5
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 f8bf 	bl	800b07c <arm_radix8_butterfly_f32>
 800aefe:	f1b8 0f00 	cmp.w	r8, #0
 800af02:	d111      	bne.n	800af28 <arm_cfft_f32+0x64>
 800af04:	2f01      	cmp	r7, #1
 800af06:	d016      	beq.n	800af36 <arm_cfft_f32+0x72>
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	2d20      	cmp	r5, #32
 800af0e:	d049      	beq.n	800afa4 <arm_cfft_f32+0xe0>
 800af10:	d935      	bls.n	800af7e <arm_cfft_f32+0xba>
 800af12:	2d40      	cmp	r5, #64	@ 0x40
 800af14:	d0ed      	beq.n	800aef2 <arm_cfft_f32+0x2e>
 800af16:	2d80      	cmp	r5, #128	@ 0x80
 800af18:	d1f1      	bne.n	800aefe <arm_cfft_f32+0x3a>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff fcab 	bl	800a878 <arm_cfft_radix8by2_f32>
 800af22:	f1b8 0f00 	cmp.w	r8, #0
 800af26:	d0ed      	beq.n	800af04 <arm_cfft_f32+0x40>
 800af28:	68b2      	ldr	r2, [r6, #8]
 800af2a:	89b1      	ldrh	r1, [r6, #12]
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 f841 	bl	800afb4 <arm_bitreversal_32>
 800af32:	2f01      	cmp	r7, #1
 800af34:	d1e8      	bne.n	800af08 <arm_cfft_f32+0x44>
 800af36:	ee07 5a90 	vmov	s15, r5
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af46:	2d00      	cmp	r5, #0
 800af48:	d0de      	beq.n	800af08 <arm_cfft_f32+0x44>
 800af4a:	f104 0108 	add.w	r1, r4, #8
 800af4e:	2300      	movs	r3, #0
 800af50:	3301      	adds	r3, #1
 800af52:	429d      	cmp	r5, r3
 800af54:	f101 0108 	add.w	r1, r1, #8
 800af58:	ed11 7a04 	vldr	s14, [r1, #-16]
 800af5c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800af60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800af68:	ed01 7a04 	vstr	s14, [r1, #-16]
 800af6c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800af70:	d1ee      	bne.n	800af50 <arm_cfft_f32+0x8c>
 800af72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af76:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800af7a:	d0ba      	beq.n	800aef2 <arm_cfft_f32+0x2e>
 800af7c:	e7bf      	b.n	800aefe <arm_cfft_f32+0x3a>
 800af7e:	2d10      	cmp	r5, #16
 800af80:	d0cb      	beq.n	800af1a <arm_cfft_f32+0x56>
 800af82:	e7bc      	b.n	800aefe <arm_cfft_f32+0x3a>
 800af84:	b19d      	cbz	r5, 800afae <arm_cfft_f32+0xea>
 800af86:	f101 030c 	add.w	r3, r1, #12
 800af8a:	2200      	movs	r2, #0
 800af8c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800af90:	3201      	adds	r2, #1
 800af92:	eef1 7a67 	vneg.f32	s15, s15
 800af96:	4295      	cmp	r5, r2
 800af98:	ed43 7a02 	vstr	s15, [r3, #-8]
 800af9c:	f103 0308 	add.w	r3, r3, #8
 800afa0:	d1f4      	bne.n	800af8c <arm_cfft_f32+0xc8>
 800afa2:	e798      	b.n	800aed6 <arm_cfft_f32+0x12>
 800afa4:	4621      	mov	r1, r4
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7ff fd36 	bl	800aa18 <arm_cfft_radix8by4_f32>
 800afac:	e7a7      	b.n	800aefe <arm_cfft_f32+0x3a>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0aa      	beq.n	800af08 <arm_cfft_f32+0x44>
 800afb2:	e7b9      	b.n	800af28 <arm_cfft_f32+0x64>

0800afb4 <arm_bitreversal_32>:
 800afb4:	b1e9      	cbz	r1, 800aff2 <arm_bitreversal_32+0x3e>
 800afb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb8:	2500      	movs	r5, #0
 800afba:	f102 0e02 	add.w	lr, r2, #2
 800afbe:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800afc2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800afc6:	08a4      	lsrs	r4, r4, #2
 800afc8:	089b      	lsrs	r3, r3, #2
 800afca:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800afce:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800afd2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800afd6:	00a6      	lsls	r6, r4, #2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800afde:	3304      	adds	r3, #4
 800afe0:	1d34      	adds	r4, r6, #4
 800afe2:	3502      	adds	r5, #2
 800afe4:	58c6      	ldr	r6, [r0, r3]
 800afe6:	5907      	ldr	r7, [r0, r4]
 800afe8:	50c7      	str	r7, [r0, r3]
 800afea:	428d      	cmp	r5, r1
 800afec:	5106      	str	r6, [r0, r4]
 800afee:	d3e6      	bcc.n	800afbe <arm_bitreversal_32+0xa>
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff2:	4770      	bx	lr

0800aff4 <arm_abs_f32>:
 800aff4:	b470      	push	{r4, r5, r6}
 800aff6:	0896      	lsrs	r6, r2, #2
 800aff8:	d025      	beq.n	800b046 <arm_abs_f32+0x52>
 800affa:	f100 0410 	add.w	r4, r0, #16
 800affe:	f101 0310 	add.w	r3, r1, #16
 800b002:	4635      	mov	r5, r6
 800b004:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b008:	eef0 7ae7 	vabs.f32	s15, s15
 800b00c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b010:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b014:	eef0 7ae7 	vabs.f32	s15, s15
 800b018:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b01c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b020:	eef0 7ae7 	vabs.f32	s15, s15
 800b024:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b028:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b02c:	3d01      	subs	r5, #1
 800b02e:	eef0 7ae7 	vabs.f32	s15, s15
 800b032:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b036:	f104 0410 	add.w	r4, r4, #16
 800b03a:	f103 0310 	add.w	r3, r3, #16
 800b03e:	d1e1      	bne.n	800b004 <arm_abs_f32+0x10>
 800b040:	0136      	lsls	r6, r6, #4
 800b042:	4430      	add	r0, r6
 800b044:	4431      	add	r1, r6
 800b046:	f012 0203 	ands.w	r2, r2, #3
 800b04a:	d015      	beq.n	800b078 <arm_abs_f32+0x84>
 800b04c:	edd0 7a00 	vldr	s15, [r0]
 800b050:	3a01      	subs	r2, #1
 800b052:	eef0 7ae7 	vabs.f32	s15, s15
 800b056:	edc1 7a00 	vstr	s15, [r1]
 800b05a:	d00d      	beq.n	800b078 <arm_abs_f32+0x84>
 800b05c:	edd0 7a01 	vldr	s15, [r0, #4]
 800b060:	2a01      	cmp	r2, #1
 800b062:	eef0 7ae7 	vabs.f32	s15, s15
 800b066:	edc1 7a01 	vstr	s15, [r1, #4]
 800b06a:	d005      	beq.n	800b078 <arm_abs_f32+0x84>
 800b06c:	edd0 7a02 	vldr	s15, [r0, #8]
 800b070:	eef0 7ae7 	vabs.f32	s15, s15
 800b074:	edc1 7a02 	vstr	s15, [r1, #8]
 800b078:	bc70      	pop	{r4, r5, r6}
 800b07a:	4770      	bx	lr

0800b07c <arm_radix8_butterfly_f32>:
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	ed2d 8b10 	vpush	{d8-d15}
 800b084:	b095      	sub	sp, #84	@ 0x54
 800b086:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b08a:	4603      	mov	r3, r0
 800b08c:	3304      	adds	r3, #4
 800b08e:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800b374 <arm_radix8_butterfly_f32+0x2f8>
 800b092:	9012      	str	r0, [sp, #72]	@ 0x48
 800b094:	468b      	mov	fp, r1
 800b096:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b098:	4689      	mov	r9, r1
 800b09a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b09e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0a0:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b0a2:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b0a6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b0aa:	eb03 0508 	add.w	r5, r3, r8
 800b0ae:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b0b2:	eb05 040e 	add.w	r4, r5, lr
 800b0b6:	0137      	lsls	r7, r6, #4
 800b0b8:	eba6 030a 	sub.w	r3, r6, sl
 800b0bc:	eb04 000e 	add.w	r0, r4, lr
 800b0c0:	44b2      	add	sl, r6
 800b0c2:	1d3a      	adds	r2, r7, #4
 800b0c4:	9702      	str	r7, [sp, #8]
 800b0c6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b0ca:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b0ce:	ebae 0c06 	sub.w	ip, lr, r6
 800b0d2:	9703      	str	r7, [sp, #12]
 800b0d4:	eb03 0708 	add.w	r7, r3, r8
 800b0d8:	9701      	str	r7, [sp, #4]
 800b0da:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b0de:	9706      	str	r7, [sp, #24]
 800b0e0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b0e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b0e6:	f10e 0104 	add.w	r1, lr, #4
 800b0ea:	4439      	add	r1, r7
 800b0ec:	443a      	add	r2, r7
 800b0ee:	0137      	lsls	r7, r6, #4
 800b0f0:	00f6      	lsls	r6, r6, #3
 800b0f2:	9704      	str	r7, [sp, #16]
 800b0f4:	9605      	str	r6, [sp, #20]
 800b0f6:	9f01      	ldr	r7, [sp, #4]
 800b0f8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b0fa:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b0fe:	f04f 0c00 	mov.w	ip, #0
 800b102:	edd4 6a00 	vldr	s13, [r4]
 800b106:	edd7 1a00 	vldr	s3, [r7]
 800b10a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b10e:	edd5 5a00 	vldr	s11, [r5]
 800b112:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b116:	ed90 6a00 	vldr	s12, [r0]
 800b11a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b11e:	ed93 3a00 	vldr	s6, [r3]
 800b122:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b126:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b12a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b12e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b132:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b136:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b13a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b13e:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b142:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b146:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b14a:	ed85 4a00 	vstr	s8, [r5]
 800b14e:	edd1 6a00 	vldr	s13, [r1]
 800b152:	ed94 9a01 	vldr	s18, [r4, #4]
 800b156:	edd3 2a01 	vldr	s5, [r3, #4]
 800b15a:	edd7 8a01 	vldr	s17, [r7, #4]
 800b15e:	edd6 0a00 	vldr	s1, [r6]
 800b162:	edd5 3a01 	vldr	s7, [r5, #4]
 800b166:	ed90 8a01 	vldr	s16, [r0, #4]
 800b16a:	ed92 7a00 	vldr	s14, [r2]
 800b16e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b172:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b176:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b17a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b17e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b182:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b186:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b18a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b18e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b192:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b196:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b19a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b19e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b1a2:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b1a6:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b1aa:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b1ae:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b1b2:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b1b6:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b1ba:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b1be:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b1c2:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b1c6:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b1ca:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b1ce:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b1d2:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b1d6:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b1da:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b1de:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b1e2:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b1e6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b1ea:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b1ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b1f2:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b1f6:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b1fa:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b1fe:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b202:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b206:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b20a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b20e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b212:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b216:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b21a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b21e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b222:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b226:	44dc      	add	ip, fp
 800b228:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b22c:	45e1      	cmp	r9, ip
 800b22e:	ed86 8a00 	vstr	s16, [r6]
 800b232:	ed85 2a01 	vstr	s4, [r5, #4]
 800b236:	4456      	add	r6, sl
 800b238:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b23c:	4455      	add	r5, sl
 800b23e:	edc0 6a00 	vstr	s13, [r0]
 800b242:	ed82 1a00 	vstr	s2, [r2]
 800b246:	ed80 5a01 	vstr	s10, [r0, #4]
 800b24a:	4452      	add	r2, sl
 800b24c:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b250:	4450      	add	r0, sl
 800b252:	edc7 2a00 	vstr	s5, [r7]
 800b256:	edc4 4a00 	vstr	s9, [r4]
 800b25a:	ed83 7a00 	vstr	s14, [r3]
 800b25e:	edc1 5a00 	vstr	s11, [r1]
 800b262:	edc7 3a01 	vstr	s7, [r7, #4]
 800b266:	4451      	add	r1, sl
 800b268:	ed84 6a01 	vstr	s12, [r4, #4]
 800b26c:	4457      	add	r7, sl
 800b26e:	edc3 7a01 	vstr	s15, [r3, #4]
 800b272:	4454      	add	r4, sl
 800b274:	4453      	add	r3, sl
 800b276:	f63f af44 	bhi.w	800b102 <arm_radix8_butterfly_f32+0x86>
 800b27a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	f240 81b7 	bls.w	800b5f0 <arm_radix8_butterfly_f32+0x574>
 800b282:	9b06      	ldr	r3, [sp, #24]
 800b284:	9903      	ldr	r1, [sp, #12]
 800b286:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b288:	9e05      	ldr	r6, [sp, #20]
 800b28a:	9a04      	ldr	r2, [sp, #16]
 800b28c:	f103 0c08 	add.w	ip, r3, #8
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	3108      	adds	r1, #8
 800b294:	f108 0808 	add.w	r8, r8, #8
 800b298:	1841      	adds	r1, r0, r1
 800b29a:	3608      	adds	r6, #8
 800b29c:	330c      	adds	r3, #12
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4444      	add	r4, r8
 800b2a2:	18c3      	adds	r3, r0, r3
 800b2a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2a6:	1981      	adds	r1, r0, r6
 800b2a8:	f10e 0e08 	add.w	lr, lr, #8
 800b2ac:	3208      	adds	r2, #8
 800b2ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b2b0:	9107      	str	r1, [sp, #28]
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4601      	mov	r1, r0
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	f100 030c 	add.w	r3, r0, #12
 800b2bc:	4474      	add	r4, lr
 800b2be:	f04f 0801 	mov.w	r8, #1
 800b2c2:	1882      	adds	r2, r0, r2
 800b2c4:	4461      	add	r1, ip
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2cc:	46c1      	mov	r9, r8
 800b2ce:	9208      	str	r2, [sp, #32]
 800b2d0:	46d8      	mov	r8, fp
 800b2d2:	9106      	str	r1, [sp, #24]
 800b2d4:	f04f 0e00 	mov.w	lr, #0
 800b2d8:	469b      	mov	fp, r3
 800b2da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2de:	449e      	add	lr, r3
 800b2e0:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b2e4:	441a      	add	r2, r3
 800b2e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2e8:	441a      	add	r2, r3
 800b2ea:	18d4      	adds	r4, r2, r3
 800b2ec:	18e5      	adds	r5, r4, r3
 800b2ee:	18ee      	adds	r6, r5, r3
 800b2f0:	18f7      	adds	r7, r6, r3
 800b2f2:	eb07 0c03 	add.w	ip, r7, r3
 800b2f6:	920d      	str	r2, [sp, #52]	@ 0x34
 800b2f8:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b2fc:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b300:	910c      	str	r1, [sp, #48]	@ 0x30
 800b302:	4419      	add	r1, r3
 800b304:	9103      	str	r1, [sp, #12]
 800b306:	4419      	add	r1, r3
 800b308:	18ca      	adds	r2, r1, r3
 800b30a:	9202      	str	r2, [sp, #8]
 800b30c:	441a      	add	r2, r3
 800b30e:	18d0      	adds	r0, r2, r3
 800b310:	ed92 ea01 	vldr	s28, [r2, #4]
 800b314:	9a02      	ldr	r2, [sp, #8]
 800b316:	edd4 7a00 	vldr	s15, [r4]
 800b31a:	edd2 da01 	vldr	s27, [r2, #4]
 800b31e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b320:	ed91 da01 	vldr	s26, [r1, #4]
 800b324:	ed92 ca01 	vldr	s24, [r2, #4]
 800b328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b32a:	9903      	ldr	r1, [sp, #12]
 800b32c:	edcd 7a03 	vstr	s15, [sp, #12]
 800b330:	edd2 7a00 	vldr	s15, [r2]
 800b334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b336:	edcd 7a02 	vstr	s15, [sp, #8]
 800b33a:	edd2 7a00 	vldr	s15, [r2]
 800b33e:	edd0 ea01 	vldr	s29, [r0, #4]
 800b342:	edd1 ca01 	vldr	s25, [r1, #4]
 800b346:	eddc ba00 	vldr	s23, [ip]
 800b34a:	edd7 aa00 	vldr	s21, [r7]
 800b34e:	ed96 aa00 	vldr	s20, [r6]
 800b352:	edd5 9a00 	vldr	s19, [r5]
 800b356:	edcd 7a01 	vstr	s15, [sp, #4]
 800b35a:	4403      	add	r3, r0
 800b35c:	ed93 fa01 	vldr	s30, [r3, #4]
 800b360:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b364:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b36c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b370:	46cc      	mov	ip, r9
 800b372:	e001      	b.n	800b378 <arm_radix8_butterfly_f32+0x2fc>
 800b374:	3f3504f3 	.word	0x3f3504f3
 800b378:	ed91 6a00 	vldr	s12, [r1]
 800b37c:	ed93 5a00 	vldr	s10, [r3]
 800b380:	edd0 fa00 	vldr	s31, [r0]
 800b384:	edd4 7a00 	vldr	s15, [r4]
 800b388:	ed95 7a00 	vldr	s14, [r5]
 800b38c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b390:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b394:	ed92 2a00 	vldr	s4, [r2]
 800b398:	ed96 0a00 	vldr	s0, [r6]
 800b39c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b3a0:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b3a4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b3a8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b3ac:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b3b0:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b3b4:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b3b8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b3bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3c0:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b3c4:	edd4 8a01 	vldr	s17, [r4, #4]
 800b3c8:	ed92 9a01 	vldr	s18, [r2, #4]
 800b3cc:	edd7 0a00 	vldr	s1, [r7]
 800b3d0:	edd1 2a01 	vldr	s5, [r1, #4]
 800b3d4:	ed95 7a01 	vldr	s14, [r5, #4]
 800b3d8:	ed93 6a01 	vldr	s12, [r3, #4]
 800b3dc:	edd0 5a01 	vldr	s11, [r0, #4]
 800b3e0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b3e4:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b3e8:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b3ec:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b3f0:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b3f4:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b3f8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b3fc:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b400:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b404:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b408:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b40c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b410:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b414:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b418:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b41c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b420:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b424:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b428:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b42c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b430:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b434:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b438:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b43c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b440:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b444:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b448:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b44c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b450:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b454:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b458:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b45c:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b460:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b464:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b468:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b46c:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b470:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b474:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b478:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b47c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b480:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b484:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b488:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b48c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b490:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b494:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b498:	eddd 1a02 	vldr	s3, [sp, #8]
 800b49c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b4a0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b4a4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b4a8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b4ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b4b0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b4b4:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b4b8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b4bc:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b4c0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b4c4:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b4c8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b4cc:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b4d0:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b4d4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b4d8:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b4dc:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b4e0:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b4e4:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b4e8:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b4ec:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b4f0:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b4f4:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b4f8:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b4fc:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b500:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b504:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b508:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b50c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b510:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b514:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b518:	eddd 5a03 	vldr	s11, [sp, #12]
 800b51c:	edc6 fa00 	vstr	s31, [r6]
 800b520:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b524:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b528:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b52c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b530:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b534:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b538:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b53c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b540:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b544:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b548:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b54c:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b550:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b554:	44c4      	add	ip, r8
 800b556:	45e3      	cmp	fp, ip
 800b558:	edc3 3a00 	vstr	s7, [r3]
 800b55c:	edc3 6a01 	vstr	s13, [r3, #4]
 800b560:	4456      	add	r6, sl
 800b562:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b566:	edc7 0a00 	vstr	s1, [r7]
 800b56a:	4453      	add	r3, sl
 800b56c:	ed80 2a00 	vstr	s4, [r0]
 800b570:	edc0 2a01 	vstr	s5, [r0, #4]
 800b574:	4457      	add	r7, sl
 800b576:	edc2 1a00 	vstr	s3, [r2]
 800b57a:	ed82 7a01 	vstr	s14, [r2, #4]
 800b57e:	4450      	add	r0, sl
 800b580:	ed85 8a00 	vstr	s16, [r5]
 800b584:	ed85 0a01 	vstr	s0, [r5, #4]
 800b588:	4452      	add	r2, sl
 800b58a:	edc1 4a00 	vstr	s9, [r1]
 800b58e:	4455      	add	r5, sl
 800b590:	ed81 3a01 	vstr	s6, [r1, #4]
 800b594:	edc4 8a00 	vstr	s17, [r4]
 800b598:	ed84 6a01 	vstr	s12, [r4, #4]
 800b59c:	4451      	add	r1, sl
 800b59e:	4454      	add	r4, sl
 800b5a0:	f63f aeea 	bhi.w	800b378 <arm_radix8_butterfly_f32+0x2fc>
 800b5a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b6:	9b08      	ldr	r3, [sp, #32]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	9b07      	ldr	r3, [sp, #28]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	9307      	str	r3, [sp, #28]
 800b5c2:	9b06      	ldr	r3, [sp, #24]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	9306      	str	r3, [sp, #24]
 800b5c8:	9b05      	ldr	r3, [sp, #20]
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d6:	f109 0901 	add.w	r9, r9, #1
 800b5da:	454b      	cmp	r3, r9
 800b5dc:	f47f ae7d 	bne.w	800b2da <arm_radix8_butterfly_f32+0x25e>
 800b5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	46d9      	mov	r9, fp
 800b5e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5ea:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800b5ee:	e554      	b.n	800b09a <arm_radix8_butterfly_f32+0x1e>
 800b5f0:	b015      	add	sp, #84	@ 0x54
 800b5f2:	ecbd 8b10 	vpop	{d8-d15}
 800b5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fa:	bf00      	nop

0800b5fc <memset>:
 800b5fc:	4402      	add	r2, r0
 800b5fe:	4603      	mov	r3, r0
 800b600:	4293      	cmp	r3, r2
 800b602:	d100      	bne.n	800b606 <memset+0xa>
 800b604:	4770      	bx	lr
 800b606:	f803 1b01 	strb.w	r1, [r3], #1
 800b60a:	e7f9      	b.n	800b600 <memset+0x4>

0800b60c <__errno>:
 800b60c:	4b01      	ldr	r3, [pc, #4]	@ (800b614 <__errno+0x8>)
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	2000000c 	.word	0x2000000c

0800b618 <__libc_init_array>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	4d0d      	ldr	r5, [pc, #52]	@ (800b650 <__libc_init_array+0x38>)
 800b61c:	4c0d      	ldr	r4, [pc, #52]	@ (800b654 <__libc_init_array+0x3c>)
 800b61e:	1b64      	subs	r4, r4, r5
 800b620:	10a4      	asrs	r4, r4, #2
 800b622:	2600      	movs	r6, #0
 800b624:	42a6      	cmp	r6, r4
 800b626:	d109      	bne.n	800b63c <__libc_init_array+0x24>
 800b628:	4d0b      	ldr	r5, [pc, #44]	@ (800b658 <__libc_init_array+0x40>)
 800b62a:	4c0c      	ldr	r4, [pc, #48]	@ (800b65c <__libc_init_array+0x44>)
 800b62c:	f000 fdf0 	bl	800c210 <_init>
 800b630:	1b64      	subs	r4, r4, r5
 800b632:	10a4      	asrs	r4, r4, #2
 800b634:	2600      	movs	r6, #0
 800b636:	42a6      	cmp	r6, r4
 800b638:	d105      	bne.n	800b646 <__libc_init_array+0x2e>
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b640:	4798      	blx	r3
 800b642:	3601      	adds	r6, #1
 800b644:	e7ee      	b.n	800b624 <__libc_init_array+0xc>
 800b646:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64a:	4798      	blx	r3
 800b64c:	3601      	adds	r6, #1
 800b64e:	e7f2      	b.n	800b636 <__libc_init_array+0x1e>
 800b650:	0801f6ac 	.word	0x0801f6ac
 800b654:	0801f6ac 	.word	0x0801f6ac
 800b658:	0801f6ac 	.word	0x0801f6ac
 800b65c:	0801f6b0 	.word	0x0801f6b0

0800b660 <sqrtf>:
 800b660:	b508      	push	{r3, lr}
 800b662:	ed2d 8b02 	vpush	{d8}
 800b666:	eeb0 8a40 	vmov.f32	s16, s0
 800b66a:	f000 f85b 	bl	800b724 <__ieee754_sqrtf>
 800b66e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b676:	d60c      	bvs.n	800b692 <sqrtf+0x32>
 800b678:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b698 <sqrtf+0x38>
 800b67c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b684:	d505      	bpl.n	800b692 <sqrtf+0x32>
 800b686:	f7ff ffc1 	bl	800b60c <__errno>
 800b68a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b68e:	2321      	movs	r3, #33	@ 0x21
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	ecbd 8b02 	vpop	{d8}
 800b696:	bd08      	pop	{r3, pc}
 800b698:	00000000 	.word	0x00000000

0800b69c <cosf>:
 800b69c:	ee10 3a10 	vmov	r3, s0
 800b6a0:	b507      	push	{r0, r1, r2, lr}
 800b6a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b71c <cosf+0x80>)
 800b6a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d806      	bhi.n	800b6ba <cosf+0x1e>
 800b6ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b720 <cosf+0x84>
 800b6b0:	b003      	add	sp, #12
 800b6b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6b6:	f000 b8b7 	b.w	800b828 <__kernel_cosf>
 800b6ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b6be:	d304      	bcc.n	800b6ca <cosf+0x2e>
 800b6c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b6c4:	b003      	add	sp, #12
 800b6c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6ca:	4668      	mov	r0, sp
 800b6cc:	f000 f94c 	bl	800b968 <__ieee754_rem_pio2f>
 800b6d0:	f000 0003 	and.w	r0, r0, #3
 800b6d4:	2801      	cmp	r0, #1
 800b6d6:	d009      	beq.n	800b6ec <cosf+0x50>
 800b6d8:	2802      	cmp	r0, #2
 800b6da:	d010      	beq.n	800b6fe <cosf+0x62>
 800b6dc:	b9b0      	cbnz	r0, 800b70c <cosf+0x70>
 800b6de:	eddd 0a01 	vldr	s1, [sp, #4]
 800b6e2:	ed9d 0a00 	vldr	s0, [sp]
 800b6e6:	f000 f89f 	bl	800b828 <__kernel_cosf>
 800b6ea:	e7eb      	b.n	800b6c4 <cosf+0x28>
 800b6ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800b6f0:	ed9d 0a00 	vldr	s0, [sp]
 800b6f4:	f000 f8f0 	bl	800b8d8 <__kernel_sinf>
 800b6f8:	eeb1 0a40 	vneg.f32	s0, s0
 800b6fc:	e7e2      	b.n	800b6c4 <cosf+0x28>
 800b6fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800b702:	ed9d 0a00 	vldr	s0, [sp]
 800b706:	f000 f88f 	bl	800b828 <__kernel_cosf>
 800b70a:	e7f5      	b.n	800b6f8 <cosf+0x5c>
 800b70c:	eddd 0a01 	vldr	s1, [sp, #4]
 800b710:	ed9d 0a00 	vldr	s0, [sp]
 800b714:	2001      	movs	r0, #1
 800b716:	f000 f8df 	bl	800b8d8 <__kernel_sinf>
 800b71a:	e7d3      	b.n	800b6c4 <cosf+0x28>
 800b71c:	3f490fd8 	.word	0x3f490fd8
 800b720:	00000000 	.word	0x00000000

0800b724 <__ieee754_sqrtf>:
 800b724:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b728:	4770      	bx	lr
 800b72a:	0000      	movs	r0, r0
 800b72c:	0000      	movs	r0, r0
	...

0800b730 <floor>:
 800b730:	ec51 0b10 	vmov	r0, r1, d0
 800b734:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b740:	2e13      	cmp	r6, #19
 800b742:	460c      	mov	r4, r1
 800b744:	4605      	mov	r5, r0
 800b746:	4680      	mov	r8, r0
 800b748:	dc34      	bgt.n	800b7b4 <floor+0x84>
 800b74a:	2e00      	cmp	r6, #0
 800b74c:	da17      	bge.n	800b77e <floor+0x4e>
 800b74e:	a332      	add	r3, pc, #200	@ (adr r3, 800b818 <floor+0xe8>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fd5a 	bl	800020c <__adddf3>
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	f7f5 f99c 	bl	8000a98 <__aeabi_dcmpgt>
 800b760:	b150      	cbz	r0, 800b778 <floor+0x48>
 800b762:	2c00      	cmp	r4, #0
 800b764:	da55      	bge.n	800b812 <floor+0xe2>
 800b766:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b76a:	432c      	orrs	r4, r5
 800b76c:	2500      	movs	r5, #0
 800b76e:	42ac      	cmp	r4, r5
 800b770:	4c2b      	ldr	r4, [pc, #172]	@ (800b820 <floor+0xf0>)
 800b772:	bf08      	it	eq
 800b774:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b778:	4621      	mov	r1, r4
 800b77a:	4628      	mov	r0, r5
 800b77c:	e023      	b.n	800b7c6 <floor+0x96>
 800b77e:	4f29      	ldr	r7, [pc, #164]	@ (800b824 <floor+0xf4>)
 800b780:	4137      	asrs	r7, r6
 800b782:	ea01 0307 	and.w	r3, r1, r7
 800b786:	4303      	orrs	r3, r0
 800b788:	d01d      	beq.n	800b7c6 <floor+0x96>
 800b78a:	a323      	add	r3, pc, #140	@ (adr r3, 800b818 <floor+0xe8>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 fd3c 	bl	800020c <__adddf3>
 800b794:	2200      	movs	r2, #0
 800b796:	2300      	movs	r3, #0
 800b798:	f7f5 f97e 	bl	8000a98 <__aeabi_dcmpgt>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d0eb      	beq.n	800b778 <floor+0x48>
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	bfbe      	ittt	lt
 800b7a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b7a8:	4133      	asrlt	r3, r6
 800b7aa:	18e4      	addlt	r4, r4, r3
 800b7ac:	ea24 0407 	bic.w	r4, r4, r7
 800b7b0:	2500      	movs	r5, #0
 800b7b2:	e7e1      	b.n	800b778 <floor+0x48>
 800b7b4:	2e33      	cmp	r6, #51	@ 0x33
 800b7b6:	dd0a      	ble.n	800b7ce <floor+0x9e>
 800b7b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b7bc:	d103      	bne.n	800b7c6 <floor+0x96>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	f7f4 fd23 	bl	800020c <__adddf3>
 800b7c6:	ec41 0b10 	vmov	d0, r0, r1
 800b7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b7d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d6:	40df      	lsrs	r7, r3
 800b7d8:	4207      	tst	r7, r0
 800b7da:	d0f4      	beq.n	800b7c6 <floor+0x96>
 800b7dc:	a30e      	add	r3, pc, #56	@ (adr r3, 800b818 <floor+0xe8>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd13 	bl	800020c <__adddf3>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f7f5 f955 	bl	8000a98 <__aeabi_dcmpgt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d0c2      	beq.n	800b778 <floor+0x48>
 800b7f2:	2c00      	cmp	r4, #0
 800b7f4:	da0a      	bge.n	800b80c <floor+0xdc>
 800b7f6:	2e14      	cmp	r6, #20
 800b7f8:	d101      	bne.n	800b7fe <floor+0xce>
 800b7fa:	3401      	adds	r4, #1
 800b7fc:	e006      	b.n	800b80c <floor+0xdc>
 800b7fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b802:	2301      	movs	r3, #1
 800b804:	40b3      	lsls	r3, r6
 800b806:	441d      	add	r5, r3
 800b808:	4545      	cmp	r5, r8
 800b80a:	d3f6      	bcc.n	800b7fa <floor+0xca>
 800b80c:	ea25 0507 	bic.w	r5, r5, r7
 800b810:	e7b2      	b.n	800b778 <floor+0x48>
 800b812:	2500      	movs	r5, #0
 800b814:	462c      	mov	r4, r5
 800b816:	e7af      	b.n	800b778 <floor+0x48>
 800b818:	8800759c 	.word	0x8800759c
 800b81c:	7e37e43c 	.word	0x7e37e43c
 800b820:	bff00000 	.word	0xbff00000
 800b824:	000fffff 	.word	0x000fffff

0800b828 <__kernel_cosf>:
 800b828:	ee10 3a10 	vmov	r3, s0
 800b82c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b830:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b834:	eef0 6a40 	vmov.f32	s13, s0
 800b838:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b83c:	d204      	bcs.n	800b848 <__kernel_cosf+0x20>
 800b83e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b842:	ee17 2a90 	vmov	r2, s15
 800b846:	b342      	cbz	r2, 800b89a <__kernel_cosf+0x72>
 800b848:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b84c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b8b8 <__kernel_cosf+0x90>
 800b850:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b8bc <__kernel_cosf+0x94>
 800b854:	4a1a      	ldr	r2, [pc, #104]	@ (800b8c0 <__kernel_cosf+0x98>)
 800b856:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b85a:	4293      	cmp	r3, r2
 800b85c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b8c4 <__kernel_cosf+0x9c>
 800b860:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b864:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b8c8 <__kernel_cosf+0xa0>
 800b868:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b86c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b8cc <__kernel_cosf+0xa4>
 800b870:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b874:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b8d0 <__kernel_cosf+0xa8>
 800b878:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b87c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b880:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b884:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b888:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b890:	d804      	bhi.n	800b89c <__kernel_cosf+0x74>
 800b892:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b896:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b89a:	4770      	bx	lr
 800b89c:	4a0d      	ldr	r2, [pc, #52]	@ (800b8d4 <__kernel_cosf+0xac>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	bf9a      	itte	ls
 800b8a2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b8a6:	ee07 3a10 	vmovls	s14, r3
 800b8aa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b8ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8b6:	e7ec      	b.n	800b892 <__kernel_cosf+0x6a>
 800b8b8:	ad47d74e 	.word	0xad47d74e
 800b8bc:	310f74f6 	.word	0x310f74f6
 800b8c0:	3e999999 	.word	0x3e999999
 800b8c4:	b493f27c 	.word	0xb493f27c
 800b8c8:	37d00d01 	.word	0x37d00d01
 800b8cc:	bab60b61 	.word	0xbab60b61
 800b8d0:	3d2aaaab 	.word	0x3d2aaaab
 800b8d4:	3f480000 	.word	0x3f480000

0800b8d8 <__kernel_sinf>:
 800b8d8:	ee10 3a10 	vmov	r3, s0
 800b8dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b8e4:	d204      	bcs.n	800b8f0 <__kernel_sinf+0x18>
 800b8e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b8ea:	ee17 3a90 	vmov	r3, s15
 800b8ee:	b35b      	cbz	r3, 800b948 <__kernel_sinf+0x70>
 800b8f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b8f4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b94c <__kernel_sinf+0x74>
 800b8f8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b950 <__kernel_sinf+0x78>
 800b8fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b900:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b954 <__kernel_sinf+0x7c>
 800b904:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b908:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b958 <__kernel_sinf+0x80>
 800b90c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b910:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b95c <__kernel_sinf+0x84>
 800b914:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b918:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b91c:	b930      	cbnz	r0, 800b92c <__kernel_sinf+0x54>
 800b91e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b960 <__kernel_sinf+0x88>
 800b922:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b926:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b92a:	4770      	bx	lr
 800b92c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b930:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b934:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b938:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b93c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b964 <__kernel_sinf+0x8c>
 800b940:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b944:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b950:	b2d72f34 	.word	0xb2d72f34
 800b954:	3638ef1b 	.word	0x3638ef1b
 800b958:	b9500d01 	.word	0xb9500d01
 800b95c:	3c088889 	.word	0x3c088889
 800b960:	be2aaaab 	.word	0xbe2aaaab
 800b964:	3e2aaaab 	.word	0x3e2aaaab

0800b968 <__ieee754_rem_pio2f>:
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96a:	ee10 6a10 	vmov	r6, s0
 800b96e:	4b88      	ldr	r3, [pc, #544]	@ (800bb90 <__ieee754_rem_pio2f+0x228>)
 800b970:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b974:	429d      	cmp	r5, r3
 800b976:	b087      	sub	sp, #28
 800b978:	4604      	mov	r4, r0
 800b97a:	d805      	bhi.n	800b988 <__ieee754_rem_pio2f+0x20>
 800b97c:	2300      	movs	r3, #0
 800b97e:	ed80 0a00 	vstr	s0, [r0]
 800b982:	6043      	str	r3, [r0, #4]
 800b984:	2000      	movs	r0, #0
 800b986:	e022      	b.n	800b9ce <__ieee754_rem_pio2f+0x66>
 800b988:	4b82      	ldr	r3, [pc, #520]	@ (800bb94 <__ieee754_rem_pio2f+0x22c>)
 800b98a:	429d      	cmp	r5, r3
 800b98c:	d83a      	bhi.n	800ba04 <__ieee754_rem_pio2f+0x9c>
 800b98e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b992:	2e00      	cmp	r6, #0
 800b994:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bb98 <__ieee754_rem_pio2f+0x230>
 800b998:	4a80      	ldr	r2, [pc, #512]	@ (800bb9c <__ieee754_rem_pio2f+0x234>)
 800b99a:	f023 030f 	bic.w	r3, r3, #15
 800b99e:	dd18      	ble.n	800b9d2 <__ieee754_rem_pio2f+0x6a>
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b9a6:	bf09      	itett	eq
 800b9a8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bba0 <__ieee754_rem_pio2f+0x238>
 800b9ac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bba4 <__ieee754_rem_pio2f+0x23c>
 800b9b0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bba8 <__ieee754_rem_pio2f+0x240>
 800b9b4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b9b8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b9bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9c0:	ed80 7a00 	vstr	s14, [r0]
 800b9c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9c8:	edc0 7a01 	vstr	s15, [r0, #4]
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	b007      	add	sp, #28
 800b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b9d8:	bf09      	itett	eq
 800b9da:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bba0 <__ieee754_rem_pio2f+0x238>
 800b9de:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bba4 <__ieee754_rem_pio2f+0x23c>
 800b9e2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bba8 <__ieee754_rem_pio2f+0x240>
 800b9e6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b9ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b9ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9f2:	ed80 7a00 	vstr	s14, [r0]
 800b9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9fa:	edc0 7a01 	vstr	s15, [r0, #4]
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	e7e4      	b.n	800b9ce <__ieee754_rem_pio2f+0x66>
 800ba04:	4b69      	ldr	r3, [pc, #420]	@ (800bbac <__ieee754_rem_pio2f+0x244>)
 800ba06:	429d      	cmp	r5, r3
 800ba08:	d873      	bhi.n	800baf2 <__ieee754_rem_pio2f+0x18a>
 800ba0a:	f000 f8dd 	bl	800bbc8 <fabsf>
 800ba0e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bbb0 <__ieee754_rem_pio2f+0x248>
 800ba12:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ba16:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba22:	ee17 0a90 	vmov	r0, s15
 800ba26:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bb98 <__ieee754_rem_pio2f+0x230>
 800ba2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ba2e:	281f      	cmp	r0, #31
 800ba30:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bba4 <__ieee754_rem_pio2f+0x23c>
 800ba34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba38:	eeb1 6a47 	vneg.f32	s12, s14
 800ba3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ba40:	ee16 1a90 	vmov	r1, s13
 800ba44:	dc09      	bgt.n	800ba5a <__ieee754_rem_pio2f+0xf2>
 800ba46:	4a5b      	ldr	r2, [pc, #364]	@ (800bbb4 <__ieee754_rem_pio2f+0x24c>)
 800ba48:	1e47      	subs	r7, r0, #1
 800ba4a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ba4e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ba52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d107      	bne.n	800ba6a <__ieee754_rem_pio2f+0x102>
 800ba5a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ba5e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ba62:	2a08      	cmp	r2, #8
 800ba64:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ba68:	dc14      	bgt.n	800ba94 <__ieee754_rem_pio2f+0x12c>
 800ba6a:	6021      	str	r1, [r4, #0]
 800ba6c:	ed94 7a00 	vldr	s14, [r4]
 800ba70:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba74:	2e00      	cmp	r6, #0
 800ba76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba7a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba7e:	daa6      	bge.n	800b9ce <__ieee754_rem_pio2f+0x66>
 800ba80:	eeb1 7a47 	vneg.f32	s14, s14
 800ba84:	eeb1 0a40 	vneg.f32	s0, s0
 800ba88:	ed84 7a00 	vstr	s14, [r4]
 800ba8c:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba90:	4240      	negs	r0, r0
 800ba92:	e79c      	b.n	800b9ce <__ieee754_rem_pio2f+0x66>
 800ba94:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bba0 <__ieee754_rem_pio2f+0x238>
 800ba98:	eef0 6a40 	vmov.f32	s13, s0
 800ba9c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800baa0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800baa4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800baa8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bba8 <__ieee754_rem_pio2f+0x240>
 800baac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bab0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bab4:	ee15 2a90 	vmov	r2, s11
 800bab8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800babc:	1a5b      	subs	r3, r3, r1
 800babe:	2b19      	cmp	r3, #25
 800bac0:	dc04      	bgt.n	800bacc <__ieee754_rem_pio2f+0x164>
 800bac2:	edc4 5a00 	vstr	s11, [r4]
 800bac6:	eeb0 0a66 	vmov.f32	s0, s13
 800baca:	e7cf      	b.n	800ba6c <__ieee754_rem_pio2f+0x104>
 800bacc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bbb8 <__ieee754_rem_pio2f+0x250>
 800bad0:	eeb0 0a66 	vmov.f32	s0, s13
 800bad4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bad8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800badc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bbbc <__ieee754_rem_pio2f+0x254>
 800bae0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bae4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bae8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800baec:	ed84 7a00 	vstr	s14, [r4]
 800baf0:	e7bc      	b.n	800ba6c <__ieee754_rem_pio2f+0x104>
 800baf2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800baf6:	d306      	bcc.n	800bb06 <__ieee754_rem_pio2f+0x19e>
 800baf8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bafc:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb00:	edc0 7a00 	vstr	s15, [r0]
 800bb04:	e73e      	b.n	800b984 <__ieee754_rem_pio2f+0x1c>
 800bb06:	15ea      	asrs	r2, r5, #23
 800bb08:	3a86      	subs	r2, #134	@ 0x86
 800bb0a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb16:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bbc0 <__ieee754_rem_pio2f+0x258>
 800bb1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb22:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bb26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb36:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bb3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb4a:	d11e      	bne.n	800bb8a <__ieee754_rem_pio2f+0x222>
 800bb4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2302      	movne	r3, #2
 800bb5a:	491a      	ldr	r1, [pc, #104]	@ (800bbc4 <__ieee754_rem_pio2f+0x25c>)
 800bb5c:	9101      	str	r1, [sp, #4]
 800bb5e:	2102      	movs	r1, #2
 800bb60:	9100      	str	r1, [sp, #0]
 800bb62:	a803      	add	r0, sp, #12
 800bb64:	4621      	mov	r1, r4
 800bb66:	f000 f837 	bl	800bbd8 <__kernel_rem_pio2f>
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	f6bf af2f 	bge.w	800b9ce <__ieee754_rem_pio2f+0x66>
 800bb70:	edd4 7a00 	vldr	s15, [r4]
 800bb74:	eef1 7a67 	vneg.f32	s15, s15
 800bb78:	edc4 7a00 	vstr	s15, [r4]
 800bb7c:	edd4 7a01 	vldr	s15, [r4, #4]
 800bb80:	eef1 7a67 	vneg.f32	s15, s15
 800bb84:	edc4 7a01 	vstr	s15, [r4, #4]
 800bb88:	e782      	b.n	800ba90 <__ieee754_rem_pio2f+0x128>
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e7e5      	b.n	800bb5a <__ieee754_rem_pio2f+0x1f2>
 800bb8e:	bf00      	nop
 800bb90:	3f490fd8 	.word	0x3f490fd8
 800bb94:	4016cbe3 	.word	0x4016cbe3
 800bb98:	3fc90f80 	.word	0x3fc90f80
 800bb9c:	3fc90fd0 	.word	0x3fc90fd0
 800bba0:	37354400 	.word	0x37354400
 800bba4:	37354443 	.word	0x37354443
 800bba8:	2e85a308 	.word	0x2e85a308
 800bbac:	43490f80 	.word	0x43490f80
 800bbb0:	3f22f984 	.word	0x3f22f984
 800bbb4:	0801f2d4 	.word	0x0801f2d4
 800bbb8:	2e85a300 	.word	0x2e85a300
 800bbbc:	248d3132 	.word	0x248d3132
 800bbc0:	43800000 	.word	0x43800000
 800bbc4:	0801f354 	.word	0x0801f354

0800bbc8 <fabsf>:
 800bbc8:	ee10 3a10 	vmov	r3, s0
 800bbcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbd0:	ee00 3a10 	vmov	s0, r3
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <__kernel_rem_pio2f>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	ed2d 8b04 	vpush	{d8-d9}
 800bbe0:	b0d9      	sub	sp, #356	@ 0x164
 800bbe2:	4690      	mov	r8, r2
 800bbe4:	9001      	str	r0, [sp, #4]
 800bbe6:	4ab9      	ldr	r2, [pc, #740]	@ (800becc <__kernel_rem_pio2f+0x2f4>)
 800bbe8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bbea:	f118 0f04 	cmn.w	r8, #4
 800bbee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bbf2:	460f      	mov	r7, r1
 800bbf4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bbf8:	db27      	blt.n	800bc4a <__kernel_rem_pio2f+0x72>
 800bbfa:	f1b8 0203 	subs.w	r2, r8, #3
 800bbfe:	bf48      	it	mi
 800bc00:	f108 0204 	addmi.w	r2, r8, #4
 800bc04:	10d2      	asrs	r2, r2, #3
 800bc06:	1c55      	adds	r5, r2, #1
 800bc08:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bc0a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800bc0e:	00e8      	lsls	r0, r5, #3
 800bc10:	eba2 060b 	sub.w	r6, r2, fp
 800bc14:	9002      	str	r0, [sp, #8]
 800bc16:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bc1a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bc1e:	ac1c      	add	r4, sp, #112	@ 0x70
 800bc20:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bc24:	2000      	movs	r0, #0
 800bc26:	4560      	cmp	r0, ip
 800bc28:	dd11      	ble.n	800bc4e <__kernel_rem_pio2f+0x76>
 800bc2a:	a91c      	add	r1, sp, #112	@ 0x70
 800bc2c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bc30:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bc34:	f04f 0c00 	mov.w	ip, #0
 800bc38:	45d4      	cmp	ip, sl
 800bc3a:	dc27      	bgt.n	800bc8c <__kernel_rem_pio2f+0xb4>
 800bc3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bc40:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800bc44:	4606      	mov	r6, r0
 800bc46:	2400      	movs	r4, #0
 800bc48:	e016      	b.n	800bc78 <__kernel_rem_pio2f+0xa0>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	e7db      	b.n	800bc06 <__kernel_rem_pio2f+0x2e>
 800bc4e:	42c6      	cmn	r6, r0
 800bc50:	bf5d      	ittte	pl
 800bc52:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bc56:	ee07 1a90 	vmovpl	s15, r1
 800bc5a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bc5e:	eef0 7a47 	vmovmi.f32	s15, s14
 800bc62:	ece4 7a01 	vstmia	r4!, {s15}
 800bc66:	3001      	adds	r0, #1
 800bc68:	e7dd      	b.n	800bc26 <__kernel_rem_pio2f+0x4e>
 800bc6a:	ecfe 6a01 	vldmia	lr!, {s13}
 800bc6e:	ed96 7a00 	vldr	s14, [r6]
 800bc72:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc76:	3401      	adds	r4, #1
 800bc78:	455c      	cmp	r4, fp
 800bc7a:	f1a6 0604 	sub.w	r6, r6, #4
 800bc7e:	ddf4      	ble.n	800bc6a <__kernel_rem_pio2f+0x92>
 800bc80:	ece9 7a01 	vstmia	r9!, {s15}
 800bc84:	f10c 0c01 	add.w	ip, ip, #1
 800bc88:	3004      	adds	r0, #4
 800bc8a:	e7d5      	b.n	800bc38 <__kernel_rem_pio2f+0x60>
 800bc8c:	a908      	add	r1, sp, #32
 800bc8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc92:	9104      	str	r1, [sp, #16]
 800bc94:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bc96:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800bed8 <__kernel_rem_pio2f+0x300>
 800bc9a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800bed4 <__kernel_rem_pio2f+0x2fc>
 800bc9e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bca2:	9203      	str	r2, [sp, #12]
 800bca4:	4654      	mov	r4, sl
 800bca6:	00a2      	lsls	r2, r4, #2
 800bca8:	9205      	str	r2, [sp, #20]
 800bcaa:	aa58      	add	r2, sp, #352	@ 0x160
 800bcac:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bcb0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bcb4:	a944      	add	r1, sp, #272	@ 0x110
 800bcb6:	aa08      	add	r2, sp, #32
 800bcb8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bcbc:	4694      	mov	ip, r2
 800bcbe:	4626      	mov	r6, r4
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	f1a0 0004 	sub.w	r0, r0, #4
 800bcc6:	dc4c      	bgt.n	800bd62 <__kernel_rem_pio2f+0x18a>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcce:	f000 f9f5 	bl	800c0bc <scalbnf>
 800bcd2:	eeb0 8a40 	vmov.f32	s16, s0
 800bcd6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bcda:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bcde:	f000 fa53 	bl	800c188 <floorf>
 800bce2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bce6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bcea:	2d00      	cmp	r5, #0
 800bcec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcf0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bcf4:	ee17 9a90 	vmov	r9, s15
 800bcf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcfc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bd00:	dd41      	ble.n	800bd86 <__kernel_rem_pio2f+0x1ae>
 800bd02:	f104 3cff 	add.w	ip, r4, #4294967295
 800bd06:	a908      	add	r1, sp, #32
 800bd08:	f1c5 0e08 	rsb	lr, r5, #8
 800bd0c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bd10:	fa46 f00e 	asr.w	r0, r6, lr
 800bd14:	4481      	add	r9, r0
 800bd16:	fa00 f00e 	lsl.w	r0, r0, lr
 800bd1a:	1a36      	subs	r6, r6, r0
 800bd1c:	f1c5 0007 	rsb	r0, r5, #7
 800bd20:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bd24:	4106      	asrs	r6, r0
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	dd3c      	ble.n	800bda4 <__kernel_rem_pio2f+0x1cc>
 800bd2a:	f04f 0e00 	mov.w	lr, #0
 800bd2e:	f109 0901 	add.w	r9, r9, #1
 800bd32:	4670      	mov	r0, lr
 800bd34:	4574      	cmp	r4, lr
 800bd36:	dc68      	bgt.n	800be0a <__kernel_rem_pio2f+0x232>
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	dd03      	ble.n	800bd44 <__kernel_rem_pio2f+0x16c>
 800bd3c:	2d01      	cmp	r5, #1
 800bd3e:	d074      	beq.n	800be2a <__kernel_rem_pio2f+0x252>
 800bd40:	2d02      	cmp	r5, #2
 800bd42:	d07d      	beq.n	800be40 <__kernel_rem_pio2f+0x268>
 800bd44:	2e02      	cmp	r6, #2
 800bd46:	d12d      	bne.n	800bda4 <__kernel_rem_pio2f+0x1cc>
 800bd48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bd50:	b340      	cbz	r0, 800bda4 <__kernel_rem_pio2f+0x1cc>
 800bd52:	4628      	mov	r0, r5
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	f000 f9b1 	bl	800c0bc <scalbnf>
 800bd5a:	9b06      	ldr	r3, [sp, #24]
 800bd5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bd60:	e020      	b.n	800bda4 <__kernel_rem_pio2f+0x1cc>
 800bd62:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bd66:	3e01      	subs	r6, #1
 800bd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd70:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bd74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd78:	ecac 0a01 	vstmia	ip!, {s0}
 800bd7c:	ed90 0a00 	vldr	s0, [r0]
 800bd80:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bd84:	e79c      	b.n	800bcc0 <__kernel_rem_pio2f+0xe8>
 800bd86:	d105      	bne.n	800bd94 <__kernel_rem_pio2f+0x1bc>
 800bd88:	1e60      	subs	r0, r4, #1
 800bd8a:	a908      	add	r1, sp, #32
 800bd8c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bd90:	11f6      	asrs	r6, r6, #7
 800bd92:	e7c8      	b.n	800bd26 <__kernel_rem_pio2f+0x14e>
 800bd94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bd98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda0:	da31      	bge.n	800be06 <__kernel_rem_pio2f+0x22e>
 800bda2:	2600      	movs	r6, #0
 800bda4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdac:	f040 8098 	bne.w	800bee0 <__kernel_rem_pio2f+0x308>
 800bdb0:	1e60      	subs	r0, r4, #1
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4550      	cmp	r0, sl
 800bdb6:	da4b      	bge.n	800be50 <__kernel_rem_pio2f+0x278>
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	d065      	beq.n	800be88 <__kernel_rem_pio2f+0x2b0>
 800bdbc:	3c01      	subs	r4, #1
 800bdbe:	ab08      	add	r3, sp, #32
 800bdc0:	3d08      	subs	r5, #8
 800bdc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0f8      	beq.n	800bdbc <__kernel_rem_pio2f+0x1e4>
 800bdca:	4628      	mov	r0, r5
 800bdcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bdd0:	f000 f974 	bl	800c0bc <scalbnf>
 800bdd4:	1c63      	adds	r3, r4, #1
 800bdd6:	aa44      	add	r2, sp, #272	@ 0x110
 800bdd8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bed8 <__kernel_rem_pio2f+0x300>
 800bddc:	0099      	lsls	r1, r3, #2
 800bdde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bde2:	4623      	mov	r3, r4
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f280 80a9 	bge.w	800bf3c <__kernel_rem_pio2f+0x364>
 800bdea:	4623      	mov	r3, r4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f2c0 80c7 	blt.w	800bf80 <__kernel_rem_pio2f+0x3a8>
 800bdf2:	aa44      	add	r2, sp, #272	@ 0x110
 800bdf4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bdf8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bed0 <__kernel_rem_pio2f+0x2f8>
 800bdfc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800be00:	2000      	movs	r0, #0
 800be02:	1ae2      	subs	r2, r4, r3
 800be04:	e0b1      	b.n	800bf6a <__kernel_rem_pio2f+0x392>
 800be06:	2602      	movs	r6, #2
 800be08:	e78f      	b.n	800bd2a <__kernel_rem_pio2f+0x152>
 800be0a:	f852 1b04 	ldr.w	r1, [r2], #4
 800be0e:	b948      	cbnz	r0, 800be24 <__kernel_rem_pio2f+0x24c>
 800be10:	b121      	cbz	r1, 800be1c <__kernel_rem_pio2f+0x244>
 800be12:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800be16:	f842 1c04 	str.w	r1, [r2, #-4]
 800be1a:	2101      	movs	r1, #1
 800be1c:	f10e 0e01 	add.w	lr, lr, #1
 800be20:	4608      	mov	r0, r1
 800be22:	e787      	b.n	800bd34 <__kernel_rem_pio2f+0x15c>
 800be24:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800be28:	e7f5      	b.n	800be16 <__kernel_rem_pio2f+0x23e>
 800be2a:	f104 3cff 	add.w	ip, r4, #4294967295
 800be2e:	aa08      	add	r2, sp, #32
 800be30:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800be34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800be38:	a908      	add	r1, sp, #32
 800be3a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800be3e:	e781      	b.n	800bd44 <__kernel_rem_pio2f+0x16c>
 800be40:	f104 3cff 	add.w	ip, r4, #4294967295
 800be44:	aa08      	add	r2, sp, #32
 800be46:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800be4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800be4e:	e7f3      	b.n	800be38 <__kernel_rem_pio2f+0x260>
 800be50:	a908      	add	r1, sp, #32
 800be52:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800be56:	3801      	subs	r0, #1
 800be58:	430a      	orrs	r2, r1
 800be5a:	e7ab      	b.n	800bdb4 <__kernel_rem_pio2f+0x1dc>
 800be5c:	3201      	adds	r2, #1
 800be5e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800be62:	2e00      	cmp	r6, #0
 800be64:	d0fa      	beq.n	800be5c <__kernel_rem_pio2f+0x284>
 800be66:	9905      	ldr	r1, [sp, #20]
 800be68:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800be6c:	eb0d 0001 	add.w	r0, sp, r1
 800be70:	18e6      	adds	r6, r4, r3
 800be72:	a91c      	add	r1, sp, #112	@ 0x70
 800be74:	f104 0c01 	add.w	ip, r4, #1
 800be78:	384c      	subs	r0, #76	@ 0x4c
 800be7a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800be7e:	4422      	add	r2, r4
 800be80:	4562      	cmp	r2, ip
 800be82:	da04      	bge.n	800be8e <__kernel_rem_pio2f+0x2b6>
 800be84:	4614      	mov	r4, r2
 800be86:	e70e      	b.n	800bca6 <__kernel_rem_pio2f+0xce>
 800be88:	9804      	ldr	r0, [sp, #16]
 800be8a:	2201      	movs	r2, #1
 800be8c:	e7e7      	b.n	800be5e <__kernel_rem_pio2f+0x286>
 800be8e:	9903      	ldr	r1, [sp, #12]
 800be90:	f8dd e004 	ldr.w	lr, [sp, #4]
 800be94:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800be98:	9105      	str	r1, [sp, #20]
 800be9a:	ee07 1a90 	vmov	s15, r1
 800be9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bea2:	2400      	movs	r4, #0
 800bea4:	ece6 7a01 	vstmia	r6!, {s15}
 800bea8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800beac:	46b1      	mov	r9, r6
 800beae:	455c      	cmp	r4, fp
 800beb0:	dd04      	ble.n	800bebc <__kernel_rem_pio2f+0x2e4>
 800beb2:	ece0 7a01 	vstmia	r0!, {s15}
 800beb6:	f10c 0c01 	add.w	ip, ip, #1
 800beba:	e7e1      	b.n	800be80 <__kernel_rem_pio2f+0x2a8>
 800bebc:	ecfe 6a01 	vldmia	lr!, {s13}
 800bec0:	ed39 7a01 	vldmdb	r9!, {s14}
 800bec4:	3401      	adds	r4, #1
 800bec6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800beca:	e7f0      	b.n	800beae <__kernel_rem_pio2f+0x2d6>
 800becc:	0801f698 	.word	0x0801f698
 800bed0:	0801f66c 	.word	0x0801f66c
 800bed4:	43800000 	.word	0x43800000
 800bed8:	3b800000 	.word	0x3b800000
 800bedc:	00000000 	.word	0x00000000
 800bee0:	9b02      	ldr	r3, [sp, #8]
 800bee2:	eeb0 0a48 	vmov.f32	s0, s16
 800bee6:	eba3 0008 	sub.w	r0, r3, r8
 800beea:	f000 f8e7 	bl	800c0bc <scalbnf>
 800beee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bed4 <__kernel_rem_pio2f+0x2fc>
 800bef2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befa:	db19      	blt.n	800bf30 <__kernel_rem_pio2f+0x358>
 800befc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bed8 <__kernel_rem_pio2f+0x300>
 800bf00:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bf04:	aa08      	add	r2, sp, #32
 800bf06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf10:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bf14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf1c:	ee10 3a10 	vmov	r3, s0
 800bf20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bf24:	ee17 3a90 	vmov	r3, s15
 800bf28:	3401      	adds	r4, #1
 800bf2a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bf2e:	e74c      	b.n	800bdca <__kernel_rem_pio2f+0x1f2>
 800bf30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf34:	aa08      	add	r2, sp, #32
 800bf36:	ee10 3a10 	vmov	r3, s0
 800bf3a:	e7f6      	b.n	800bf2a <__kernel_rem_pio2f+0x352>
 800bf3c:	a808      	add	r0, sp, #32
 800bf3e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bf42:	9001      	str	r0, [sp, #4]
 800bf44:	ee07 0a90 	vmov	s15, r0
 800bf48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf52:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf56:	ed62 7a01 	vstmdb	r2!, {s15}
 800bf5a:	e743      	b.n	800bde4 <__kernel_rem_pio2f+0x20c>
 800bf5c:	ecfc 6a01 	vldmia	ip!, {s13}
 800bf60:	ecb5 7a01 	vldmia	r5!, {s14}
 800bf64:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf68:	3001      	adds	r0, #1
 800bf6a:	4550      	cmp	r0, sl
 800bf6c:	dc01      	bgt.n	800bf72 <__kernel_rem_pio2f+0x39a>
 800bf6e:	4282      	cmp	r2, r0
 800bf70:	daf4      	bge.n	800bf5c <__kernel_rem_pio2f+0x384>
 800bf72:	a858      	add	r0, sp, #352	@ 0x160
 800bf74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bf78:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	e735      	b.n	800bdec <__kernel_rem_pio2f+0x214>
 800bf80:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	dc09      	bgt.n	800bf9a <__kernel_rem_pio2f+0x3c2>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dc2b      	bgt.n	800bfe2 <__kernel_rem_pio2f+0x40a>
 800bf8a:	d044      	beq.n	800c016 <__kernel_rem_pio2f+0x43e>
 800bf8c:	f009 0007 	and.w	r0, r9, #7
 800bf90:	b059      	add	sp, #356	@ 0x164
 800bf92:	ecbd 8b04 	vpop	{d8-d9}
 800bf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d1f5      	bne.n	800bf8c <__kernel_rem_pio2f+0x3b4>
 800bfa0:	aa30      	add	r2, sp, #192	@ 0xc0
 800bfa2:	1f0b      	subs	r3, r1, #4
 800bfa4:	4413      	add	r3, r2
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f1a2 0204 	sub.w	r2, r2, #4
 800bfb0:	dc52      	bgt.n	800c058 <__kernel_rem_pio2f+0x480>
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	2a01      	cmp	r2, #1
 800bfb6:	f1a3 0304 	sub.w	r3, r3, #4
 800bfba:	dc5d      	bgt.n	800c078 <__kernel_rem_pio2f+0x4a0>
 800bfbc:	ab30      	add	r3, sp, #192	@ 0xc0
 800bfbe:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800bfc2:	440b      	add	r3, r1
 800bfc4:	2c01      	cmp	r4, #1
 800bfc6:	dc67      	bgt.n	800c098 <__kernel_rem_pio2f+0x4c0>
 800bfc8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bfcc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	d167      	bne.n	800c0a4 <__kernel_rem_pio2f+0x4cc>
 800bfd4:	edc7 6a00 	vstr	s13, [r7]
 800bfd8:	ed87 7a01 	vstr	s14, [r7, #4]
 800bfdc:	edc7 7a02 	vstr	s15, [r7, #8]
 800bfe0:	e7d4      	b.n	800bf8c <__kernel_rem_pio2f+0x3b4>
 800bfe2:	ab30      	add	r3, sp, #192	@ 0xc0
 800bfe4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800bfe8:	440b      	add	r3, r1
 800bfea:	4622      	mov	r2, r4
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	da24      	bge.n	800c03a <__kernel_rem_pio2f+0x462>
 800bff0:	b34e      	cbz	r6, 800c046 <__kernel_rem_pio2f+0x46e>
 800bff2:	eef1 7a47 	vneg.f32	s15, s14
 800bff6:	edc7 7a00 	vstr	s15, [r7]
 800bffa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bffe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c002:	aa31      	add	r2, sp, #196	@ 0xc4
 800c004:	2301      	movs	r3, #1
 800c006:	429c      	cmp	r4, r3
 800c008:	da20      	bge.n	800c04c <__kernel_rem_pio2f+0x474>
 800c00a:	b10e      	cbz	r6, 800c010 <__kernel_rem_pio2f+0x438>
 800c00c:	eef1 7a67 	vneg.f32	s15, s15
 800c010:	edc7 7a01 	vstr	s15, [r7, #4]
 800c014:	e7ba      	b.n	800bf8c <__kernel_rem_pio2f+0x3b4>
 800c016:	ab30      	add	r3, sp, #192	@ 0xc0
 800c018:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800bedc <__kernel_rem_pio2f+0x304>
 800c01c:	440b      	add	r3, r1
 800c01e:	2c00      	cmp	r4, #0
 800c020:	da05      	bge.n	800c02e <__kernel_rem_pio2f+0x456>
 800c022:	b10e      	cbz	r6, 800c028 <__kernel_rem_pio2f+0x450>
 800c024:	eef1 7a67 	vneg.f32	s15, s15
 800c028:	edc7 7a00 	vstr	s15, [r7]
 800c02c:	e7ae      	b.n	800bf8c <__kernel_rem_pio2f+0x3b4>
 800c02e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c032:	3c01      	subs	r4, #1
 800c034:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c038:	e7f1      	b.n	800c01e <__kernel_rem_pio2f+0x446>
 800c03a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c03e:	3a01      	subs	r2, #1
 800c040:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c044:	e7d2      	b.n	800bfec <__kernel_rem_pio2f+0x414>
 800c046:	eef0 7a47 	vmov.f32	s15, s14
 800c04a:	e7d4      	b.n	800bff6 <__kernel_rem_pio2f+0x41e>
 800c04c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c050:	3301      	adds	r3, #1
 800c052:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c056:	e7d6      	b.n	800c006 <__kernel_rem_pio2f+0x42e>
 800c058:	edd2 7a00 	vldr	s15, [r2]
 800c05c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c060:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c064:	3801      	subs	r0, #1
 800c066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c06a:	ed82 7a00 	vstr	s14, [r2]
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c072:	edc2 7a01 	vstr	s15, [r2, #4]
 800c076:	e798      	b.n	800bfaa <__kernel_rem_pio2f+0x3d2>
 800c078:	edd3 7a00 	vldr	s15, [r3]
 800c07c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c080:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c084:	3a01      	subs	r2, #1
 800c086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c08a:	ed83 7a00 	vstr	s14, [r3]
 800c08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c092:	edc3 7a01 	vstr	s15, [r3, #4]
 800c096:	e78d      	b.n	800bfb4 <__kernel_rem_pio2f+0x3dc>
 800c098:	ed33 7a01 	vldmdb	r3!, {s14}
 800c09c:	3c01      	subs	r4, #1
 800c09e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0a2:	e78f      	b.n	800bfc4 <__kernel_rem_pio2f+0x3ec>
 800c0a4:	eef1 6a66 	vneg.f32	s13, s13
 800c0a8:	eeb1 7a47 	vneg.f32	s14, s14
 800c0ac:	edc7 6a00 	vstr	s13, [r7]
 800c0b0:	ed87 7a01 	vstr	s14, [r7, #4]
 800c0b4:	eef1 7a67 	vneg.f32	s15, s15
 800c0b8:	e790      	b.n	800bfdc <__kernel_rem_pio2f+0x404>
 800c0ba:	bf00      	nop

0800c0bc <scalbnf>:
 800c0bc:	ee10 3a10 	vmov	r3, s0
 800c0c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c0c4:	d02b      	beq.n	800c11e <scalbnf+0x62>
 800c0c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c0ca:	d302      	bcc.n	800c0d2 <scalbnf+0x16>
 800c0cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c0d0:	4770      	bx	lr
 800c0d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c0d6:	d123      	bne.n	800c120 <scalbnf+0x64>
 800c0d8:	4b24      	ldr	r3, [pc, #144]	@ (800c16c <scalbnf+0xb0>)
 800c0da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c170 <scalbnf+0xb4>
 800c0de:	4298      	cmp	r0, r3
 800c0e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c0e4:	db17      	blt.n	800c116 <scalbnf+0x5a>
 800c0e6:	ee10 3a10 	vmov	r3, s0
 800c0ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0ee:	3a19      	subs	r2, #25
 800c0f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c0f4:	4288      	cmp	r0, r1
 800c0f6:	dd15      	ble.n	800c124 <scalbnf+0x68>
 800c0f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c174 <scalbnf+0xb8>
 800c0fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c178 <scalbnf+0xbc>
 800c100:	ee10 3a10 	vmov	r3, s0
 800c104:	eeb0 7a67 	vmov.f32	s14, s15
 800c108:	2b00      	cmp	r3, #0
 800c10a:	bfb8      	it	lt
 800c10c:	eef0 7a66 	vmovlt.f32	s15, s13
 800c110:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c114:	4770      	bx	lr
 800c116:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c17c <scalbnf+0xc0>
 800c11a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c11e:	4770      	bx	lr
 800c120:	0dd2      	lsrs	r2, r2, #23
 800c122:	e7e5      	b.n	800c0f0 <scalbnf+0x34>
 800c124:	4410      	add	r0, r2
 800c126:	28fe      	cmp	r0, #254	@ 0xfe
 800c128:	dce6      	bgt.n	800c0f8 <scalbnf+0x3c>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	dd06      	ble.n	800c13c <scalbnf+0x80>
 800c12e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c132:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c136:	ee00 3a10 	vmov	s0, r3
 800c13a:	4770      	bx	lr
 800c13c:	f110 0f16 	cmn.w	r0, #22
 800c140:	da09      	bge.n	800c156 <scalbnf+0x9a>
 800c142:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c17c <scalbnf+0xc0>
 800c146:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c180 <scalbnf+0xc4>
 800c14a:	ee10 3a10 	vmov	r3, s0
 800c14e:	eeb0 7a67 	vmov.f32	s14, s15
 800c152:	2b00      	cmp	r3, #0
 800c154:	e7d9      	b.n	800c10a <scalbnf+0x4e>
 800c156:	3019      	adds	r0, #25
 800c158:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c15c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c160:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c184 <scalbnf+0xc8>
 800c164:	ee07 3a90 	vmov	s15, r3
 800c168:	e7d7      	b.n	800c11a <scalbnf+0x5e>
 800c16a:	bf00      	nop
 800c16c:	ffff3cb0 	.word	0xffff3cb0
 800c170:	4c000000 	.word	0x4c000000
 800c174:	7149f2ca 	.word	0x7149f2ca
 800c178:	f149f2ca 	.word	0xf149f2ca
 800c17c:	0da24260 	.word	0x0da24260
 800c180:	8da24260 	.word	0x8da24260
 800c184:	33000000 	.word	0x33000000

0800c188 <floorf>:
 800c188:	ee10 3a10 	vmov	r3, s0
 800c18c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c190:	3a7f      	subs	r2, #127	@ 0x7f
 800c192:	2a16      	cmp	r2, #22
 800c194:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c198:	dc2b      	bgt.n	800c1f2 <floorf+0x6a>
 800c19a:	2a00      	cmp	r2, #0
 800c19c:	da12      	bge.n	800c1c4 <floorf+0x3c>
 800c19e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c204 <floorf+0x7c>
 800c1a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ae:	dd06      	ble.n	800c1be <floorf+0x36>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	da24      	bge.n	800c1fe <floorf+0x76>
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	4b14      	ldr	r3, [pc, #80]	@ (800c208 <floorf+0x80>)
 800c1b8:	bf08      	it	eq
 800c1ba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c1be:	ee00 3a10 	vmov	s0, r3
 800c1c2:	4770      	bx	lr
 800c1c4:	4911      	ldr	r1, [pc, #68]	@ (800c20c <floorf+0x84>)
 800c1c6:	4111      	asrs	r1, r2
 800c1c8:	420b      	tst	r3, r1
 800c1ca:	d0fa      	beq.n	800c1c2 <floorf+0x3a>
 800c1cc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c204 <floorf+0x7c>
 800c1d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1dc:	ddef      	ble.n	800c1be <floorf+0x36>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfbe      	ittt	lt
 800c1e2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c1e6:	fa40 f202 	asrlt.w	r2, r0, r2
 800c1ea:	189b      	addlt	r3, r3, r2
 800c1ec:	ea23 0301 	bic.w	r3, r3, r1
 800c1f0:	e7e5      	b.n	800c1be <floorf+0x36>
 800c1f2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c1f6:	d3e4      	bcc.n	800c1c2 <floorf+0x3a>
 800c1f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1fc:	4770      	bx	lr
 800c1fe:	2300      	movs	r3, #0
 800c200:	e7dd      	b.n	800c1be <floorf+0x36>
 800c202:	bf00      	nop
 800c204:	7149f2ca 	.word	0x7149f2ca
 800c208:	bf800000 	.word	0xbf800000
 800c20c:	007fffff 	.word	0x007fffff

0800c210 <_init>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr

0800c21c <_fini>:
 800c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21e:	bf00      	nop
 800c220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c222:	bc08      	pop	{r3}
 800c224:	469e      	mov	lr, r3
 800c226:	4770      	bx	lr
=======

lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6d0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  0800c890  0800c890  0001c890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fd0c  0801fd0c  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801fd0c  0801fd0c  0002fd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fd14  0801fd14  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fd14  0801fd14  0002fd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fd18  0801fd18  0002fd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801fd1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000005c  0801fd78  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0801fd78  000305a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024c6a  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ae  00000000  00000000  00054dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00059060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123f  00000000  00000000  0005a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ca0  00000000  00000000  0005bb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008560  00000000  00000000  000747e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006ddc  00000000  00000000  0007cd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  00083b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  00083b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  00087188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c878 	.word	0x0800c878

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	0800c878 	.word	0x0800c878

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000458 	.word	0x20000458

08000ef8 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e033      	b.n	8000f70 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f12:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f84 <apply_hanning_window+0x8c>
 8000f16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f2a:	eeb0 0a66 	vmov.f32	s0, s13
 8000f2e:	f00a fee5 	bl	800bcfc <cosf>
 8000f32:	eef0 7a40 	vmov.f32	s15, s0
 8000f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8c7      	bhi.n	8000f08 <apply_hanning_window+0x10>
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40c90fdb 	.word	0x40c90fdb

08000f88 <set_motor_speed_1>:

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}
void set_motor_speed_1(int motor_speed) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fa87 	bl	80004a4 <__aeabi_i2d>
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <set_motor_speed_1+0xa0>)
 8000f9c:	f7ff fc16 	bl	80007cc <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	a319      	add	r3, pc, #100	; (adr r3, 8001010 <set_motor_speed_1+0x88>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fae3 	bl	8000578 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	a317      	add	r3, pc, #92	; (adr r3, 8001018 <set_motor_speed_1+0x90>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f924 	bl	800020c <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <set_motor_speed_1+0xa4>)
 8000fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fd6:	f7ff fbf9 	bl	80007cc <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	a30f      	add	r3, pc, #60	; (adr r3, 8001020 <set_motor_speed_1+0x98>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fac6 	bl	8000578 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fd5a 	bl	8000aac <__aeabi_d2iz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]

  TIM4->CCR1 = temp_ccr1;
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <set_motor_speed_1+0xa8>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	c28f5c29 	.word	0xc28f5c29
 8001014:	3fdc28f5 	.word	0x3fdc28f5
 8001018:	47ae147b 	.word	0x47ae147b
 800101c:	3ff47ae1 	.word	0x3ff47ae1
 8001020:	00000000 	.word	0x00000000
 8001024:	412e8480 	.word	0x412e8480
 8001028:	40590000 	.word	0x40590000
 800102c:	408f4000 	.word	0x408f4000
 8001030:	40000800 	.word	0x40000800
 8001034:	00000000 	.word	0x00000000

08001038 <set_motor_speed_2>:

void set_motor_speed_2(int motor_speed) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fa2f 	bl	80004a4 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <set_motor_speed_2+0xa0>)
 800104c:	f7ff fbbe 	bl	80007cc <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	a319      	add	r3, pc, #100	; (adr r3, 80010c0 <set_motor_speed_2+0x88>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fa8b 	bl	8000578 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	a317      	add	r3, pc, #92	; (adr r3, 80010c8 <set_motor_speed_2+0x90>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff f8cc 	bl	800020c <__adddf3>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <set_motor_speed_2+0xa4>)
 8001082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001086:	f7ff fba1 	bl	80007cc <__aeabi_ddiv>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	a30f      	add	r3, pc, #60	; (adr r3, 80010d0 <set_motor_speed_2+0x98>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fa6e 	bl	8000578 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd02 	bl	8000aac <__aeabi_d2iz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <set_motor_speed_2+0xa8>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	c28f5c29 	.word	0xc28f5c29
 80010c4:	3fdc28f5 	.word	0x3fdc28f5
 80010c8:	47ae147b 	.word	0x47ae147b
 80010cc:	3ff47ae1 	.word	0x3ff47ae1
 80010d0:	00000000 	.word	0x00000000
 80010d4:	412e8480 	.word	0x412e8480
 80010d8:	40590000 	.word	0x40590000
 80010dc:	408f4000 	.word	0x408f4000
 80010e0:	40000800 	.word	0x40000800
 80010e4:	00000000 	.word	0x00000000

080010e8 <set_motor_speed_3>:

void set_motor_speed_3(int motor_speed) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f9d7 	bl	80004a4 <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <set_motor_speed_3+0xa0>)
 80010fc:	f7ff fb66 	bl	80007cc <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a319      	add	r3, pc, #100	; (adr r3, 8001170 <set_motor_speed_3+0x88>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa33 	bl	8000578 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	a317      	add	r3, pc, #92	; (adr r3, 8001178 <set_motor_speed_3+0x90>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff f874 	bl	800020c <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <set_motor_speed_3+0xa4>)
 8001132:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001136:	f7ff fb49 	bl	80007cc <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	a30f      	add	r3, pc, #60	; (adr r3, 8001180 <set_motor_speed_3+0x98>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa16 	bl	8000578 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fcaa 	bl	8000aac <__aeabi_d2iz>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR3 = temp_ccr3;
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <set_motor_speed_3+0xa8>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	c28f5c29 	.word	0xc28f5c29
 8001174:	3fdc28f5 	.word	0x3fdc28f5
 8001178:	47ae147b 	.word	0x47ae147b
 800117c:	3ff47ae1 	.word	0x3ff47ae1
 8001180:	00000000 	.word	0x00000000
 8001184:	412e8480 	.word	0x412e8480
 8001188:	40590000 	.word	0x40590000
 800118c:	408f4000 	.word	0x408f4000
 8001190:	40000800 	.word	0x40000800
 8001194:	00000000 	.word	0x00000000

08001198 <set_motor_speed_4>:

void set_motor_speed_4(int motor_speed) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f97f 	bl	80004a4 <__aeabi_i2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <set_motor_speed_4+0xa0>)
 80011ac:	f7ff fb0e 	bl	80007cc <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a319      	add	r3, pc, #100	; (adr r3, 8001220 <set_motor_speed_4+0x88>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9db 	bl	8000578 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	a317      	add	r3, pc, #92	; (adr r3, 8001228 <set_motor_speed_4+0x90>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff f81c 	bl	800020c <__adddf3>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr4 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <set_motor_speed_4+0xa4>)
 80011e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e6:	f7ff faf1 	bl	80007cc <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001230 <set_motor_speed_4+0x98>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9be 	bl	8000578 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc52 	bl	8000aac <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR4 = temp_ccr4;
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <set_motor_speed_4+0xa8>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	c28f5c29 	.word	0xc28f5c29
 8001224:	3fdc28f5 	.word	0x3fdc28f5
 8001228:	47ae147b 	.word	0x47ae147b
 800122c:	3ff47ae1 	.word	0x3ff47ae1
 8001230:	00000000 	.word	0x00000000
 8001234:	412e8480 	.word	0x412e8480
 8001238:	40590000 	.word	0x40590000
 800123c:	408f4000 	.word	0x408f4000
 8001240:	40000800 	.word	0x40000800
 8001244:	00000000 	.word	0x00000000

08001248 <set_motor_speed_5>:

void set_motor_speed_5(int motor_speed) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff f927 	bl	80004a4 <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <set_motor_speed_5+0xa0>)
 800125c:	f7ff fab6 	bl	80007cc <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	a319      	add	r3, pc, #100	; (adr r3, 80012d0 <set_motor_speed_5+0x88>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f983 	bl	8000578 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	a317      	add	r3, pc, #92	; (adr r3, 80012d8 <set_motor_speed_5+0x90>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7fe ffc4 	bl	800020c <__adddf3>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <set_motor_speed_5+0xa4>)
 8001292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001296:	f7ff fa99 	bl	80007cc <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	a30f      	add	r3, pc, #60	; (adr r3, 80012e0 <set_motor_speed_5+0x98>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f966 	bl	8000578 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbfa 	bl	8000aac <__aeabi_d2iz>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]

  TIM5->CCR1 = temp_ccr1;
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <set_motor_speed_5+0xa8>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	c28f5c29 	.word	0xc28f5c29
 80012d4:	3fdc28f5 	.word	0x3fdc28f5
 80012d8:	47ae147b 	.word	0x47ae147b
 80012dc:	3ff47ae1 	.word	0x3ff47ae1
 80012e0:	00000000 	.word	0x00000000
 80012e4:	412e8480 	.word	0x412e8480
 80012e8:	40590000 	.word	0x40590000
 80012ec:	408f4000 	.word	0x408f4000
 80012f0:	40000c00 	.word	0x40000c00
 80012f4:	00000000 	.word	0x00000000

080012f8 <set_motor_speed_6>:
void set_motor_speed_6(int motor_speed) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff f8cf 	bl	80004a4 <__aeabi_i2d>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <set_motor_speed_6+0xa0>)
 800130c:	f7ff fa5e 	bl	80007cc <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	a319      	add	r3, pc, #100	; (adr r3, 8001380 <set_motor_speed_6+0x88>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	a317      	add	r3, pc, #92	; (adr r3, 8001388 <set_motor_speed_6+0x90>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7fe ff6c 	bl	800020c <__adddf3>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <set_motor_speed_6+0xa4>)
 8001342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001346:	f7ff fa41 	bl	80007cc <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	a30f      	add	r3, pc, #60	; (adr r3, 8001390 <set_motor_speed_6+0x98>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f90e 	bl	8000578 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fba2 	bl	8000aac <__aeabi_d2iz>
 8001368:	4603      	mov	r3, r0
 800136a:	60fb      	str	r3, [r7, #12]

  TIM5->CCR3 = temp_ccr3;
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <set_motor_speed_6+0xa8>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	c28f5c29 	.word	0xc28f5c29
 8001384:	3fdc28f5 	.word	0x3fdc28f5
 8001388:	47ae147b 	.word	0x47ae147b
 800138c:	3ff47ae1 	.word	0x3ff47ae1
 8001390:	00000000 	.word	0x00000000
 8001394:	412e8480 	.word	0x412e8480
 8001398:	40590000 	.word	0x40590000
 800139c:	408f4000 	.word	0x408f4000
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <HAL_GPIO_EXTI_Callback>:

        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
	int test = startFlag;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_GPIO_EXTI_Callback+0x38>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == 64) {
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	2b40      	cmp	r3, #64	; 0x40
 80013b8:	d10a      	bne.n	80013d0 <HAL_GPIO_EXTI_Callback+0x2c>
		if (startFlag) {
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_GPIO_EXTI_Callback+0x38>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_EXTI_Callback+0x26>
			startFlag = 0;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_GPIO_EXTI_Callback+0x38>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		} else {
			startFlag = 1;
		}
	}
}
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_EXTI_Callback+0x2c>
			startFlag = 1;
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_GPIO_EXTI_Callback+0x38>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	2000045c 	.word	0x2000045c

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 80013e6:	b0b8      	sub	sp, #224	; 0xe0
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	convFlag = 0;
 80013ea:	4bb7      	ldr	r3, [pc, #732]	; (80016c8 <main+0x2e8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 80013f0:	4bb6      	ldr	r3, [pc, #728]	; (80016cc <main+0x2ec>)
 80013f2:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 80013f6:	f104 045c 	add.w	r4, r4, #92	; 0x5c
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001404:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A", "D", "G", "B", "E (high)" };
 8001408:	4bb1      	ldr	r3, [pc, #708]	; (80016d0 <main+0x2f0>)
 800140a:	f507 3480 	add.w	r4, r7, #65536	; 0x10000
 800140e:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8001412:	461d      	mov	r5, r3
 8001414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001418:	e895 0003 	ldmia.w	r5, {r0, r1}
 800141c:	e884 0003 	stmia.w	r4, {r0, r1}
	union Float_as_buffer {
		  float f;
		  uint8_t buf[4];
	 };

	uint16_t key = 0xFFFF;
 8001420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001424:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001428:	f102 0242 	add.w	r2, r2, #66	; 0x42
 800142c:	8013      	strh	r3, [r2, #0]

	uint8_t start = 0b1;
 800142e:	2301      	movs	r3, #1
 8001430:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001434:	f102 0241 	add.w	r2, r2, #65	; 0x41
 8001438:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f002 f972 	bl	8003722 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 ffdb 	bl	80023f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001442:	f001 f81f 	bl	8002484 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f001 fbc3 	bl	8002bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f001 fb97 	bl	8002b7c <MX_DMA_Init>
  MX_ADC1_Init();
 800144e:	f001 f849 	bl	80024e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001452:	f001 f8ad 	bl	80025b0 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8001456:	f001 f8df 	bl	8002618 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 800145a:	f001 f975 	bl	8002748 <MX_SAI1_Init>
  MX_TIM1_Init();
 800145e:	f001 f9e7 	bl	8002830 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001462:	f001 faa9 	bl	80029b8 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001466:	f001 f9a5 	bl	80027b4 <MX_SPI1_Init>
  MX_TIM5_Init();
 800146a:	f001 fb21 	bl	8002ab0 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800146e:	f001 f91f 	bl	80026b0 <MX_USART1_UART_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 8001472:	2304      	movs	r3, #4
 8001474:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001478:	f102 0284 	add.w	r2, r2, #132	; 0x84
 800147c:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 800147e:	2329      	movs	r3, #41	; 0x29
 8001480:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001484:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8001488:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 800148a:	4892      	ldr	r0, [pc, #584]	; (80016d4 <main+0x2f4>)
 800148c:	f007 fad4 	bl	8008a38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	4891      	ldr	r0, [pc, #580]	; (80016d8 <main+0x2f8>)
 8001494:	f007 fb98 	bl	8008bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001498:	2104      	movs	r1, #4
 800149a:	488f      	ldr	r0, [pc, #572]	; (80016d8 <main+0x2f8>)
 800149c:	f007 fb94 	bl	8008bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014a0:	2108      	movs	r1, #8
 80014a2:	488d      	ldr	r0, [pc, #564]	; (80016d8 <main+0x2f8>)
 80014a4:	f007 fb90 	bl	8008bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014a8:	210c      	movs	r1, #12
 80014aa:	488b      	ldr	r0, [pc, #556]	; (80016d8 <main+0x2f8>)
 80014ac:	f007 fb8c 	bl	8008bc8 <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80014b0:	2100      	movs	r1, #0
 80014b2:	488a      	ldr	r0, [pc, #552]	; (80016dc <main+0x2fc>)
 80014b4:	f007 fb88 	bl	8008bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80014b8:	2108      	movs	r1, #8
 80014ba:	4888      	ldr	r0, [pc, #544]	; (80016dc <main+0x2fc>)
 80014bc:	f007 fb84 	bl	8008bc8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	while (startFlag) {
 80014c0:	f000 bf8e 	b.w	80023e0 <main+0x1000>
	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 80014c4:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80014c8:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80014cc:	3ba0      	subs	r3, #160	; 0xa0
 80014ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d2:	4619      	mov	r1, r3
 80014d4:	4882      	ldr	r0, [pc, #520]	; (80016e0 <main+0x300>)
 80014d6:	f002 fcdd 	bl	8003e94 <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 80014da:	bf00      	nop
 80014dc:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <main+0x2e8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0fb      	beq.n	80014dc <main+0xfc>

	  float32_t output[BUFFER_LENGTH];
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80014ea:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e031      	b.n	8001556 <main+0x176>
		  signal[i] = (double)(ADC_BUFFER[i]);
 80014f2:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80014f6:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80014fa:	461a      	mov	r2, r3
 80014fc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001500:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ffb7 	bl	8000484 <__aeabi_ui2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb0d 	bl	8000b3c <__aeabi_d2f>
 8001522:	4602      	mov	r2, r0
 8001524:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 8001528:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 800152c:	4619      	mov	r1, r3
 800152e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001532:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3ba0      	subs	r3, #160	; 0xa0
 800153e:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001540:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001544:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001550:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800155a:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001564:	dbc5      	blt.n	80014f2 <main+0x112>

	  }

	apply_hanning_window(&signal, BUFFER_LENGTH);
 8001566:	f507 4340 	add.w	r3, r7, #49152	; 0xc000
 800156a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800156e:	3b20      	subs	r3, #32
 8001570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fcbf 	bl	8000ef8 <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 800157a:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 800157e:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001582:	3bb8      	subs	r3, #184	; 0xb8
 8001584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001588:	4618      	mov	r0, r3
 800158a:	f009 fba1 	bl	800acd0 <arm_rfft_fast_init_f32>


    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 800158e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001592:	f102 0220 	add.w	r2, r2, #32
 8001596:	3ae0      	subs	r2, #224	; 0xe0
 8001598:	f507 4140 	add.w	r1, r7, #49152	; 0xc000
 800159c:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80015a0:	3920      	subs	r1, #32
 80015a2:	f507 40c1 	add.w	r0, r7, #24704	; 0x6080
 80015a6:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80015aa:	38b8      	subs	r0, #184	; 0xb8
 80015ac:	2300      	movs	r3, #0
 80015ae:	f009 fc73 	bl	800ae98 <arm_rfft_fast_f32>

    output[0] = 0;
 80015b2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015b6:	f103 0320 	add.w	r3, r3, #32
 80015ba:	461a      	mov	r2, r3
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f842 3ce0 	str.w	r3, [r2, #-224]
    output[1] = 0;
 80015c4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015c8:	f103 0320 	add.w	r3, r3, #32
 80015cc:	461a      	mov	r2, r3
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f842 3cdc 	str.w	r3, [r2, #-220]
//	  	    	 continue;
//	  	     }

    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80015dc:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e061      	b.n	80016a8 <main+0x2c8>
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 80015e4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80015e8:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80015f4:	f102 0220 	add.w	r2, r2, #32
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3be0      	subs	r3, #224	; 0xe0
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001606:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001612:	f102 0220 	add.w	r2, r2, #32
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3be0      	subs	r3, #224	; 0xe0
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001628:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	3301      	adds	r3, #1
 8001632:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001636:	f102 0220 	add.w	r2, r2, #32
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3be0      	subs	r3, #224	; 0xe0
 8001640:	edd3 6a00 	vldr	s13, [r3]
 8001644:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001648:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	3301      	adds	r3, #1
 8001652:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001656:	f102 0220 	add.w	r2, r2, #32
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3be0      	subs	r3, #224	; 0xe0
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	eeb0 0a67 	vmov.f32	s0, s15
 8001670:	f00a fb26 	bl	800bcc0 <sqrtf>
 8001674:	eef0 7a40 	vmov.f32	s15, s0
 8001678:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800167c:	461a      	mov	r2, r3
 800167e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001682:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3be0      	subs	r3, #224	; 0xe0
 800168e:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 8001692:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001696:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80016a2:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80016ac:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b6:	d395      	bcc.n	80015e4 <main+0x204>
    }
//
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80016be:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e0f7      	b.n	80018b6 <main+0x4d6>
 80016c6:	bf00      	nop
 80016c8:	20000458 	.word	0x20000458
 80016cc:	0800c890 	.word	0x0800c890
 80016d0:	0800c8cc 	.word	0x0800c8cc
 80016d4:	20000374 	.word	0x20000374
 80016d8:	200003c0 	.word	0x200003c0
 80016dc:	2000040c 	.word	0x2000040c
 80016e0:	20000078 	.word	0x20000078
 80016e4:	442a8000 	.word	0x442a8000
 80016e8:	44000000 	.word	0x44000000
 80016ec:	43cc8000 	.word	0x43cc8000

      HPS[i] = HPS[i] * HPS[2*i];
 80016f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016f4:	461a      	mov	r2, r3
 80016f6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80016fa:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3be0      	subs	r3, #224	; 0xe0
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800170e:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3be0      	subs	r3, #224	; 0xe0
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001728:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800172c:	461a      	mov	r2, r3
 800172e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001732:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3be0      	subs	r3, #224	; 0xe0
 800173e:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 8001742:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001746:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001754:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 80016e4 <main+0x304>
 8001758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d52a      	bpl.n	80017b8 <main+0x3d8>
        HPS[i] = HPS[i] * HPS[3*i];
 8001762:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001766:	461a      	mov	r2, r3
 8001768:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800176c:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3be0      	subs	r3, #224	; 0xe0
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001780:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	3be0      	subs	r3, #224	; 0xe0
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017a2:	461a      	mov	r2, r3
 80017a4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017a8:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3be0      	subs	r3, #224	; 0xe0
 80017b4:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 80017b8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017bc:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 80016e8 <main+0x308>
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d528      	bpl.n	800182a <main+0x44a>
        HPS[i] = HPS[i] * HPS[4*i];
 80017d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017dc:	461a      	mov	r2, r3
 80017de:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017e2:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3be0      	subs	r3, #224	; 0xe0
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80017f6:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	3be0      	subs	r3, #224	; 0xe0
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001814:	461a      	mov	r2, r3
 8001816:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800181a:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3be0      	subs	r3, #224	; 0xe0
 8001826:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 800182a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800182e:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 80016ec <main+0x30c>
 8001840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001848:	d52a      	bpl.n	80018a0 <main+0x4c0>
    	  HPS[i] = HPS[i] * HPS[5*i];
 800184a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800184e:	461a      	mov	r2, r3
 8001850:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001854:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3be0      	subs	r3, #224	; 0xe0
 8001860:	ed93 7a00 	vldr	s14, [r3]
 8001864:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001868:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3be0      	subs	r3, #224	; 0xe0
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800188a:	461a      	mov	r2, r3
 800188c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001890:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3be0      	subs	r3, #224	; 0xe0
 800189c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 80018a0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018a4:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80018b0:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018ba:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	f6ff af14 	blt.w	80016f0 <main+0x310>

    }


    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 50; ++i){
 80018c8:	2300      	movs	r3, #0
 80018ca:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80018ce:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e018      	b.n	8001908 <main+0x528>
    	HPS[i] = 0;
 80018d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018da:	461a      	mov	r2, r3
 80018dc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018e0:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3be0      	subs	r3, #224	; 0xe0
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 50; ++i){
 80018f2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80018f6:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001902:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800190c:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b31      	cmp	r3, #49	; 0x31
 8001914:	dddf      	ble.n	80018d6 <main+0x4f6>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001916:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800191a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800191e:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e018      	b.n	8001958 <main+0x578>
    	HPS[i] = 0;
 8001926:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800192a:	461a      	mov	r2, r3
 800192c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001930:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3be0      	subs	r3, #224	; 0xe0
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001942:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001946:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001952:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800195c:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001966:	dbde      	blt.n	8001926 <main+0x546>
    }

    float32_t average;
	arm_mean_f32(HPS, BUFFER_LENGTH/2, &average);
 8001968:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 800196c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001970:	3abc      	subs	r2, #188	; 0xbc
 8001972:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001976:	3be0      	subs	r3, #224	; 0xe0
 8001978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197c:	4618      	mov	r0, r3
 800197e:	f009 f835 	bl	800a9ec <arm_mean_f32>
	if(average < (1E20)){ //Based on sampled data,see spreadsheet
 8001982:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001986:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800198a:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd9a 	bl	80004c8 <__aeabi_f2d>
 8001994:	f20f 53e8 	addw	r3, pc, #1512	; 0x5e8
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7ff f85e 	bl	8000a5c <__aeabi_dcmplt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <main+0x5ca>
 80019a6:	f000 bd1b 	b.w	80023e0 <main+0x1000>
		continue;
	}


    int max_peak = 0;
 80019aa:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80019ae:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	f842 3cc0 	str.w	r3, [r2, #-192]
    int max_mag = 0;
 80019ba:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80019be:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	f842 3cc4 	str.w	r3, [r2, #-196]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 80019ca:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80019ce:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80019d2:	3bc0      	subs	r3, #192	; 0xc0
 80019d4:	f507 42c1 	add.w	r2, r7, #24704	; 0x6080
 80019d8:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80019dc:	3ac4      	subs	r2, #196	; 0xc4
 80019de:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80019e2:	38e0      	subs	r0, #224	; 0xe0
 80019e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e8:	f009 f83e 	bl	800aa68 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 80019ec:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 80019f0:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80019f4:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd53 	bl	80004a4 <__aeabi_i2d>
 80019fe:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fdb7 	bl	8000578 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f893 	bl	8000b3c <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001a1c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001a20:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001a22:	2300      	movs	r3, #0
 8001a24:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001a28:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e02f      	b.n	8001a90 <main+0x6b0>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8001a30:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a34:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001a40:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001a44:	443b      	add	r3, r7
 8001a46:	3b84      	subs	r3, #132	; 0x84
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a50:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001a60:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001a64:	461a      	mov	r2, r3
 8001a66:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a6a:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3bdc      	subs	r3, #220	; 0xdc
 8001a76:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8001a7a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a7e:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001a8a:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001a94:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	ddc8      	ble.n	8001a30 <main+0x650>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8001a9e:	f507 41c1 	add.w	r1, r7, #24704	; 0x6080
 8001aa2:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001aa6:	39dc      	subs	r1, #220	; 0xdc
 8001aa8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001aac:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001ab0:	3bdc      	subs	r3, #220	; 0xdc
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f009 fdcd 	bl	800b654 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 8001aba:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001abe:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001ac2:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001ac6:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001aca:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8001ace:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ad6:	f102 02c3 	add.w	r2, r2, #195	; 0xc3
 8001ada:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001adc:	2300      	movs	r3, #0
 8001ade:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ae2:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e041      	b.n	8001b6e <main+0x78e>
	    	 if (min_freqs[i] < current_min){
 8001aea:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001aee:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001af2:	461a      	mov	r2, r3
 8001af4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001af8:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3bdc      	subs	r3, #220	; 0xdc
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b0c:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	dd1c      	ble.n	8001b58 <main+0x778>
	    		 current_min = min_freqs[i];
 8001b1e:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001b22:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b2c:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3bdc      	subs	r3, #220	; 0xdc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b3e:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8001b42:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8001b44:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b48:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b52:	f102 02c3 	add.w	r2, r2, #195	; 0xc3
 8001b56:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001b58:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b5c:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b68:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b72:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	ddb6      	ble.n	8001aea <main+0x70a>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 8001b7c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001b80:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b8c:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001b90:	443b      	add	r3, r7
 8001b92:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001b96:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001b9a:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001b9e:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 8001ba0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ba4:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bb0:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8001bb4:	443b      	add	r3, r7
 8001bb6:	3b84      	subs	r3, #132	; 0x84
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001bc0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bcc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001bd0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001bd4:	edc3 7a00 	vstr	s15, [r3]


	     union Float_as_buffer actual_guitar_freq;
	     actual_guitar_freq.f = measured_freq;
 8001bd8:	f507 43c1 	add.w	r3, r7, #24704	; 0x6080
 8001bdc:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8001be0:	461a      	mov	r2, r3
 8001be2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001be6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f842 3ce0 	str.w	r3, [r2, #-224]

	 // Transmit the string message
	  for (int i = 0; i < 3; ++i) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001bf6:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e029      	b.n	8001c52 <main+0x872>
		  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 8001bfe:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 8001c02:	f101 0142 	add.w	r1, r1, #66	; 0x42
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	48d8      	ldr	r0, [pc, #864]	; (8001f70 <main+0xb90>)
 8001c0e:	f008 f845 	bl	8009c9c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &start,               1, HAL_MAX_DELAY);
 8001c12:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 8001c16:	f101 0141 	add.w	r1, r1, #65	; 0x41
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	2201      	movs	r2, #1
 8001c20:	48d3      	ldr	r0, [pc, #844]	; (8001f70 <main+0xb90>)
 8001c22:	f008 f83b 	bl	8009c9c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &actual_guitar_freq,  4, HAL_MAX_DELAY);
 8001c26:	f507 41c1 	add.w	r1, r7, #24704	; 0x6080
 8001c2a:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001c2e:	39e0      	subs	r1, #224	; 0xe0
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	2204      	movs	r2, #4
 8001c36:	48ce      	ldr	r0, [pc, #824]	; (8001f70 <main+0xb90>)
 8001c38:	f008 f830 	bl	8009c9c <HAL_UART_Transmit>
	  for (int i = 0; i < 3; ++i) {
 8001c3c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c40:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001c4c:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c56:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	ddce      	ble.n	8001bfe <main+0x81e>

//	     if(!startFlag){
//	    	 continue;
//	     }
	     //Tune strings (yeah yeah)
	     switch (index){
 8001c60:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c64:	f103 03c3 	add.w	r3, r3, #195	; 0xc3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	f200 83b2 	bhi.w	80023d4 <main+0xff4>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <main+0x898>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c91 	.word	0x08001c91
 8001c7c:	08001db9 	.word	0x08001db9
 8001c80:	08001ee1 	.word	0x08001ee1
 8001c84:	08002041 	.word	0x08002041
 8001c88:	08002185 	.word	0x08002185
 8001c8c:	080022ad 	.word	0x080022ad
	     	 case 0: //E low
	     		if(string_offset > 0){
 8001c90:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001c94:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd3c      	ble.n	8001d20 <main+0x940>
				 uint32_t delay = floor(80 * string_offset);
 8001ca6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001caa:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001f9c <main+0xbbc>
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	ee17 0a90 	vmov	r0, s15
 8001cbe:	f7fe fc03 	bl	80004c8 <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ec43 2b10 	vmov	d0, r2, r3
 8001cca:	f00a f861 	bl	800bd90 <floor>
 8001cce:	ec53 2b10 	vmov	r2, r3, d0
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff11 	bl	8000afc <__aeabi_d2uiz>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ce0:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001ce4:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001ce6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001cea:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cf4:	d906      	bls.n	8001d04 <main+0x924>
					delay = MAX_DELAY;
 8001cf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cfa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001cfe:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001d02:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_1(70);
 8001d04:	2046      	movs	r0, #70	; 0x46
 8001d06:	f7ff f93f 	bl	8000f88 <set_motor_speed_1>
				  HAL_Delay(delay);
 8001d0a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d0e:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f001 fd7a 	bl	800380c <HAL_Delay>
				  set_motor_speed_1(50);
 8001d18:	2032      	movs	r0, #50	; 0x32
 8001d1a:	f7ff f935 	bl	8000f88 <set_motor_speed_1>
				 }
				 set_motor_speed_1(17);
				 HAL_Delay(delay);
				 set_motor_speed_1(50);
				}
	     		 break;
 8001d1e:	e359      	b.n	80023d4 <main+0xff4>
				else if(string_offset < 0){
 8001d20:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d24:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	d400      	bmi.n	8001d38 <main+0x958>
	     		 break;
 8001d36:	e34d      	b.n	80023d4 <main+0xff4>
				 uint32_t delay = floor(-1* (75 * string_offset));
 8001d38:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d3c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001f74 <main+0xb94>
 8001d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4c:	eef1 7a67 	vneg.f32	s15, s15
 8001d50:	ee17 3a90 	vmov	r3, s15
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbb7 	bl	80004c8 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ec43 2b10 	vmov	d0, r2, r3
 8001d62:	f00a f815 	bl	800bd90 <floor>
 8001d66:	ec53 2b10 	vmov	r2, r3, d0
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe fec5 	bl	8000afc <__aeabi_d2uiz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001d78:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001d7c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001d7e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001d82:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d8c:	d906      	bls.n	8001d9c <main+0x9bc>
					delay = MAX_DELAY;
 8001d8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d92:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001d96:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001d9a:	6013      	str	r3, [r2, #0]
				 set_motor_speed_1(17);
 8001d9c:	2011      	movs	r0, #17
 8001d9e:	f7ff f8f3 	bl	8000f88 <set_motor_speed_1>
				 HAL_Delay(delay);
 8001da2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001da6:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f001 fd2e 	bl	800380c <HAL_Delay>
				 set_motor_speed_1(50);
 8001db0:	2032      	movs	r0, #50	; 0x32
 8001db2:	f7ff f8e9 	bl	8000f88 <set_motor_speed_1>
	     		 break;
 8001db6:	e30d      	b.n	80023d4 <main+0xff4>

	     	 case 1: //A
	     		if(string_offset > 0){
 8001db8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001dbc:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	dd3c      	ble.n	8001e48 <main+0xa68>
				 uint32_t delay = floor(90 * string_offset);
 8001dce:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001dd2:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001f78 <main+0xb98>
 8001dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de2:	ee17 0a90 	vmov	r0, s15
 8001de6:	f7fe fb6f 	bl	80004c8 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ec43 2b10 	vmov	d0, r2, r3
 8001df2:	f009 ffcd 	bl	800bd90 <floor>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe7d 	bl	8000afc <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e08:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8001e0c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001e0e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e12:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e1c:	d906      	bls.n	8001e2c <main+0xa4c>
					delay = MAX_DELAY;
 8001e1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e22:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001e26:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8001e2a:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_2(70);
 8001e2c:	2046      	movs	r0, #70	; 0x46
 8001e2e:	f7ff f903 	bl	8001038 <set_motor_speed_2>
				  HAL_Delay(delay);
 8001e32:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e36:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	f001 fce6 	bl	800380c <HAL_Delay>
				  set_motor_speed_2(50);
 8001e40:	2032      	movs	r0, #50	; 0x32
 8001e42:	f7ff f8f9 	bl	8001038 <set_motor_speed_2>
				 }
				 set_motor_speed_2(18);
				 HAL_Delay(delay);
				 set_motor_speed_2(50);
				}
	     		 break;
 8001e46:	e2c5      	b.n	80023d4 <main+0xff4>
				else if(string_offset < 0){
 8001e48:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e4c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d400      	bmi.n	8001e60 <main+0xa80>
	     		 break;
 8001e5e:	e2b9      	b.n	80023d4 <main+0xff4>
				 uint32_t delay = floor(-1* (100 * string_offset));
 8001e60:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001e64:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001f7c <main+0xb9c>
 8001e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e74:	eef1 7a67 	vneg.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb23 	bl	80004c8 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	ec43 2b10 	vmov	d0, r2, r3
 8001e8a:	f009 ff81 	bl	800bd90 <floor>
 8001e8e:	ec53 2b10 	vmov	r2, r3, d0
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fe31 	bl	8000afc <__aeabi_d2uiz>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ea0:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8001ea4:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001ea6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001eaa:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eb4:	d906      	bls.n	8001ec4 <main+0xae4>
					delay = MAX_DELAY;
 8001eb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eba:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001ebe:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8001ec2:	6013      	str	r3, [r2, #0]
				 set_motor_speed_2(18);
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f7ff f8b7 	bl	8001038 <set_motor_speed_2>
				 HAL_Delay(delay);
 8001eca:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ece:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f001 fc9a 	bl	800380c <HAL_Delay>
				 set_motor_speed_2(50);
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f7ff f8ad 	bl	8001038 <set_motor_speed_2>
	     		 break;
 8001ede:	e279      	b.n	80023d4 <main+0xff4>

	     	 case 2: //D
	     		if(string_offset > 0){
 8001ee0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001ee4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd58      	ble.n	8001fa8 <main+0xbc8>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 8001ef6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001efa:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001f90 <main+0xbb0>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0a:	ee17 0a90 	vmov	r0, s15
 8001f0e:	f7fe fadb 	bl	80004c8 <__aeabi_f2d>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	ec43 2b10 	vmov	d0, r2, r3
 8001f1a:	f009 ff39 	bl	800bd90 <floor>
 8001f1e:	ec53 2b10 	vmov	r2, r3, d0
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fde9 	bl	8000afc <__aeabi_d2uiz>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001f30:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001f34:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8001f36:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f3a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f44:	d906      	bls.n	8001f54 <main+0xb74>
					delay = MAX_DELAY;
 8001f46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f4a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8001f4e:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001f52:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_3(70);
 8001f54:	2046      	movs	r0, #70	; 0x46
 8001f56:	f7ff f8c7 	bl	80010e8 <set_motor_speed_3>
				  HAL_Delay(delay);
 8001f5a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001f5e:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f001 fc52 	bl	800380c <HAL_Delay>
				  set_motor_speed_3(50);
 8001f68:	2032      	movs	r0, #50	; 0x32
 8001f6a:	f7ff f8bd 	bl	80010e8 <set_motor_speed_3>
				 }
				 set_motor_speed_3(18);
				 HAL_Delay(delay);
				 set_motor_speed_3(50);
	     		}
	     		 break;
 8001f6e:	e231      	b.n	80023d4 <main+0xff4>
 8001f70:	200001e8 	.word	0x200001e8
 8001f74:	42960000 	.word	0x42960000
 8001f78:	42b40000 	.word	0x42b40000
 8001f7c:	42c80000 	.word	0x42c80000
 8001f80:	78b58c40 	.word	0x78b58c40
 8001f84:	4415af1d 	.word	0x4415af1d
 8001f88:	624dd2f2 	.word	0x624dd2f2
 8001f8c:	3ff00690 	.word	0x3ff00690
 8001f90:	43020000 	.word	0x43020000
 8001f94:	42e60000 	.word	0x42e60000
 8001f98:	43200000 	.word	0x43200000
 8001f9c:	42a00000 	.word	0x42a00000
 8001fa0:	42700000 	.word	0x42700000
 8001fa4:	43160000 	.word	0x43160000
				else if(string_offset < 0){
 8001fa8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001fac:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d400      	bmi.n	8001fc0 <main+0xbe0>
	     		 break;
 8001fbe:	e209      	b.n	80023d4 <main+0xff4>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 8001fc0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8001fc4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8001f90 <main+0xbb0>
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	eef1 7a67 	vneg.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa73 	bl	80004c8 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ec43 2b10 	vmov	d0, r2, r3
 8001fea:	f009 fed1 	bl	800bd90 <floor>
 8001fee:	ec53 2b10 	vmov	r2, r3, d0
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fd81 	bl	8000afc <__aeabi_d2uiz>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002000:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8002004:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002006:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800200a:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002014:	d906      	bls.n	8002024 <main+0xc44>
					delay = MAX_DELAY;
 8002016:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800201a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800201e:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8002022:	6013      	str	r3, [r2, #0]
				 set_motor_speed_3(18);
 8002024:	2012      	movs	r0, #18
 8002026:	f7ff f85f 	bl	80010e8 <set_motor_speed_3>
				 HAL_Delay(delay);
 800202a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800202e:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	f001 fbea 	bl	800380c <HAL_Delay>
				 set_motor_speed_3(50);
 8002038:	2032      	movs	r0, #50	; 0x32
 800203a:	f7ff f855 	bl	80010e8 <set_motor_speed_3>
	     		 break;
 800203e:	e1c9      	b.n	80023d4 <main+0xff4>

	     	 case 3: //G
	     		if(string_offset > 0){
 8002040:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002044:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	dd3c      	ble.n	80020d0 <main+0xcf0>
				 uint32_t delay = floor(115 * string_offset);
 8002056:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800205a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 8001f94 <main+0xbb4>
 8002066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206a:	ee17 0a90 	vmov	r0, s15
 800206e:	f7fe fa2b 	bl	80004c8 <__aeabi_f2d>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ec43 2b10 	vmov	d0, r2, r3
 800207a:	f009 fe89 	bl	800bd90 <floor>
 800207e:	ec53 2b10 	vmov	r2, r3, d0
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fd39 	bl	8000afc <__aeabi_d2uiz>
 800208a:	4603      	mov	r3, r0
 800208c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002090:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8002094:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002096:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800209a:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020a4:	d906      	bls.n	80020b4 <main+0xcd4>
				 	delay = MAX_DELAY;
 80020a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020aa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80020ae:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 80020b2:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_4(72);
 80020b4:	2048      	movs	r0, #72	; 0x48
 80020b6:	f7ff f86f 	bl	8001198 <set_motor_speed_4>
				  HAL_Delay(delay);
 80020ba:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80020be:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f001 fba2 	bl	800380c <HAL_Delay>
				  set_motor_speed_4(50);
 80020c8:	2032      	movs	r0, #50	; 0x32
 80020ca:	f7ff f865 	bl	8001198 <set_motor_speed_4>
				 }
				 set_motor_speed_4(20);
				 HAL_Delay(delay);
				 set_motor_speed_4(50);
				}
	     		 break;
 80020ce:	e181      	b.n	80023d4 <main+0xff4>
				else if(string_offset < 0 && string_offset < -1){
 80020d0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80020d4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	d400      	bmi.n	80020e8 <main+0xd08>
	     		 break;
 80020e6:	e175      	b.n	80023d4 <main+0xff4>
				else if(string_offset < 0 && string_offset < -1){
 80020e8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80020ec:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d400      	bmi.n	8002104 <main+0xd24>
	     		 break;
 8002102:	e167      	b.n	80023d4 <main+0xff4>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8002104:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002108:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 8001f98 <main+0xbb8>
 8002114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002118:	eef1 7a67 	vneg.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f9d1 	bl	80004c8 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	ec43 2b10 	vmov	d0, r2, r3
 800212e:	f009 fe2f 	bl	800bd90 <floor>
 8002132:	ec53 2b10 	vmov	r2, r3, d0
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7fe fcdf 	bl	8000afc <__aeabi_d2uiz>
 800213e:	4603      	mov	r3, r0
 8002140:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002144:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8002148:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800214a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800214e:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002158:	d906      	bls.n	8002168 <main+0xd88>
				 	delay = MAX_DELAY;
 800215a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800215e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002162:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8002166:	6013      	str	r3, [r2, #0]
				 set_motor_speed_4(20);
 8002168:	2014      	movs	r0, #20
 800216a:	f7ff f815 	bl	8001198 <set_motor_speed_4>
				 HAL_Delay(delay);
 800216e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002172:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f001 fb48 	bl	800380c <HAL_Delay>
				 set_motor_speed_4(50);
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f7ff f80b 	bl	8001198 <set_motor_speed_4>
	     		 break;
 8002182:	e127      	b.n	80023d4 <main+0xff4>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8002184:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002188:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	dd3c      	ble.n	8002214 <main+0xe34>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 800219a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800219e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ed1f 7a83 	vldr	s14, [pc, #-524]	; 8001f9c <main+0xbbc>
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	ee17 0a90 	vmov	r0, s15
 80021b2:	f7fe f989 	bl	80004c8 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	ec43 2b10 	vmov	d0, r2, r3
 80021be:	f009 fde7 	bl	800bd90 <floor>
 80021c2:	ec53 2b10 	vmov	r2, r3, d0
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fc97 	bl	8000afc <__aeabi_d2uiz>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80021d4:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80021d8:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 80021da:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80021de:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021e8:	d906      	bls.n	80021f8 <main+0xe18>
				 	delay = MAX_DELAY;
 80021ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021ee:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80021f2:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80021f6:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_5(65);
 80021f8:	2041      	movs	r0, #65	; 0x41
 80021fa:	f7ff f825 	bl	8001248 <set_motor_speed_5>
				  HAL_Delay(delay);
 80021fe:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002202:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f001 fb00 	bl	800380c <HAL_Delay>
				  set_motor_speed_5(50);
 800220c:	2032      	movs	r0, #50	; 0x32
 800220e:	f7ff f81b 	bl	8001248 <set_motor_speed_5>
				 }
				 set_motor_speed_5(20);
				 HAL_Delay(delay);
				 set_motor_speed_5(50);
	     		}
	     		 break;
 8002212:	e0df      	b.n	80023d4 <main+0xff4>
	     		else if(string_offset < 0){
 8002214:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002218:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	d400      	bmi.n	800222c <main+0xe4c>
	     		 break;
 800222a:	e0d3      	b.n	80023d4 <main+0xff4>
				 uint32_t delay = floor(-1* (60 * string_offset));
 800222c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002230:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ed1f 7aa7 	vldr	s14, [pc, #-668]	; 8001fa0 <main+0xbc0>
 800223c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002240:	eef1 7a67 	vneg.f32	s15, s15
 8002244:	ee17 3a90 	vmov	r3, s15
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f93d 	bl	80004c8 <__aeabi_f2d>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	ec43 2b10 	vmov	d0, r2, r3
 8002256:	f009 fd9b 	bl	800bd90 <floor>
 800225a:	ec53 2b10 	vmov	r2, r3, d0
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fc4b 	bl	8000afc <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800226c:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8002270:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002272:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002276:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002280:	d906      	bls.n	8002290 <main+0xeb0>
				 	delay = MAX_DELAY;
 8002282:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002286:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800228a:	f102 0290 	add.w	r2, r2, #144	; 0x90
 800228e:	6013      	str	r3, [r2, #0]
				 set_motor_speed_5(20);
 8002290:	2014      	movs	r0, #20
 8002292:	f7fe ffd9 	bl	8001248 <set_motor_speed_5>
				 HAL_Delay(delay);
 8002296:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800229a:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f001 fab4 	bl	800380c <HAL_Delay>
				 set_motor_speed_5(50);
 80022a4:	2032      	movs	r0, #50	; 0x32
 80022a6:	f7fe ffcf 	bl	8001248 <set_motor_speed_5>
	     		 break;
 80022aa:	e093      	b.n	80023d4 <main+0xff4>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 80022ac:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022b0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	dd3c      	ble.n	800233c <main+0xf5c>
					 uint32_t delay = floor(150 * string_offset);
 80022c2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80022c6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ed1f 7acb 	vldr	s14, [pc, #-812]	; 8001fa4 <main+0xbc4>
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	ee17 0a90 	vmov	r0, s15
 80022da:	f7fe f8f5 	bl	80004c8 <__aeabi_f2d>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ec43 2b10 	vmov	d0, r2, r3
 80022e6:	f009 fd53 	bl	800bd90 <floor>
 80022ea:	ec53 2b10 	vmov	r2, r3, d0
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7fe fc03 	bl	8000afc <__aeabi_d2uiz>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80022fc:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8002300:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002302:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002306:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002310:	d906      	bls.n	8002320 <main+0xf40>
					 	delay = MAX_DELAY;
 8002312:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002316:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800231a:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 800231e:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed_6(65);
 8002320:	2041      	movs	r0, #65	; 0x41
 8002322:	f7fe ffe9 	bl	80012f8 <set_motor_speed_6>
					  HAL_Delay(delay);
 8002326:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800232a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	f001 fa6c 	bl	800380c <HAL_Delay>
					  set_motor_speed_6(50);
 8002334:	2032      	movs	r0, #50	; 0x32
 8002336:	f7fe ffdf 	bl	80012f8 <set_motor_speed_6>
					 }
					 set_motor_speed_6(25);
					 HAL_Delay(delay);
					 set_motor_speed_6(50);
				 }
	     		 break;
 800233a:	e04a      	b.n	80023d2 <main+0xff2>
	     		else if(string_offset < 0){
 800233c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002340:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d400      	bmi.n	8002354 <main+0xf74>
	     		 break;
 8002352:	e03e      	b.n	80023d2 <main+0xff2>
					 uint32_t delay = floor(-1* (100 * string_offset));
 8002354:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002358:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023ec <main+0x100c>
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eef1 7a67 	vneg.f32	s15, s15
 800236c:	ee17 3a90 	vmov	r3, s15
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8a9 	bl	80004c8 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	ec43 2b10 	vmov	d0, r2, r3
 800237e:	f009 fd07 	bl	800bd90 <floor>
 8002382:	ec53 2b10 	vmov	r2, r3, d0
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fbb7 	bl	8000afc <__aeabi_d2uiz>
 800238e:	4603      	mov	r3, r0
 8002390:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002394:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8002398:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 800239a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800239e:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023a8:	d906      	bls.n	80023b8 <main+0xfd8>
					 	delay = MAX_DELAY;
 80023aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023ae:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80023b2:	f102 0288 	add.w	r2, r2, #136	; 0x88
 80023b6:	6013      	str	r3, [r2, #0]
					 set_motor_speed_6(25);
 80023b8:	2019      	movs	r0, #25
 80023ba:	f7fe ff9d 	bl	80012f8 <set_motor_speed_6>
					 HAL_Delay(delay);
 80023be:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80023c2:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f001 fa20 	bl	800380c <HAL_Delay>
					 set_motor_speed_6(50);
 80023cc:	2032      	movs	r0, #50	; 0x32
 80023ce:	f7fe ff93 	bl	80012f8 <set_motor_speed_6>
	     		 break;
 80023d2:	bf00      	nop
	     }



	  //To prevent strum from previous affecting next
	  HAL_Delay(250);
 80023d4:	20fa      	movs	r0, #250	; 0xfa
 80023d6:	f001 fa19 	bl	800380c <HAL_Delay>
	  convFlag = 0;
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <main+0x1010>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
	while (startFlag) {
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <main+0x1014>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f a86d 	bne.w	80014c4 <main+0xe4>
 80023ea:	e7f9      	b.n	80023e0 <main+0x1000>
 80023ec:	42c80000 	.word	0x42c80000
 80023f0:	20000458 	.word	0x20000458
 80023f4:	2000045c 	.word	0x2000045c

080023f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b096      	sub	sp, #88	; 0x58
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	2244      	movs	r2, #68	; 0x44
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f009 fc28 	bl	800bc5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800241a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800241e:	f003 f9bb 	bl	8005798 <HAL_PWREx_ControlVoltageScaling>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002428:	f000 fda0 	bl	8002f6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800242c:	2310      	movs	r3, #16
 800242e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8002438:	2370      	movs	r3, #112	; 0x70
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fa5b 	bl	8005900 <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002450:	f000 fd8c 	bl	8002f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	230f      	movs	r3, #15
 8002456:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f003 fe61 	bl	8006134 <HAL_RCC_ClockConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002478:	f000 fd78 	bl	8002f6c <Error_Handler>
  }
}
 800247c:	bf00      	nop
 800247e:	3758      	adds	r7, #88	; 0x58
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0a6      	sub	sp, #152	; 0x98
 8002488:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2294      	movs	r2, #148	; 0x94
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f009 fbe3 	bl	800bc5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8002496:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800249a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800249c:	2300      	movs	r3, #0
 800249e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80024a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80024a8:	2301      	movs	r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80024b0:	2308      	movs	r3, #8
 80024b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80024bc:	2302      	movs	r3, #2
 80024be:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <PeriphCommonClock_Config+0x5c>)
 80024c2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f8f2 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80024d2:	f000 fd4b 	bl	8002f6c <Error_Handler>
  }
}
 80024d6:	bf00      	nop
 80024d8:	3798      	adds	r7, #152	; 0x98
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	01010000 	.word	0x01010000

080024e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <MX_ADC1_Init+0xc0>)
 80024fc:	4a2a      	ldr	r2, [pc, #168]	; (80025a8 <MX_ADC1_Init+0xc4>)
 80024fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002502:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002506:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800251c:	2204      	movs	r2, #4
 800251e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002522:	2200      	movs	r2, #0
 8002524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002528:	2200      	movs	r2, #0
 800252a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800252e:	2201      	movs	r2, #1
 8002530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800253c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002560:	4810      	ldr	r0, [pc, #64]	; (80025a4 <MX_ADC1_Init+0xc0>)
 8002562:	f001 fb51 	bl	8003c08 <HAL_ADC_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800256c:	f000 fcfe 	bl	8002f6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_ADC1_Init+0xc8>)
 8002572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002574:	2306      	movs	r3, #6
 8002576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002578:	2307      	movs	r3, #7
 800257a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800257c:	237f      	movs	r3, #127	; 0x7f
 800257e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002580:	2304      	movs	r3, #4
 8002582:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002588:	463b      	mov	r3, r7
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_ADC1_Init+0xc0>)
 800258e:	f001 fd19 	bl	8003fc4 <HAL_ADC_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002598:	f000 fce8 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000078 	.word	0x20000078
 80025a8:	50040000 	.word	0x50040000
 80025ac:	04300002 	.word	0x04300002

080025b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80025b6:	463b      	mov	r3, r7
 80025b8:	2228      	movs	r2, #40	; 0x28
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f009 fb4d 	bl	800bc5c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_DAC1_Init+0x60>)
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <MX_DAC1_Init+0x64>)
 80025c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <MX_DAC1_Init+0x60>)
 80025ca:	f002 fb22 	bl	8004c12 <HAL_DAC_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80025d4:	f000 fcca 	bl	8002f6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80025f0:	463b      	mov	r3, r7
 80025f2:	2200      	movs	r2, #0
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_DAC1_Init+0x60>)
 80025f8:	f002 fb2e 	bl	8004c58 <HAL_DAC_ConfigChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8002602:	f000 fcb3 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000140 	.word	0x20000140
 8002614:	40007400 	.word	0x40007400

08002618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <MX_LPUART1_UART_Init+0x94>)
 8002620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 800265c:	2200      	movs	r2, #0
 800265e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002660:	4811      	ldr	r0, [pc, #68]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002662:	f007 facb 	bl	8009bfc <HAL_UART_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800266c:	f000 fc7e 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002670:	2100      	movs	r1, #0
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002674:	f008 f8f0 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800267e:	f000 fc75 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	4808      	ldr	r0, [pc, #32]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002686:	f008 f925 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002690:	f000 fc6c 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_LPUART1_UART_Init+0x90>)
 8002696:	f008 f8a6 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026a0:	f000 fc64 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000154 	.word	0x20000154
 80026ac:	40008000 	.word	0x40008000

080026b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <MX_USART1_UART_Init+0x94>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026d6:	2208      	movs	r2, #8
 80026d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <MX_USART1_UART_Init+0x90>)
 80026fa:	f007 fa7f 	bl	8009bfc <HAL_UART_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002704:	f000 fc32 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800270c:	f008 f8a4 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002716:	f000 fc29 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271a:	2100      	movs	r1, #0
 800271c:	4808      	ldr	r0, [pc, #32]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800271e:	f008 f8d9 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002728:	f000 fc20 	bl	8002f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <MX_USART1_UART_Init+0x90>)
 800272e:	f008 f85a 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002738:	f000 fc18 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200001e8 	.word	0x200001e8
 8002744:	40013800 	.word	0x40013800

08002748 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_SAI1_Init+0x60>)
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <MX_SAI1_Init+0x64>)
 8002750:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_SAI1_Init+0x60>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_SAI1_Init+0x60>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <MX_SAI1_Init+0x68>)
 8002774:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_SAI1_Init+0x60>)
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002784:	2200      	movs	r2, #0
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <MX_SAI1_Init+0x60>)
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800278e:	2302      	movs	r3, #2
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_SAI1_Init+0x60>)
 8002796:	f005 fcd7 	bl	8008148 <HAL_SAI_InitProtocol>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80027a0:	f000 fbe4 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000027c 	.word	0x2000027c
 80027ac:	40015404 	.word	0x40015404
 80027b0:	0002ee00 	.word	0x0002ee00

080027b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <MX_SPI1_Init+0x74>)
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <MX_SPI1_Init+0x78>)
 80027bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <MX_SPI1_Init+0x74>)
 80027c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <MX_SPI1_Init+0x74>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <MX_SPI1_Init+0x74>)
 80027ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <MX_SPI1_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_SPI1_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_SPI1_Init+0x74>)
 80027e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_SPI1_Init+0x74>)
 80027ea:	2228      	movs	r2, #40	; 0x28
 80027ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_SPI1_Init+0x74>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_SPI1_Init+0x74>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_SPI1_Init+0x74>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_SPI1_Init+0x74>)
 8002802:	2207      	movs	r2, #7
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_SPI1_Init+0x74>)
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_SPI1_Init+0x74>)
 800280e:	2208      	movs	r2, #8
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_SPI1_Init+0x74>)
 8002814:	f006 f816 	bl	8008844 <HAL_SPI_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800281e:	f000 fba5 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000310 	.word	0x20000310
 800282c:	40013000 	.word	0x40013000

08002830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b09a      	sub	sp, #104	; 0x68
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002844:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
 8002860:	615a      	str	r2, [r3, #20]
 8002862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	222c      	movs	r2, #44	; 0x2c
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f009 f9f6 	bl	800bc5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002872:	4a50      	ldr	r2, [pc, #320]	; (80029b4 <MX_TIM1_Init+0x184>)
 8002874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 8002876:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002878:	22c2      	movs	r2, #194	; 0xc2
 800287a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <MX_TIM1_Init+0x180>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002882:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002884:	2209      	movs	r2, #9
 8002886:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <MX_TIM1_Init+0x180>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800289a:	4845      	ldr	r0, [pc, #276]	; (80029b0 <MX_TIM1_Init+0x180>)
 800289c:	f006 f875 	bl	800898a <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80028a6:	f000 fb61 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028b4:	4619      	mov	r1, r3
 80028b6:	483e      	ldr	r0, [pc, #248]	; (80029b0 <MX_TIM1_Init+0x180>)
 80028b8:	f006 fba0 	bl	8008ffc <HAL_TIM_ConfigClockSource>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028c2:	f000 fb53 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028c6:	483a      	ldr	r0, [pc, #232]	; (80029b0 <MX_TIM1_Init+0x180>)
 80028c8:	f006 f926 	bl	8008b18 <HAL_TIM_PWM_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80028d2:	f000 fb4b 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d6:	2320      	movs	r3, #32
 80028d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028e6:	4619      	mov	r1, r3
 80028e8:	4831      	ldr	r0, [pc, #196]	; (80029b0 <MX_TIM1_Init+0x180>)
 80028ea:	f007 f881 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80028f4:	f000 fb3a 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f8:	2360      	movs	r3, #96	; 0x60
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002900:	2300      	movs	r3, #0
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002904:	2300      	movs	r3, #0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002918:	2200      	movs	r2, #0
 800291a:	4619      	mov	r1, r3
 800291c:	4824      	ldr	r0, [pc, #144]	; (80029b0 <MX_TIM1_Init+0x180>)
 800291e:	f006 fa59 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002928:	f000 fb20 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800292c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002930:	2204      	movs	r2, #4
 8002932:	4619      	mov	r1, r3
 8002934:	481e      	ldr	r0, [pc, #120]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002936:	f006 fa4d 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002940:	f000 fb14 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002948:	2208      	movs	r2, #8
 800294a:	4619      	mov	r1, r3
 800294c:	4818      	ldr	r0, [pc, #96]	; (80029b0 <MX_TIM1_Init+0x180>)
 800294e:	f006 fa41 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002958:	f000 fb08 	bl	8002f6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002974:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800297e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM1_Init+0x180>)
 8002992:	f007 f8b5 	bl	8009b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 800299c:	f000 fae6 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM1_Init+0x180>)
 80029a2:	f000 fd67 	bl	8003474 <HAL_TIM_MspPostInit>

}
 80029a6:	bf00      	nop
 80029a8:	3768      	adds	r7, #104	; 0x68
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000374 	.word	0x20000374
 80029b4:	40012c00 	.word	0x40012c00

080029b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ca:	463b      	mov	r3, r7
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <MX_TIM4_Init+0xf4>)
 80029e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80029f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a02:	4829      	ldr	r0, [pc, #164]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a04:	f006 f888 	bl	8008b18 <HAL_TIM_PWM_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002a0e:	f000 faad 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4821      	ldr	r0, [pc, #132]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a22:	f006 ffe5 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002a2c:	f000 fa9e 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002a34:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a42:	463b      	mov	r3, r7
 8002a44:	2200      	movs	r2, #0
 8002a46:	4619      	mov	r1, r3
 8002a48:	4817      	ldr	r0, [pc, #92]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a4a:	f006 f9c3 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002a54:	f000 fa8a 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a58:	463b      	mov	r3, r7
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4812      	ldr	r0, [pc, #72]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a60:	f006 f9b8 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002a6a:	f000 fa7f 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a6e:	463b      	mov	r3, r7
 8002a70:	2208      	movs	r2, #8
 8002a72:	4619      	mov	r1, r3
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a76:	f006 f9ad 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002a80:	f000 fa74 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a84:	463b      	mov	r3, r7
 8002a86:	220c      	movs	r2, #12
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a8c:	f006 f9a2 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002a96:	f000 fa69 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a9a:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <MX_TIM4_Init+0xf0>)
 8002a9c:	f000 fcea 	bl	8003474 <HAL_TIM_MspPostInit>

}
 8002aa0:	bf00      	nop
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200003c0 	.word	0x200003c0
 8002aac:	40000800 	.word	0x40000800

08002ab0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <MX_TIM5_Init+0xc8>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002ae8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002afa:	481e      	ldr	r0, [pc, #120]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002afc:	f006 f80c 	bl	8008b18 <HAL_TIM_PWM_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002b06:	f000 fa31 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4816      	ldr	r0, [pc, #88]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002b1a:	f006 ff69 	bl	80099f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002b24:	f000 fa22 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b28:	2360      	movs	r3, #96	; 0x60
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002b2c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002b42:	f006 f947 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002b4c:	f000 fa0e 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b50:	463b      	mov	r3, r7
 8002b52:	2208      	movs	r2, #8
 8002b54:	4619      	mov	r1, r3
 8002b56:	4807      	ldr	r0, [pc, #28]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002b58:	f006 f93c 	bl	8008dd4 <HAL_TIM_PWM_ConfigChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8002b62:	f000 fa03 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b66:	4803      	ldr	r0, [pc, #12]	; (8002b74 <MX_TIM5_Init+0xc4>)
 8002b68:	f000 fc84 	bl	8003474 <HAL_TIM_MspPostInit>

}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000040c 	.word	0x2000040c
 8002b78:	40000c00 	.word	0x40000c00

08002b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <MX_DMA_Init+0x50>)
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <MX_DMA_Init+0x50>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_DMA_Init+0x50>)
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <MX_DMA_Init+0x50>)
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <MX_DMA_Init+0x50>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6493      	str	r3, [r2, #72]	; 0x48
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MX_DMA_Init+0x50>)
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	200b      	movs	r0, #11
 8002bb8:	f001 fff5 	bl	8004ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bbc:	200b      	movs	r0, #11
 8002bbe:	f002 f80e 	bl	8004bde <HAL_NVIC_EnableIRQ>

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be6:	4bb3      	ldr	r3, [pc, #716]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4bb0      	ldr	r3, [pc, #704]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfe:	4bad      	ldr	r3, [pc, #692]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	4aac      	ldr	r2, [pc, #688]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0a:	4baa      	ldr	r3, [pc, #680]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c16:	4ba7      	ldr	r3, [pc, #668]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4aa6      	ldr	r2, [pc, #664]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c1c:	f043 0320 	orr.w	r3, r3, #32
 8002c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c22:	4ba4      	ldr	r3, [pc, #656]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2e:	4ba1      	ldr	r3, [pc, #644]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4aa0      	ldr	r2, [pc, #640]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	4b9e      	ldr	r3, [pc, #632]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b9b      	ldr	r3, [pc, #620]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a9a      	ldr	r2, [pc, #616]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b95      	ldr	r3, [pc, #596]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c76:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	4a8e      	ldr	r2, [pc, #568]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c82:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a88      	ldr	r2, [pc, #544]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <MX_GPIO_Init+0x2e4>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002ca6:	f002 fe1b 	bl	80058e0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8002caa:	2200      	movs	r2, #0
 8002cac:	f244 0187 	movw	r1, #16519	; 0x4087
 8002cb0:	4881      	ldr	r0, [pc, #516]	; (8002eb8 <MX_GPIO_Init+0x2e8>)
 8002cb2:	f002 fd21 	bl	80056f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	4880      	ldr	r0, [pc, #512]	; (8002ebc <MX_GPIO_Init+0x2ec>)
 8002cbc:	f002 fd1c 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc4:	2312      	movs	r3, #18
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4879      	ldr	r0, [pc, #484]	; (8002ec0 <MX_GPIO_Init+0x2f0>)
 8002cdc:	f002 fb7a 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f002 fb69 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f002 fb5b 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8002d1e:	f244 0387 	movw	r3, #16519	; 0x4087
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d24:	2301      	movs	r3, #1
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d34:	4619      	mov	r1, r3
 8002d36:	4860      	ldr	r0, [pc, #384]	; (8002eb8 <MX_GPIO_Init+0x2e8>)
 8002d38:	f002 fb4c 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d56:	4619      	mov	r1, r3
 8002d58:	4857      	ldr	r0, [pc, #348]	; (8002eb8 <MX_GPIO_Init+0x2e8>)
 8002d5a:	f002 fb3b 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002d5e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002d70:	230d      	movs	r3, #13
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	484f      	ldr	r0, [pc, #316]	; (8002eb8 <MX_GPIO_Init+0x2e8>)
 8002d7c:	f002 fb2a 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d92:	2307      	movs	r3, #7
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4849      	ldr	r0, [pc, #292]	; (8002ec4 <MX_GPIO_Init+0x2f4>)
 8002d9e:	f002 fb19 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002da2:	2320      	movs	r3, #32
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da6:	2300      	movs	r3, #0
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	4841      	ldr	r0, [pc, #260]	; (8002ebc <MX_GPIO_Init+0x2ec>)
 8002db6:	f002 fb0d 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	483a      	ldr	r0, [pc, #232]	; (8002ebc <MX_GPIO_Init+0x2ec>)
 8002dd2:	f002 faff 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dd6:	2340      	movs	r3, #64	; 0x40
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002de6:	230d      	movs	r3, #13
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dee:	4619      	mov	r1, r3
 8002df0:	4835      	ldr	r0, [pc, #212]	; (8002ec8 <MX_GPIO_Init+0x2f8>)
 8002df2:	f002 faef 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e06:	2302      	movs	r3, #2
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	4619      	mov	r1, r3
 8002e10:	482d      	ldr	r0, [pc, #180]	; (8002ec8 <MX_GPIO_Init+0x2f8>)
 8002e12:	f002 fadf 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e28:	230c      	movs	r3, #12
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	4619      	mov	r1, r3
 8002e32:	4825      	ldr	r0, [pc, #148]	; (8002ec8 <MX_GPIO_Init+0x2f8>)
 8002e34:	f002 face 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002e38:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f002 fabc 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e74:	f002 faae 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_GPIO_Init+0x2f4>)
 8002e94:	f002 fa9e 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e98:	2304      	movs	r3, #4
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	e00b      	b.n	8002ecc <MX_GPIO_Init+0x2fc>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	48001800 	.word	0x48001800
 8002ec0:	48001400 	.word	0x48001400
 8002ec4:	48000c00 	.word	0x48000c00
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	4825      	ldr	r0, [pc, #148]	; (8002f64 <MX_GPIO_Init+0x394>)
 8002ece:	f002 fa81 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002ed2:	2378      	movs	r3, #120	; 0x78
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	481d      	ldr	r0, [pc, #116]	; (8002f64 <MX_GPIO_Init+0x394>)
 8002eee:	f002 fa71 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ef2:	2330      	movs	r3, #48	; 0x30
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f02:	2306      	movs	r3, #6
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4816      	ldr	r0, [pc, #88]	; (8002f68 <MX_GPIO_Init+0x398>)
 8002f0e:	f002 fa61 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f16:	2303      	movs	r3, #3
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <MX_GPIO_Init+0x398>)
 8002f26:	f002 fa55 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f30:	2312      	movs	r3, #18
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f44:	4619      	mov	r1, r3
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <MX_GPIO_Init+0x398>)
 8002f48:	f002 fa44 	bl	80053d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2017      	movs	r0, #23
 8002f52:	f001 fe28 	bl	8004ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f56:	2017      	movs	r0, #23
 8002f58:	f001 fe41 	bl	8004bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	48000c00 	.word	0x48000c00
 8002f68:	48000400 	.word	0x48000400

08002f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
}
 8002f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <Error_Handler+0x8>
	...

08002f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <HAL_MspInit+0x44>)
 8002f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_MspInit+0x44>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6613      	str	r3, [r2, #96]	; 0x60
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_MspInit+0x44>)
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_MspInit+0x44>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_MspInit+0x44>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_MspInit+0x44>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a37      	ldr	r2, [pc, #220]	; (80030bc <HAL_ADC_MspInit+0xfc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d168      	bne.n	80030b4 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8002fe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fee:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_ADC_MspInit+0x100>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800302a:	233f      	movs	r3, #63	; 0x3f
 800302c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800302e:	230b      	movs	r3, #11
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	4821      	ldr	r0, [pc, #132]	; (80030c4 <HAL_ADC_MspInit+0x104>)
 800303e:	f002 f9c9 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003042:	230a      	movs	r3, #10
 8003044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003046:	230b      	movs	r3, #11
 8003048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003058:	f002 f9bc 	bl	80053d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_ADC_MspInit+0x10c>)
 8003060:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 8003064:	2205      	movs	r2, #5
 8003066:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 8003070:	2200      	movs	r2, #0
 8003072:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 800307c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003080:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 8003084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003088:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 800308c:	2220      	movs	r2, #32
 800308e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 8003092:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003096:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 800309a:	f001 ff29 	bl	8004ef0 <HAL_DMA_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 80030a4:	f7ff ff62 	bl	8002f6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 80030ac:	651a      	str	r2, [r3, #80]	; 0x50
 80030ae:	4a06      	ldr	r2, [pc, #24]	; (80030c8 <HAL_ADC_MspInit+0x108>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	50040000 	.word	0x50040000
 80030c0:	40021000 	.word	0x40021000
 80030c4:	48000800 	.word	0x48000800
 80030c8:	200000e0 	.word	0x200000e0
 80030cc:	40020008 	.word	0x40020008

080030d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_DAC_MspInit+0x74>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d124      	bne.n	800313c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_DAC_MspInit+0x78>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_DAC_MspInit+0x78>)
 80030f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_DAC_MspInit+0x78>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_DAC_MspInit+0x78>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_DAC_MspInit+0x78>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_DAC_MspInit+0x78>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003122:	2310      	movs	r3, #16
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003126:	2303      	movs	r3, #3
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003138:	f002 f94c 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40007400 	.word	0x40007400
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b0b0      	sub	sp, #192	; 0xc0
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	2294      	movs	r2, #148	; 0x94
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f008 fd75 	bl	800bc5c <memset>
  if(huart->Instance==LPUART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_UART_MspInit+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d13e      	bne.n	80031fa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800317c:	2320      	movs	r3, #32
 800317e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003180:	2300      	movs	r3, #0
 8003182:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003184:	f107 0318 	add.w	r3, r7, #24
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fa91 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003194:	f7ff feea 	bl	8002f6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003198:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_UART_MspInit+0x140>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	4a3b      	ldr	r2, [pc, #236]	; (800328c <HAL_UART_MspInit+0x140>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_UART_MspInit+0x140>)
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_UART_MspInit+0x140>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_UART_MspInit+0x140>)
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_UART_MspInit+0x140>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80031c8:	f002 fb8a 	bl	80058e0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031e6:	2308      	movs	r3, #8
 80031e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031f0:	4619      	mov	r1, r3
 80031f2:	4827      	ldr	r0, [pc, #156]	; (8003290 <HAL_UART_MspInit+0x144>)
 80031f4:	f002 f8ee 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031f8:	e042      	b.n	8003280 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <HAL_UART_MspInit+0x148>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d13d      	bne.n	8003280 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003204:	2301      	movs	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003208:	2300      	movs	r3, #0
 800320a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320c:	f107 0318 	add.w	r3, r7, #24
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fa4d 	bl	80066b0 <HAL_RCCEx_PeriphCLKConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800321c:	f7ff fea6 	bl	8002f6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_UART_MspInit+0x140>)
 8003222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_UART_MspInit+0x140>)
 8003226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322a:	6613      	str	r3, [r2, #96]	; 0x60
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_UART_MspInit+0x140>)
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_UART_MspInit+0x140>)
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_UART_MspInit+0x140>)
 800323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_UART_MspInit+0x140>)
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8003250:	f002 fb46 	bl	80058e0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003254:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003268:	2303      	movs	r3, #3
 800326a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800326e:	2307      	movs	r3, #7
 8003270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003274:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003278:	4619      	mov	r1, r3
 800327a:	4805      	ldr	r0, [pc, #20]	; (8003290 <HAL_UART_MspInit+0x144>)
 800327c:	f002 f8aa 	bl	80053d4 <HAL_GPIO_Init>
}
 8003280:	bf00      	nop
 8003282:	37c0      	adds	r7, #192	; 0xc0
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40008000 	.word	0x40008000
 800328c:	40021000 	.word	0x40021000
 8003290:	48001800 	.word	0x48001800
 8003294:	40013800 	.word	0x40013800

08003298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_SPI_MspInit+0x7c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d128      	bne.n	800330c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c4:	6613      	str	r3, [r2, #96]	; 0x60
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_SPI_MspInit+0x80>)
 80032e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80032ea:	23a0      	movs	r3, #160	; 0xa0
 80032ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032fa:	2305      	movs	r3, #5
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003308:	f002 f864 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40013000 	.word	0x40013000
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_TIM_Base_MspInit+0x9c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d138      	bne.n	80033b0 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 8003344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003348:	6613      	str	r3, [r2, #96]	; 0x60
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 800335c:	f043 0310 	orr.w	r3, r3, #16
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <HAL_TIM_Base_MspInit+0xa0>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800337e:	2301      	movs	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <HAL_TIM_Base_MspInit+0xa4>)
 800338a:	f002 f823 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800338e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80033a0:	2303      	movs	r3, #3
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	4805      	ldr	r0, [pc, #20]	; (80033c0 <HAL_TIM_Base_MspInit+0xa4>)
 80033ac:	f002 f812 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40021000 	.word	0x40021000
 80033c0:	48001000 	.word	0x48001000

080033c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_TIM_PWM_MspInit+0xa0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d128      	bne.n	8003438 <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003416:	2301      	movs	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003426:	2302      	movs	r3, #2
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	4619      	mov	r1, r3
 8003430:	480e      	ldr	r0, [pc, #56]	; (800346c <HAL_TIM_PWM_MspInit+0xa8>)
 8003432:	f001 ffcf 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003436:	e010      	b.n	800345a <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <HAL_TIM_PWM_MspInit+0xac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10b      	bne.n	800345a <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_TIM_PWM_MspInit+0xa4>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40000800 	.word	0x40000800
 8003468:	40021000 	.word	0x40021000
 800346c:	48001000 	.word	0x48001000
 8003470:	40000c00 	.word	0x40000c00

08003474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a34      	ldr	r2, [pc, #208]	; (8003564 <HAL_TIM_MspPostInit+0xf0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11d      	bne.n	80034d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003496:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4a33      	ldr	r2, [pc, #204]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 800349c:	f043 0310 	orr.w	r3, r3, #16
 80034a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80034ae:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80034b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	4828      	ldr	r0, [pc, #160]	; (800356c <HAL_TIM_MspPostInit+0xf8>)
 80034cc:	f001 ff82 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80034d0:	e044      	b.n	800355c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_TIM_MspPostInit+0xfc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d11d      	bne.n	8003518 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003506:	2302      	movs	r3, #2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4818      	ldr	r0, [pc, #96]	; (8003574 <HAL_TIM_MspPostInit+0x100>)
 8003512:	f001 ff5f 	bl	80053d4 <HAL_GPIO_Init>
}
 8003516:	e021      	b.n	800355c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM5)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a16      	ldr	r2, [pc, #88]	; (8003578 <HAL_TIM_MspPostInit+0x104>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d11c      	bne.n	800355c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_TIM_MspPostInit+0xf4>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800353a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800353e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800354c:	2302      	movs	r3, #2
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4619      	mov	r1, r3
 8003556:	4809      	ldr	r0, [pc, #36]	; (800357c <HAL_TIM_MspPostInit+0x108>)
 8003558:	f001 ff3c 	bl	80053d4 <HAL_GPIO_Init>
}
 800355c:	bf00      	nop
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40021000 	.word	0x40021000
 800356c:	48001000 	.word	0x48001000
 8003570:	40000800 	.word	0x40000800
 8003574:	48000c00 	.word	0x48000c00
 8003578:	40000c00 	.word	0x40000c00
 800357c:	48001400 	.word	0x48001400

08003580 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_SAI_MspInit+0x84>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d134      	bne.n	80035fc <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_SAI_MspInit+0x88>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_SAI_MspInit+0x8c>)
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_SAI_MspInit+0x8c>)
 80035a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035a4:	6613      	str	r3, [r2, #96]	; 0x60
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_SAI_MspInit+0x8c>)
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80035b2:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_SAI_MspInit+0x88>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <HAL_SAI_MspInit+0x88>)
 80035ba:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80035bc:	237c      	movs	r3, #124	; 0x7c
 80035be:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035cc:	230d      	movs	r3, #13
 80035ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	4619      	mov	r1, r3
 80035d6:	480e      	ldr	r0, [pc, #56]	; (8003610 <HAL_SAI_MspInit+0x90>)
 80035d8:	f001 fefc 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035ec:	230d      	movs	r3, #13
 80035ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	4619      	mov	r1, r3
 80035f6:	4807      	ldr	r0, [pc, #28]	; (8003614 <HAL_SAI_MspInit+0x94>)
 80035f8:	f001 feec 	bl	80053d4 <HAL_GPIO_Init>

    }
}
 80035fc:	bf00      	nop
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40015404 	.word	0x40015404
 8003608:	20000460 	.word	0x20000460
 800360c:	40021000 	.word	0x40021000
 8003610:	48001000 	.word	0x48001000
 8003614:	48001400 	.word	0x48001400

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800361c:	e7fe      	b.n	800361c <NMI_Handler+0x4>

0800361e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <MemManage_Handler+0x4>

0800362a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <BusFault_Handler+0x4>

08003630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <UsageFault_Handler+0x4>

08003636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 f8b2 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <DMA1_Channel1_IRQHandler+0x10>)
 8003672:	f001 fd60 	bl	8005136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200000e0 	.word	0x200000e0

08003680 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	for (int i = 0; i < 1000000; i++);
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e002      	b.n	8003692 <EXTI9_5_IRQHandler+0x12>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3301      	adds	r3, #1
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <EXTI9_5_IRQHandler+0x28>)
 8003696:	4293      	cmp	r3, r2
 8003698:	ddf8      	ble.n	800368c <EXTI9_5_IRQHandler+0xc>
	//HAL_Delay(250);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800369a:	2040      	movs	r0, #64	; 0x40
 800369c:	f002 f844 	bl	8005728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	000f423f 	.word	0x000f423f

080036ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <SystemInit+0x20>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <SystemInit+0x20>)
 80036b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036d4:	f7ff ffea 	bl	80036ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <LoopForever+0x6>)
  ldr r1, =_edata
 80036da:	490d      	ldr	r1, [pc, #52]	; (8003710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <LoopForever+0xe>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e0:	e002      	b.n	80036e8 <LoopCopyDataInit>

080036e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e6:	3304      	adds	r3, #4

080036e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ec:	d3f9      	bcc.n	80036e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036f0:	4c0a      	ldr	r4, [pc, #40]	; (800371c <LoopForever+0x16>)
  movs r3, #0
 80036f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f4:	e001      	b.n	80036fa <LoopFillZerobss>

080036f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f8:	3204      	adds	r2, #4

080036fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036fc:	d3fb      	bcc.n	80036f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036fe:	f008 fabb 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003702:	f7fd fe6d 	bl	80013e0 <main>

08003706 <LoopForever>:

LoopForever:
    b LoopForever
 8003706:	e7fe      	b.n	8003706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003708:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003710:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003714:	0801fd1c 	.word	0x0801fd1c
  ldr r2, =_sbss
 8003718:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800371c:	200005a0 	.word	0x200005a0

08003720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003720:	e7fe      	b.n	8003720 <ADC1_IRQHandler>

08003722 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800372c:	2003      	movs	r0, #3
 800372e:	f001 fa2f 	bl	8004b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003732:	2000      	movs	r0, #0
 8003734:	f000 f80e 	bl	8003754 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	71fb      	strb	r3, [r7, #7]
 8003742:	e001      	b.n	8003748 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003744:	f7ff fc18 	bl	8002f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003748:	79fb      	ldrb	r3, [r7, #7]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_InitTick+0x6c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d023      	beq.n	80037b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003768:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_InitTick+0x70>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_InitTick+0x6c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003776:	fbb3 f3f1 	udiv	r3, r3, r1
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa3b 	bl	8004bfa <HAL_SYSTICK_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10f      	bne.n	80037aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d809      	bhi.n	80037a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003790:	2200      	movs	r2, #0
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f001 fa05 	bl	8004ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_InitTick+0x74>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e004      	b.n	80037b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e001      	b.n	80037b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000008 	.word	0x20000008
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000004 	.word	0x20000004

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000008 	.word	0x20000008
 80037f0:	20000464 	.word	0x20000464

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000464 	.word	0x20000464

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000008 	.word	0x20000008

08003854 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3360      	adds	r3, #96	; 0x60
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <LL_ADC_SetOffset+0x44>)
 80038de:	4013      	ands	r3, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	03fff000 	.word	0x03fff000

08003904 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	461a      	mov	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3360      	adds	r3, #96	; 0x60
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	431a      	orrs	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	615a      	str	r2, [r3, #20]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3330      	adds	r3, #48	; 0x30
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	211f      	movs	r1, #31
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	f003 011f 	and.w	r1, r3, #31
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0d1b      	lsrs	r3, r3, #20
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2107      	movs	r1, #7
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	401a      	ands	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0d1b      	lsrs	r3, r3, #20
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0318 	and.w	r3, r3, #24
 8003a82:	4908      	ldr	r1, [pc, #32]	; (8003aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a84:	40d9      	lsrs	r1, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	400b      	ands	r3, r1
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	0007ffff 	.word	0x0007ffff

08003aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6093      	str	r3, [r2, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d101      	bne.n	8003ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b30:	d101      	bne.n	8003b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <LL_ADC_IsEnabled+0x18>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <LL_ADC_IsEnabled+0x1a>
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ba6:	f043 0204 	orr.w	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d101      	bne.n	8003bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d101      	bne.n	8003bf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e129      	b.n	8003e76 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff f9c5 	bl	8002fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff3f 	bl	8003acc <LL_ADC_IsDeepPowerDownEnabled>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff25 	bl	8003aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff5a 	bl	8003b1c <LL_ADC_IsInternalRegulatorEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ff3e 	bl	8003af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_ADC_Init+0x278>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	4a81      	ldr	r2, [pc, #516]	; (8003e84 <HAL_ADC_Init+0x27c>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c8c:	e002      	b.n	8003c94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f9      	bne.n	8003c8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ff3c 	bl	8003b1c <LL_ADC_IsInternalRegulatorEnabled>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	f043 0210 	orr.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ff75 	bl	8003bba <LL_ADC_REG_IsConversionOngoing>
 8003cd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 80c2 	bne.w	8003e64 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 80be 	bne.w	8003e64 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cf0:	f043 0202 	orr.w	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff35 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d08:	485f      	ldr	r0, [pc, #380]	; (8003e88 <HAL_ADC_Init+0x280>)
 8003d0a:	f7ff ff2f 	bl	8003b6c <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	485c      	ldr	r0, [pc, #368]	; (8003e8c <HAL_ADC_Init+0x284>)
 8003d1c:	f7ff fd9a 	bl	8003854 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7e5b      	ldrb	r3, [r3, #25]
 8003d24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d106      	bne.n	8003d5c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	3b01      	subs	r3, #1
 8003d54:	045b      	lsls	r3, r3, #17
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <HAL_ADC_Init+0x288>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff25 	bl	8003be0 <LL_ADC_INJ_IsConversionOngoing>
 8003d96:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d140      	bne.n	8003e20 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d13d      	bne.n	8003e20 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
 8003dac:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003db6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc6:	f023 0306 	bic.w	r3, r3, #6
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d118      	bne.n	8003e10 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e00:	430a      	orrs	r2, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	e007      	b.n	8003e20 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10c      	bne.n	8003e42 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f023 010f 	bic.w	r1, r3, #15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e40:	e007      	b.n	8003e52 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 020f 	bic.w	r2, r2, #15
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	659a      	str	r2, [r3, #88]	; 0x58
 8003e62:	e007      	b.n	8003e74 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000
 8003e84:	053e2d63 	.word	0x053e2d63
 8003e88:	50040000 	.word	0x50040000
 8003e8c:	50040300 	.word	0x50040300
 8003e90:	fff0c007 	.word	0xfff0c007

08003e94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fe88 	bl	8003bba <LL_ADC_REG_IsConversionOngoing>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d167      	bne.n	8003f80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Start_DMA+0x2a>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e063      	b.n	8003f86 <HAL_ADC_Start_DMA+0xf2>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fc78 	bl	80047bc <ADC_Enable>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d14f      	bne.n	8003f76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	f023 0206 	bic.w	r2, r3, #6
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f02:	e002      	b.n	8003f0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <HAL_ADC_Start_DMA+0xfc>)
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <HAL_ADC_Start_DMA+0x100>)
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <HAL_ADC_Start_DMA+0x104>)
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	221c      	movs	r2, #28
 8003f28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0210 	orr.w	r2, r2, #16
 8003f40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3340      	adds	r3, #64	; 0x40
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f001 f86d 	bl	8005040 <HAL_DMA_Start_IT>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fe0f 	bl	8003b92 <LL_ADC_REG_StartConversion>
 8003f74:	e006      	b.n	8003f84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003f7e:	e001      	b.n	8003f84 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
 8003f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	080048c9 	.word	0x080048c9
 8003f94:	080049a1 	.word	0x080049a1
 8003f98:	080049bd 	.word	0x080049bd

08003f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b0b6      	sub	sp, #216	; 0xd8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x22>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e3d5      	b.n	8004792 <HAL_ADC_ConfigChannel+0x7ce>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fde1 	bl	8003bba <LL_ADC_REG_IsConversionOngoing>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 83ba 	bne.w	8004774 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d824      	bhi.n	800405a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	3b02      	subs	r3, #2
 8004016:	2b03      	cmp	r3, #3
 8004018:	d81b      	bhi.n	8004052 <HAL_ADC_ConfigChannel+0x8e>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_ADC_ConfigChannel+0x5c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004031 	.word	0x08004031
 8004024:	08004039 	.word	0x08004039
 8004028:	08004041 	.word	0x08004041
 800402c:	08004049 	.word	0x08004049
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004030:	230c      	movs	r3, #12
 8004032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004036:	e010      	b.n	800405a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004038:	2312      	movs	r3, #18
 800403a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800403e:	e00c      	b.n	800405a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004040:	2318      	movs	r3, #24
 8004042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004046:	e008      	b.n	800405a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800404c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004050:	e003      	b.n	800405a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004052:	2306      	movs	r3, #6
 8004054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004058:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004068:	f7ff fca3 	bl	80039b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fda2 	bl	8003bba <LL_ADC_REG_IsConversionOngoing>
 8004076:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fdae 	bl	8003be0 <LL_ADC_INJ_IsConversionOngoing>
 8004084:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 81bf 	bne.w	8004410 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 81ba 	bne.w	8004410 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a4:	d10f      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7ff fcaa 	bl	8003a0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fc51 	bl	8003966 <LL_ADC_SetSamplingTimeCommonConfig>
 80040c4:	e00e      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f7ff fc99 	bl	8003a0a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fc41 	bl	8003966 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00a      	beq.n	800411c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004116:	f7ff fbd1 	bl	80038bc <LL_ADC_SetOffset>
 800411a:	e179      	b.n	8004410 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fbee 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x184>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fbe3 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	e01e      	b.n	8004186 <HAL_ADC_ConfigChannel+0x1c2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fbd8 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800416a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800416e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e004      	b.n	8004184 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800417a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_ConfigChannel+0x1da>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0e9b      	lsrs	r3, r3, #26
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	e018      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x20c>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80041b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80041ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80041c2:	2320      	movs	r3, #32
 80041c4:	e004      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80041c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d106      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fba7 	bl	8003930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fb8b 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_ADC_ConfigChannel+0x24a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fb80 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	0e9b      	lsrs	r3, r3, #26
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	e01e      	b.n	800424c <HAL_ADC_ConfigChannel+0x288>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fb75 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800422c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004234:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e004      	b.n	800424a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x2a0>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0e9b      	lsrs	r3, r3, #26
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	e018      	b.n	8004296 <HAL_ADC_ConfigChannel+0x2d2>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800427c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e004      	b.n	8004296 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800428c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004296:	429a      	cmp	r2, r3
 8004298:	d106      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2200      	movs	r2, #0
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fb44 	bl	8003930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2102      	movs	r1, #2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb28 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x310>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fb1d 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80042ca:	4603      	mov	r3, r0
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	e01e      	b.n	8004312 <HAL_ADC_ConfigChannel+0x34e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fb12 	bl	8003904 <LL_ADC_GetOffsetChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80042f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_ADC_ConfigChannel+0x366>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	e014      	b.n	8004354 <HAL_ADC_ConfigChannel+0x390>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800433e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e004      	b.n	8004354 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800434a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004354:	429a      	cmp	r2, r3
 8004356:	d106      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fae5 	bl	8003930 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fac9 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x3ce>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2103      	movs	r1, #3
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fabe 	bl	8003904 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	0e9b      	lsrs	r3, r3, #26
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	e017      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x3fe>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2103      	movs	r1, #3
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fab3 	bl	8003904 <LL_ADC_GetOffsetChannel>
 800439e:	4603      	mov	r3, r0
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80043ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80043b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <HAL_ADC_ConfigChannel+0x416>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	e011      	b.n	80043fe <HAL_ADC_ConfigChannel+0x43a>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80043e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ea:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80043ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e003      	b.n	80043fe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80043f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043fe:	429a      	cmp	r2, r3
 8004400:	d106      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	2103      	movs	r1, #3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fa90 	bl	8003930 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fba9 	bl	8003b6c <LL_ADC_IsEnabled>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 813f 	bne.w	80046a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	f7ff fb16 	bl	8003a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a8e      	ldr	r2, [pc, #568]	; (8004674 <HAL_ADC_ConfigChannel+0x6b0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	f040 8130 	bne.w	80046a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x4a4>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	3301      	adds	r3, #1
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2b09      	cmp	r3, #9
 800445e:	bf94      	ite	ls
 8004460:	2301      	movls	r3, #1
 8004462:	2300      	movhi	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e019      	b.n	800449c <HAL_ADC_ConfigChannel+0x4d8>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004478:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800447a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e003      	b.n	800448c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b09      	cmp	r3, #9
 8004494:	bf94      	ite	ls
 8004496:	2301      	movls	r3, #1
 8004498:	2300      	movhi	r3, #0
 800449a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800449c:	2b00      	cmp	r3, #0
 800449e:	d079      	beq.n	8004594 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x4f8>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	3301      	adds	r3, #1
 80044b4:	069b      	lsls	r3, r3, #26
 80044b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ba:	e015      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x524>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80044ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80044d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	069b      	lsls	r3, r3, #26
 80044e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x544>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	e017      	b.n	8004538 <HAL_ADC_ConfigChannel+0x574>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800451a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e003      	b.n	800452c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3301      	adds	r3, #1
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2101      	movs	r1, #1
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	ea42 0103 	orr.w	r1, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_ADC_ConfigChannel+0x59a>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	3301      	adds	r3, #1
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	051b      	lsls	r3, r3, #20
 800455c:	e018      	b.n	8004590 <HAL_ADC_ConfigChannel+0x5cc>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004576:	2320      	movs	r3, #32
 8004578:	e003      	b.n	8004582 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3301      	adds	r3, #1
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004590:	430b      	orrs	r3, r1
 8004592:	e080      	b.n	8004696 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x5ec>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	3301      	adds	r3, #1
 80045a8:	069b      	lsls	r3, r3, #26
 80045aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ae:	e015      	b.n	80045dc <HAL_ADC_ConfigChannel+0x618>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80045c8:	2320      	movs	r3, #32
 80045ca:	e003      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x638>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	e017      	b.n	800462c <HAL_ADC_ConfigChannel+0x668>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	61bb      	str	r3, [r7, #24]
  return result;
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	e003      	b.n	8004620 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x694>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	0e9b      	lsrs	r3, r3, #26
 8004642:	3301      	adds	r3, #1
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	3b1e      	subs	r3, #30
 8004650:	051b      	lsls	r3, r3, #20
 8004652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004656:	e01d      	b.n	8004694 <HAL_ADC_ConfigChannel+0x6d0>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	60fb      	str	r3, [r7, #12]
  return result;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e005      	b.n	8004680 <HAL_ADC_ConfigChannel+0x6bc>
 8004674:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f003 021f 	and.w	r2, r3, #31
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	3b1e      	subs	r3, #30
 800468e:	051b      	lsls	r3, r3, #20
 8004690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004694:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800469a:	4619      	mov	r1, r3
 800469c:	f7ff f9b5 	bl	8003a0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_ADC_ConfigChannel+0x7d8>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d06c      	beq.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ac:	483c      	ldr	r0, [pc, #240]	; (80047a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80046ae:	f7ff f8f7 	bl	80038a0 <LL_ADC_GetCommonPathInternalCh>
 80046b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d127      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d121      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a35      	ldr	r2, [pc, #212]	; (80047a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d157      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046de:	4619      	mov	r1, r3
 80046e0:	482f      	ldr	r0, [pc, #188]	; (80047a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80046e2:	f7ff f8ca 	bl	800387a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_ADC_ConfigChannel+0x7e8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	4a30      	ldr	r2, [pc, #192]	; (80047b0 <HAL_ADC_ConfigChannel+0x7ec>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004700:	e002      	b.n	8004708 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3b01      	subs	r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f9      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800470e:	e03a      	b.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d113      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800471e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d12a      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004738:	4619      	mov	r1, r3
 800473a:	4819      	ldr	r0, [pc, #100]	; (80047a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800473c:	f7ff f89d 	bl	800387a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004740:	e021      	b.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d11c      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800474c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d111      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800476a:	4619      	mov	r1, r3
 800476c:	480c      	ldr	r0, [pc, #48]	; (80047a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800476e:	f7ff f884 	bl	800387a <LL_ADC_SetCommonPathInternalCh>
 8004772:	e008      	b.n	8004786 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800478e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004792:	4618      	mov	r0, r3
 8004794:	37d8      	adds	r7, #216	; 0xd8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	80080000 	.word	0x80080000
 80047a0:	50040300 	.word	0x50040300
 80047a4:	c7520000 	.word	0xc7520000
 80047a8:	50040000 	.word	0x50040000
 80047ac:	20000000 	.word	0x20000000
 80047b0:	053e2d63 	.word	0x053e2d63
 80047b4:	cb840000 	.word	0xcb840000
 80047b8:	80000001 	.word	0x80000001

080047bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f9cd 	bl	8003b6c <LL_ADC_IsEnabled>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d169      	bne.n	80048ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <ADC_Enable+0xfc>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f043 0210 	orr.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f043 0201 	orr.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e055      	b.n	80048ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff f99c 	bl	8003b44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800480c:	482b      	ldr	r0, [pc, #172]	; (80048bc <ADC_Enable+0x100>)
 800480e:	f7ff f847 	bl	80038a0 <LL_ADC_GetCommonPathInternalCh>
 8004812:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481c:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <ADC_Enable+0x104>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <ADC_Enable+0x108>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004836:	e002      	b.n	800483e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3b01      	subs	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f9      	bne.n	8004838 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004844:	f7fe ffd6 	bl	80037f4 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800484a:	e028      	b.n	800489e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f98b 	bl	8003b6c <LL_ADC_IsEnabled>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff f96f 	bl	8003b44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004866:	f7fe ffc5 	bl	80037f4 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d914      	bls.n	800489e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d00d      	beq.n	800489e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	f043 0210 	orr.w	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e007      	b.n	80048ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d1cf      	bne.n	800484c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	8000003f 	.word	0x8000003f
 80048bc:	50040300 	.word	0x50040300
 80048c0:	20000000 	.word	0x20000000
 80048c4:	053e2d63 	.word	0x053e2d63

080048c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d14b      	bne.n	800497a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d021      	beq.n	8004940 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff f843 	bl	800398c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d032      	beq.n	8004972 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d12b      	bne.n	8004972 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11f      	bne.n	8004972 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
 800493e:	e018      	b.n	8004972 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d111      	bne.n	8004972 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7fc fab0 	bl	8000ed8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004978:	e00e      	b.n	8004998 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fb12 	bl	8003fb0 <HAL_ADC_ErrorCallback>
}
 800498c:	e004      	b.n	8004998 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff faf4 	bl	8003f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fae4 	bl	8003fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	60d3      	str	r3, [r2, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__NVIC_GetPriorityGrouping+0x18>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 0307 	and.w	r3, r3, #7
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db0b      	blt.n	8004a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <__NVIC_EnableIRQ+0x38>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2001      	movs	r0, #1
 8004a76:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0a      	blt.n	8004aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	490c      	ldr	r1, [pc, #48]	; (8004adc <__NVIC_SetPriority+0x4c>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab8:	e00a      	b.n	8004ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <__NVIC_SetPriority+0x50>)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	440b      	add	r3, r1
 8004ace:	761a      	strb	r2, [r3, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000e100 	.word	0xe000e100
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf28      	it	cs
 8004b02:	2304      	movcs	r3, #4
 8004b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d902      	bls.n	8004b14 <NVIC_EncodePriority+0x30>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3b03      	subs	r3, #3
 8004b12:	e000      	b.n	8004b16 <NVIC_EncodePriority+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	43d9      	mvns	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	4313      	orrs	r3, r2
         );
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b5c:	d301      	bcc.n	8004b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e00f      	b.n	8004b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <SysTick_Config+0x40>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b6a:	210f      	movs	r1, #15
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	f7ff ff8e 	bl	8004a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SysTick_Config+0x40>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <SysTick_Config+0x40>)
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	e000e010 	.word	0xe000e010

08004b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff29 	bl	80049f0 <__NVIC_SetPriorityGrouping>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb8:	f7ff ff3e 	bl	8004a38 <__NVIC_GetPriorityGrouping>
 8004bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f7ff ff8e 	bl	8004ae4 <NVIC_EncodePriority>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff ff5d 	bl	8004a90 <__NVIC_SetPriority>
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	4603      	mov	r3, r0
 8004be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff31 	bl	8004a54 <__NVIC_EnableIRQ>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ffa2 	bl	8004b4c <SysTick_Config>
 8004c08:	4603      	mov	r3, r0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e014      	b.n	8004c4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	791b      	ldrb	r3, [r3, #4]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d105      	bne.n	8004c3a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fe fa4b 	bl	80030d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	795b      	ldrb	r3, [r3, #5]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_DAC_ConfigChannel+0x1c>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e137      	b.n	8004ee4 <HAL_DAC_ConfigChannel+0x28c>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	f040 8081 	bne.w	8004d8c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c8a:	f7fe fdb3 	bl	80037f4 <HAL_GetTick>
 8004c8e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d140      	bne.n	8004d18 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c96:	e018      	b.n	8004cca <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c98:	f7fe fdac 	bl	80037f4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d911      	bls.n	8004cca <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f043 0208 	orr.w	r2, r3, #8
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e10c      	b.n	8004ee4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1df      	bne.n	8004c98 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004cd8:	2001      	movs	r0, #1
 8004cda:	f7fe fd97 	bl	800380c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	69d2      	ldr	r2, [r2, #28]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ce8:	e023      	b.n	8004d32 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cea:	f7fe fd83 	bl	80037f4 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d90f      	bls.n	8004d18 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da0a      	bge.n	8004d18 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f043 0208 	orr.w	r2, r3, #8
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2203      	movs	r2, #3
 8004d12:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0e5      	b.n	8004ee4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	dbe3      	blt.n	8004cea <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7fe fd72 	bl	800380c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	69d2      	ldr	r2, [r2, #28]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d42:	fa01 f303 	lsl.w	r3, r1, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	ea02 0103 	and.w	r1, r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	409a      	lsls	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	21ff      	movs	r1, #255	; 0xff
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	ea02 0103 	and.w	r1, r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d11d      	bne.n	8004dd0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	221f      	movs	r2, #31
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	4013      	ands	r3, r2
 8004dae:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2207      	movs	r2, #7
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	43da      	mvns	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	400a      	ands	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e74:	d104      	bne.n	8004e80 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e018      	b.n	8004eb2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e00f      	b.n	8004eb2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004e92:	f001 fb15 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8004e96:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_DAC_ConfigChannel+0x294>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d904      	bls.n	8004eaa <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e003      	b.n	8004eb2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eb0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	22c0      	movs	r2, #192	; 0xc0
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43da      	mvns	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	400a      	ands	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	04c4b400 	.word	0x04c4b400

08004ef0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e08d      	b.n	800501e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_DMA_Init+0x138>)
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d80f      	bhi.n	8004f2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b45      	ldr	r3, [pc, #276]	; (800502c <HAL_DMA_Init+0x13c>)
 8004f16:	4413      	add	r3, r2
 8004f18:	4a45      	ldr	r2, [pc, #276]	; (8005030 <HAL_DMA_Init+0x140>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	009a      	lsls	r2, r3, #2
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a42      	ldr	r2, [pc, #264]	; (8005034 <HAL_DMA_Init+0x144>)
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f2c:	e00e      	b.n	8004f4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b40      	ldr	r3, [pc, #256]	; (8005038 <HAL_DMA_Init+0x148>)
 8004f36:	4413      	add	r3, r2
 8004f38:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <HAL_DMA_Init+0x140>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	009a      	lsls	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a3c      	ldr	r2, [pc, #240]	; (800503c <HAL_DMA_Init+0x14c>)
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9b6 	bl	8005310 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fac:	d102      	bne.n	8004fb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_DMA_Init+0x104>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d80c      	bhi.n	8004ff4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f9d6 	bl	800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e008      	b.n	8005006 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40020407 	.word	0x40020407
 800502c:	bffdfff8 	.word	0xbffdfff8
 8005030:	cccccccd 	.word	0xcccccccd
 8005034:	40020000 	.word	0x40020000
 8005038:	bffdfbf8 	.word	0xbffdfbf8
 800503c:	40020400 	.word	0x40020400

08005040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Start_IT+0x20>
 800505c:	2302      	movs	r3, #2
 800505e:	e066      	b.n	800512e <HAL_DMA_Start_IT+0xee>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d155      	bne.n	8005120 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f8fb 	bl	8005294 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 020e 	orr.w	r2, r2, #14
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e00f      	b.n	80050d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 020a 	orr.w	r2, r2, #10
 80050d6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e005      	b.n	800512c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f003 031c 	and.w	r3, r3, #28
 8005156:	2204      	movs	r2, #4
 8005158:	409a      	lsls	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d026      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x7a>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d021      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0204 	bic.w	r2, r2, #4
 8005188:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	f003 021c 	and.w	r2, r3, #28
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2104      	movs	r1, #4
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d071      	beq.n	800528a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051ae:	e06c      	b.n	800528a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b4:	f003 031c 	and.w	r3, r3, #28
 80051b8:	2202      	movs	r2, #2
 80051ba:	409a      	lsls	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02e      	beq.n	8005222 <HAL_DMA_IRQHandler+0xec>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d029      	beq.n	8005222 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 020a 	bic.w	r2, r2, #10
 80051ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	f003 021c 	and.w	r2, r3, #28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2102      	movs	r1, #2
 8005202:	fa01 f202 	lsl.w	r2, r1, r2
 8005206:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d038      	beq.n	800528a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005220:	e033      	b.n	800528a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f003 031c 	and.w	r3, r3, #28
 800522a:	2208      	movs	r2, #8
 800522c:	409a      	lsls	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d02a      	beq.n	800528c <HAL_DMA_IRQHandler+0x156>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d025      	beq.n	800528c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 020e 	bic.w	r2, r2, #14
 800524e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	f003 021c 	and.w	r2, r3, #28
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f202 	lsl.w	r2, r1, r2
 8005262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800528a:	bf00      	nop
 800528c:	bf00      	nop
}
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052bc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f003 021c 	and.w	r2, r3, #28
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2101      	movs	r1, #1
 80052cc:	fa01 f202 	lsl.w	r2, r1, r2
 80052d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d108      	bne.n	80052f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052f2:	e007      	b.n	8005304 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b17      	ldr	r3, [pc, #92]	; (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d80a      	bhi.n	800533a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005330:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6493      	str	r3, [r2, #72]	; 0x48
 8005338:	e007      	b.n	800534a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005344:	4413      	add	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	3b08      	subs	r3, #8
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005360:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40020407 	.word	0x40020407
 8005380:	4002081c 	.word	0x4002081c
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	40020880 	.word	0x40020880

0800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2201      	movs	r2, #1
 80053ba:	409a      	lsls	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	1000823f 	.word	0x1000823f
 80053d0:	40020940 	.word	0x40020940

080053d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053e2:	e166      	b.n	80056b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2101      	movs	r1, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8158 	beq.w	80056ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d005      	beq.n	8005414 <HAL_GPIO_Init+0x40>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d130      	bne.n	8005476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	2203      	movs	r2, #3
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4013      	ands	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800544a:	2201      	movs	r2, #1
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 0201 	and.w	r2, r3, #1
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d017      	beq.n	80054b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2203      	movs	r2, #3
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d123      	bne.n	8005506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	08da      	lsrs	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3208      	adds	r2, #8
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	08da      	lsrs	r2, r3, #3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3208      	adds	r2, #8
 8005500:	6939      	ldr	r1, [r7, #16]
 8005502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4013      	ands	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0203 	and.w	r2, r3, #3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80b2 	beq.w	80056ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005548:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 800554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554c:	4a60      	ldr	r2, [pc, #384]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6613      	str	r3, [r2, #96]	; 0x60
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005560:	4a5c      	ldr	r2, [pc, #368]	; (80056d4 <HAL_GPIO_Init+0x300>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	3302      	adds	r3, #2
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	220f      	movs	r2, #15
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800558a:	d02b      	beq.n	80055e4 <HAL_GPIO_Init+0x210>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <HAL_GPIO_Init+0x304>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d025      	beq.n	80055e0 <HAL_GPIO_Init+0x20c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a51      	ldr	r2, [pc, #324]	; (80056dc <HAL_GPIO_Init+0x308>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01f      	beq.n	80055dc <HAL_GPIO_Init+0x208>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a50      	ldr	r2, [pc, #320]	; (80056e0 <HAL_GPIO_Init+0x30c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d019      	beq.n	80055d8 <HAL_GPIO_Init+0x204>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a4f      	ldr	r2, [pc, #316]	; (80056e4 <HAL_GPIO_Init+0x310>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_GPIO_Init+0x200>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <HAL_GPIO_Init+0x314>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00d      	beq.n	80055d0 <HAL_GPIO_Init+0x1fc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a4d      	ldr	r2, [pc, #308]	; (80056ec <HAL_GPIO_Init+0x318>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <HAL_GPIO_Init+0x1f8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a4c      	ldr	r2, [pc, #304]	; (80056f0 <HAL_GPIO_Init+0x31c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_GPIO_Init+0x1f4>
 80055c4:	2307      	movs	r3, #7
 80055c6:	e00e      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055c8:	2308      	movs	r3, #8
 80055ca:	e00c      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055cc:	2306      	movs	r3, #6
 80055ce:	e00a      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d0:	2305      	movs	r3, #5
 80055d2:	e008      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d4:	2304      	movs	r3, #4
 80055d6:	e006      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d8:	2303      	movs	r3, #3
 80055da:	e004      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055dc:	2302      	movs	r3, #2
 80055de:	e002      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055e4:	2300      	movs	r3, #0
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	f002 0203 	and.w	r2, r2, #3
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	4093      	lsls	r3, r2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055f6:	4937      	ldr	r1, [pc, #220]	; (80056d4 <HAL_GPIO_Init+0x300>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005604:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005628:	4a32      	ldr	r2, [pc, #200]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005652:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <HAL_GPIO_Init+0x320>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f ae91 	bne.w	80053e4 <HAL_GPIO_Init+0x10>
  }
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40010000 	.word	0x40010000
 80056d8:	48000400 	.word	0x48000400
 80056dc:	48000800 	.word	0x48000800
 80056e0:	48000c00 	.word	0x48000c00
 80056e4:	48001000 	.word	0x48001000
 80056e8:	48001400 	.word	0x48001400
 80056ec:	48001800 	.word	0x48001800
 80056f0:	48001c00 	.word	0x48001c00
 80056f4:	40010400 	.word	0x40010400

080056f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	807b      	strh	r3, [r7, #2]
 8005704:	4613      	mov	r3, r2
 8005706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005708:	787b      	ldrb	r3, [r7, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005714:	e002      	b.n	800571c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fe2c 	bl	80013a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40010400 	.word	0x40010400

08005758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_PWREx_GetVoltageRange+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	d102      	bne.n	8005770 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800576a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576e:	e00b      	b.n	8005788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005770:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d102      	bne.n	8005786 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005784:	e000      	b.n	8005788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005786:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40007000 	.word	0x40007000

08005798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d141      	bne.n	800582a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b2:	d131      	bne.n	8005818 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057b4:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ba:	4a46      	ldr	r2, [pc, #280]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057cc:	4a41      	ldr	r2, [pc, #260]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057d4:	4b40      	ldr	r3, [pc, #256]	; (80058d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2232      	movs	r2, #50	; 0x32
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	4a3f      	ldr	r2, [pc, #252]	; (80058dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	0c9b      	lsrs	r3, r3, #18
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ea:	e002      	b.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d102      	bne.n	8005806 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f2      	bne.n	80057ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005806:	4b33      	ldr	r3, [pc, #204]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005812:	d158      	bne.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e057      	b.n	80058c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005818:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800581e:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005828:	e04d      	b.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005830:	d141      	bne.n	80058b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d131      	bne.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005840:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005846:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005850:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005858:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800585e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2232      	movs	r2, #50	; 0x32
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	0c9b      	lsrs	r3, r3, #18
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005876:	e002      	b.n	800587e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800587e:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d102      	bne.n	8005892 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f2      	bne.n	8005878 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d112      	bne.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e011      	b.n	80058c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058aa:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058b4:	e007      	b.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058be:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40007000 	.word	0x40007000
 80058d8:	20000000 	.word	0x20000000
 80058dc:	431bde83 	.word	0x431bde83

080058e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80058ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ee:	6053      	str	r3, [r2, #4]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40007000 	.word	0x40007000

08005900 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f000 bc08 	b.w	8006124 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005914:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591e:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80e4 	beq.w	8005afe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_RCC_OscConfig+0x4c>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	f040 808b 	bne.w	8005a5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 8087 	bne.w	8005a5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800594c:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_OscConfig+0x64>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e3df      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_RCC_OscConfig+0x7e>
 8005974:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597c:	e005      	b.n	800598a <HAL_RCC_OscConfig+0x8a>
 800597e:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598a:	4293      	cmp	r3, r2
 800598c:	d223      	bcs.n	80059d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fdcc 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e3c0      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a2:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a72      	ldr	r2, [pc, #456]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059a8:	f043 0308 	orr.w	r3, r3, #8
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b70      	ldr	r3, [pc, #448]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	496d      	ldr	r1, [pc, #436]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059c0:	4b6b      	ldr	r3, [pc, #428]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	4968      	ldr	r1, [pc, #416]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
 80059d4:	e025      	b.n	8005a22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d6:	4b66      	ldr	r3, [pc, #408]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a65      	ldr	r2, [pc, #404]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059dc:	f043 0308 	orr.w	r3, r3, #8
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	4b63      	ldr	r3, [pc, #396]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	4960      	ldr	r1, [pc, #384]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f4:	4b5e      	ldr	r3, [pc, #376]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	495b      	ldr	r1, [pc, #364]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fd8c 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e380      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a22:	f000 fcc1 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4950      	ldr	r1, [pc, #320]	; (8005b74 <HAL_RCC_OscConfig+0x274>)
 8005a34:	5ccb      	ldrb	r3, [r1, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	4a4e      	ldr	r2, [pc, #312]	; (8005b78 <HAL_RCC_OscConfig+0x278>)
 8005a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <HAL_RCC_OscConfig+0x27c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd fe84 	bl	8003754 <HAL_InitTick>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d052      	beq.n	8005afc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	e364      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d032      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a42      	ldr	r2, [pc, #264]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a6e:	f7fd fec1 	bl	80037f4 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a76:	f7fd febd 	bl	80037f4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e34d      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a94:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a35      	ldr	r2, [pc, #212]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4930      	ldr	r1, [pc, #192]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab2:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	492b      	ldr	r1, [pc, #172]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]
 8005ac6:	e01a      	b.n	8005afe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ac8:	4b29      	ldr	r3, [pc, #164]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a28      	ldr	r2, [pc, #160]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005ace:	f023 0301 	bic.w	r3, r3, #1
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad4:	f7fd fe8e 	bl	80037f4 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005adc:	f7fd fe8a 	bl	80037f4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e31a      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x1dc>
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d073      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_OscConfig+0x21c>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d10e      	bne.n	8005b34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d063      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x2f0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d15f      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e2f7      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCC_OscConfig+0x24c>
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e025      	b.n	8005b98 <HAL_RCC_OscConfig+0x298>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b54:	d114      	bne.n	8005b80 <HAL_RCC_OscConfig+0x280>
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a02      	ldr	r2, [pc, #8]	; (8005b70 <HAL_RCC_OscConfig+0x270>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e013      	b.n	8005b98 <HAL_RCC_OscConfig+0x298>
 8005b70:	40021000 	.word	0x40021000
 8005b74:	0800c8e4 	.word	0x0800c8e4
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	20000004 	.word	0x20000004
 8005b80:	4ba0      	ldr	r3, [pc, #640]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a9f      	ldr	r2, [pc, #636]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	4b9d      	ldr	r3, [pc, #628]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a9c      	ldr	r2, [pc, #624]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fe28 	bl	80037f4 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fd fe24 	bl	80037f4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e2b4      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bba:	4b92      	ldr	r3, [pc, #584]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x2a8>
 8005bc6:	e014      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fd fe14 	bl	80037f4 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fd fe10 	bl	80037f4 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	; 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e2a0      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be2:	4b88      	ldr	r3, [pc, #544]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2d0>
 8005bee:	e000      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d060      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_OscConfig+0x310>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d119      	bne.n	8005c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d116      	bne.n	8005c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	4b7c      	ldr	r3, [pc, #496]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_OscConfig+0x328>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e27d      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4b76      	ldr	r3, [pc, #472]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	4973      	ldr	r1, [pc, #460]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c3c:	e040      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d023      	beq.n	8005c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c46:	4b6f      	ldr	r3, [pc, #444]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6e      	ldr	r2, [pc, #440]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c52:	f7fd fdcf 	bl	80037f4 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5a:	f7fd fdcb 	bl	80037f4 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e25b      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6c:	4b65      	ldr	r3, [pc, #404]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c78:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	495f      	ldr	r1, [pc, #380]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	604b      	str	r3, [r1, #4]
 8005c8c:	e018      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8e:	4b5d      	ldr	r3, [pc, #372]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5c      	ldr	r2, [pc, #368]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fd fdab 	bl	80037f4 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fd fda7 	bl	80037f4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e237      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb4:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01c      	beq.n	8005d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd4:	4b4b      	ldr	r3, [pc, #300]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cda:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fd fd86 	bl	80037f4 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cec:	f7fd fd82 	bl	80037f4 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e212      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfe:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <HAL_RCC_OscConfig+0x3ec>
 8005d0c:	e01b      	b.n	8005d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0e:	4b3d      	ldr	r3, [pc, #244]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d14:	4a3b      	ldr	r2, [pc, #236]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd fd69 	bl	80037f4 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fd fd65 	bl	80037f4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e1f5      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d38:	4b32      	ldr	r3, [pc, #200]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80a6 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d54:	2300      	movs	r3, #0
 8005d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d58:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d80:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d118      	bne.n	8005dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d98:	f7fd fd2c 	bl	80037f4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da0:	f7fd fd28 	bl	80037f4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1b8      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <HAL_RCC_OscConfig+0x508>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d108      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4d8>
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd6:	e029      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	d115      	bne.n	8005e0c <HAL_RCC_OscConfig+0x50c>
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005de8:	f043 0304 	orr.w	r3, r3, #4
 8005dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	4a03      	ldr	r2, [pc, #12]	; (8005e04 <HAL_RCC_OscConfig+0x504>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e00:	e014      	b.n	8005e2c <HAL_RCC_OscConfig+0x52c>
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40007000 	.word	0x40007000
 8005e0c:	4b9d      	ldr	r3, [pc, #628]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e12:	4a9c      	ldr	r2, [pc, #624]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e1c:	4b99      	ldr	r3, [pc, #612]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	4a98      	ldr	r2, [pc, #608]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e24:	f023 0304 	bic.w	r3, r3, #4
 8005e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fd fcde 	bl	80037f4 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fd fcda 	bl	80037f4 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e168      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e52:	4b8c      	ldr	r3, [pc, #560]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0ed      	beq.n	8005e3c <HAL_RCC_OscConfig+0x53c>
 8005e60:	e015      	b.n	8005e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fd fcc7 	bl	80037f4 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fd fcc3 	bl	80037f4 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e151      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e80:	4b80      	ldr	r3, [pc, #512]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ed      	bne.n	8005e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b7b      	ldr	r3, [pc, #492]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	4a7a      	ldr	r2, [pc, #488]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03c      	beq.n	8005f26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01c      	beq.n	8005eee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb4:	4b73      	ldr	r3, [pc, #460]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eba:	4a72      	ldr	r2, [pc, #456]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fd fc96 	bl	80037f4 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ecc:	f7fd fc92 	bl	80037f4 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e122      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ede:	4b69      	ldr	r3, [pc, #420]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ef      	beq.n	8005ecc <HAL_RCC_OscConfig+0x5cc>
 8005eec:	e01b      	b.n	8005f26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eee:	4b65      	ldr	r3, [pc, #404]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef4:	4a63      	ldr	r2, [pc, #396]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efe:	f7fd fc79 	bl	80037f4 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f06:	f7fd fc75 	bl	80037f4 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e105      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f18:	4b5a      	ldr	r3, [pc, #360]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ef      	bne.n	8005f06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80f9 	beq.w	8006122 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	f040 80cf 	bne.w	80060d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f3a:	4b52      	ldr	r3, [pc, #328]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d12c      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d123      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d113      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d109      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d071      	beq.n	800608c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d068      	beq.n	8006080 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fae:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005fba:	4b32      	ldr	r3, [pc, #200]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0ac      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fca:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fd6:	f7fd fc0d 	bl	80037f4 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fd fc09 	bl	80037f4 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e099      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	4b21      	ldr	r3, [pc, #132]	; (8006088 <HAL_RCC_OscConfig+0x788>)
 8006002:	4013      	ands	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800600c:	3a01      	subs	r2, #1
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	4311      	orrs	r1, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	0552      	lsls	r2, r2, #21
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800602a:	0852      	lsrs	r2, r2, #1
 800602c:	3a01      	subs	r2, #1
 800602e:	0652      	lsls	r2, r2, #25
 8006030:	4311      	orrs	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006036:	06d2      	lsls	r2, r2, #27
 8006038:	430a      	orrs	r2, r1
 800603a:	4912      	ldr	r1, [pc, #72]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8006046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006058:	f7fd fbcc 	bl	80037f4 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fd fbc8 	bl	80037f4 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e058      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607e:	e050      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e04f      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
 8006084:	40021000 	.word	0x40021000
 8006088:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d144      	bne.n	8006122 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b0:	f7fd fba0 	bl	80037f4 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fd fb9c 	bl	80037f4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e02c      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x7b8>
 80060d6:	e024      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d01f      	beq.n	800611e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 80060e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ea:	f7fd fb83 	bl	80037f4 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f2:	f7fd fb7f 	bl	80037f4 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e00f      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4905      	ldr	r1, [pc, #20]	; (800612c <HAL_RCC_OscConfig+0x82c>)
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_RCC_OscConfig+0x830>)
 8006118:	4013      	ands	r3, r2
 800611a:	60cb      	str	r3, [r1, #12]
 800611c:	e001      	b.n	8006122 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	feeefffc 	.word	0xfeeefffc

08006134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e11d      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b90      	ldr	r3, [pc, #576]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d910      	bls.n	800617c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b8d      	ldr	r3, [pc, #564]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	498b      	ldr	r1, [pc, #556]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b89      	ldr	r3, [pc, #548]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e105      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d010      	beq.n	80061aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	4b81      	ldr	r3, [pc, #516]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006194:	429a      	cmp	r2, r3
 8006196:	d908      	bls.n	80061aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b7e      	ldr	r3, [pc, #504]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	497b      	ldr	r1, [pc, #492]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d079      	beq.n	80062aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d11e      	bne.n	80061fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061be:	4b75      	ldr	r3, [pc, #468]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0dc      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80061ce:	f000 fa09 	bl	80065e4 <RCC_GetSysClockFreqFromPLLSource>
 80061d2:	4603      	mov	r3, r0
 80061d4:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_RCC_ClockConfig+0x264>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d946      	bls.n	8006268 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061da:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d140      	bne.n	8006268 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061e6:	4b6b      	ldr	r3, [pc, #428]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ee:	4a69      	ldr	r2, [pc, #420]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e035      	b.n	8006268 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d107      	bne.n	8006214 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006204:	4b63      	ldr	r3, [pc, #396]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d115      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0b9      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800621c:	4b5d      	ldr	r3, [pc, #372]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0ad      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800622c:	4b59      	ldr	r3, [pc, #356]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0a5      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800623c:	f000 f8b4 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006240:	4603      	mov	r3, r0
 8006242:	4a55      	ldr	r2, [pc, #340]	; (8006398 <HAL_RCC_ClockConfig+0x264>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d90f      	bls.n	8006268 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006248:	4b52      	ldr	r3, [pc, #328]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006254:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625c:	4a4d      	ldr	r2, [pc, #308]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006268:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 0203 	bic.w	r2, r3, #3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4947      	ldr	r1, [pc, #284]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627a:	f7fd fabb 	bl	80037f4 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006280:	e00a      	b.n	8006298 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006282:	f7fd fab7 	bl	80037f4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e077      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006298:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 020c 	and.w	r2, r3, #12
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d1eb      	bne.n	8006282 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062b0:	4b38      	ldr	r3, [pc, #224]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a37      	ldr	r2, [pc, #220]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d010      	beq.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	4b31      	ldr	r3, [pc, #196]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d208      	bcs.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d8:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	492b      	ldr	r1, [pc, #172]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ea:	4b29      	ldr	r3, [pc, #164]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d210      	bcs.n	800631a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f8:	4b25      	ldr	r3, [pc, #148]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 020f 	bic.w	r2, r3, #15
 8006300:	4923      	ldr	r1, [pc, #140]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006308:	4b21      	ldr	r3, [pc, #132]	; (8006390 <HAL_RCC_ClockConfig+0x25c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e036      	b.n	8006388 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006326:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4918      	ldr	r1, [pc, #96]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006334:	4313      	orrs	r3, r2
 8006336:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4910      	ldr	r1, [pc, #64]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006354:	4313      	orrs	r3, r2
 8006356:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006358:	f000 f826 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800635c:	4602      	mov	r2, r0
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_RCC_ClockConfig+0x260>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	091b      	lsrs	r3, r3, #4
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	490c      	ldr	r1, [pc, #48]	; (800639c <HAL_RCC_ClockConfig+0x268>)
 800636a:	5ccb      	ldrb	r3, [r1, r3]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x26c>)
 8006376:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x270>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd f9e9 	bl	8003754 <HAL_InitTick>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40022000 	.word	0x40022000
 8006394:	40021000 	.word	0x40021000
 8006398:	04c4b400 	.word	0x04c4b400
 800639c:	0800c8e4 	.word	0x0800c8e4
 80063a0:	20000000 	.word	0x20000000
 80063a4:	20000004 	.word	0x20000004

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b3b      	ldr	r3, [pc, #236]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x34>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d121      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11e      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063dc:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063e8:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e005      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063f8:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006404:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006418:	e00a      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d102      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e004      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d101      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800642c:	4b23      	ldr	r3, [pc, #140]	; (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 800642e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d134      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d003      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0xa6>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xac>
 800644c:	e005      	b.n	800645a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006450:	617b      	str	r3, [r7, #20]
      break;
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006454:	4b19      	ldr	r3, [pc, #100]	; (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006456:	617b      	str	r3, [r7, #20]
      break;
 8006458:	e002      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	617b      	str	r3, [r7, #20]
      break;
 800645e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	3301      	adds	r3, #1
 800646c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	fb03 f202 	mul.w	r2, r3, r2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064a0:	69bb      	ldr	r3, [r7, #24]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	; 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800c8fc 	.word	0x0800c8fc
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000000 	.word	0x20000000

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4904      	ldr	r1, [pc, #16]	; (8006500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	0800c8f4 	.word	0x0800c8f4

08006504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006508:	f7ff ffda 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0adb      	lsrs	r3, r3, #11
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4904      	ldr	r1, [pc, #16]	; (800652c <HAL_RCC_GetPCLK2Freq+0x28>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800c8f4 	.word	0x0800c8f4

08006530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800653c:	4b27      	ldr	r3, [pc, #156]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006548:	f7ff f906 	bl	8005758 <HAL_PWREx_GetVoltageRange>
 800654c:	6178      	str	r0, [r7, #20]
 800654e:	e014      	b.n	800657a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	4a21      	ldr	r2, [pc, #132]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655a:	6593      	str	r3, [r2, #88]	; 0x58
 800655c:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006568:	f7ff f8f6 	bl	8005758 <HAL_PWREx_GetVoltageRange>
 800656c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006578:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d10b      	bne.n	800659a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d913      	bls.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2ba0      	cmp	r3, #160	; 0xa0
 800658c:	d902      	bls.n	8006594 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800658e:	2302      	movs	r3, #2
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e00d      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006594:	2301      	movs	r3, #1
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e00a      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b7f      	cmp	r3, #127	; 0x7f
 800659e:	d902      	bls.n	80065a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80065a0:	2302      	movs	r3, #2
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e004      	b.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d101      	bne.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065ac:	2301      	movs	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 020f 	bic.w	r2, r3, #15
 80065b8:	4909      	ldr	r1, [pc, #36]	; (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d001      	beq.n	80065d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40022000 	.word	0x40022000

080065e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ea:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d00b      	beq.n	8006612 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d825      	bhi.n	800664c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d008      	beq.n	8006618 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d11f      	bne.n	800664c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800660c:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800660e:	613b      	str	r3, [r7, #16]
    break;
 8006610:	e01f      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006612:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006614:	613b      	str	r3, [r7, #16]
    break;
 8006616:	e01c      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006624:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e005      	b.n	8006640 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006634:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006640:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006648:	613b      	str	r3, [r7, #16]
    break;
 800664a:	e002      	b.n	8006652 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
    break;
 8006650:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006652:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	3301      	adds	r3, #1
 800665e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	fb03 f202 	mul.w	r2, r3, r2
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	3301      	adds	r3, #1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006692:	683b      	ldr	r3, [r7, #0]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40021000 	.word	0x40021000
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	007a1200 	.word	0x007a1200
 80066ac:	0800c8fc 	.word	0x0800c8fc

080066b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066b8:	2300      	movs	r3, #0
 80066ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066bc:	2300      	movs	r3, #0
 80066be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d040      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	2b80      	cmp	r3, #128	; 0x80
 80066d2:	d02a      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d825      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066d8:	2b60      	cmp	r3, #96	; 0x60
 80066da:	d026      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066dc:	2b60      	cmp	r3, #96	; 0x60
 80066de:	d821      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d006      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d81d      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80066f0:	e018      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066f2:	4b89      	ldr	r3, [pc, #548]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	4a88      	ldr	r2, [pc, #544]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066fe:	e015      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fa24 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006710:	e00c      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3320      	adds	r3, #32
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fb0f 	bl	8007d3c <RCCEx_PLLSAI2_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	74fb      	strb	r3, [r7, #19]
      break;
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800672a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006732:	4b79      	ldr	r3, [pc, #484]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006738:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	4975      	ldr	r1, [pc, #468]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006748:	e001      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	7cfb      	ldrb	r3, [r7, #19]
 800674c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d047      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006762:	d030      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006768:	d82a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800676a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676e:	d02a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006774:	d824      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677a:	d008      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d81e      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	d010      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800678c:	e018      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800678e:	4b62      	ldr	r3, [pc, #392]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4a61      	ldr	r2, [pc, #388]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800679a:	e015      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 f9d6 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067ac:	e00c      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3320      	adds	r3, #32
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fac1 	bl	8007d3c <RCCEx_PLLSAI2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067be:	e003      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	74fb      	strb	r3, [r7, #19]
      break;
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80067c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067ce:	4b52      	ldr	r3, [pc, #328]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	494e      	ldr	r1, [pc, #312]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80067e4:	e001      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809f 	beq.w	8006936 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067f8:	2300      	movs	r3, #0
 80067fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067fc:	4b46      	ldr	r3, [pc, #280]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	4a40      	ldr	r2, [pc, #256]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681c:	6593      	str	r3, [r2, #88]	; 0x58
 800681e:	4b3e      	ldr	r3, [pc, #248]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682a:	2301      	movs	r3, #1
 800682c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800682e:	4b3b      	ldr	r3, [pc, #236]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3a      	ldr	r2, [pc, #232]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800683a:	f7fc ffdb 	bl	80037f4 <HAL_GetTick>
 800683e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006840:	e009      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006842:	f7fc ffd7 	bl	80037f4 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d902      	bls.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	74fb      	strb	r3, [r7, #19]
        break;
 8006854:	e005      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006856:	4b31      	ldr	r3, [pc, #196]	; (800691c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0ef      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006862:	7cfb      	ldrb	r3, [r7, #19]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15b      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01f      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	429a      	cmp	r2, r3
 8006884:	d019      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006886:	4b24      	ldr	r3, [pc, #144]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006890:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006892:	4b21      	ldr	r3, [pc, #132]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800689a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068b2:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fc ff96 	bl	80037f4 <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ca:	e00b      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fc ff92 	bl	80037f4 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d902      	bls.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	74fb      	strb	r3, [r7, #19]
            break;
 80068e2:	e006      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ec      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	4b07      	ldr	r3, [pc, #28]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	4903      	ldr	r1, [pc, #12]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006910:	e008      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	74bb      	strb	r3, [r7, #18]
 8006916:	e005      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006918:	40021000 	.word	0x40021000
 800691c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	7cfb      	ldrb	r3, [r7, #19]
 8006922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006924:	7c7b      	ldrb	r3, [r7, #17]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800692a:	4ba0      	ldr	r3, [pc, #640]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	4a9f      	ldr	r2, [pc, #636]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006942:	4b9a      	ldr	r3, [pc, #616]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006948:	f023 0203 	bic.w	r2, r3, #3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	4996      	ldr	r1, [pc, #600]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006964:	4b91      	ldr	r3, [pc, #580]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f023 020c 	bic.w	r2, r3, #12
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	498e      	ldr	r1, [pc, #568]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006986:	4b89      	ldr	r3, [pc, #548]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	4985      	ldr	r1, [pc, #532]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069a8:	4b80      	ldr	r3, [pc, #512]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	497d      	ldr	r1, [pc, #500]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069ca:	4b78      	ldr	r3, [pc, #480]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	4974      	ldr	r1, [pc, #464]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ec:	4b6f      	ldr	r3, [pc, #444]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fa:	496c      	ldr	r1, [pc, #432]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a0e:	4b67      	ldr	r3, [pc, #412]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1c:	4963      	ldr	r1, [pc, #396]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a30:	4b5e      	ldr	r3, [pc, #376]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3e:	495b      	ldr	r1, [pc, #364]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a52:	4b56      	ldr	r3, [pc, #344]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a60:	4952      	ldr	r1, [pc, #328]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a74:	4b4d      	ldr	r3, [pc, #308]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	494a      	ldr	r1, [pc, #296]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a96:	4b45      	ldr	r3, [pc, #276]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa4:	4941      	ldr	r1, [pc, #260]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ab8:	4b3c      	ldr	r3, [pc, #240]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac6:	4939      	ldr	r1, [pc, #228]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d028      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ada:	4b34      	ldr	r3, [pc, #208]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae8:	4930      	ldr	r1, [pc, #192]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af8:	d106      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006afa:	4b2c      	ldr	r3, [pc, #176]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	4a2b      	ldr	r2, [pc, #172]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b04:	60d3      	str	r3, [r2, #12]
 8006b06:	e011      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f81b 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b22:	7cfb      	ldrb	r3, [r7, #19]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006b28:	7cfb      	ldrb	r3, [r7, #19]
 8006b2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b40:	d108      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006b42:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b48:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b52:	e012      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5a:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b72:	490e      	ldr	r1, [pc, #56]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b82:	d106      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b8e:	60d3      	str	r3, [r2, #12]
 8006b90:	e020      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9a:	d109      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b9c:	4b03      	ldr	r3, [pc, #12]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a02      	ldr	r2, [pc, #8]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba6:	60d3      	str	r3, [r2, #12]
 8006ba8:	e014      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 ffc7 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bca:	7cfb      	ldrb	r3, [r7, #19]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d028      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006be0:	4b4a      	ldr	r3, [pc, #296]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bee:	4947      	ldr	r1, [pc, #284]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bfe:	d106      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c00:	4b42      	ldr	r3, [pc, #264]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a41      	ldr	r2, [pc, #260]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c0a:	60d3      	str	r3, [r2, #12]
 8006c0c:	e011      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c16:	d10c      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 ff98 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006c2e:	7cfb      	ldrb	r3, [r7, #19]
 8006c30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3e:	4b33      	ldr	r3, [pc, #204]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c4e:	492f      	ldr	r1, [pc, #188]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3304      	adds	r3, #4
 8006c66:	2102      	movs	r1, #2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 ff73 	bl	8007b54 <RCCEx_PLLSAI1_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c88:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c8e:	f023 0204 	bic.w	r2, r3, #4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	491c      	ldr	r1, [pc, #112]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cb2:	f023 0218 	bic.w	r2, r3, #24
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbc:	4913      	ldr	r1, [pc, #76]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	490a      	ldr	r1, [pc, #40]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf2:	d105      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d00:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000

08006d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d22:	d13e      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006d24:	4bb6      	ldr	r3, [pc, #728]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d36:	d028      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d3e:	f200 86f4 	bhi.w	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d48:	d005      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d50:	d00e      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006d52:	f000 beea 	b.w	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d56:	4baa      	ldr	r3, [pc, #680]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f040 86e4 	bne.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6a:	61fb      	str	r3, [r7, #28]
      break;
 8006d6c:	f000 bedf 	b.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006d70:	4ba3      	ldr	r3, [pc, #652]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f040 86d9 	bne.w	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006d80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d84:	61fb      	str	r3, [r7, #28]
      break;
 8006d86:	f000 bed4 	b.w	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d8a:	4b9d      	ldr	r3, [pc, #628]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d96:	f040 86ce 	bne.w	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006d9a:	4b9a      	ldr	r3, [pc, #616]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006d9c:	61fb      	str	r3, [r7, #28]
      break;
 8006d9e:	f000 beca 	b.w	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006da2:	4b97      	ldr	r3, [pc, #604]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d036      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d840      	bhi.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d020      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006dc4:	e039      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006dc6:	4b8e      	ldr	r3, [pc, #568]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d116      	bne.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006dd2:	4b8b      	ldr	r3, [pc, #556]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006dde:	4b88      	ldr	r3, [pc, #544]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	091b      	lsrs	r3, r3, #4
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006dea:	4b85      	ldr	r3, [pc, #532]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	4a84      	ldr	r2, [pc, #528]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006dfe:	e01f      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
      break;
 8006e04:	e01c      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e06:	4b7e      	ldr	r3, [pc, #504]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d102      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006e14:	4b7d      	ldr	r3, [pc, #500]	; (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006e16:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006e18:	e012      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
      break;
 8006e1e:	e00f      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e20:	4b77      	ldr	r3, [pc, #476]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006e2e:	4b78      	ldr	r3, [pc, #480]	; (8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006e32:	e005      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61bb      	str	r3, [r7, #24]
      break;
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
      break;
 8006e3e:	bf00      	nop
    }

    switch(PeriphClk)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e46:	f000 8606 	beq.w	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e50:	f200 8673 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e5a:	f000 8469 	beq.w	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e64:	f200 8669 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6e:	f000 8531 	beq.w	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e78:	f200 865f 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e82:	f000 8187 	beq.w	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e8c:	f200 8655 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e96:	f000 80cd 	beq.w	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ea0:	f200 864b 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eaa:	f000 8430 	beq.w	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	f200 8641 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ebe:	f000 83e4 	beq.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec8:	f200 8637 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	f000 80af 	beq.w	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006edc:	f200 862d 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	f000 809d 	beq.w	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	f200 8623 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efa:	f000 808b 	beq.w	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f04:	f200 8619 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	f000 8554 	beq.w	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	f200 860f 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f22:	f000 8500 	beq.w	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2c:	f200 8605 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	f000 84a1 	beq.w	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f40:	f200 85fb 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	f000 846c 	beq.w	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	f200 85f3 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d84c      	bhi.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 85ec 	beq.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	2b1f      	cmp	r3, #31
 8006f68:	f200 85e7 	bhi.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f6c:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08007389 	.word	0x08007389
 8006f78:	080073f7 	.word	0x080073f7
 8006f7c:	08007b3b 	.word	0x08007b3b
 8006f80:	0800748b 	.word	0x0800748b
 8006f84:	08007b3b 	.word	0x08007b3b
 8006f88:	08007b3b 	.word	0x08007b3b
 8006f8c:	08007b3b 	.word	0x08007b3b
 8006f90:	08007503 	.word	0x08007503
 8006f94:	08007b3b 	.word	0x08007b3b
 8006f98:	08007b3b 	.word	0x08007b3b
 8006f9c:	08007b3b 	.word	0x08007b3b
 8006fa0:	08007b3b 	.word	0x08007b3b
 8006fa4:	08007b3b 	.word	0x08007b3b
 8006fa8:	08007b3b 	.word	0x08007b3b
 8006fac:	08007b3b 	.word	0x08007b3b
 8006fb0:	08007587 	.word	0x08007587
 8006fb4:	08007b3b 	.word	0x08007b3b
 8006fb8:	08007b3b 	.word	0x08007b3b
 8006fbc:	08007b3b 	.word	0x08007b3b
 8006fc0:	08007b3b 	.word	0x08007b3b
 8006fc4:	08007b3b 	.word	0x08007b3b
 8006fc8:	08007b3b 	.word	0x08007b3b
 8006fcc:	08007b3b 	.word	0x08007b3b
 8006fd0:	08007b3b 	.word	0x08007b3b
 8006fd4:	08007b3b 	.word	0x08007b3b
 8006fd8:	08007b3b 	.word	0x08007b3b
 8006fdc:	08007b3b 	.word	0x08007b3b
 8006fe0:	08007b3b 	.word	0x08007b3b
 8006fe4:	08007b3b 	.word	0x08007b3b
 8006fe8:	08007b3b 	.word	0x08007b3b
 8006fec:	08007b3b 	.word	0x08007b3b
 8006ff0:	08007609 	.word	0x08007609
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	f000 83e8 	beq.w	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006ffc:	f000 bd9d 	b.w	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007000:	40021000 	.word	0x40021000
 8007004:	0003d090 	.word	0x0003d090
 8007008:	0800c8fc 	.word	0x0800c8fc
 800700c:	00f42400 	.word	0x00f42400
 8007010:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007014:	69b9      	ldr	r1, [r7, #24]
 8007016:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800701a:	f000 ff83 	bl	8007f24 <RCCEx_GetSAIxPeriphCLKFreq>
 800701e:	61f8      	str	r0, [r7, #28]
      break;
 8007020:	f000 bd8e 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007024:	69b9      	ldr	r1, [r7, #24]
 8007026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800702a:	f000 ff7b 	bl	8007f24 <RCCEx_GetSAIxPeriphCLKFreq>
 800702e:	61f8      	str	r0, [r7, #28]
      break;
 8007030:	f000 bd86 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007034:	4b9a      	ldr	r3, [pc, #616]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007046:	d015      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800704e:	f200 8092 	bhi.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007058:	d029      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007060:	f200 8089 	bhi.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d07b      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007070:	d04a      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007072:	e080      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007074:	4b8a      	ldr	r3, [pc, #552]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b02      	cmp	r3, #2
 800707e:	d17d      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007080:	4b87      	ldr	r3, [pc, #540]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800708c:	4b84      	ldr	r3, [pc, #528]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	091b      	lsrs	r3, r3, #4
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	e005      	b.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8007098:	4b81      	ldr	r3, [pc, #516]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	4a7f      	ldr	r2, [pc, #508]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	61fb      	str	r3, [r7, #28]
          break;
 80070ac:	e066      	b.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070ae:	4b7c      	ldr	r3, [pc, #496]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ba:	d162      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80070bc:	4b78      	ldr	r3, [pc, #480]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c8:	d15b      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070ca:	4b75      	ldr	r3, [pc, #468]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	fb03 f202 	mul.w	r2, r3, r2
 80070de:	4b70      	ldr	r3, [pc, #448]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	091b      	lsrs	r3, r3, #4
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	3301      	adds	r3, #1
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80070f0:	4b6b      	ldr	r3, [pc, #428]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	0d5b      	lsrs	r3, r3, #21
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	3301      	adds	r3, #1
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	61fb      	str	r3, [r7, #28]
          break;
 8007106:	e03c      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007108:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007114:	d138      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007116:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007122:	d131      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007124:	4b5e      	ldr	r3, [pc, #376]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	fb03 f202 	mul.w	r2, r3, r2
 8007138:	4b59      	ldr	r3, [pc, #356]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	3301      	adds	r3, #1
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800714a:	4b55      	ldr	r3, [pc, #340]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	0d5b      	lsrs	r3, r3, #21
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	3301      	adds	r3, #1
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	fbb2 f3f3 	udiv	r3, r2, r3
 800715e:	61fb      	str	r3, [r7, #28]
          break;
 8007160:	e012      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007162:	4b4f      	ldr	r3, [pc, #316]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b02      	cmp	r3, #2
 800716e:	d10e      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007170:	4b4d      	ldr	r3, [pc, #308]	; (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007172:	61fb      	str	r3, [r7, #28]
          break;
 8007174:	e00b      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8007176:	bf00      	nop
 8007178:	f000 bce2 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800717c:	bf00      	nop
 800717e:	f000 bcdf 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007182:	bf00      	nop
 8007184:	f000 bcdc 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007188:	bf00      	nop
 800718a:	f000 bcd9 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800718e:	bf00      	nop
        break;
 8007190:	f000 bcd6 	b.w	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007194:	4b42      	ldr	r3, [pc, #264]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800719a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a2:	d13d      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071a4:	4b3e      	ldr	r3, [pc, #248]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071b0:	f040 84c5 	bne.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80071b4:	4b3a      	ldr	r3, [pc, #232]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	f040 84bd 	bne.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80071c4:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ce:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	fb03 f202 	mul.w	r2, r3, r2
 80071d8:	4b31      	ldr	r3, [pc, #196]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	091b      	lsrs	r3, r3, #4
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	3301      	adds	r3, #1
 80071e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80071ea:	4b2d      	ldr	r3, [pc, #180]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	0edb      	lsrs	r3, r3, #27
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80071fc:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8007208:	2311      	movs	r3, #17
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	e001      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800720e:	2307      	movs	r3, #7
 8007210:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	61fb      	str	r3, [r7, #28]
      break;
 800721c:	f000 bc8f 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007232:	d016      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800723a:	f200 809b 	bhi.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007244:	d032      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724c:	f200 8092 	bhi.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8084 	beq.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800725e:	d052      	beq.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007260:	e088      	b.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	f040 8084 	bne.w	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	e005      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729a:	61fb      	str	r3, [r7, #28]
          break;
 800729c:	e06c      	b.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800729e:	bf00      	nop
 80072a0:	40021000 	.word	0x40021000
 80072a4:	0800c8fc 	.word	0x0800c8fc
 80072a8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072ac:	4ba5      	ldr	r3, [pc, #660]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b8:	d160      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80072ba:	4ba2      	ldr	r3, [pc, #648]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c6:	d159      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80072c8:	4b9e      	ldr	r3, [pc, #632]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	fb03 f202 	mul.w	r2, r3, r2
 80072dc:	4b99      	ldr	r3, [pc, #612]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3301      	adds	r3, #1
 80072e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80072ee:	4b95      	ldr	r3, [pc, #596]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	0d5b      	lsrs	r3, r3, #21
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	3301      	adds	r3, #1
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007302:	61fb      	str	r3, [r7, #28]
          break;
 8007304:	e03a      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007306:	4b8f      	ldr	r3, [pc, #572]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007312:	d135      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007314:	4b8b      	ldr	r3, [pc, #556]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007320:	d12e      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007322:	4b88      	ldr	r3, [pc, #544]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	fb03 f202 	mul.w	r2, r3, r2
 8007336:	4b83      	ldr	r3, [pc, #524]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	3301      	adds	r3, #1
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007348:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	0d5b      	lsrs	r3, r3, #21
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	3301      	adds	r3, #1
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	fbb2 f3f3 	udiv	r3, r2, r3
 800735c:	61fb      	str	r3, [r7, #28]
          break;
 800735e:	e00f      	b.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007360:	4b78      	ldr	r3, [pc, #480]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b02      	cmp	r3, #2
 800736c:	d10a      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800736e:	4b76      	ldr	r3, [pc, #472]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007370:	61fb      	str	r3, [r7, #28]
          break;
 8007372:	e007      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007374:	bf00      	nop
 8007376:	e3e2      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007378:	bf00      	nop
 800737a:	e3e0      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800737c:	bf00      	nop
 800737e:	e3de      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007380:	bf00      	nop
 8007382:	e3dc      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007384:	bf00      	nop
      break;
 8007386:	e3da      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007388:	4b6e      	ldr	r3, [pc, #440]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b03      	cmp	r3, #3
 8007398:	d827      	bhi.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073b9 	.word	0x080073b9
 80073a8:	080073c1 	.word	0x080073c1
 80073ac:	080073d5 	.word	0x080073d5
          frequency = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7ff f8a8 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 80073b4:	61f8      	str	r0, [r7, #28]
          break;
 80073b6:	e01d      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80073b8:	f7fe fff6 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80073bc:	61f8      	str	r0, [r7, #28]
          break;
 80073be:	e019      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c0:	4b60      	ldr	r3, [pc, #384]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073cc:	d10f      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80073ce:	4b5f      	ldr	r3, [pc, #380]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073d0:	61fb      	str	r3, [r7, #28]
          break;
 80073d2:	e00c      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073d4:	4b5b      	ldr	r3, [pc, #364]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d107      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80073e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e6:	61fb      	str	r3, [r7, #28]
          break;
 80073e8:	e003      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80073ea:	bf00      	nop
 80073ec:	e3a8      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073ee:	bf00      	nop
 80073f0:	e3a6      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80073f2:	bf00      	nop
        break;
 80073f4:	e3a4      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80073f6:	4b53      	ldr	r3, [pc, #332]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	f003 030c 	and.w	r3, r3, #12
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b0c      	cmp	r3, #12
 8007406:	d83a      	bhi.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007408:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007445 	.word	0x08007445
 8007414:	0800747f 	.word	0x0800747f
 8007418:	0800747f 	.word	0x0800747f
 800741c:	0800747f 	.word	0x0800747f
 8007420:	0800744d 	.word	0x0800744d
 8007424:	0800747f 	.word	0x0800747f
 8007428:	0800747f 	.word	0x0800747f
 800742c:	0800747f 	.word	0x0800747f
 8007430:	08007455 	.word	0x08007455
 8007434:	0800747f 	.word	0x0800747f
 8007438:	0800747f 	.word	0x0800747f
 800743c:	0800747f 	.word	0x0800747f
 8007440:	08007469 	.word	0x08007469
          frequency = HAL_RCC_GetPCLK1Freq();
 8007444:	f7ff f848 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007448:	61f8      	str	r0, [r7, #28]
          break;
 800744a:	e01d      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800744c:	f7fe ffac 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007450:	61f8      	str	r0, [r7, #28]
          break;
 8007452:	e019      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007454:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d10f      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007462:	4b3a      	ldr	r3, [pc, #232]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007464:	61fb      	str	r3, [r7, #28]
          break;
 8007466:	e00c      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007468:	4b36      	ldr	r3, [pc, #216]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b02      	cmp	r3, #2
 8007474:	d107      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8007476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747a:	61fb      	str	r3, [r7, #28]
          break;
 800747c:	e003      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800747e:	bf00      	nop
 8007480:	e35e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007482:	bf00      	nop
 8007484:	e35c      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007486:	bf00      	nop
        break;
 8007488:	e35a      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b30      	cmp	r3, #48	; 0x30
 800749a:	d021      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b30      	cmp	r3, #48	; 0x30
 80074a0:	d829      	bhi.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d011      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d823      	bhi.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b10      	cmp	r3, #16
 80074b8:	d004      	beq.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80074ba:	e01c      	b.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80074bc:	f7ff f80c 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80074c0:	61f8      	str	r0, [r7, #28]
          break;
 80074c2:	e01d      	b.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80074c4:	f7fe ff70 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80074c8:	61f8      	str	r0, [r7, #28]
          break;
 80074ca:	e019      	b.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d10f      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80074da:	4b1c      	ldr	r3, [pc, #112]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80074dc:	61fb      	str	r3, [r7, #28]
          break;
 80074de:	e00c      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074e0:	4b18      	ldr	r3, [pc, #96]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d107      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f2:	61fb      	str	r3, [r7, #28]
          break;
 80074f4:	e003      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80074f6:	bf00      	nop
 80074f8:	e322      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80074fa:	bf00      	nop
 80074fc:	e320      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80074fe:	bf00      	nop
        break;
 8007500:	e31e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2bc0      	cmp	r3, #192	; 0xc0
 8007512:	d027      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2bc0      	cmp	r3, #192	; 0xc0
 8007518:	d82f      	bhi.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d017      	beq.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b80      	cmp	r3, #128	; 0x80
 8007524:	d829      	bhi.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d004      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007532:	e022      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fe ffd0 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007538:	61f8      	str	r0, [r7, #28]
          break;
 800753a:	e023      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800753c:	f7fe ff34 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007540:	61f8      	str	r0, [r7, #28]
          break;
 8007542:	e01f      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007544:	40021000 	.word	0x40021000
 8007548:	02dc6c00 	.word	0x02dc6c00
 800754c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007550:	4b9b      	ldr	r3, [pc, #620]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d10f      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800755e:	4b99      	ldr	r3, [pc, #612]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007560:	61fb      	str	r3, [r7, #28]
          break;
 8007562:	e00c      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007564:	4b96      	ldr	r3, [pc, #600]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b02      	cmp	r3, #2
 8007570:	d107      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007576:	61fb      	str	r3, [r7, #28]
          break;
 8007578:	e003      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800757a:	bf00      	nop
 800757c:	e2e0      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800757e:	bf00      	nop
 8007580:	e2de      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007582:	bf00      	nop
        break;
 8007584:	e2dc      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007586:	4b8e      	ldr	r3, [pc, #568]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007598:	d025      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a0:	d82c      	bhi.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a8:	d013      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b0:	d824      	bhi.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075be:	d004      	beq.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80075c0:	e01c      	b.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80075c2:	f7fe ff89 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80075c6:	61f8      	str	r0, [r7, #28]
          break;
 80075c8:	e01d      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80075ca:	f7fe feed 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80075ce:	61f8      	str	r0, [r7, #28]
          break;
 80075d0:	e019      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075d2:	4b7b      	ldr	r3, [pc, #492]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075de:	d10f      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80075e0:	4b78      	ldr	r3, [pc, #480]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80075e2:	61fb      	str	r3, [r7, #28]
          break;
 80075e4:	e00c      	b.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075e6:	4b76      	ldr	r3, [pc, #472]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d107      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80075f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f8:	61fb      	str	r3, [r7, #28]
          break;
 80075fa:	e003      	b.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80075fc:	bf00      	nop
 80075fe:	e29f      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007600:	bf00      	nop
 8007602:	e29d      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007604:	bf00      	nop
        break;
 8007606:	e29b      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007608:	4b6d      	ldr	r3, [pc, #436]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800761a:	d025      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007622:	d82c      	bhi.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762a:	d013      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007632:	d824      	bhi.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007640:	d004      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007642:	e01c      	b.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007644:	f7fe ff48 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007648:	61f8      	str	r0, [r7, #28]
          break;
 800764a:	e01d      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800764c:	f7fe feac 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007650:	61f8      	str	r0, [r7, #28]
          break;
 8007652:	e019      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007654:	4b5a      	ldr	r3, [pc, #360]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007660:	d10f      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007662:	4b58      	ldr	r3, [pc, #352]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007664:	61fb      	str	r3, [r7, #28]
          break;
 8007666:	e00c      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007668:	4b55      	ldr	r3, [pc, #340]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800766a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d107      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800767a:	61fb      	str	r3, [r7, #28]
          break;
 800767c:	e003      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800767e:	bf00      	nop
 8007680:	e25e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007682:	bf00      	nop
 8007684:	e25c      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007686:	bf00      	nop
        break;
 8007688:	e25a      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800768a:	4b4d      	ldr	r3, [pc, #308]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800769c:	d007      	beq.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a4:	d12f      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fe fe7f 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80076aa:	61f8      	str	r0, [r7, #28]
          break;
 80076ac:	e02e      	b.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80076ae:	4b44      	ldr	r3, [pc, #272]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ba:	d126      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80076bc:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80076c8:	4b3d      	ldr	r3, [pc, #244]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	fb03 f202 	mul.w	r2, r3, r2
 80076dc:	4b38      	ldr	r3, [pc, #224]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	3301      	adds	r3, #1
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80076ee:	4b34      	ldr	r3, [pc, #208]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	0e5b      	lsrs	r3, r3, #25
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	3301      	adds	r3, #1
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	61fb      	str	r3, [r7, #28]
          break;
 8007704:	e001      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007706:	bf00      	nop
 8007708:	e21a      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800770a:	bf00      	nop
        break;
 800770c:	e218      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800770e:	4b2c      	ldr	r3, [pc, #176]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007720:	f7fe fef0 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 8007724:	61f8      	str	r0, [r7, #28]
        break;
 8007726:	e20b      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007728:	f7fe fe3e 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800772c:	61f8      	str	r0, [r7, #28]
        break;
 800772e:	e207      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007730:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007736:	f003 0318 	and.w	r3, r3, #24
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b10      	cmp	r3, #16
 8007740:	d010      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b10      	cmp	r3, #16
 8007746:	d834      	bhi.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b08      	cmp	r3, #8
 8007752:	d024      	beq.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007754:	e02d      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007756:	69b9      	ldr	r1, [r7, #24]
 8007758:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800775c:	f000 fbe2 	bl	8007f24 <RCCEx_GetSAIxPeriphCLKFreq>
 8007760:	61f8      	str	r0, [r7, #28]
          break;
 8007762:	e02b      	b.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007764:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d122      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007770:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800777c:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	e005      	b.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007788:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800778a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779a:	61fb      	str	r3, [r7, #28]
          break;
 800779c:	e00b      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80077ae:	61fb      	str	r3, [r7, #28]
          break;
 80077b0:	e003      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80077b2:	bf00      	nop
 80077b4:	e1c4      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077b6:	bf00      	nop
 80077b8:	e1c2      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077ba:	bf00      	nop
        break;
 80077bc:	e1c0      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80077be:	bf00      	nop
 80077c0:	40021000 	.word	0x40021000
 80077c4:	00f42400 	.word	0x00f42400
 80077c8:	0800c8fc 	.word	0x0800c8fc
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80077cc:	4b96      	ldr	r3, [pc, #600]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077de:	d013      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e6:	d819      	bhi.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d004      	beq.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80077f6:	e011      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077f8:	f7fe fe6e 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80077fc:	61f8      	str	r0, [r7, #28]
          break;
 80077fe:	e010      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007800:	f7fe fdd2 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007804:	61f8      	str	r0, [r7, #28]
          break;
 8007806:	e00c      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007808:	4b87      	ldr	r3, [pc, #540]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007814:	d104      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007816:	4b85      	ldr	r3, [pc, #532]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007818:	61fb      	str	r3, [r7, #28]
          break;
 800781a:	e001      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800781c:	bf00      	nop
 800781e:	e18f      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007820:	bf00      	nop
        break;
 8007822:	e18d      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007824:	4b80      	ldr	r3, [pc, #512]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d013      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783e:	d819      	bhi.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800784e:	e011      	b.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fe fe42 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007854:	61f8      	str	r0, [r7, #28]
          break;
 8007856:	e010      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007858:	f7fe fda6 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800785c:	61f8      	str	r0, [r7, #28]
          break;
 800785e:	e00c      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007860:	4b71      	ldr	r3, [pc, #452]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786c:	d104      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800786e:	4b6f      	ldr	r3, [pc, #444]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007870:	61fb      	str	r3, [r7, #28]
          break;
 8007872:	e001      	b.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007874:	bf00      	nop
 8007876:	e163      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007878:	bf00      	nop
        break;
 800787a:	e161      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800787c:	4b6a      	ldr	r3, [pc, #424]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d013      	beq.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007896:	d819      	bhi.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a4:	d004      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80078a6:	e011      	b.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80078a8:	f7fe fe16 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80078ac:	61f8      	str	r0, [r7, #28]
          break;
 80078ae:	e010      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80078b0:	f7fe fd7a 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 80078b4:	61f8      	str	r0, [r7, #28]
          break;
 80078b6:	e00c      	b.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078b8:	4b5b      	ldr	r3, [pc, #364]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c4:	d104      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80078c6:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80078c8:	61fb      	str	r3, [r7, #28]
          break;
 80078ca:	e001      	b.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80078cc:	bf00      	nop
 80078ce:	e137      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078d0:	bf00      	nop
        break;
 80078d2:	e135      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80078d4:	4b54      	ldr	r3, [pc, #336]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d011      	beq.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d818      	bhi.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d004      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80078f8:	e011      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80078fa:	f7fe fded 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80078fe:	61f8      	str	r0, [r7, #28]
          break;
 8007900:	e010      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007902:	f7fe fd51 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007906:	61f8      	str	r0, [r7, #28]
          break;
 8007908:	e00c      	b.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800790a:	4b47      	ldr	r3, [pc, #284]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007916:	d104      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007918:	4b44      	ldr	r3, [pc, #272]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800791a:	61fb      	str	r3, [r7, #28]
          break;
 800791c:	e001      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800791e:	bf00      	nop
 8007920:	e10e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007922:	bf00      	nop
        break;
 8007924:	e10c      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007926:	4b40      	ldr	r3, [pc, #256]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007938:	d02c      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007940:	d833      	bhi.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007948:	d01a      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007950:	d82b      	bhi.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800795e:	d004      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007960:	e023      	b.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007962:	f7fe fdb9 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007966:	61f8      	str	r0, [r7, #28]
          break;
 8007968:	e026      	b.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800796a:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800796c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b02      	cmp	r3, #2
 8007976:	d11a      	bne.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007978:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800797c:	61fb      	str	r3, [r7, #28]
          break;
 800797e:	e016      	b.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007980:	4b29      	ldr	r3, [pc, #164]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798c:	d111      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800798e:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007990:	61fb      	str	r3, [r7, #28]
          break;
 8007992:	e00e      	b.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d109      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079a6:	61fb      	str	r3, [r7, #28]
          break;
 80079a8:	e005      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80079aa:	bf00      	nop
 80079ac:	e0c8      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079ae:	bf00      	nop
 80079b0:	e0c6      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079b2:	bf00      	nop
 80079b4:	e0c4      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079b6:	bf00      	nop
        break;
 80079b8:	e0c2      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079cc:	d030      	beq.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079d4:	d837      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079dc:	d01a      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079e4:	d82f      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f2:	d004      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80079f4:	e027      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079f6:	f7fe fd6f 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80079fa:	61f8      	str	r0, [r7, #28]
          break;
 80079fc:	e02a      	b.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d11e      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007a0c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a10:	61fb      	str	r3, [r7, #28]
          break;
 8007a12:	e01a      	b.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a14:	4b04      	ldr	r3, [pc, #16]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a20:	d115      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007a22:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007a24:	61fb      	str	r3, [r7, #28]
          break;
 8007a26:	e012      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a30:	4b46      	ldr	r3, [pc, #280]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	61fb      	str	r3, [r7, #28]
          break;
 8007a44:	e005      	b.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007a46:	bf00      	nop
 8007a48:	e07a      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a4a:	bf00      	nop
 8007a4c:	e078      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a4e:	bf00      	nop
 8007a50:	e076      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a52:	bf00      	nop
        break;
 8007a54:	e074      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a56:	4b3d      	ldr	r3, [pc, #244]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a68:	d02c      	beq.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a70:	d855      	bhi.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7e:	d004      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007a80:	e04d      	b.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a82:	f7fe fc91 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8007a86:	61f8      	str	r0, [r7, #28]
          break;
 8007a88:	e04e      	b.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007a8a:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d145      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007a96:	4b2d      	ldr	r3, [pc, #180]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007aa2:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	091b      	lsrs	r3, r3, #4
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	e005      	b.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007aae:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	4a25      	ldr	r2, [pc, #148]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac0:	61fb      	str	r3, [r7, #28]
          break;
 8007ac2:	e02e      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007ac4:	4b21      	ldr	r3, [pc, #132]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ad0:	d129      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ade:	d122      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ae0:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	fb03 f202 	mul.w	r2, r3, r2
 8007af4:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	091b      	lsrs	r3, r3, #4
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	3301      	adds	r3, #1
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	0d5b      	lsrs	r3, r3, #21
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	3301      	adds	r3, #1
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	61fb      	str	r3, [r7, #28]
          break;
 8007b1c:	e003      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007b1e:	bf00      	nop
 8007b20:	e00e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b22:	bf00      	nop
 8007b24:	e00c      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b26:	bf00      	nop
        break;
 8007b28:	e00a      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e008      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b2e:	bf00      	nop
 8007b30:	e006      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b32:	bf00      	nop
 8007b34:	e004      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b36:	bf00      	nop
 8007b38:	e002      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e000      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b3e:	bf00      	nop
    }
  }

  return(frequency);
 8007b40:	69fb      	ldr	r3, [r7, #28]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	0800c8fc 	.word	0x0800c8fc

08007b54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b62:	4b72      	ldr	r3, [pc, #456]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b6e:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f003 0203 	and.w	r2, r3, #3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d103      	bne.n	8007b86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
       ||
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d142      	bne.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
 8007b8a:	e03f      	b.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d018      	beq.n	8007bc6 <RCCEx_PLLSAI1_Config+0x72>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d825      	bhi.n	8007be4 <RCCEx_PLLSAI1_Config+0x90>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d002      	beq.n	8007ba2 <RCCEx_PLLSAI1_Config+0x4e>
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d009      	beq.n	8007bb4 <RCCEx_PLLSAI1_Config+0x60>
 8007ba0:	e020      	b.n	8007be4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ba2:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11d      	bne.n	8007bea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bb2:	e01a      	b.n	8007bea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bb4:	4b5d      	ldr	r3, [pc, #372]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d116      	bne.n	8007bee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc4:	e013      	b.n	8007bee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bc6:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10f      	bne.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bd2:	4b56      	ldr	r3, [pc, #344]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007be2:	e006      	b.n	8007bf2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
      break;
 8007be8:	e004      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bea:	bf00      	nop
 8007bec:	e002      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bee:	bf00      	nop
 8007bf0:	e000      	b.n	8007bf4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d108      	bne.n	8007c0c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007bfa:	4b4c      	ldr	r3, [pc, #304]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f023 0203 	bic.w	r2, r3, #3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4949      	ldr	r1, [pc, #292]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f040 8086 	bne.w	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c14:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a44      	ldr	r2, [pc, #272]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c20:	f7fb fde8 	bl	80037f4 <HAL_GetTick>
 8007c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c26:	e009      	b.n	8007c3c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c28:	f7fb fde4 	bl	80037f4 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d902      	bls.n	8007c3c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	73fb      	strb	r3, [r7, #15]
        break;
 8007c3a:	e005      	b.n	8007c48 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ef      	bne.n	8007c28 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d168      	bne.n	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d113      	bne.n	8007c7c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c54:	4b35      	ldr	r3, [pc, #212]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	4b35      	ldr	r3, [pc, #212]	; (8007d30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6892      	ldr	r2, [r2, #8]
 8007c60:	0211      	lsls	r1, r2, #8
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68d2      	ldr	r2, [r2, #12]
 8007c66:	06d2      	lsls	r2, r2, #27
 8007c68:	4311      	orrs	r1, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6852      	ldr	r2, [r2, #4]
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	0112      	lsls	r2, r2, #4
 8007c72:	430a      	orrs	r2, r1
 8007c74:	492d      	ldr	r1, [pc, #180]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	610b      	str	r3, [r1, #16]
 8007c7a:	e02d      	b.n	8007cd8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d115      	bne.n	8007cae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c82:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6892      	ldr	r2, [r2, #8]
 8007c8e:	0211      	lsls	r1, r2, #8
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6912      	ldr	r2, [r2, #16]
 8007c94:	0852      	lsrs	r2, r2, #1
 8007c96:	3a01      	subs	r2, #1
 8007c98:	0552      	lsls	r2, r2, #21
 8007c9a:	4311      	orrs	r1, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6852      	ldr	r2, [r2, #4]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	0112      	lsls	r2, r2, #4
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	4921      	ldr	r1, [pc, #132]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	610b      	str	r3, [r1, #16]
 8007cac:	e014      	b.n	8007cd8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6892      	ldr	r2, [r2, #8]
 8007cba:	0211      	lsls	r1, r2, #8
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6952      	ldr	r2, [r2, #20]
 8007cc0:	0852      	lsrs	r2, r2, #1
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	0652      	lsls	r2, r2, #25
 8007cc6:	4311      	orrs	r1, r2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6852      	ldr	r2, [r2, #4]
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	0112      	lsls	r2, r2, #4
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	4916      	ldr	r1, [pc, #88]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cd8:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a13      	ldr	r2, [pc, #76]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fb fd86 	bl	80037f4 <HAL_GetTick>
 8007ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cea:	e009      	b.n	8007d00 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cec:	f7fb fd82 	bl	80037f4 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d902      	bls.n	8007d00 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8007cfe:	e005      	b.n	8007d0c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0ef      	beq.n	8007cec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	4904      	ldr	r1, [pc, #16]	; (8007d2c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	07ff800f 	.word	0x07ff800f
 8007d34:	ff9f800f 	.word	0xff9f800f
 8007d38:	f9ff800f 	.word	0xf9ff800f

08007d3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d4a:	4b72      	ldr	r3, [pc, #456]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00e      	beq.n	8007d74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0203 	and.w	r2, r3, #3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d103      	bne.n	8007d6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
       ||
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d142      	bne.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e03f      	b.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d018      	beq.n	8007dae <RCCEx_PLLSAI2_Config+0x72>
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d825      	bhi.n	8007dcc <RCCEx_PLLSAI2_Config+0x90>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d002      	beq.n	8007d8a <RCCEx_PLLSAI2_Config+0x4e>
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d009      	beq.n	8007d9c <RCCEx_PLLSAI2_Config+0x60>
 8007d88:	e020      	b.n	8007dcc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d8a:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11d      	bne.n	8007dd2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d9a:	e01a      	b.n	8007dd2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d9c:	4b5d      	ldr	r3, [pc, #372]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d116      	bne.n	8007dd6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dac:	e013      	b.n	8007dd6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10f      	bne.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dba:	4b56      	ldr	r3, [pc, #344]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dca:	e006      	b.n	8007dda <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd0:	e004      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dda:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007de2:	4b4c      	ldr	r3, [pc, #304]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f023 0203 	bic.w	r2, r3, #3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4949      	ldr	r1, [pc, #292]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8086 	bne.w	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007dfc:	4b45      	ldr	r3, [pc, #276]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a44      	ldr	r2, [pc, #272]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e08:	f7fb fcf4 	bl	80037f4 <HAL_GetTick>
 8007e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e0e:	e009      	b.n	8007e24 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e10:	f7fb fcf0 	bl	80037f4 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d902      	bls.n	8007e24 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	73fb      	strb	r3, [r7, #15]
        break;
 8007e22:	e005      	b.n	8007e30 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e24:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1ef      	bne.n	8007e10 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d168      	bne.n	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d113      	bne.n	8007e64 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e3c:	4b35      	ldr	r3, [pc, #212]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e3e:	695a      	ldr	r2, [r3, #20]
 8007e40:	4b35      	ldr	r3, [pc, #212]	; (8007f18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6892      	ldr	r2, [r2, #8]
 8007e48:	0211      	lsls	r1, r2, #8
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68d2      	ldr	r2, [r2, #12]
 8007e4e:	06d2      	lsls	r2, r2, #27
 8007e50:	4311      	orrs	r1, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6852      	ldr	r2, [r2, #4]
 8007e56:	3a01      	subs	r2, #1
 8007e58:	0112      	lsls	r2, r2, #4
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	492d      	ldr	r1, [pc, #180]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	614b      	str	r3, [r1, #20]
 8007e62:	e02d      	b.n	8007ec0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d115      	bne.n	8007e96 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6892      	ldr	r2, [r2, #8]
 8007e76:	0211      	lsls	r1, r2, #8
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6912      	ldr	r2, [r2, #16]
 8007e7c:	0852      	lsrs	r2, r2, #1
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	0552      	lsls	r2, r2, #21
 8007e82:	4311      	orrs	r1, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6852      	ldr	r2, [r2, #4]
 8007e88:	3a01      	subs	r2, #1
 8007e8a:	0112      	lsls	r2, r2, #4
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	4921      	ldr	r1, [pc, #132]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	614b      	str	r3, [r1, #20]
 8007e94:	e014      	b.n	8007ec0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6892      	ldr	r2, [r2, #8]
 8007ea2:	0211      	lsls	r1, r2, #8
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6952      	ldr	r2, [r2, #20]
 8007ea8:	0852      	lsrs	r2, r2, #1
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	0652      	lsls	r2, r2, #25
 8007eae:	4311      	orrs	r1, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6852      	ldr	r2, [r2, #4]
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0112      	lsls	r2, r2, #4
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	4916      	ldr	r1, [pc, #88]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ec0:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ecc:	f7fb fc92 	bl	80037f4 <HAL_GetTick>
 8007ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ed2:	e009      	b.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ed4:	f7fb fc8e 	bl	80037f4 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d902      	bls.n	8007ee8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8007ee6:	e005      	b.n	8007ef4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0ef      	beq.n	8007ed4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	4904      	ldr	r1, [pc, #16]	; (8007f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	40021000 	.word	0x40021000
 8007f18:	07ff800f 	.word	0x07ff800f
 8007f1c:	ff9f800f 	.word	0xff9f800f
 8007f20:	f9ff800f 	.word	0xf9ff800f

08007f24 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f40:	d10b      	bne.n	8007f5a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f42:	4b7e      	ldr	r3, [pc, #504]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f48:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007f4c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b60      	cmp	r3, #96	; 0x60
 8007f52:	d112      	bne.n	8007f7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f54:	4b7a      	ldr	r3, [pc, #488]	; (8008140 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007f56:	61fb      	str	r3, [r7, #28]
 8007f58:	e00f      	b.n	8007f7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f60:	d10b      	bne.n	8007f7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f62:	4b76      	ldr	r3, [pc, #472]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f6c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f74:	d101      	bne.n	8007f7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007f76:	4b72      	ldr	r3, [pc, #456]	; (8008140 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007f78:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 80d6 	bne.w	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b40      	cmp	r3, #64	; 0x40
 8007f8a:	d003      	beq.n	8007f94 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f92:	d13b      	bne.n	800800c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007f94:	4b69      	ldr	r3, [pc, #420]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa0:	f040 80c4 	bne.w	800812c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007fa4:	4b65      	ldr	r3, [pc, #404]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80bd 	beq.w	800812c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007fb2:	4b62      	ldr	r3, [pc, #392]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	091b      	lsrs	r3, r3, #4
 8007fb8:	f003 030f 	and.w	r3, r3, #15
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007fc6:	4b5d      	ldr	r3, [pc, #372]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007fd2:	4b5a      	ldr	r3, [pc, #360]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	0edb      	lsrs	r3, r3, #27
 8007fd8:	f003 031f 	and.w	r3, r3, #31
 8007fdc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007fe4:	4b55      	ldr	r3, [pc, #340]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007ff0:	2311      	movs	r3, #17
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e001      	b.n	8007ffa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007ff6:	2307      	movs	r3, #7
 8007ff8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	fb03 f202 	mul.w	r2, r3, r2
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800800a:	e08f      	b.n	800812c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d13a      	bne.n	8008088 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008012:	4b4a      	ldr	r3, [pc, #296]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801e:	f040 8086 	bne.w	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008022:	4b46      	ldr	r3, [pc, #280]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d07f      	beq.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800802e:	4b43      	ldr	r3, [pc, #268]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	091b      	lsrs	r3, r3, #4
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	3301      	adds	r3, #1
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008040:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008042:	4b3e      	ldr	r3, [pc, #248]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	0edb      	lsrs	r3, r3, #27
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008060:	4b36      	ldr	r3, [pc, #216]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800806c:	2311      	movs	r3, #17
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e001      	b.n	8008076 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008072:	2307      	movs	r3, #7
 8008074:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	fb03 f202 	mul.w	r2, r3, r2
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	e052      	b.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b80      	cmp	r3, #128	; 0x80
 800808c:	d003      	beq.n	8008096 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d109      	bne.n	80080aa <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008096:	4b29      	ldr	r3, [pc, #164]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a2:	d144      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80080a4:	4b27      	ldr	r3, [pc, #156]	; (8008144 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80080a6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080a8:	e041      	b.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d003      	beq.n	80080b8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b6:	d13a      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80080b8:	4b20      	ldr	r3, [pc, #128]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c4:	d133      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80080c6:	4b1d      	ldr	r3, [pc, #116]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d02d      	beq.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80080d2:	4b1a      	ldr	r3, [pc, #104]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	091b      	lsrs	r3, r3, #4
 80080d8:	f003 030f 	and.w	r3, r3, #15
 80080dc:	3301      	adds	r3, #1
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80080e6:	4b15      	ldr	r3, [pc, #84]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	0edb      	lsrs	r3, r3, #27
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008110:	2311      	movs	r3, #17
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e001      	b.n	800811a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008116:	2307      	movs	r3, #7
 8008118:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	fb03 f202 	mul.w	r2, r3, r2
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	e000      	b.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800812c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800812e:	69fb      	ldr	r3, [r7, #28]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3724      	adds	r7, #36	; 0x24
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	40021000 	.word	0x40021000
 8008140:	001fff68 	.word	0x001fff68
 8008144:	00f42400 	.word	0x00f42400

08008148 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d904      	bls.n	8008166 <HAL_SAI_InitProtocol+0x1e>
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3b03      	subs	r3, #3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d812      	bhi.n	800818a <HAL_SAI_InitProtocol+0x42>
 8008164:	e008      	b.n	8008178 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f9fb 	bl	8008568 <SAI_InitI2S>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]
      break;
 8008176:	e00b      	b.n	8008190 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 faa4 	bl	80086cc <SAI_InitPCM>
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]
      break;
 8008188:	e002      	b.n	8008190 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
      break;
 800818e:	bf00      	nop
  }

  if (status == HAL_OK)
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f808 	bl	80081ac <HAL_SAI_Init>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e1c7      	b.n	800854e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10e      	bne.n	80081e6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a81      	ldr	r2, [pc, #516]	; (80083d4 <HAL_SAI_Init+0x228>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d107      	bne.n	80081e2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d103      	bne.n	80081e2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e1b3      	b.n	800854e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fb f9c0 	bl	8003580 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fae5 	bl	80087d0 <SAI_Disable>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e19e      	b.n	800854e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d00c      	beq.n	800823a <HAL_SAI_Init+0x8e>
 8008220:	2b02      	cmp	r3, #2
 8008222:	d80d      	bhi.n	8008240 <HAL_SAI_Init+0x94>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_SAI_Init+0x82>
 8008228:	2b01      	cmp	r3, #1
 800822a:	d003      	beq.n	8008234 <HAL_SAI_Init+0x88>
 800822c:	e008      	b.n	8008240 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008232:	e008      	b.n	8008246 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008234:	2310      	movs	r3, #16
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008238:	e005      	b.n	8008246 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800823a:	2320      	movs	r3, #32
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800823e:	e002      	b.n	8008246 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008244:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d81d      	bhi.n	800828a <HAL_SAI_Init+0xde>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <HAL_SAI_Init+0xa8>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	08008265 	.word	0x08008265
 8008258:	0800826b 	.word	0x0800826b
 800825c:	08008273 	.word	0x08008273
 8008260:	0800827b 	.word	0x0800827b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	61fb      	str	r3, [r7, #28]
      break;
 8008268:	e012      	b.n	8008290 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800826a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800826e:	61fb      	str	r3, [r7, #28]
      break;
 8008270:	e00e      	b.n	8008290 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008272:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008276:	61fb      	str	r3, [r7, #28]
      break;
 8008278:	e00a      	b.n	8008290 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800827a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800827e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008288:	e002      	b.n	8008290 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
      break;
 800828e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a4f      	ldr	r2, [pc, #316]	; (80083d4 <HAL_SAI_Init+0x228>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <HAL_SAI_Init+0xf8>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a4e      	ldr	r2, [pc, #312]	; (80083d8 <HAL_SAI_Init+0x22c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d103      	bne.n	80082ac <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80082a4:	4a4d      	ldr	r2, [pc, #308]	; (80083dc <HAL_SAI_Init+0x230>)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	e002      	b.n	80082b2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80082ac:	4a4c      	ldr	r2, [pc, #304]	; (80083e0 <HAL_SAI_Init+0x234>)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d073      	beq.n	80083a2 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a45      	ldr	r2, [pc, #276]	; (80083d4 <HAL_SAI_Init+0x228>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <HAL_SAI_Init+0x122>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a43      	ldr	r2, [pc, #268]	; (80083d8 <HAL_SAI_Init+0x22c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d105      	bne.n	80082da <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80082ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80082d2:	f7fe fd1d 	bl	8006d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80082d6:	61b8      	str	r0, [r7, #24]
 80082d8:	e004      	b.n	80082e4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80082da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80082de:	f7fe fd17 	bl	8006d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80082e2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082ec:	d120      	bne.n	8008330 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d102      	bne.n	80082fc <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	e00a      	b.n	8008312 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008300:	2b08      	cmp	r3, #8
 8008302:	d103      	bne.n	800830c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	e002      	b.n	8008312 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008310:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	4619      	mov	r1, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	fbb1 f3f3 	udiv	r3, r1, r3
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e017      	b.n	8008360 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008338:	d101      	bne.n	800833e <HAL_SAI_Init+0x192>
 800833a:	2302      	movs	r3, #2
 800833c:	e000      	b.n	8008340 <HAL_SAI_Init+0x194>
 800833e:	2301      	movs	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	4619      	mov	r1, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	fb02 f303 	mul.w	r3, r2, r3
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	fbb1 f3f3 	udiv	r3, r1, r3
 800835e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <HAL_SAI_Init+0x238>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	08da      	lsrs	r2, r3, #3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800836e:	6979      	ldr	r1, [r7, #20]
 8008370:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <HAL_SAI_Init+0x238>)
 8008372:	fba3 2301 	umull	r2, r3, r3, r1
 8008376:	08da      	lsrs	r2, r3, #3
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	1aca      	subs	r2, r1, r3
 8008382:	2a08      	cmp	r2, #8
 8008384:	d904      	bls.n	8008390 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	2b04      	cmp	r3, #4
 8008396:	d104      	bne.n	80083a2 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	085a      	lsrs	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_SAI_Init+0x206>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d109      	bne.n	80083c6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_SAI_Init+0x212>
 80083ba:	2300      	movs	r3, #0
 80083bc:	e001      	b.n	80083c2 <HAL_SAI_Init+0x216>
 80083be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c2:	623b      	str	r3, [r7, #32]
 80083c4:	e012      	b.n	80083ec <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d10c      	bne.n	80083e8 <HAL_SAI_Init+0x23c>
 80083ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d2:	e00a      	b.n	80083ea <HAL_SAI_Init+0x23e>
 80083d4:	40015404 	.word	0x40015404
 80083d8:	40015424 	.word	0x40015424
 80083dc:	40015400 	.word	0x40015400
 80083e0:	40015800 	.word	0x40015800
 80083e4:	cccccccd 	.word	0xcccccccd
 80083e8:	2300      	movs	r3, #0
 80083ea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6819      	ldr	r1, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b58      	ldr	r3, [pc, #352]	; (8008558 <HAL_SAI_Init+0x3ac>)
 80083f8:	400b      	ands	r3, r1
 80083fa:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008410:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008416:	431a      	orrs	r2, r3
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8008424:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008430:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800843e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008456:	f023 030f 	bic.w	r3, r3, #15
 800845a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6859      	ldr	r1, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6899      	ldr	r1, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	4b35      	ldr	r3, [pc, #212]	; (800855c <HAL_SAI_Init+0x3b0>)
 8008486:	400b      	ands	r3, r1
 8008488:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6899      	ldr	r1, [r3, #8]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800849a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80084a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80084a6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ac:	3b01      	subs	r3, #1
 80084ae:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80084b0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68d9      	ldr	r1, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80084c8:	400b      	ands	r3, r1
 80084ca:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68d9      	ldr	r1, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084da:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084e2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e8:	3b01      	subs	r3, #1
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_SAI_Init+0x3b4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d119      	bne.n	8008534 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008500:	4b18      	ldr	r3, [pc, #96]	; (8008564 <HAL_SAI_Init+0x3b8>)
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <HAL_SAI_Init+0x3b8>)
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008512:	2b01      	cmp	r3, #1
 8008514:	d10e      	bne.n	8008534 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	3b01      	subs	r3, #1
 8008520:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008522:	4910      	ldr	r1, [pc, #64]	; (8008564 <HAL_SAI_Init+0x3b8>)
 8008524:	4313      	orrs	r3, r2
 8008526:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <HAL_SAI_Init+0x3b8>)
 800852a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852c:	4a0d      	ldr	r2, [pc, #52]	; (8008564 <HAL_SAI_Init+0x3b8>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	f805c010 	.word	0xf805c010
 800855c:	fff88000 	.word	0xfff88000
 8008560:	40015404 	.word	0x40015404
 8008564:	40015400 	.word	0x40015400

08008568 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <SAI_InitI2S+0x2e>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	64da      	str	r2, [r3, #76]	; 0x4c
 800859c:	e002      	b.n	80085a4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085aa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e077      	b.n	80086be <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80085e0:	661a      	str	r2, [r3, #96]	; 0x60
 80085e2:	e006      	b.n	80085f2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80085ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d84f      	bhi.n	8008698 <SAI_InitI2S+0x130>
 80085f8:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <SAI_InitI2S+0x98>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008611 	.word	0x08008611
 8008604:	08008633 	.word	0x08008633
 8008608:	08008655 	.word	0x08008655
 800860c:	08008677 	.word	0x08008677
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2280      	movs	r2, #128	; 0x80
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	085b      	lsrs	r3, r3, #1
 8008624:	011a      	lsls	r2, r3, #4
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2240      	movs	r2, #64	; 0x40
 800862e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008630:	e035      	b.n	800869e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2280      	movs	r2, #128	; 0x80
 8008636:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	019a      	lsls	r2, r3, #6
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2280      	movs	r2, #128	; 0x80
 8008650:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008652:	e024      	b.n	800869e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	22c0      	movs	r2, #192	; 0xc0
 8008658:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	019a      	lsls	r2, r3, #6
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2280      	movs	r2, #128	; 0x80
 8008672:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008674:	e013      	b.n	800869e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22e0      	movs	r2, #224	; 0xe0
 800867a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	019a      	lsls	r2, r3, #6
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2280      	movs	r2, #128	; 0x80
 8008694:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008696:	e002      	b.n	800869e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	75fb      	strb	r3, [r7, #23]
      break;
 800869c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d10b      	bne.n	80086bc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d102      	bne.n	80086b0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2210      	movs	r2, #16
 80086ae:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d102      	bne.n	80086bc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2208      	movs	r2, #8
 80086ba:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop

080086cc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <SAI_InitPCM+0x2e>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d103      	bne.n	8008702 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8008700:	e002      	b.n	8008708 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008714:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800871c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008730:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d103      	bne.n	8008740 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
 800873e:	e002      	b.n	8008746 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	220d      	movs	r2, #13
 8008744:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d837      	bhi.n	80087bc <SAI_InitPCM+0xf0>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <SAI_InitPCM+0x88>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008765 	.word	0x08008765
 8008758:	0800877b 	.word	0x0800877b
 800875c:	08008791 	.word	0x08008791
 8008760:	080087a7 	.word	0x080087a7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2280      	movs	r2, #128	; 0x80
 8008768:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	011a      	lsls	r2, r3, #4
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2240      	movs	r2, #64	; 0x40
 8008776:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008778:	e023      	b.n	80087c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2280      	movs	r2, #128	; 0x80
 800877e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800878e:	e018      	b.n	80087c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	22c0      	movs	r2, #192	; 0xc0
 8008794:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2280      	movs	r2, #128	; 0x80
 80087a2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80087a4:	e00d      	b.n	80087c2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	22e0      	movs	r2, #224	; 0xe0
 80087aa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2280      	movs	r2, #128	; 0x80
 80087b8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80087ba:	e002      	b.n	80087c2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
      break;
 80087c0:	bf00      	nop
  }

  return status;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80087d8:	4b18      	ldr	r3, [pc, #96]	; (800883c <SAI_Disable+0x6c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <SAI_Disable+0x70>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	0b1b      	lsrs	r3, r3, #12
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	72fb      	strb	r3, [r7, #11]
      break;
 8008816:	e009      	b.n	800882c <SAI_Disable+0x5c>
    }
    count--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3b01      	subs	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e7      	bne.n	80087fc <SAI_Disable+0x2c>

  return status;
 800882c:	7afb      	ldrb	r3, [r7, #11]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000000 	.word	0x20000000
 8008840:	95cbec1b 	.word	0x95cbec1b

08008844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e095      	b.n	8008982 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d108      	bne.n	8008870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008866:	d009      	beq.n	800887c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	61da      	str	r2, [r3, #28]
 800886e:	e005      	b.n	800887c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fa fcfe 	bl	8003298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088bc:	d902      	bls.n	80088c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	e002      	b.n	80088ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088d2:	d007      	beq.n	80088e4 <HAL_SPI_Init+0xa0>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088dc:	d002      	beq.n	80088e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	ea42 0103 	orr.w	r1, r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	0c1b      	lsrs	r3, r3, #16
 8008940:	f003 0204 	and.w	r2, r3, #4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008960:	ea42 0103 	orr.w	r1, r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e049      	b.n	8008a30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fa fcb3 	bl	800331c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f000 fbe1 	bl	8009190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d001      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e04f      	b.n	8008af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a23      	ldr	r2, [pc, #140]	; (8008afc <HAL_TIM_Base_Start_IT+0xc4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01d      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7a:	d018      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00e      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d009      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1b      	ldr	r2, [pc, #108]	; (8008b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d115      	bne.n	8008ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	4b17      	ldr	r3, [pc, #92]	; (8008b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b06      	cmp	r3, #6
 8008abe:	d015      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d011      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad8:	e008      	b.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0201 	orr.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e000      	b.n	8008aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40013400 	.word	0x40013400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	00010007 	.word	0x00010007

08008b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e049      	b.n	8008bbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fa fc40 	bl	80033c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f000 fb1a 	bl	8009190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <HAL_TIM_PWM_Start+0x24>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	bf14      	ite	ne
 8008be4:	2301      	movne	r3, #1
 8008be6:	2300      	moveq	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	e03c      	b.n	8008c66 <HAL_TIM_PWM_Start+0x9e>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d109      	bne.n	8008c06 <HAL_TIM_PWM_Start+0x3e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	bf14      	ite	ne
 8008bfe:	2301      	movne	r3, #1
 8008c00:	2300      	moveq	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	e02f      	b.n	8008c66 <HAL_TIM_PWM_Start+0x9e>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d109      	bne.n	8008c20 <HAL_TIM_PWM_Start+0x58>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	e022      	b.n	8008c66 <HAL_TIM_PWM_Start+0x9e>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b0c      	cmp	r3, #12
 8008c24:	d109      	bne.n	8008c3a <HAL_TIM_PWM_Start+0x72>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	bf14      	ite	ne
 8008c32:	2301      	movne	r3, #1
 8008c34:	2300      	moveq	r3, #0
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	e015      	b.n	8008c66 <HAL_TIM_PWM_Start+0x9e>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d109      	bne.n	8008c54 <HAL_TIM_PWM_Start+0x8c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e008      	b.n	8008c66 <HAL_TIM_PWM_Start+0x9e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	bf14      	ite	ne
 8008c60:	2301      	movne	r3, #1
 8008c62:	2300      	moveq	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e09c      	b.n	8008da8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <HAL_TIM_PWM_Start+0xb6>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c7c:	e023      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xfe>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d104      	bne.n	8008c8e <HAL_TIM_PWM_Start+0xc6>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c8c:	e01b      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xfe>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Start+0xd6>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c9c:	e013      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xfe>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b0c      	cmp	r3, #12
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start+0xe6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cac:	e00b      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xfe>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIM_PWM_Start+0xf6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cbc:	e003      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xfe>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fe68 	bl	80099a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a35      	ldr	r2, [pc, #212]	; (8008db0 <HAL_TIM_PWM_Start+0x1e8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d013      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x13e>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a34      	ldr	r2, [pc, #208]	; (8008db4 <HAL_TIM_PWM_Start+0x1ec>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00e      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x13e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a32      	ldr	r2, [pc, #200]	; (8008db8 <HAL_TIM_PWM_Start+0x1f0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x13e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a31      	ldr	r2, [pc, #196]	; (8008dbc <HAL_TIM_PWM_Start+0x1f4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x13e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a2f      	ldr	r2, [pc, #188]	; (8008dc0 <HAL_TIM_PWM_Start+0x1f8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d101      	bne.n	8008d0a <HAL_TIM_PWM_Start+0x142>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <HAL_TIM_PWM_Start+0x144>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <HAL_TIM_PWM_Start+0x1e8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d01d      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d32:	d018      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a22      	ldr	r2, [pc, #136]	; (8008dc4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a21      	ldr	r2, [pc, #132]	; (8008dc8 <HAL_TIM_PWM_Start+0x200>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00e      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <HAL_TIM_PWM_Start+0x204>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d009      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a17      	ldr	r2, [pc, #92]	; (8008db4 <HAL_TIM_PWM_Start+0x1ec>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d004      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x19e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a15      	ldr	r2, [pc, #84]	; (8008db8 <HAL_TIM_PWM_Start+0x1f0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d115      	bne.n	8008d92 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	4b18      	ldr	r3, [pc, #96]	; (8008dd0 <HAL_TIM_PWM_Start+0x208>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b06      	cmp	r3, #6
 8008d76:	d015      	beq.n	8008da4 <HAL_TIM_PWM_Start+0x1dc>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d7e:	d011      	beq.n	8008da4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	e008      	b.n	8008da4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e000      	b.n	8008da6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40013400 	.word	0x40013400
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40014400 	.word	0x40014400
 8008dc0:	40014800 	.word	0x40014800
 8008dc4:	40000400 	.word	0x40000400
 8008dc8:	40000800 	.word	0x40000800
 8008dcc:	40000c00 	.word	0x40000c00
 8008dd0:	00010007 	.word	0x00010007

08008dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e0ff      	b.n	8008ff2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b14      	cmp	r3, #20
 8008dfe:	f200 80f0 	bhi.w	8008fe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e02:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e5d 	.word	0x08008e5d
 8008e0c:	08008fe3 	.word	0x08008fe3
 8008e10:	08008fe3 	.word	0x08008fe3
 8008e14:	08008fe3 	.word	0x08008fe3
 8008e18:	08008e9d 	.word	0x08008e9d
 8008e1c:	08008fe3 	.word	0x08008fe3
 8008e20:	08008fe3 	.word	0x08008fe3
 8008e24:	08008fe3 	.word	0x08008fe3
 8008e28:	08008edf 	.word	0x08008edf
 8008e2c:	08008fe3 	.word	0x08008fe3
 8008e30:	08008fe3 	.word	0x08008fe3
 8008e34:	08008fe3 	.word	0x08008fe3
 8008e38:	08008f1f 	.word	0x08008f1f
 8008e3c:	08008fe3 	.word	0x08008fe3
 8008e40:	08008fe3 	.word	0x08008fe3
 8008e44:	08008fe3 	.word	0x08008fe3
 8008e48:	08008f61 	.word	0x08008f61
 8008e4c:	08008fe3 	.word	0x08008fe3
 8008e50:	08008fe3 	.word	0x08008fe3
 8008e54:	08008fe3 	.word	0x08008fe3
 8008e58:	08008fa1 	.word	0x08008fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fa2e 	bl	80092c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0208 	orr.w	r2, r2, #8
 8008e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0204 	bic.w	r2, r2, #4
 8008e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6999      	ldr	r1, [r3, #24]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	619a      	str	r2, [r3, #24]
      break;
 8008e9a:	e0a5      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 fa9e 	bl	80093e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6999      	ldr	r1, [r3, #24]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	021a      	lsls	r2, r3, #8
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	619a      	str	r2, [r3, #24]
      break;
 8008edc:	e084      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fb07 	bl	80094f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0208 	orr.w	r2, r2, #8
 8008ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0204 	bic.w	r2, r2, #4
 8008f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69d9      	ldr	r1, [r3, #28]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	61da      	str	r2, [r3, #28]
      break;
 8008f1c:	e064      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fb6f 	bl	8009608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69da      	ldr	r2, [r3, #28]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69d9      	ldr	r1, [r3, #28]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	021a      	lsls	r2, r3, #8
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	61da      	str	r2, [r3, #28]
      break;
 8008f5e:	e043      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fbb8 	bl	80096dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0208 	orr.w	r2, r2, #8
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0204 	bic.w	r2, r2, #4
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f9e:	e023      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fbfc 	bl	80097a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	021a      	lsls	r2, r3, #8
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fe0:	e002      	b.n	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop

08008ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIM_ConfigClockSource+0x1c>
 8009014:	2302      	movs	r3, #2
 8009016:	e0b6      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x18a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800903a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009054:	d03e      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0xd8>
 8009056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905a:	f200 8087 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x170>
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	f000 8086 	beq.w	8009172 <HAL_TIM_ConfigClockSource+0x176>
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906a:	d87f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 800906c:	2b70      	cmp	r3, #112	; 0x70
 800906e:	d01a      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0xaa>
 8009070:	2b70      	cmp	r3, #112	; 0x70
 8009072:	d87b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 8009074:	2b60      	cmp	r3, #96	; 0x60
 8009076:	d050      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x11e>
 8009078:	2b60      	cmp	r3, #96	; 0x60
 800907a:	d877      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 800907c:	2b50      	cmp	r3, #80	; 0x50
 800907e:	d03c      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0xfe>
 8009080:	2b50      	cmp	r3, #80	; 0x50
 8009082:	d873      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d058      	beq.n	800913a <HAL_TIM_ConfigClockSource+0x13e>
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	d86f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 800908c:	2b30      	cmp	r3, #48	; 0x30
 800908e:	d064      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x15e>
 8009090:	2b30      	cmp	r3, #48	; 0x30
 8009092:	d86b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 8009094:	2b20      	cmp	r3, #32
 8009096:	d060      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x15e>
 8009098:	2b20      	cmp	r3, #32
 800909a:	d867      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x170>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05c      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x15e>
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d05a      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x15e>
 80090a4:	e062      	b.n	800916c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	f000 fc55 	bl	8009964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
      break;
 80090d2:	e04f      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090e4:	f000 fc3e 	bl	8009964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090f6:	609a      	str	r2, [r3, #8]
      break;
 80090f8:	e03c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009106:	461a      	mov	r2, r3
 8009108:	f000 fbb2 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2150      	movs	r1, #80	; 0x50
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fc0b 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009118:	e02c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009126:	461a      	mov	r2, r3
 8009128:	f000 fbd1 	bl	80098ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2160      	movs	r1, #96	; 0x60
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fbfb 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009138:	e01c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009146:	461a      	mov	r2, r3
 8009148:	f000 fb92 	bl	8009870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2140      	movs	r1, #64	; 0x40
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fbeb 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 8009158:	e00c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 fbe2 	bl	800992e <TIM_ITRx_SetConfig>
      break;
 800916a:	e003      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	e000      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a40      	ldr	r2, [pc, #256]	; (80092a4 <TIM_Base_SetConfig+0x114>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ae:	d00f      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a3d      	ldr	r2, [pc, #244]	; (80092a8 <TIM_Base_SetConfig+0x118>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a3c      	ldr	r2, [pc, #240]	; (80092ac <TIM_Base_SetConfig+0x11c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a3b      	ldr	r2, [pc, #236]	; (80092b0 <TIM_Base_SetConfig+0x120>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a3a      	ldr	r2, [pc, #232]	; (80092b4 <TIM_Base_SetConfig+0x124>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d108      	bne.n	80091e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a2f      	ldr	r2, [pc, #188]	; (80092a4 <TIM_Base_SetConfig+0x114>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01f      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f0:	d01b      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a2c      	ldr	r2, [pc, #176]	; (80092a8 <TIM_Base_SetConfig+0x118>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d017      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a2b      	ldr	r2, [pc, #172]	; (80092ac <TIM_Base_SetConfig+0x11c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a2a      	ldr	r2, [pc, #168]	; (80092b0 <TIM_Base_SetConfig+0x120>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00f      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a29      	ldr	r2, [pc, #164]	; (80092b4 <TIM_Base_SetConfig+0x124>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00b      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a28      	ldr	r2, [pc, #160]	; (80092b8 <TIM_Base_SetConfig+0x128>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d007      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a27      	ldr	r2, [pc, #156]	; (80092bc <TIM_Base_SetConfig+0x12c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d003      	beq.n	800922a <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <TIM_Base_SetConfig+0x130>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d108      	bne.n	800923c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <TIM_Base_SetConfig+0x114>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00f      	beq.n	8009288 <TIM_Base_SetConfig+0xf8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a12      	ldr	r2, [pc, #72]	; (80092b4 <TIM_Base_SetConfig+0x124>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00b      	beq.n	8009288 <TIM_Base_SetConfig+0xf8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a11      	ldr	r2, [pc, #68]	; (80092b8 <TIM_Base_SetConfig+0x128>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <TIM_Base_SetConfig+0xf8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a10      	ldr	r2, [pc, #64]	; (80092bc <TIM_Base_SetConfig+0x12c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_Base_SetConfig+0xf8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a0f      	ldr	r2, [pc, #60]	; (80092c0 <TIM_Base_SetConfig+0x130>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d103      	bne.n	8009290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	615a      	str	r2, [r3, #20]
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	40013400 	.word	0x40013400
 80092b8:	40014000 	.word	0x40014000
 80092bc:	40014400 	.word	0x40014400
 80092c0:	40014800 	.word	0x40014800

080092c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	f023 0201 	bic.w	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0303 	bic.w	r3, r3, #3
 80092fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 0302 	bic.w	r3, r3, #2
 8009310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a2c      	ldr	r2, [pc, #176]	; (80093d0 <TIM_OC1_SetConfig+0x10c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00f      	beq.n	8009344 <TIM_OC1_SetConfig+0x80>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a2b      	ldr	r2, [pc, #172]	; (80093d4 <TIM_OC1_SetConfig+0x110>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00b      	beq.n	8009344 <TIM_OC1_SetConfig+0x80>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a2a      	ldr	r2, [pc, #168]	; (80093d8 <TIM_OC1_SetConfig+0x114>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d007      	beq.n	8009344 <TIM_OC1_SetConfig+0x80>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a29      	ldr	r2, [pc, #164]	; (80093dc <TIM_OC1_SetConfig+0x118>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d003      	beq.n	8009344 <TIM_OC1_SetConfig+0x80>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a28      	ldr	r2, [pc, #160]	; (80093e0 <TIM_OC1_SetConfig+0x11c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d10c      	bne.n	800935e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f023 0308 	bic.w	r3, r3, #8
 800934a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f023 0304 	bic.w	r3, r3, #4
 800935c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <TIM_OC1_SetConfig+0x10c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d00f      	beq.n	8009386 <TIM_OC1_SetConfig+0xc2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <TIM_OC1_SetConfig+0x110>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d00b      	beq.n	8009386 <TIM_OC1_SetConfig+0xc2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a19      	ldr	r2, [pc, #100]	; (80093d8 <TIM_OC1_SetConfig+0x114>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d007      	beq.n	8009386 <TIM_OC1_SetConfig+0xc2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a18      	ldr	r2, [pc, #96]	; (80093dc <TIM_OC1_SetConfig+0x118>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d003      	beq.n	8009386 <TIM_OC1_SetConfig+0xc2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <TIM_OC1_SetConfig+0x11c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d111      	bne.n	80093aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800938c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	4313      	orrs	r3, r2
 800939e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	621a      	str	r2, [r3, #32]
}
 80093c4:	bf00      	nop
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	40012c00 	.word	0x40012c00
 80093d4:	40013400 	.word	0x40013400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800

080093e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	f023 0210 	bic.w	r2, r3, #16
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800941e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f023 0320 	bic.w	r3, r3, #32
 8009432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4313      	orrs	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a28      	ldr	r2, [pc, #160]	; (80094e4 <TIM_OC2_SetConfig+0x100>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_OC2_SetConfig+0x6c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a27      	ldr	r2, [pc, #156]	; (80094e8 <TIM_OC2_SetConfig+0x104>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d10d      	bne.n	800946c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a1d      	ldr	r2, [pc, #116]	; (80094e4 <TIM_OC2_SetConfig+0x100>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d00f      	beq.n	8009494 <TIM_OC2_SetConfig+0xb0>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a1c      	ldr	r2, [pc, #112]	; (80094e8 <TIM_OC2_SetConfig+0x104>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00b      	beq.n	8009494 <TIM_OC2_SetConfig+0xb0>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a1b      	ldr	r2, [pc, #108]	; (80094ec <TIM_OC2_SetConfig+0x108>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d007      	beq.n	8009494 <TIM_OC2_SetConfig+0xb0>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a1a      	ldr	r2, [pc, #104]	; (80094f0 <TIM_OC2_SetConfig+0x10c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_OC2_SetConfig+0xb0>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a19      	ldr	r2, [pc, #100]	; (80094f4 <TIM_OC2_SetConfig+0x110>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d113      	bne.n	80094bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800949a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	621a      	str	r2, [r3, #32]
}
 80094d6:	bf00      	nop
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800

080094f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	697a      	ldr	r2, [r7, #20]
 800954e:	4313      	orrs	r3, r2
 8009550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a27      	ldr	r2, [pc, #156]	; (80095f4 <TIM_OC3_SetConfig+0xfc>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d003      	beq.n	8009562 <TIM_OC3_SetConfig+0x6a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a26      	ldr	r2, [pc, #152]	; (80095f8 <TIM_OC3_SetConfig+0x100>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d10d      	bne.n	800957e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800957c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a1c      	ldr	r2, [pc, #112]	; (80095f4 <TIM_OC3_SetConfig+0xfc>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00f      	beq.n	80095a6 <TIM_OC3_SetConfig+0xae>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a1b      	ldr	r2, [pc, #108]	; (80095f8 <TIM_OC3_SetConfig+0x100>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00b      	beq.n	80095a6 <TIM_OC3_SetConfig+0xae>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a1a      	ldr	r2, [pc, #104]	; (80095fc <TIM_OC3_SetConfig+0x104>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d007      	beq.n	80095a6 <TIM_OC3_SetConfig+0xae>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a19      	ldr	r2, [pc, #100]	; (8009600 <TIM_OC3_SetConfig+0x108>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_OC3_SetConfig+0xae>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a18      	ldr	r2, [pc, #96]	; (8009604 <TIM_OC3_SetConfig+0x10c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d113      	bne.n	80095ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	621a      	str	r2, [r3, #32]
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	40012c00 	.word	0x40012c00
 80095f8:	40013400 	.word	0x40013400
 80095fc:	40014000 	.word	0x40014000
 8009600:	40014400 	.word	0x40014400
 8009604:	40014800 	.word	0x40014800

08009608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	031b      	lsls	r3, r3, #12
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a18      	ldr	r2, [pc, #96]	; (80096c8 <TIM_OC4_SetConfig+0xc0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00f      	beq.n	800968c <TIM_OC4_SetConfig+0x84>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a17      	ldr	r2, [pc, #92]	; (80096cc <TIM_OC4_SetConfig+0xc4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00b      	beq.n	800968c <TIM_OC4_SetConfig+0x84>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a16      	ldr	r2, [pc, #88]	; (80096d0 <TIM_OC4_SetConfig+0xc8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_OC4_SetConfig+0x84>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <TIM_OC4_SetConfig+0xcc>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_OC4_SetConfig+0x84>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <TIM_OC4_SetConfig+0xd0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d109      	bne.n	80096a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	019b      	lsls	r3, r3, #6
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	621a      	str	r2, [r3, #32]
}
 80096ba:	bf00      	nop
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40014400 	.word	0x40014400
 80096d8:	40014800 	.word	0x40014800

080096dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800970a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	041b      	lsls	r3, r3, #16
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a17      	ldr	r2, [pc, #92]	; (8009790 <TIM_OC5_SetConfig+0xb4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00f      	beq.n	8009756 <TIM_OC5_SetConfig+0x7a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a16      	ldr	r2, [pc, #88]	; (8009794 <TIM_OC5_SetConfig+0xb8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00b      	beq.n	8009756 <TIM_OC5_SetConfig+0x7a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a15      	ldr	r2, [pc, #84]	; (8009798 <TIM_OC5_SetConfig+0xbc>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d007      	beq.n	8009756 <TIM_OC5_SetConfig+0x7a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a14      	ldr	r2, [pc, #80]	; (800979c <TIM_OC5_SetConfig+0xc0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_OC5_SetConfig+0x7a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <TIM_OC5_SetConfig+0xc4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d109      	bne.n	800976a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800975c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	621a      	str	r2, [r3, #32]
}
 8009784:	bf00      	nop
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40012c00 	.word	0x40012c00
 8009794:	40013400 	.word	0x40013400
 8009798:	40014000 	.word	0x40014000
 800979c:	40014400 	.word	0x40014400
 80097a0:	40014800 	.word	0x40014800

080097a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	051b      	lsls	r3, r3, #20
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a18      	ldr	r2, [pc, #96]	; (800985c <TIM_OC6_SetConfig+0xb8>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_OC6_SetConfig+0x7c>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a17      	ldr	r2, [pc, #92]	; (8009860 <TIM_OC6_SetConfig+0xbc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_OC6_SetConfig+0x7c>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a16      	ldr	r2, [pc, #88]	; (8009864 <TIM_OC6_SetConfig+0xc0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_OC6_SetConfig+0x7c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a15      	ldr	r2, [pc, #84]	; (8009868 <TIM_OC6_SetConfig+0xc4>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC6_SetConfig+0x7c>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a14      	ldr	r2, [pc, #80]	; (800986c <TIM_OC6_SetConfig+0xc8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d109      	bne.n	8009834 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	029b      	lsls	r3, r3, #10
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40012c00 	.word	0x40012c00
 8009860:	40013400 	.word	0x40013400
 8009864:	40014000 	.word	0x40014000
 8009868:	40014400 	.word	0x40014400
 800986c:	40014800 	.word	0x40014800

08009870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800989a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 030a 	bic.w	r3, r3, #10
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b087      	sub	sp, #28
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f023 0210 	bic.w	r2, r3, #16
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800990a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	f043 0307 	orr.w	r3, r3, #7
 8009950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	609a      	str	r2, [r3, #8]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800997e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	021a      	lsls	r2, r3, #8
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	431a      	orrs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	609a      	str	r2, [r3, #8]
}
 8009998:	bf00      	nop
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	2201      	movs	r2, #1
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a1a      	ldr	r2, [r3, #32]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	43db      	mvns	r3, r3
 80099c6:	401a      	ands	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a1a      	ldr	r2, [r3, #32]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f003 031f 	and.w	r3, r3, #31
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	fa01 f303 	lsl.w	r3, r1, r3
 80099dc:	431a      	orrs	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]
}
 80099e2:	bf00      	nop
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a04:	2302      	movs	r3, #2
 8009a06:	e068      	b.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a2e      	ldr	r2, [pc, #184]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d004      	beq.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a2d      	ldr	r2, [pc, #180]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d108      	bne.n	8009a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01d      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d018      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1b      	ldr	r2, [pc, #108]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d013      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1a      	ldr	r2, [pc, #104]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00e      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a18      	ldr	r2, [pc, #96]	; (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d009      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a13      	ldr	r2, [pc, #76]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d004      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a14      	ldr	r2, [pc, #80]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d10c      	bne.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	40012c00 	.word	0x40012c00
 8009aec:	40013400 	.word	0x40013400
 8009af0:	40000400 	.word	0x40000400
 8009af4:	40000800 	.word	0x40000800
 8009af8:	40000c00 	.word	0x40000c00
 8009afc:	40014000 	.word	0x40014000

08009b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d101      	bne.n	8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e065      	b.n	8009be8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d004      	beq.n	8009baa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d115      	bne.n	8009bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	051b      	lsls	r3, r3, #20
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	40013400 	.word	0x40013400

08009bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e042      	b.n	8009c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f9 fa93 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	; 0x24
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fbb4 	bl	800a3b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f8b5 	bl	8009dbc <UART_SetConfig>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e01b      	b.n	8009c94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fc33 	bl	800a4f8 <UART_CheckIdleState>
 8009c92:	4603      	mov	r3, r0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d17c      	bne.n	8009db0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <HAL_UART_Transmit+0x26>
 8009cbc:	88fb      	ldrh	r3, [r7, #6]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e075      	b.n	8009db2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2221      	movs	r2, #33	; 0x21
 8009cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cd6:	f7f9 fd8d 	bl	80037f4 <HAL_GetTick>
 8009cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	88fa      	ldrh	r2, [r7, #6]
 8009ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	88fa      	ldrh	r2, [r7, #6]
 8009ce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf4:	d108      	bne.n	8009d08 <HAL_UART_Transmit+0x6c>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d104      	bne.n	8009d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	e003      	b.n	8009d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d10:	e031      	b.n	8009d76 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2180      	movs	r1, #128	; 0x80
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 fc95 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e03e      	b.n	8009db2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d46:	b292      	uxth	r2, r2
 8009d48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	61bb      	str	r3, [r7, #24]
 8009d50:	e008      	b.n	8009d64 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	781a      	ldrb	r2, [r3, #0]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b292      	uxth	r2, r2
 8009d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	3301      	adds	r3, #1
 8009d62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1c7      	bne.n	8009d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2140      	movs	r1, #64	; 0x40
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 fc5d 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e006      	b.n	8009db2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	e000      	b.n	8009db2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009db0:	2302      	movs	r3, #2
  }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dc0:	b08c      	sub	sp, #48	; 0x30
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	431a      	orrs	r2, r3
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4baa      	ldr	r3, [pc, #680]	; (800a094 <UART_SetConfig+0x2d8>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009df4:	430b      	orrs	r3, r1
 8009df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	68da      	ldr	r2, [r3, #12]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a9f      	ldr	r2, [pc, #636]	; (800a098 <UART_SetConfig+0x2dc>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d004      	beq.n	8009e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e24:	4313      	orrs	r3, r2
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009e32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	6812      	ldr	r2, [r2, #0]
 8009e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	f023 010f 	bic.w	r1, r3, #15
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a90      	ldr	r2, [pc, #576]	; (800a09c <UART_SetConfig+0x2e0>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d125      	bne.n	8009eac <UART_SetConfig+0xf0>
 8009e60:	4b8f      	ldr	r3, [pc, #572]	; (800a0a0 <UART_SetConfig+0x2e4>)
 8009e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d81a      	bhi.n	8009ea4 <UART_SetConfig+0xe8>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <UART_SetConfig+0xb8>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e85 	.word	0x08009e85
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e9d 	.word	0x08009e9d
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8a:	e116      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e92:	e112      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9a:	e10e      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea2:	e10a      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eaa:	e106      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a7c      	ldr	r2, [pc, #496]	; (800a0a4 <UART_SetConfig+0x2e8>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d138      	bne.n	8009f28 <UART_SetConfig+0x16c>
 8009eb6:	4b7a      	ldr	r3, [pc, #488]	; (800a0a0 <UART_SetConfig+0x2e4>)
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebc:	f003 030c 	and.w	r3, r3, #12
 8009ec0:	2b0c      	cmp	r3, #12
 8009ec2:	d82d      	bhi.n	8009f20 <UART_SetConfig+0x164>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <UART_SetConfig+0x110>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009f01 	.word	0x08009f01
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	08009f21 	.word	0x08009f21
 8009ed8:	08009f21 	.word	0x08009f21
 8009edc:	08009f11 	.word	0x08009f11
 8009ee0:	08009f21 	.word	0x08009f21
 8009ee4:	08009f21 	.word	0x08009f21
 8009ee8:	08009f21 	.word	0x08009f21
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f21 	.word	0x08009f21
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f06:	e0d8      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f0e:	e0d4      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f16:	e0d0      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f1e:	e0cc      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f26:	e0c8      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a5e      	ldr	r2, [pc, #376]	; (800a0a8 <UART_SetConfig+0x2ec>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d125      	bne.n	8009f7e <UART_SetConfig+0x1c2>
 8009f32:	4b5b      	ldr	r3, [pc, #364]	; (800a0a0 <UART_SetConfig+0x2e4>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d016      	beq.n	8009f6e <UART_SetConfig+0x1b2>
 8009f40:	2b30      	cmp	r3, #48	; 0x30
 8009f42:	d818      	bhi.n	8009f76 <UART_SetConfig+0x1ba>
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d00a      	beq.n	8009f5e <UART_SetConfig+0x1a2>
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d814      	bhi.n	8009f76 <UART_SetConfig+0x1ba>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <UART_SetConfig+0x19a>
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	d008      	beq.n	8009f66 <UART_SetConfig+0x1aa>
 8009f54:	e00f      	b.n	8009f76 <UART_SetConfig+0x1ba>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f5c:	e0ad      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f64:	e0a9      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f66:	2304      	movs	r3, #4
 8009f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f6c:	e0a5      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f6e:	2308      	movs	r3, #8
 8009f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f74:	e0a1      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f76:	2310      	movs	r3, #16
 8009f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f7c:	e09d      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a4a      	ldr	r2, [pc, #296]	; (800a0ac <UART_SetConfig+0x2f0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d125      	bne.n	8009fd4 <UART_SetConfig+0x218>
 8009f88:	4b45      	ldr	r3, [pc, #276]	; (800a0a0 <UART_SetConfig+0x2e4>)
 8009f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f92:	2bc0      	cmp	r3, #192	; 0xc0
 8009f94:	d016      	beq.n	8009fc4 <UART_SetConfig+0x208>
 8009f96:	2bc0      	cmp	r3, #192	; 0xc0
 8009f98:	d818      	bhi.n	8009fcc <UART_SetConfig+0x210>
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	d00a      	beq.n	8009fb4 <UART_SetConfig+0x1f8>
 8009f9e:	2b80      	cmp	r3, #128	; 0x80
 8009fa0:	d814      	bhi.n	8009fcc <UART_SetConfig+0x210>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <UART_SetConfig+0x1f0>
 8009fa6:	2b40      	cmp	r3, #64	; 0x40
 8009fa8:	d008      	beq.n	8009fbc <UART_SetConfig+0x200>
 8009faa:	e00f      	b.n	8009fcc <UART_SetConfig+0x210>
 8009fac:	2300      	movs	r3, #0
 8009fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fb2:	e082      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fba:	e07e      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fc2:	e07a      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009fc4:	2308      	movs	r3, #8
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fca:	e076      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009fcc:	2310      	movs	r3, #16
 8009fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fd2:	e072      	b.n	800a0ba <UART_SetConfig+0x2fe>
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a35      	ldr	r2, [pc, #212]	; (800a0b0 <UART_SetConfig+0x2f4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d12a      	bne.n	800a034 <UART_SetConfig+0x278>
 8009fde:	4b30      	ldr	r3, [pc, #192]	; (800a0a0 <UART_SetConfig+0x2e4>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fec:	d01a      	beq.n	800a024 <UART_SetConfig+0x268>
 8009fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ff2:	d81b      	bhi.n	800a02c <UART_SetConfig+0x270>
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d00c      	beq.n	800a014 <UART_SetConfig+0x258>
 8009ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ffe:	d815      	bhi.n	800a02c <UART_SetConfig+0x270>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <UART_SetConfig+0x250>
 800a004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a008:	d008      	beq.n	800a01c <UART_SetConfig+0x260>
 800a00a:	e00f      	b.n	800a02c <UART_SetConfig+0x270>
 800a00c:	2300      	movs	r3, #0
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a012:	e052      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a014:	2302      	movs	r3, #2
 800a016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a01a:	e04e      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a01c:	2304      	movs	r3, #4
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a022:	e04a      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a024:	2308      	movs	r3, #8
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a02a:	e046      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a02c:	2310      	movs	r3, #16
 800a02e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a032:	e042      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a17      	ldr	r2, [pc, #92]	; (800a098 <UART_SetConfig+0x2dc>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d13a      	bne.n	800a0b4 <UART_SetConfig+0x2f8>
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <UART_SetConfig+0x2e4>)
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a04c:	d01a      	beq.n	800a084 <UART_SetConfig+0x2c8>
 800a04e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a052:	d81b      	bhi.n	800a08c <UART_SetConfig+0x2d0>
 800a054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a058:	d00c      	beq.n	800a074 <UART_SetConfig+0x2b8>
 800a05a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a05e:	d815      	bhi.n	800a08c <UART_SetConfig+0x2d0>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <UART_SetConfig+0x2b0>
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a068:	d008      	beq.n	800a07c <UART_SetConfig+0x2c0>
 800a06a:	e00f      	b.n	800a08c <UART_SetConfig+0x2d0>
 800a06c:	2300      	movs	r3, #0
 800a06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a072:	e022      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a074:	2302      	movs	r3, #2
 800a076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a07a:	e01e      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a07c:	2304      	movs	r3, #4
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a082:	e01a      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a084:	2308      	movs	r3, #8
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a08a:	e016      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a092:	e012      	b.n	800a0ba <UART_SetConfig+0x2fe>
 800a094:	cfff69f3 	.word	0xcfff69f3
 800a098:	40008000 	.word	0x40008000
 800a09c:	40013800 	.word	0x40013800
 800a0a0:	40021000 	.word	0x40021000
 800a0a4:	40004400 	.word	0x40004400
 800a0a8:	40004800 	.word	0x40004800
 800a0ac:	40004c00 	.word	0x40004c00
 800a0b0:	40005000 	.word	0x40005000
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4aae      	ldr	r2, [pc, #696]	; (800a378 <UART_SetConfig+0x5bc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	f040 8097 	bne.w	800a1f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d823      	bhi.n	800a116 <UART_SetConfig+0x35a>
 800a0ce:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0x318>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a0f9 	.word	0x0800a0f9
 800a0d8:	0800a117 	.word	0x0800a117
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a117 	.word	0x0800a117
 800a0e4:	0800a107 	.word	0x0800a107
 800a0e8:	0800a117 	.word	0x0800a117
 800a0ec:	0800a117 	.word	0x0800a117
 800a0f0:	0800a117 	.word	0x0800a117
 800a0f4:	0800a10f 	.word	0x0800a10f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0f8:	f7fc f9ee 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800a0fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0fe:	e010      	b.n	800a122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a100:	4b9e      	ldr	r3, [pc, #632]	; (800a37c <UART_SetConfig+0x5c0>)
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a104:	e00d      	b.n	800a122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a106:	f7fc f94f 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800a10a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a10c:	e009      	b.n	800a122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a10e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a114:	e005      	b.n	800a122 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 8130 	beq.w	800a38a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	4a94      	ldr	r2, [pc, #592]	; (800a380 <UART_SetConfig+0x5c4>)
 800a130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a134:	461a      	mov	r2, r3
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	fbb3 f3f2 	udiv	r3, r3, r2
 800a13c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	4413      	add	r3, r2
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d305      	bcc.n	800a15a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	429a      	cmp	r2, r3
 800a158:	d903      	bls.n	800a162 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a160:	e113      	b.n	800a38a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	2200      	movs	r2, #0
 800a166:	60bb      	str	r3, [r7, #8]
 800a168:	60fa      	str	r2, [r7, #12]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	4a84      	ldr	r2, [pc, #528]	; (800a380 <UART_SetConfig+0x5c4>)
 800a170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a174:	b29b      	uxth	r3, r3
 800a176:	2200      	movs	r2, #0
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a184:	f7f6 fd2a 	bl	8000bdc <__aeabi_uldivmod>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4610      	mov	r0, r2
 800a18e:	4619      	mov	r1, r3
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	020b      	lsls	r3, r1, #8
 800a19a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a19e:	0202      	lsls	r2, r0, #8
 800a1a0:	6979      	ldr	r1, [r7, #20]
 800a1a2:	6849      	ldr	r1, [r1, #4]
 800a1a4:	0849      	lsrs	r1, r1, #1
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	eb12 0804 	adds.w	r8, r2, r4
 800a1b0:	eb43 0905 	adc.w	r9, r3, r5
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	469a      	mov	sl, r3
 800a1bc:	4693      	mov	fp, r2
 800a1be:	4652      	mov	r2, sl
 800a1c0:	465b      	mov	r3, fp
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 fd09 	bl	8000bdc <__aeabi_uldivmod>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1d8:	d308      	bcc.n	800a1ec <UART_SetConfig+0x430>
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e0:	d204      	bcs.n	800a1ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a3a      	ldr	r2, [r7, #32]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	e0ce      	b.n	800a38a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1f2:	e0ca      	b.n	800a38a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fc:	d166      	bne.n	800a2cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a1fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a202:	2b08      	cmp	r3, #8
 800a204:	d827      	bhi.n	800a256 <UART_SetConfig+0x49a>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <UART_SetConfig+0x450>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a239 	.word	0x0800a239
 800a214:	0800a241 	.word	0x0800a241
 800a218:	0800a257 	.word	0x0800a257
 800a21c:	0800a247 	.word	0x0800a247
 800a220:	0800a257 	.word	0x0800a257
 800a224:	0800a257 	.word	0x0800a257
 800a228:	0800a257 	.word	0x0800a257
 800a22c:	0800a24f 	.word	0x0800a24f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a230:	f7fc f952 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800a234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a236:	e014      	b.n	800a262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a238:	f7fc f964 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 800a23c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a23e:	e010      	b.n	800a262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a240:	4b4e      	ldr	r3, [pc, #312]	; (800a37c <UART_SetConfig+0x5c0>)
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a244:	e00d      	b.n	800a262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a246:	f7fc f8af 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800a24a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8090 	beq.w	800a38a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	4a44      	ldr	r2, [pc, #272]	; (800a380 <UART_SetConfig+0x5c4>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	2b0f      	cmp	r3, #15
 800a294:	d916      	bls.n	800a2c4 <UART_SetConfig+0x508>
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29c:	d212      	bcs.n	800a2c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f023 030f 	bic.w	r3, r3, #15
 800a2a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	8bfb      	ldrh	r3, [r7, #30]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	8bfa      	ldrh	r2, [r7, #30]
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	e062      	b.n	800a38a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a2ca:	e05e      	b.n	800a38a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d828      	bhi.n	800a326 <UART_SetConfig+0x56a>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0x520>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a327 	.word	0x0800a327
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	0800a327 	.word	0x0800a327
 800a2f4:	0800a327 	.word	0x0800a327
 800a2f8:	0800a327 	.word	0x0800a327
 800a2fc:	0800a31f 	.word	0x0800a31f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a300:	f7fc f8ea 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800a304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a306:	e014      	b.n	800a332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a308:	f7fc f8fc 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 800a30c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a30e:	e010      	b.n	800a332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a310:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <UART_SetConfig+0x5c0>)
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a314:	e00d      	b.n	800a332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a316:	f7fc f847 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800a31a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a31c:	e009      	b.n	800a332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a324:	e005      	b.n	800a332 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a330:	bf00      	nop
    }

    if (pclk != 0U)
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d028      	beq.n	800a38a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	4a10      	ldr	r2, [pc, #64]	; (800a380 <UART_SetConfig+0x5c4>)
 800a33e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a342:	461a      	mov	r2, r3
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	fbb3 f2f2 	udiv	r2, r3, r2
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	441a      	add	r2, r3
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d910      	bls.n	800a384 <UART_SetConfig+0x5c8>
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a368:	d20c      	bcs.n	800a384 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60da      	str	r2, [r3, #12]
 800a374:	e009      	b.n	800a38a <UART_SetConfig+0x5ce>
 800a376:	bf00      	nop
 800a378:	40008000 	.word	0x40008000
 800a37c:	00f42400 	.word	0x00f42400
 800a380:	0800c92c 	.word	0x0800c92c
      }
      else
      {
        ret = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2201      	movs	r2, #1
 800a396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a3a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3730      	adds	r7, #48	; 0x30
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c0:	f003 0308 	and.w	r3, r3, #8
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00a      	beq.n	800a466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01a      	beq.n	800a4ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4b2:	d10a      	bne.n	800a4ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	605a      	str	r2, [r3, #4]
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b098      	sub	sp, #96	; 0x60
 800a4fc:	af02      	add	r7, sp, #8
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a508:	f7f9 f974 	bl	80037f4 <HAL_GetTick>
 800a50c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0308 	and.w	r3, r3, #8
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d12f      	bne.n	800a57c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a51c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a524:	2200      	movs	r2, #0
 800a526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f88e 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d022      	beq.n	800a57c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a54a:	653b      	str	r3, [r7, #80]	; 0x50
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a554:	647b      	str	r3, [r7, #68]	; 0x44
 800a556:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a55a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e6      	bne.n	800a536 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e063      	b.n	800a644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d149      	bne.n	800a61e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a58a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a592:	2200      	movs	r2, #0
 800a594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f857 	bl	800a64c <UART_WaitOnFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d03c      	beq.n	800a61e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e6      	bne.n	800a5a4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f023 0301 	bic.w	r3, r3, #1
 800a5ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5f6:	61fa      	str	r2, [r7, #28]
 800a5f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	69b9      	ldr	r1, [r7, #24]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	617b      	str	r3, [r7, #20]
   return(result);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e5      	bne.n	800a5d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e012      	b.n	800a644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3758      	adds	r7, #88	; 0x58
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	4613      	mov	r3, r2
 800a65a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a65c:	e049      	b.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d045      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a666:	f7f9 f8c5 	bl	80037f4 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	429a      	cmp	r2, r3
 800a674:	d302      	bcc.n	800a67c <UART_WaitOnFlagUntilTimeout+0x30>
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e048      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0304 	and.w	r3, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d031      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d110      	bne.n	800a6be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f838 	bl	800a71a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e029      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6cc:	d111      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f81e 	bl	800a71a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00f      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69da      	ldr	r2, [r3, #28]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d0a6      	beq.n	800a65e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b095      	sub	sp, #84	; 0x54
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72a:	e853 3f00 	ldrex	r3, [r3]
 800a72e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a736:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a740:	643b      	str	r3, [r7, #64]	; 0x40
 800a742:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a748:	e841 2300 	strex	r3, r2, [r1]
 800a74c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e6      	bne.n	800a722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3308      	adds	r3, #8
 800a75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	61fb      	str	r3, [r7, #28]
   return(result);
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a76a:	f023 0301 	bic.w	r3, r3, #1
 800a76e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3308      	adds	r3, #8
 800a776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a778:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a77a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e3      	bne.n	800a754 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a790:	2b01      	cmp	r3, #1
 800a792:	d118      	bne.n	800a7c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f023 0310 	bic.w	r3, r3, #16
 800a7a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	6979      	ldr	r1, [r7, #20]
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e6      	bne.n	800a794 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a7da:	bf00      	nop
 800a7dc:	3754      	adds	r7, #84	; 0x54
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e027      	b.n	800a84c <HAL_UARTEx_DisableFifoMode+0x66>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2224      	movs	r2, #36	; 0x24
 800a808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0201 	bic.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a82a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e02d      	b.n	800a8cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2224      	movs	r2, #36	; 0x24
 800a87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0201 	bic.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f84f 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e02d      	b.n	800a948 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	; 0x24
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f811 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d108      	bne.n	800a972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a970:	e031      	b.n	800a9d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a972:	2308      	movs	r3, #8
 800a974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a976:	2308      	movs	r3, #8
 800a978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	0e5b      	lsrs	r3, r3, #25
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0f5b      	lsrs	r3, r3, #29
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	7b3a      	ldrb	r2, [r7, #12]
 800a99e:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9a0:	5c8a      	ldrb	r2, [r1, r2]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9a6:	7b3a      	ldrb	r2, [r7, #12]
 800a9a8:	490f      	ldr	r1, [pc, #60]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	7b7a      	ldrb	r2, [r7, #13]
 800a9bc:	4909      	ldr	r1, [pc, #36]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9be:	5c8a      	ldrb	r2, [r1, r2]
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9c4:	7b7a      	ldrb	r2, [r7, #13]
 800a9c6:	4908      	ldr	r1, [pc, #32]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	0800c944 	.word	0x0800c944
 800a9e8:	0800c94c 	.word	0x0800c94c

0800a9ec <arm_mean_f32>:
 800a9ec:	b430      	push	{r4, r5}
 800a9ee:	088d      	lsrs	r5, r1, #2
 800a9f0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800aa64 <arm_mean_f32+0x78>
 800a9f4:	d018      	beq.n	800aa28 <arm_mean_f32+0x3c>
 800a9f6:	f100 0310 	add.w	r3, r0, #16
 800a9fa:	462c      	mov	r4, r5
 800a9fc:	ed53 5a04 	vldr	s11, [r3, #-16]
 800aa00:	ed13 6a03 	vldr	s12, [r3, #-12]
 800aa04:	ed53 6a02 	vldr	s13, [r3, #-8]
 800aa08:	ed13 7a01 	vldr	s14, [r3, #-4]
 800aa0c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa10:	3c01      	subs	r4, #1
 800aa12:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa16:	f103 0310 	add.w	r3, r3, #16
 800aa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa22:	d1eb      	bne.n	800a9fc <arm_mean_f32+0x10>
 800aa24:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800aa28:	f011 0303 	ands.w	r3, r1, #3
 800aa2c:	d00f      	beq.n	800aa4e <arm_mean_f32+0x62>
 800aa2e:	ed90 7a00 	vldr	s14, [r0]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa38:	d009      	beq.n	800aa4e <arm_mean_f32+0x62>
 800aa3a:	ed90 7a01 	vldr	s14, [r0, #4]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa44:	bf1c      	itt	ne
 800aa46:	ed90 7a02 	vldrne	s14, [r0, #8]
 800aa4a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800aa4e:	ee07 1a10 	vmov	s14, r1
 800aa52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa56:	bc30      	pop	{r4, r5}
 800aa58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa5c:	edc2 6a00 	vstr	s13, [r2]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	00000000 	.word	0x00000000

0800aa68 <arm_max_f32>:
 800aa68:	f101 3cff 	add.w	ip, r1, #4294967295
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	4607      	mov	r7, r0
 800aa70:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800aa74:	ecf7 7a01 	vldmia	r7!, {s15}
 800aa78:	d060      	beq.n	800ab3c <arm_max_f32+0xd4>
 800aa7a:	2400      	movs	r4, #0
 800aa7c:	3014      	adds	r0, #20
 800aa7e:	4625      	mov	r5, r4
 800aa80:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800aa84:	ed10 7a04 	vldr	s14, [r0, #-16]
 800aa88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa90:	bf48      	it	mi
 800aa92:	eef0 7a47 	vmovmi.f32	s15, s14
 800aa96:	ed10 7a03 	vldr	s14, [r0, #-12]
 800aa9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa9e:	bf48      	it	mi
 800aaa0:	1c65      	addmi	r5, r4, #1
 800aaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa6:	bf48      	it	mi
 800aaa8:	eef0 7a47 	vmovmi.f32	s15, s14
 800aaac:	ed10 7a02 	vldr	s14, [r0, #-8]
 800aab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aab4:	bf48      	it	mi
 800aab6:	1ca5      	addmi	r5, r4, #2
 800aab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aabc:	bf48      	it	mi
 800aabe:	eef0 7a47 	vmovmi.f32	s15, s14
 800aac2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800aac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaca:	bf48      	it	mi
 800aacc:	1ce5      	addmi	r5, r4, #3
 800aace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad2:	f104 0404 	add.w	r4, r4, #4
 800aad6:	bf44      	itt	mi
 800aad8:	eef0 7a47 	vmovmi.f32	s15, s14
 800aadc:	4625      	movmi	r5, r4
 800aade:	42a6      	cmp	r6, r4
 800aae0:	f100 0010 	add.w	r0, r0, #16
 800aae4:	d1ce      	bne.n	800aa84 <arm_max_f32+0x1c>
 800aae6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800aaea:	f01c 0003 	ands.w	r0, ip, #3
 800aaee:	d021      	beq.n	800ab34 <arm_max_f32+0xcc>
 800aaf0:	ed97 7a00 	vldr	s14, [r7]
 800aaf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafc:	bfc4      	itt	gt
 800aafe:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab02:	1a0d      	subgt	r5, r1, r0
 800ab04:	3801      	subs	r0, #1
 800ab06:	d015      	beq.n	800ab34 <arm_max_f32+0xcc>
 800ab08:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	bf44      	itt	mi
 800ab16:	eef0 7a47 	vmovmi.f32	s15, s14
 800ab1a:	1a0d      	submi	r5, r1, r0
 800ab1c:	2801      	cmp	r0, #1
 800ab1e:	d009      	beq.n	800ab34 <arm_max_f32+0xcc>
 800ab20:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab2c:	bfc4      	itt	gt
 800ab2e:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab32:	4665      	movgt	r5, ip
 800ab34:	edc2 7a00 	vstr	s15, [r2]
 800ab38:	601d      	str	r5, [r3, #0]
 800ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3c:	4675      	mov	r5, lr
 800ab3e:	e7d4      	b.n	800aaea <arm_max_f32+0x82>

0800ab40 <arm_rfft_32_fast_init_f32>:
 800ab40:	b178      	cbz	r0, 800ab62 <arm_rfft_32_fast_init_f32+0x22>
 800ab42:	b430      	push	{r4, r5}
 800ab44:	4908      	ldr	r1, [pc, #32]	; (800ab68 <arm_rfft_32_fast_init_f32+0x28>)
 800ab46:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <arm_rfft_32_fast_init_f32+0x2c>)
 800ab48:	2310      	movs	r3, #16
 800ab4a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab4e:	8003      	strh	r3, [r0, #0]
 800ab50:	2520      	movs	r5, #32
 800ab52:	2414      	movs	r4, #20
 800ab54:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <arm_rfft_32_fast_init_f32+0x30>)
 800ab56:	8205      	strh	r5, [r0, #16]
 800ab58:	8184      	strh	r4, [r0, #12]
 800ab5a:	6143      	str	r3, [r0, #20]
 800ab5c:	bc30      	pop	{r4, r5}
 800ab5e:	2000      	movs	r0, #0
 800ab60:	4770      	bx	lr
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295
 800ab66:	4770      	bx	lr
 800ab68:	0800d904 	.word	0x0800d904
 800ab6c:	0801223c 	.word	0x0801223c
 800ab70:	0801afbc 	.word	0x0801afbc

0800ab74 <arm_rfft_64_fast_init_f32>:
 800ab74:	b178      	cbz	r0, 800ab96 <arm_rfft_64_fast_init_f32+0x22>
 800ab76:	b430      	push	{r4, r5}
 800ab78:	4908      	ldr	r1, [pc, #32]	; (800ab9c <arm_rfft_64_fast_init_f32+0x28>)
 800ab7a:	4a09      	ldr	r2, [pc, #36]	; (800aba0 <arm_rfft_64_fast_init_f32+0x2c>)
 800ab7c:	2320      	movs	r3, #32
 800ab7e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab82:	8003      	strh	r3, [r0, #0]
 800ab84:	2540      	movs	r5, #64	; 0x40
 800ab86:	2430      	movs	r4, #48	; 0x30
 800ab88:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <arm_rfft_64_fast_init_f32+0x30>)
 800ab8a:	8205      	strh	r5, [r0, #16]
 800ab8c:	8184      	strh	r4, [r0, #12]
 800ab8e:	6143      	str	r3, [r0, #20]
 800ab90:	bc30      	pop	{r4, r5}
 800ab92:	2000      	movs	r0, #0
 800ab94:	4770      	bx	lr
 800ab96:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9a:	4770      	bx	lr
 800ab9c:	0800fa5c 	.word	0x0800fa5c
 800aba0:	08016abc 	.word	0x08016abc
 800aba4:	0801f83c 	.word	0x0801f83c

0800aba8 <arm_rfft_256_fast_init_f32>:
 800aba8:	b180      	cbz	r0, 800abcc <arm_rfft_256_fast_init_f32+0x24>
 800abaa:	b430      	push	{r4, r5}
 800abac:	4909      	ldr	r1, [pc, #36]	; (800abd4 <arm_rfft_256_fast_init_f32+0x2c>)
 800abae:	4a0a      	ldr	r2, [pc, #40]	; (800abd8 <arm_rfft_256_fast_init_f32+0x30>)
 800abb0:	2380      	movs	r3, #128	; 0x80
 800abb2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800abb6:	8003      	strh	r3, [r0, #0]
 800abb8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800abbc:	24d0      	movs	r4, #208	; 0xd0
 800abbe:	4b07      	ldr	r3, [pc, #28]	; (800abdc <arm_rfft_256_fast_init_f32+0x34>)
 800abc0:	8205      	strh	r5, [r0, #16]
 800abc2:	8184      	strh	r4, [r0, #12]
 800abc4:	6143      	str	r3, [r0, #20]
 800abc6:	bc30      	pop	{r4, r5}
 800abc8:	2000      	movs	r0, #0
 800abca:	4770      	bx	lr
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	0800d764 	.word	0x0800d764
 800abd8:	08011e3c 	.word	0x08011e3c
 800abdc:	0801abbc 	.word	0x0801abbc

0800abe0 <arm_rfft_512_fast_init_f32>:
 800abe0:	b190      	cbz	r0, 800ac08 <arm_rfft_512_fast_init_f32+0x28>
 800abe2:	b430      	push	{r4, r5}
 800abe4:	490a      	ldr	r1, [pc, #40]	; (800ac10 <arm_rfft_512_fast_init_f32+0x30>)
 800abe6:	4a0b      	ldr	r2, [pc, #44]	; (800ac14 <arm_rfft_512_fast_init_f32+0x34>)
 800abe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800abf0:	8003      	strh	r3, [r0, #0]
 800abf2:	f44f 7500 	mov.w	r5, #512	; 0x200
 800abf6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800abfa:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <arm_rfft_512_fast_init_f32+0x38>)
 800abfc:	8205      	strh	r5, [r0, #16]
 800abfe:	8184      	strh	r4, [r0, #12]
 800ac00:	6143      	str	r3, [r0, #20]
 800ac02:	bc30      	pop	{r4, r5}
 800ac04:	2000      	movs	r0, #0
 800ac06:	4770      	bx	lr
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	0800f6ec 	.word	0x0800f6ec
 800ac14:	080162bc 	.word	0x080162bc
 800ac18:	0801f03c 	.word	0x0801f03c

0800ac1c <arm_rfft_1024_fast_init_f32>:
 800ac1c:	b190      	cbz	r0, 800ac44 <arm_rfft_1024_fast_init_f32+0x28>
 800ac1e:	b430      	push	{r4, r5}
 800ac20:	490a      	ldr	r1, [pc, #40]	; (800ac4c <arm_rfft_1024_fast_init_f32+0x30>)
 800ac22:	4a0b      	ldr	r2, [pc, #44]	; (800ac50 <arm_rfft_1024_fast_init_f32+0x34>)
 800ac24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac28:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac2c:	8003      	strh	r3, [r0, #0]
 800ac2e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ac32:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800ac36:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <arm_rfft_1024_fast_init_f32+0x38>)
 800ac38:	8205      	strh	r5, [r0, #16]
 800ac3a:	8184      	strh	r4, [r0, #12]
 800ac3c:	6143      	str	r3, [r0, #20]
 800ac3e:	bc30      	pop	{r4, r5}
 800ac40:	2000      	movs	r0, #0
 800ac42:	4770      	bx	lr
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	0800fabc 	.word	0x0800fabc
 800ac50:	08016bbc 	.word	0x08016bbc
 800ac54:	08017bbc 	.word	0x08017bbc

0800ac58 <arm_rfft_2048_fast_init_f32>:
 800ac58:	b190      	cbz	r0, 800ac80 <arm_rfft_2048_fast_init_f32+0x28>
 800ac5a:	b430      	push	{r4, r5}
 800ac5c:	490a      	ldr	r1, [pc, #40]	; (800ac88 <arm_rfft_2048_fast_init_f32+0x30>)
 800ac5e:	4a0b      	ldr	r2, [pc, #44]	; (800ac8c <arm_rfft_2048_fast_init_f32+0x34>)
 800ac60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac64:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac68:	8003      	strh	r3, [r0, #0]
 800ac6a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800ac6e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800ac72:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <arm_rfft_2048_fast_init_f32+0x38>)
 800ac74:	8205      	strh	r5, [r0, #16]
 800ac76:	8184      	strh	r4, [r0, #12]
 800ac78:	6143      	str	r3, [r0, #20]
 800ac7a:	bc30      	pop	{r4, r5}
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	4770      	bx	lr
 800ac80:	f04f 30ff 	mov.w	r0, #4294967295
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	0800c954 	.word	0x0800c954
 800ac8c:	0800fe3c 	.word	0x0800fe3c
 800ac90:	08018bbc 	.word	0x08018bbc

0800ac94 <arm_rfft_4096_fast_init_f32>:
 800ac94:	b190      	cbz	r0, 800acbc <arm_rfft_4096_fast_init_f32+0x28>
 800ac96:	b430      	push	{r4, r5}
 800ac98:	490a      	ldr	r1, [pc, #40]	; (800acc4 <arm_rfft_4096_fast_init_f32+0x30>)
 800ac9a:	4a0b      	ldr	r2, [pc, #44]	; (800acc8 <arm_rfft_4096_fast_init_f32+0x34>)
 800ac9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aca0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aca4:	8003      	strh	r3, [r0, #0]
 800aca6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800acaa:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800acae:	4b07      	ldr	r3, [pc, #28]	; (800accc <arm_rfft_4096_fast_init_f32+0x38>)
 800acb0:	8205      	strh	r5, [r0, #16]
 800acb2:	8184      	strh	r4, [r0, #12]
 800acb4:	6143      	str	r3, [r0, #20]
 800acb6:	bc30      	pop	{r4, r5}
 800acb8:	2000      	movs	r0, #0
 800acba:	4770      	bx	lr
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	0800d92c 	.word	0x0800d92c
 800acc8:	080122bc 	.word	0x080122bc
 800accc:	0801b03c 	.word	0x0801b03c

0800acd0 <arm_rfft_fast_init_f32>:
 800acd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800acd4:	d01f      	beq.n	800ad16 <arm_rfft_fast_init_f32+0x46>
 800acd6:	d90b      	bls.n	800acf0 <arm_rfft_fast_init_f32+0x20>
 800acd8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800acdc:	d019      	beq.n	800ad12 <arm_rfft_fast_init_f32+0x42>
 800acde:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800ace2:	d012      	beq.n	800ad0a <arm_rfft_fast_init_f32+0x3a>
 800ace4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ace8:	d00d      	beq.n	800ad06 <arm_rfft_fast_init_f32+0x36>
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	4770      	bx	lr
 800acf0:	2940      	cmp	r1, #64	; 0x40
 800acf2:	d00c      	beq.n	800ad0e <arm_rfft_fast_init_f32+0x3e>
 800acf4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800acf8:	d003      	beq.n	800ad02 <arm_rfft_fast_init_f32+0x32>
 800acfa:	2920      	cmp	r1, #32
 800acfc:	d1f5      	bne.n	800acea <arm_rfft_fast_init_f32+0x1a>
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <arm_rfft_fast_init_f32+0x4c>)
 800ad00:	4718      	bx	r3
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <arm_rfft_fast_init_f32+0x50>)
 800ad04:	4718      	bx	r3
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <arm_rfft_fast_init_f32+0x54>)
 800ad08:	4718      	bx	r3
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <arm_rfft_fast_init_f32+0x58>)
 800ad0c:	4718      	bx	r3
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <arm_rfft_fast_init_f32+0x5c>)
 800ad10:	e7f6      	b.n	800ad00 <arm_rfft_fast_init_f32+0x30>
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <arm_rfft_fast_init_f32+0x60>)
 800ad14:	e7f4      	b.n	800ad00 <arm_rfft_fast_init_f32+0x30>
 800ad16:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <arm_rfft_fast_init_f32+0x64>)
 800ad18:	e7f2      	b.n	800ad00 <arm_rfft_fast_init_f32+0x30>
 800ad1a:	bf00      	nop
 800ad1c:	0800ab41 	.word	0x0800ab41
 800ad20:	0800aba9 	.word	0x0800aba9
 800ad24:	0800ac1d 	.word	0x0800ac1d
 800ad28:	0800ac95 	.word	0x0800ac95
 800ad2c:	0800ab75 	.word	0x0800ab75
 800ad30:	0800ac59 	.word	0x0800ac59
 800ad34:	0800abe1 	.word	0x0800abe1

0800ad38 <stage_rfft_f32>:
 800ad38:	b410      	push	{r4}
 800ad3a:	edd1 7a00 	vldr	s15, [r1]
 800ad3e:	ed91 7a01 	vldr	s14, [r1, #4]
 800ad42:	8804      	ldrh	r4, [r0, #0]
 800ad44:	6940      	ldr	r0, [r0, #20]
 800ad46:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ad4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad4e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ad52:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ad56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad5a:	3c01      	subs	r4, #1
 800ad5c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ad60:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad64:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ad68:	ed82 7a00 	vstr	s14, [r2]
 800ad6c:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad70:	3010      	adds	r0, #16
 800ad72:	3210      	adds	r2, #16
 800ad74:	3b08      	subs	r3, #8
 800ad76:	3110      	adds	r1, #16
 800ad78:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ad7c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad80:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ad84:	edd3 4a03 	vldr	s9, [r3, #12]
 800ad88:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad8c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ad90:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ad94:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ad98:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ad9c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ada0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ada4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ada8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800adac:	ee66 6a85 	vmul.f32	s13, s13, s10
 800adb0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800adb4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800adb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800adbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adc0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800adc4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800adc8:	3c01      	subs	r4, #1
 800adca:	ed02 7a02 	vstr	s14, [r2, #-8]
 800adce:	ed42 7a01 	vstr	s15, [r2, #-4]
 800add2:	f1a3 0308 	sub.w	r3, r3, #8
 800add6:	f101 0108 	add.w	r1, r1, #8
 800adda:	f100 0008 	add.w	r0, r0, #8
 800adde:	f102 0208 	add.w	r2, r2, #8
 800ade2:	d1c9      	bne.n	800ad78 <stage_rfft_f32+0x40>
 800ade4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop

0800adec <merge_rfft_f32>:
 800adec:	b410      	push	{r4}
 800adee:	edd1 7a00 	vldr	s15, [r1]
 800adf2:	edd1 6a01 	vldr	s13, [r1, #4]
 800adf6:	8804      	ldrh	r4, [r0, #0]
 800adf8:	6940      	ldr	r0, [r0, #20]
 800adfa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800adfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae02:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ae06:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae0a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae0e:	3c01      	subs	r4, #1
 800ae10:	ed82 7a00 	vstr	s14, [r2]
 800ae14:	edc2 7a01 	vstr	s15, [r2, #4]
 800ae18:	b3dc      	cbz	r4, 800ae92 <merge_rfft_f32+0xa6>
 800ae1a:	00e3      	lsls	r3, r4, #3
 800ae1c:	3b08      	subs	r3, #8
 800ae1e:	440b      	add	r3, r1
 800ae20:	3010      	adds	r0, #16
 800ae22:	3210      	adds	r2, #16
 800ae24:	3110      	adds	r1, #16
 800ae26:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ae2a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae2e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ae32:	edd3 4a03 	vldr	s9, [r3, #12]
 800ae36:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ae3a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ae3e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ae42:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ae46:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ae4a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ae4e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ae52:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ae56:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ae5a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ae5e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ae62:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ae66:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ae6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae72:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae76:	3c01      	subs	r4, #1
 800ae78:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ae7c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ae80:	f1a3 0308 	sub.w	r3, r3, #8
 800ae84:	f101 0108 	add.w	r1, r1, #8
 800ae88:	f100 0008 	add.w	r0, r0, #8
 800ae8c:	f102 0208 	add.w	r2, r2, #8
 800ae90:	d1c9      	bne.n	800ae26 <merge_rfft_f32+0x3a>
 800ae92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <arm_rfft_fast_f32>:
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	8a05      	ldrh	r5, [r0, #16]
 800ae9e:	086d      	lsrs	r5, r5, #1
 800aea0:	8005      	strh	r5, [r0, #0]
 800aea2:	4604      	mov	r4, r0
 800aea4:	4616      	mov	r6, r2
 800aea6:	461d      	mov	r5, r3
 800aea8:	b14b      	cbz	r3, 800aebe <arm_rfft_fast_f32+0x26>
 800aeaa:	f7ff ff9f 	bl	800adec <merge_rfft_f32>
 800aeae:	462a      	mov	r2, r5
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	f000 bb33 	b.w	800b524 <arm_cfft_f32>
 800aebe:	460f      	mov	r7, r1
 800aec0:	461a      	mov	r2, r3
 800aec2:	2301      	movs	r3, #1
 800aec4:	f000 fb2e 	bl	800b524 <arm_cfft_f32>
 800aec8:	4632      	mov	r2, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	4620      	mov	r0, r4
 800aece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed2:	f7ff bf31 	b.w	800ad38 <stage_rfft_f32>
 800aed6:	bf00      	nop

0800aed8 <arm_cfft_radix8by2_f32>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	ed2d 8b08 	vpush	{d8-d11}
 800aee0:	4607      	mov	r7, r0
 800aee2:	4608      	mov	r0, r1
 800aee4:	f8b7 c000 	ldrh.w	ip, [r7]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800aeee:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800aef2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800aef6:	f000 80b0 	beq.w	800b05a <arm_cfft_radix8by2_f32+0x182>
 800aefa:	008c      	lsls	r4, r1, #2
 800aefc:	3410      	adds	r4, #16
 800aefe:	f100 0310 	add.w	r3, r0, #16
 800af02:	1906      	adds	r6, r0, r4
 800af04:	3210      	adds	r2, #16
 800af06:	4444      	add	r4, r8
 800af08:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800af0c:	f108 0510 	add.w	r5, r8, #16
 800af10:	ed15 2a04 	vldr	s4, [r5, #-16]
 800af14:	ed55 2a03 	vldr	s5, [r5, #-12]
 800af18:	ed54 4a04 	vldr	s9, [r4, #-16]
 800af1c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800af20:	ed14 6a02 	vldr	s12, [r4, #-8]
 800af24:	ed54 5a01 	vldr	s11, [r4, #-4]
 800af28:	ed53 3a04 	vldr	s7, [r3, #-16]
 800af2c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800af30:	ed55 0a01 	vldr	s1, [r5, #-4]
 800af34:	ed56 6a04 	vldr	s13, [r6, #-16]
 800af38:	ed16 3a03 	vldr	s6, [r6, #-12]
 800af3c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800af40:	ed13 5a02 	vldr	s10, [r3, #-8]
 800af44:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af48:	ed16 1a02 	vldr	s2, [r6, #-8]
 800af4c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800af50:	ee73 ba82 	vadd.f32	s23, s7, s4
 800af54:	ee37 ba22 	vadd.f32	s22, s14, s5
 800af58:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800af5c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800af60:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800af64:	ee75 aa00 	vadd.f32	s21, s10, s0
 800af68:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800af6c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800af70:	ed43 ba04 	vstr	s23, [r3, #-16]
 800af74:	ed03 ba03 	vstr	s22, [r3, #-12]
 800af78:	ed43 aa02 	vstr	s21, [r3, #-8]
 800af7c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800af80:	ed06 8a01 	vstr	s16, [r6, #-4]
 800af84:	ed46 9a04 	vstr	s19, [r6, #-16]
 800af88:	ed06 9a03 	vstr	s18, [r6, #-12]
 800af8c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800af90:	ee37 7a62 	vsub.f32	s14, s14, s5
 800af94:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800af98:	ee34 4a43 	vsub.f32	s8, s8, s6
 800af9c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800afa0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800afa4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800afa8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800afac:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800afb0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800afb4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800afb8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800afbc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800afc0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800afc4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800afc8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800afcc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800afd0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800afd4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800afd8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800afdc:	ed05 3a04 	vstr	s6, [r5, #-16]
 800afe0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800afe4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800afe8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800afec:	ee76 6a41 	vsub.f32	s13, s12, s2
 800aff0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800aff4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800aff8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800affc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b000:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b004:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b008:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b00c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b010:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b014:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b018:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b01c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b020:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b024:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b028:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b02c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b030:	3310      	adds	r3, #16
 800b032:	4563      	cmp	r3, ip
 800b034:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b038:	f106 0610 	add.w	r6, r6, #16
 800b03c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b040:	f102 0210 	add.w	r2, r2, #16
 800b044:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b048:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b04c:	f105 0510 	add.w	r5, r5, #16
 800b050:	f104 0410 	add.w	r4, r4, #16
 800b054:	f47f af5c 	bne.w	800af10 <arm_cfft_radix8by2_f32+0x38>
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	b28c      	uxth	r4, r1
 800b05c:	4621      	mov	r1, r4
 800b05e:	2302      	movs	r3, #2
 800b060:	f000 fb3c 	bl	800b6dc <arm_radix8_butterfly_f32>
 800b064:	ecbd 8b08 	vpop	{d8-d11}
 800b068:	4621      	mov	r1, r4
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4640      	mov	r0, r8
 800b06e:	2302      	movs	r3, #2
 800b070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	f000 bb32 	b.w	800b6dc <arm_radix8_butterfly_f32>

0800b078 <arm_cfft_radix8by4_f32>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	ed2d 8b0a 	vpush	{d8-d12}
 800b080:	b08d      	sub	sp, #52	; 0x34
 800b082:	460d      	mov	r5, r1
 800b084:	910b      	str	r1, [sp, #44]	; 0x2c
 800b086:	8801      	ldrh	r1, [r0, #0]
 800b088:	6842      	ldr	r2, [r0, #4]
 800b08a:	900a      	str	r0, [sp, #40]	; 0x28
 800b08c:	0849      	lsrs	r1, r1, #1
 800b08e:	008b      	lsls	r3, r1, #2
 800b090:	18ee      	adds	r6, r5, r3
 800b092:	18f0      	adds	r0, r6, r3
 800b094:	edd0 5a00 	vldr	s11, [r0]
 800b098:	edd5 7a00 	vldr	s15, [r5]
 800b09c:	ed96 7a00 	vldr	s14, [r6]
 800b0a0:	edd0 3a01 	vldr	s7, [r0, #4]
 800b0a4:	ed96 4a01 	vldr	s8, [r6, #4]
 800b0a8:	ed95 5a01 	vldr	s10, [r5, #4]
 800b0ac:	9008      	str	r0, [sp, #32]
 800b0ae:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b0b2:	18c7      	adds	r7, r0, r3
 800b0b4:	edd7 4a00 	vldr	s9, [r7]
 800b0b8:	ed97 3a01 	vldr	s6, [r7, #4]
 800b0bc:	9701      	str	r7, [sp, #4]
 800b0be:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b0c2:	462c      	mov	r4, r5
 800b0c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b0c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b0cc:	ee16 ca90 	vmov	ip, s13
 800b0d0:	f844 cb08 	str.w	ip, [r4], #8
 800b0d4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b0d8:	edd6 5a01 	vldr	s11, [r6, #4]
 800b0dc:	edd7 2a01 	vldr	s5, [r7, #4]
 800b0e0:	9404      	str	r4, [sp, #16]
 800b0e2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b0e6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b0ea:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b0ee:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b0f2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b0f6:	0849      	lsrs	r1, r1, #1
 800b0f8:	f102 0e08 	add.w	lr, r2, #8
 800b0fc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b100:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b104:	9109      	str	r1, [sp, #36]	; 0x24
 800b106:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b10a:	f1a1 0902 	sub.w	r9, r1, #2
 800b10e:	f8cd e00c 	str.w	lr, [sp, #12]
 800b112:	4631      	mov	r1, r6
 800b114:	ee13 ea90 	vmov	lr, s7
 800b118:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b11c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b120:	4604      	mov	r4, r0
 800b122:	edc5 5a01 	vstr	s11, [r5, #4]
 800b126:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b12a:	f841 eb08 	str.w	lr, [r1], #8
 800b12e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b132:	ee16 ea10 	vmov	lr, s12
 800b136:	ed86 5a01 	vstr	s10, [r6, #4]
 800b13a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b13e:	f844 eb08 	str.w	lr, [r4], #8
 800b142:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b146:	edc0 6a01 	vstr	s13, [r0, #4]
 800b14a:	9405      	str	r4, [sp, #20]
 800b14c:	4604      	mov	r4, r0
 800b14e:	ee17 0a90 	vmov	r0, s15
 800b152:	9106      	str	r1, [sp, #24]
 800b154:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b158:	f102 0110 	add.w	r1, r2, #16
 800b15c:	46bc      	mov	ip, r7
 800b15e:	9100      	str	r1, [sp, #0]
 800b160:	f847 0b08 	str.w	r0, [r7], #8
 800b164:	f102 0118 	add.w	r1, r2, #24
 800b168:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b16c:	9102      	str	r1, [sp, #8]
 800b16e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b172:	9007      	str	r0, [sp, #28]
 800b174:	f000 8134 	beq.w	800b3e0 <arm_cfft_radix8by4_f32+0x368>
 800b178:	f102 0920 	add.w	r9, r2, #32
 800b17c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800b180:	9a01      	ldr	r2, [sp, #4]
 800b182:	f8dd a000 	ldr.w	sl, [sp]
 800b186:	3b0c      	subs	r3, #12
 800b188:	4683      	mov	fp, r0
 800b18a:	4463      	add	r3, ip
 800b18c:	f105 0e10 	add.w	lr, r5, #16
 800b190:	f1a4 010c 	sub.w	r1, r4, #12
 800b194:	f104 0510 	add.w	r5, r4, #16
 800b198:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b19c:	f1a2 040c 	sub.w	r4, r2, #12
 800b1a0:	f106 0010 	add.w	r0, r6, #16
 800b1a4:	3210      	adds	r2, #16
 800b1a6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b1aa:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b1ae:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b1b2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b1b6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b1ba:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b1be:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b1c2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b1c6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b1ca:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b1ce:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b1d2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b1d6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b1da:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b1de:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b1e2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b1e6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b1ea:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b1ee:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b1f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b1f6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b1fa:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b1fe:	ed94 7a02 	vldr	s14, [r4, #8]
 800b202:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b206:	ed91 ba02 	vldr	s22, [r1, #8]
 800b20a:	edd3 9a02 	vldr	s19, [r3, #8]
 800b20e:	edd4 2a01 	vldr	s5, [r4, #4]
 800b212:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b216:	ed93 5a01 	vldr	s10, [r3, #4]
 800b21a:	edd1 0a01 	vldr	s1, [r1, #4]
 800b21e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b222:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b226:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b22a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b22e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b232:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b236:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b23a:	ed91 7a01 	vldr	s14, [r1, #4]
 800b23e:	edd3 8a01 	vldr	s17, [r3, #4]
 800b242:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b246:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b24a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b24e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b252:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b256:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b25a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b25e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b262:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b266:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b26a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b26e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b272:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b276:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b27a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b27e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b282:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b286:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b28a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b28e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b292:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b296:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b29a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b29e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b2a2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b2a6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b2aa:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b2ae:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b2b2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b2b6:	edc1 8a01 	vstr	s17, [r1, #4]
 800b2ba:	ed81 aa02 	vstr	s20, [r1, #8]
 800b2be:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b2c2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b2c6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b2ca:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b2ce:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b2d2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b2d6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b2da:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b2de:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b2e2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b2e6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b2ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b2ee:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b2f2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b2f6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b2fa:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b2fe:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b302:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b306:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b30a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b30e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b312:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b316:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b31a:	ed84 7a01 	vstr	s14, [r4, #4]
 800b31e:	ed84 4a02 	vstr	s8, [r4, #8]
 800b322:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b326:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b32a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800b32e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800b332:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b336:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b33a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b33e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b342:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b346:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b34a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b34e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b352:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b356:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b35a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b35e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b362:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b366:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b36a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b36e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b372:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b376:	f10e 0e08 	add.w	lr, lr, #8
 800b37a:	ed83 3a02 	vstr	s6, [r3, #8]
 800b37e:	ed83 7a01 	vstr	s14, [r3, #4]
 800b382:	f1ac 0c08 	sub.w	ip, ip, #8
 800b386:	f10a 0a08 	add.w	sl, sl, #8
 800b38a:	f100 0008 	add.w	r0, r0, #8
 800b38e:	f1a1 0108 	sub.w	r1, r1, #8
 800b392:	f109 0910 	add.w	r9, r9, #16
 800b396:	f105 0508 	add.w	r5, r5, #8
 800b39a:	f1a4 0408 	sub.w	r4, r4, #8
 800b39e:	f108 0818 	add.w	r8, r8, #24
 800b3a2:	f102 0208 	add.w	r2, r2, #8
 800b3a6:	f1a3 0308 	sub.w	r3, r3, #8
 800b3aa:	f47f aefc 	bne.w	800b1a6 <arm_cfft_radix8by4_f32+0x12e>
 800b3ae:	9907      	ldr	r1, [sp, #28]
 800b3b0:	9800      	ldr	r0, [sp, #0]
 800b3b2:	00cb      	lsls	r3, r1, #3
 800b3b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b3b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b3bc:	9100      	str	r1, [sp, #0]
 800b3be:	9904      	ldr	r1, [sp, #16]
 800b3c0:	4419      	add	r1, r3
 800b3c2:	9104      	str	r1, [sp, #16]
 800b3c4:	9903      	ldr	r1, [sp, #12]
 800b3c6:	4419      	add	r1, r3
 800b3c8:	9103      	str	r1, [sp, #12]
 800b3ca:	9906      	ldr	r1, [sp, #24]
 800b3cc:	4419      	add	r1, r3
 800b3ce:	9106      	str	r1, [sp, #24]
 800b3d0:	9905      	ldr	r1, [sp, #20]
 800b3d2:	441f      	add	r7, r3
 800b3d4:	4419      	add	r1, r3
 800b3d6:	9b02      	ldr	r3, [sp, #8]
 800b3d8:	9105      	str	r1, [sp, #20]
 800b3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3de:	9302      	str	r3, [sp, #8]
 800b3e0:	9904      	ldr	r1, [sp, #16]
 800b3e2:	9805      	ldr	r0, [sp, #20]
 800b3e4:	ed91 4a00 	vldr	s8, [r1]
 800b3e8:	edd0 6a00 	vldr	s13, [r0]
 800b3ec:	9b06      	ldr	r3, [sp, #24]
 800b3ee:	ed97 3a00 	vldr	s6, [r7]
 800b3f2:	edd3 7a00 	vldr	s15, [r3]
 800b3f6:	edd0 4a01 	vldr	s9, [r0, #4]
 800b3fa:	edd1 3a01 	vldr	s7, [r1, #4]
 800b3fe:	ed97 2a01 	vldr	s4, [r7, #4]
 800b402:	ed93 7a01 	vldr	s14, [r3, #4]
 800b406:	9a03      	ldr	r2, [sp, #12]
 800b408:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800b40c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b410:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b414:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b418:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b41c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b420:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b424:	ed81 5a00 	vstr	s10, [r1]
 800b428:	ed93 5a01 	vldr	s10, [r3, #4]
 800b42c:	edd7 4a01 	vldr	s9, [r7, #4]
 800b430:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b434:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b438:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b43c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b440:	ed81 5a01 	vstr	s10, [r1, #4]
 800b444:	edd2 1a00 	vldr	s3, [r2]
 800b448:	edd2 2a01 	vldr	s5, [r2, #4]
 800b44c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b450:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b454:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b458:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b45c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b460:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b464:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b468:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b46c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b470:	edc3 2a00 	vstr	s5, [r3]
 800b474:	ed83 5a01 	vstr	s10, [r3, #4]
 800b478:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b482:	ed93 4a01 	vldr	s8, [r3, #4]
 800b486:	ed93 5a00 	vldr	s10, [r3]
 800b48a:	9b02      	ldr	r3, [sp, #8]
 800b48c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b490:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b494:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b498:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b49c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b4a0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b4a4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b4a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b4ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b4b0:	ed80 6a01 	vstr	s12, [r0, #4]
 800b4b4:	edc0 5a00 	vstr	s11, [r0]
 800b4b8:	edd3 5a01 	vldr	s11, [r3, #4]
 800b4bc:	edd3 6a00 	vldr	s13, [r3]
 800b4c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b4c4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b4c8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b4cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b4d0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b4d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b4d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b4dc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b4e0:	ed87 7a01 	vstr	s14, [r7, #4]
 800b4e4:	edc7 7a00 	vstr	s15, [r7]
 800b4e8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	686a      	ldr	r2, [r5, #4]
 800b4f0:	2304      	movs	r3, #4
 800b4f2:	f000 f8f3 	bl	800b6dc <arm_radix8_butterfly_f32>
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	686a      	ldr	r2, [r5, #4]
 800b4fc:	2304      	movs	r3, #4
 800b4fe:	f000 f8ed 	bl	800b6dc <arm_radix8_butterfly_f32>
 800b502:	9808      	ldr	r0, [sp, #32]
 800b504:	686a      	ldr	r2, [r5, #4]
 800b506:	4621      	mov	r1, r4
 800b508:	2304      	movs	r3, #4
 800b50a:	f000 f8e7 	bl	800b6dc <arm_radix8_butterfly_f32>
 800b50e:	686a      	ldr	r2, [r5, #4]
 800b510:	9801      	ldr	r0, [sp, #4]
 800b512:	4621      	mov	r1, r4
 800b514:	2304      	movs	r3, #4
 800b516:	b00d      	add	sp, #52	; 0x34
 800b518:	ecbd 8b0a 	vpop	{d8-d12}
 800b51c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b520:	f000 b8dc 	b.w	800b6dc <arm_radix8_butterfly_f32>

0800b524 <arm_cfft_f32>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	2a01      	cmp	r2, #1
 800b52a:	4606      	mov	r6, r0
 800b52c:	4617      	mov	r7, r2
 800b52e:	460c      	mov	r4, r1
 800b530:	4698      	mov	r8, r3
 800b532:	8805      	ldrh	r5, [r0, #0]
 800b534:	d056      	beq.n	800b5e4 <arm_cfft_f32+0xc0>
 800b536:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b53a:	d063      	beq.n	800b604 <arm_cfft_f32+0xe0>
 800b53c:	d916      	bls.n	800b56c <arm_cfft_f32+0x48>
 800b53e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800b542:	d01a      	beq.n	800b57a <arm_cfft_f32+0x56>
 800b544:	d947      	bls.n	800b5d6 <arm_cfft_f32+0xb2>
 800b546:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800b54a:	d05b      	beq.n	800b604 <arm_cfft_f32+0xe0>
 800b54c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800b550:	d105      	bne.n	800b55e <arm_cfft_f32+0x3a>
 800b552:	2301      	movs	r3, #1
 800b554:	6872      	ldr	r2, [r6, #4]
 800b556:	4629      	mov	r1, r5
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 f8bf 	bl	800b6dc <arm_radix8_butterfly_f32>
 800b55e:	f1b8 0f00 	cmp.w	r8, #0
 800b562:	d111      	bne.n	800b588 <arm_cfft_f32+0x64>
 800b564:	2f01      	cmp	r7, #1
 800b566:	d016      	beq.n	800b596 <arm_cfft_f32+0x72>
 800b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56c:	2d20      	cmp	r5, #32
 800b56e:	d049      	beq.n	800b604 <arm_cfft_f32+0xe0>
 800b570:	d935      	bls.n	800b5de <arm_cfft_f32+0xba>
 800b572:	2d40      	cmp	r5, #64	; 0x40
 800b574:	d0ed      	beq.n	800b552 <arm_cfft_f32+0x2e>
 800b576:	2d80      	cmp	r5, #128	; 0x80
 800b578:	d1f1      	bne.n	800b55e <arm_cfft_f32+0x3a>
 800b57a:	4621      	mov	r1, r4
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff fcab 	bl	800aed8 <arm_cfft_radix8by2_f32>
 800b582:	f1b8 0f00 	cmp.w	r8, #0
 800b586:	d0ed      	beq.n	800b564 <arm_cfft_f32+0x40>
 800b588:	68b2      	ldr	r2, [r6, #8]
 800b58a:	89b1      	ldrh	r1, [r6, #12]
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 f841 	bl	800b614 <arm_bitreversal_32>
 800b592:	2f01      	cmp	r7, #1
 800b594:	d1e8      	bne.n	800b568 <arm_cfft_f32+0x44>
 800b596:	ee07 5a90 	vmov	s15, r5
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	d0de      	beq.n	800b568 <arm_cfft_f32+0x44>
 800b5aa:	f104 0108 	add.w	r1, r4, #8
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	f101 0108 	add.w	r1, r1, #8
 800b5b8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b5bc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b5c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b5c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b5c8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b5cc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b5d0:	d1ee      	bne.n	800b5b0 <arm_cfft_f32+0x8c>
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800b5da:	d0ba      	beq.n	800b552 <arm_cfft_f32+0x2e>
 800b5dc:	e7bf      	b.n	800b55e <arm_cfft_f32+0x3a>
 800b5de:	2d10      	cmp	r5, #16
 800b5e0:	d0cb      	beq.n	800b57a <arm_cfft_f32+0x56>
 800b5e2:	e7bc      	b.n	800b55e <arm_cfft_f32+0x3a>
 800b5e4:	b19d      	cbz	r5, 800b60e <arm_cfft_f32+0xea>
 800b5e6:	f101 030c 	add.w	r3, r1, #12
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b5f0:	3201      	adds	r2, #1
 800b5f2:	eef1 7a67 	vneg.f32	s15, s15
 800b5f6:	4295      	cmp	r5, r2
 800b5f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b5fc:	f103 0308 	add.w	r3, r3, #8
 800b600:	d1f4      	bne.n	800b5ec <arm_cfft_f32+0xc8>
 800b602:	e798      	b.n	800b536 <arm_cfft_f32+0x12>
 800b604:	4621      	mov	r1, r4
 800b606:	4630      	mov	r0, r6
 800b608:	f7ff fd36 	bl	800b078 <arm_cfft_radix8by4_f32>
 800b60c:	e7a7      	b.n	800b55e <arm_cfft_f32+0x3a>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0aa      	beq.n	800b568 <arm_cfft_f32+0x44>
 800b612:	e7b9      	b.n	800b588 <arm_cfft_f32+0x64>

0800b614 <arm_bitreversal_32>:
 800b614:	b1e9      	cbz	r1, 800b652 <arm_bitreversal_32+0x3e>
 800b616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b618:	2500      	movs	r5, #0
 800b61a:	f102 0e02 	add.w	lr, r2, #2
 800b61e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b622:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b626:	08a4      	lsrs	r4, r4, #2
 800b628:	089b      	lsrs	r3, r3, #2
 800b62a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b62e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b632:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b636:	00a6      	lsls	r6, r4, #2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b63e:	3304      	adds	r3, #4
 800b640:	1d34      	adds	r4, r6, #4
 800b642:	3502      	adds	r5, #2
 800b644:	58c6      	ldr	r6, [r0, r3]
 800b646:	5907      	ldr	r7, [r0, r4]
 800b648:	50c7      	str	r7, [r0, r3]
 800b64a:	428d      	cmp	r5, r1
 800b64c:	5106      	str	r6, [r0, r4]
 800b64e:	d3e6      	bcc.n	800b61e <arm_bitreversal_32+0xa>
 800b650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b652:	4770      	bx	lr

0800b654 <arm_abs_f32>:
 800b654:	b470      	push	{r4, r5, r6}
 800b656:	0896      	lsrs	r6, r2, #2
 800b658:	d025      	beq.n	800b6a6 <arm_abs_f32+0x52>
 800b65a:	f100 0410 	add.w	r4, r0, #16
 800b65e:	f101 0310 	add.w	r3, r1, #16
 800b662:	4635      	mov	r5, r6
 800b664:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b668:	eef0 7ae7 	vabs.f32	s15, s15
 800b66c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b670:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b674:	eef0 7ae7 	vabs.f32	s15, s15
 800b678:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b67c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b680:	eef0 7ae7 	vabs.f32	s15, s15
 800b684:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b688:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b68c:	3d01      	subs	r5, #1
 800b68e:	eef0 7ae7 	vabs.f32	s15, s15
 800b692:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b696:	f104 0410 	add.w	r4, r4, #16
 800b69a:	f103 0310 	add.w	r3, r3, #16
 800b69e:	d1e1      	bne.n	800b664 <arm_abs_f32+0x10>
 800b6a0:	0136      	lsls	r6, r6, #4
 800b6a2:	4430      	add	r0, r6
 800b6a4:	4431      	add	r1, r6
 800b6a6:	f012 0203 	ands.w	r2, r2, #3
 800b6aa:	d015      	beq.n	800b6d8 <arm_abs_f32+0x84>
 800b6ac:	edd0 7a00 	vldr	s15, [r0]
 800b6b0:	3a01      	subs	r2, #1
 800b6b2:	eef0 7ae7 	vabs.f32	s15, s15
 800b6b6:	edc1 7a00 	vstr	s15, [r1]
 800b6ba:	d00d      	beq.n	800b6d8 <arm_abs_f32+0x84>
 800b6bc:	edd0 7a01 	vldr	s15, [r0, #4]
 800b6c0:	2a01      	cmp	r2, #1
 800b6c2:	eef0 7ae7 	vabs.f32	s15, s15
 800b6c6:	edc1 7a01 	vstr	s15, [r1, #4]
 800b6ca:	d005      	beq.n	800b6d8 <arm_abs_f32+0x84>
 800b6cc:	edd0 7a02 	vldr	s15, [r0, #8]
 800b6d0:	eef0 7ae7 	vabs.f32	s15, s15
 800b6d4:	edc1 7a02 	vstr	s15, [r1, #8]
 800b6d8:	bc70      	pop	{r4, r5, r6}
 800b6da:	4770      	bx	lr

0800b6dc <arm_radix8_butterfly_f32>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	ed2d 8b10 	vpush	{d8-d15}
 800b6e4:	b095      	sub	sp, #84	; 0x54
 800b6e6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b9d4 <arm_radix8_butterfly_f32+0x2f8>
 800b6f2:	9012      	str	r0, [sp, #72]	; 0x48
 800b6f4:	468b      	mov	fp, r1
 800b6f6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b6f8:	4689      	mov	r9, r1
 800b6fa:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b700:	960f      	str	r6, [sp, #60]	; 0x3c
 800b702:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b706:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b70a:	eb03 0508 	add.w	r5, r3, r8
 800b70e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b712:	eb05 040e 	add.w	r4, r5, lr
 800b716:	0137      	lsls	r7, r6, #4
 800b718:	eba6 030a 	sub.w	r3, r6, sl
 800b71c:	eb04 000e 	add.w	r0, r4, lr
 800b720:	44b2      	add	sl, r6
 800b722:	1d3a      	adds	r2, r7, #4
 800b724:	9702      	str	r7, [sp, #8]
 800b726:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b72a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b72e:	ebae 0c06 	sub.w	ip, lr, r6
 800b732:	9703      	str	r7, [sp, #12]
 800b734:	eb03 0708 	add.w	r7, r3, r8
 800b738:	9701      	str	r7, [sp, #4]
 800b73a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b73e:	9706      	str	r7, [sp, #24]
 800b740:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b742:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b746:	f10e 0104 	add.w	r1, lr, #4
 800b74a:	4439      	add	r1, r7
 800b74c:	443a      	add	r2, r7
 800b74e:	0137      	lsls	r7, r6, #4
 800b750:	00f6      	lsls	r6, r6, #3
 800b752:	9704      	str	r7, [sp, #16]
 800b754:	9605      	str	r6, [sp, #20]
 800b756:	9f01      	ldr	r7, [sp, #4]
 800b758:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800b75a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b75e:	f04f 0c00 	mov.w	ip, #0
 800b762:	edd4 6a00 	vldr	s13, [r4]
 800b766:	edd7 1a00 	vldr	s3, [r7]
 800b76a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b76e:	edd5 5a00 	vldr	s11, [r5]
 800b772:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b776:	ed90 6a00 	vldr	s12, [r0]
 800b77a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b77e:	ed93 3a00 	vldr	s6, [r3]
 800b782:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b786:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b78a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b78e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b792:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b796:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b79a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b79e:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b7a2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b7a6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b7aa:	ed85 4a00 	vstr	s8, [r5]
 800b7ae:	edd1 6a00 	vldr	s13, [r1]
 800b7b2:	ed94 9a01 	vldr	s18, [r4, #4]
 800b7b6:	edd3 2a01 	vldr	s5, [r3, #4]
 800b7ba:	edd7 8a01 	vldr	s17, [r7, #4]
 800b7be:	edd6 0a00 	vldr	s1, [r6]
 800b7c2:	edd5 3a01 	vldr	s7, [r5, #4]
 800b7c6:	ed90 8a01 	vldr	s16, [r0, #4]
 800b7ca:	ed92 7a00 	vldr	s14, [r2]
 800b7ce:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b7d2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b7d6:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b7da:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b7de:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b7e2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b7e6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b7ea:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b7ee:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b7f2:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b7f6:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b7fa:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b7fe:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b802:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b806:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b80a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b80e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b812:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b816:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b81a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b81e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b822:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b826:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b82a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b82e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b832:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b836:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b83a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b83e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b842:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b846:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b84a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b84e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b852:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b856:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b85a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b85e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b862:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b866:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b86a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b86e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b872:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b876:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b87a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b87e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b882:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b886:	44dc      	add	ip, fp
 800b888:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b88c:	45e1      	cmp	r9, ip
 800b88e:	ed86 8a00 	vstr	s16, [r6]
 800b892:	ed85 2a01 	vstr	s4, [r5, #4]
 800b896:	4456      	add	r6, sl
 800b898:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b89c:	4455      	add	r5, sl
 800b89e:	edc0 6a00 	vstr	s13, [r0]
 800b8a2:	ed82 1a00 	vstr	s2, [r2]
 800b8a6:	ed80 5a01 	vstr	s10, [r0, #4]
 800b8aa:	4452      	add	r2, sl
 800b8ac:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b8b0:	4450      	add	r0, sl
 800b8b2:	edc7 2a00 	vstr	s5, [r7]
 800b8b6:	edc4 4a00 	vstr	s9, [r4]
 800b8ba:	ed83 7a00 	vstr	s14, [r3]
 800b8be:	edc1 5a00 	vstr	s11, [r1]
 800b8c2:	edc7 3a01 	vstr	s7, [r7, #4]
 800b8c6:	4451      	add	r1, sl
 800b8c8:	ed84 6a01 	vstr	s12, [r4, #4]
 800b8cc:	4457      	add	r7, sl
 800b8ce:	edc3 7a01 	vstr	s15, [r3, #4]
 800b8d2:	4454      	add	r4, sl
 800b8d4:	4453      	add	r3, sl
 800b8d6:	f63f af44 	bhi.w	800b762 <arm_radix8_butterfly_f32+0x86>
 800b8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8dc:	2b07      	cmp	r3, #7
 800b8de:	f240 81b7 	bls.w	800bc50 <arm_radix8_butterfly_f32+0x574>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	9903      	ldr	r1, [sp, #12]
 800b8e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b8e8:	9e05      	ldr	r6, [sp, #20]
 800b8ea:	9a04      	ldr	r2, [sp, #16]
 800b8ec:	f103 0c08 	add.w	ip, r3, #8
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	3108      	adds	r1, #8
 800b8f4:	f108 0808 	add.w	r8, r8, #8
 800b8f8:	1841      	adds	r1, r0, r1
 800b8fa:	3608      	adds	r6, #8
 800b8fc:	330c      	adds	r3, #12
 800b8fe:	4604      	mov	r4, r0
 800b900:	4444      	add	r4, r8
 800b902:	18c3      	adds	r3, r0, r3
 800b904:	9109      	str	r1, [sp, #36]	; 0x24
 800b906:	1981      	adds	r1, r0, r6
 800b908:	f10e 0e08 	add.w	lr, lr, #8
 800b90c:	3208      	adds	r2, #8
 800b90e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b910:	9107      	str	r1, [sp, #28]
 800b912:	4604      	mov	r4, r0
 800b914:	4601      	mov	r1, r0
 800b916:	9304      	str	r3, [sp, #16]
 800b918:	f100 030c 	add.w	r3, r0, #12
 800b91c:	4474      	add	r4, lr
 800b91e:	f04f 0801 	mov.w	r8, #1
 800b922:	1882      	adds	r2, r0, r2
 800b924:	4461      	add	r1, ip
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	464b      	mov	r3, r9
 800b92a:	940a      	str	r4, [sp, #40]	; 0x28
 800b92c:	46c1      	mov	r9, r8
 800b92e:	9208      	str	r2, [sp, #32]
 800b930:	46d8      	mov	r8, fp
 800b932:	9106      	str	r1, [sp, #24]
 800b934:	f04f 0e00 	mov.w	lr, #0
 800b938:	469b      	mov	fp, r3
 800b93a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b93c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b93e:	449e      	add	lr, r3
 800b940:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b944:	441a      	add	r2, r3
 800b946:	920e      	str	r2, [sp, #56]	; 0x38
 800b948:	441a      	add	r2, r3
 800b94a:	18d4      	adds	r4, r2, r3
 800b94c:	18e5      	adds	r5, r4, r3
 800b94e:	18ee      	adds	r6, r5, r3
 800b950:	18f7      	adds	r7, r6, r3
 800b952:	eb07 0c03 	add.w	ip, r7, r3
 800b956:	920d      	str	r2, [sp, #52]	; 0x34
 800b958:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b95c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b960:	910c      	str	r1, [sp, #48]	; 0x30
 800b962:	4419      	add	r1, r3
 800b964:	9103      	str	r1, [sp, #12]
 800b966:	4419      	add	r1, r3
 800b968:	18ca      	adds	r2, r1, r3
 800b96a:	9202      	str	r2, [sp, #8]
 800b96c:	441a      	add	r2, r3
 800b96e:	18d0      	adds	r0, r2, r3
 800b970:	ed92 ea01 	vldr	s28, [r2, #4]
 800b974:	9a02      	ldr	r2, [sp, #8]
 800b976:	edd4 7a00 	vldr	s15, [r4]
 800b97a:	edd2 da01 	vldr	s27, [r2, #4]
 800b97e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b980:	ed91 da01 	vldr	s26, [r1, #4]
 800b984:	ed92 ca01 	vldr	s24, [r2, #4]
 800b988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b98a:	9903      	ldr	r1, [sp, #12]
 800b98c:	edcd 7a03 	vstr	s15, [sp, #12]
 800b990:	edd2 7a00 	vldr	s15, [r2]
 800b994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b996:	edcd 7a02 	vstr	s15, [sp, #8]
 800b99a:	edd2 7a00 	vldr	s15, [r2]
 800b99e:	edd0 ea01 	vldr	s29, [r0, #4]
 800b9a2:	edd1 ca01 	vldr	s25, [r1, #4]
 800b9a6:	eddc ba00 	vldr	s23, [ip]
 800b9aa:	edd7 aa00 	vldr	s21, [r7]
 800b9ae:	ed96 aa00 	vldr	s20, [r6]
 800b9b2:	edd5 9a00 	vldr	s19, [r5]
 800b9b6:	edcd 7a01 	vstr	s15, [sp, #4]
 800b9ba:	4403      	add	r3, r0
 800b9bc:	ed93 fa01 	vldr	s30, [r3, #4]
 800b9c0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b9c4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b9c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9d0:	46cc      	mov	ip, r9
 800b9d2:	e001      	b.n	800b9d8 <arm_radix8_butterfly_f32+0x2fc>
 800b9d4:	3f3504f3 	.word	0x3f3504f3
 800b9d8:	ed91 6a00 	vldr	s12, [r1]
 800b9dc:	ed93 5a00 	vldr	s10, [r3]
 800b9e0:	edd0 fa00 	vldr	s31, [r0]
 800b9e4:	edd4 7a00 	vldr	s15, [r4]
 800b9e8:	ed95 7a00 	vldr	s14, [r5]
 800b9ec:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b9f0:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b9f4:	ed92 2a00 	vldr	s4, [r2]
 800b9f8:	ed96 0a00 	vldr	s0, [r6]
 800b9fc:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ba00:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ba04:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800ba08:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ba0c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ba10:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ba14:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ba18:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ba1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba20:	ed06 6a01 	vstr	s12, [r6, #-4]
 800ba24:	edd4 8a01 	vldr	s17, [r4, #4]
 800ba28:	ed92 9a01 	vldr	s18, [r2, #4]
 800ba2c:	edd7 0a00 	vldr	s1, [r7]
 800ba30:	edd1 2a01 	vldr	s5, [r1, #4]
 800ba34:	ed95 7a01 	vldr	s14, [r5, #4]
 800ba38:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba3c:	edd0 5a01 	vldr	s11, [r0, #4]
 800ba40:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ba44:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800ba48:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ba4c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800ba50:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ba54:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ba58:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ba5c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ba60:	ee32 9a27 	vadd.f32	s18, s4, s15
 800ba64:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ba68:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ba6c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ba70:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ba74:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ba78:	ee32 1a08 	vadd.f32	s2, s4, s16
 800ba7c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800ba80:	ee32 2a48 	vsub.f32	s4, s4, s16
 800ba84:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ba88:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800ba8c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800ba90:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ba94:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800ba98:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800ba9c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800baa0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800baa4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800baa8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800baac:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bab0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bab4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bab8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800babc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bac0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bac4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bac8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800bacc:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bad0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bad4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bad8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800badc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800bae0:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bae4:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bae8:	ee38 0a80 	vadd.f32	s0, s17, s0
 800baec:	ee73 3a82 	vadd.f32	s7, s7, s4
 800baf0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800baf4:	ed9d 2a01 	vldr	s4, [sp, #4]
 800baf8:	eddd 1a02 	vldr	s3, [sp, #8]
 800bafc:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bb00:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bb04:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bb08:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bb0c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bb10:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bb14:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bb18:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bb1c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bb20:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bb24:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bb28:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bb2c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800bb30:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bb34:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bb38:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bb3c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800bb40:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bb44:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bb48:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bb4c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bb50:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bb54:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bb58:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bb5c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bb60:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bb64:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bb68:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bb6c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bb70:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bb74:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bb78:	eddd 5a03 	vldr	s11, [sp, #12]
 800bb7c:	edc6 fa00 	vstr	s31, [r6]
 800bb80:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bb84:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bb88:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bb8c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bb90:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bb94:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bb98:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bb9c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bba0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bba4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bba8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bbac:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bbb0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bbb4:	44c4      	add	ip, r8
 800bbb6:	45e3      	cmp	fp, ip
 800bbb8:	edc3 3a00 	vstr	s7, [r3]
 800bbbc:	edc3 6a01 	vstr	s13, [r3, #4]
 800bbc0:	4456      	add	r6, sl
 800bbc2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bbc6:	edc7 0a00 	vstr	s1, [r7]
 800bbca:	4453      	add	r3, sl
 800bbcc:	ed80 2a00 	vstr	s4, [r0]
 800bbd0:	edc0 2a01 	vstr	s5, [r0, #4]
 800bbd4:	4457      	add	r7, sl
 800bbd6:	edc2 1a00 	vstr	s3, [r2]
 800bbda:	ed82 7a01 	vstr	s14, [r2, #4]
 800bbde:	4450      	add	r0, sl
 800bbe0:	ed85 8a00 	vstr	s16, [r5]
 800bbe4:	ed85 0a01 	vstr	s0, [r5, #4]
 800bbe8:	4452      	add	r2, sl
 800bbea:	edc1 4a00 	vstr	s9, [r1]
 800bbee:	4455      	add	r5, sl
 800bbf0:	ed81 3a01 	vstr	s6, [r1, #4]
 800bbf4:	edc4 8a00 	vstr	s17, [r4]
 800bbf8:	ed84 6a01 	vstr	s12, [r4, #4]
 800bbfc:	4451      	add	r1, sl
 800bbfe:	4454      	add	r4, sl
 800bc00:	f63f aeea 	bhi.w	800b9d8 <arm_radix8_butterfly_f32+0x2fc>
 800bc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc06:	3308      	adds	r3, #8
 800bc08:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc12:	3308      	adds	r3, #8
 800bc14:	9309      	str	r3, [sp, #36]	; 0x24
 800bc16:	9b08      	ldr	r3, [sp, #32]
 800bc18:	3308      	adds	r3, #8
 800bc1a:	9308      	str	r3, [sp, #32]
 800bc1c:	9b07      	ldr	r3, [sp, #28]
 800bc1e:	3308      	adds	r3, #8
 800bc20:	9307      	str	r3, [sp, #28]
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	3308      	adds	r3, #8
 800bc26:	9306      	str	r3, [sp, #24]
 800bc28:	9b05      	ldr	r3, [sp, #20]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	3308      	adds	r3, #8
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc36:	f109 0901 	add.w	r9, r9, #1
 800bc3a:	454b      	cmp	r3, r9
 800bc3c:	f47f ae7d 	bne.w	800b93a <arm_radix8_butterfly_f32+0x25e>
 800bc40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	46d9      	mov	r9, fp
 800bc48:	9310      	str	r3, [sp, #64]	; 0x40
 800bc4a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800bc4e:	e554      	b.n	800b6fa <arm_radix8_butterfly_f32+0x1e>
 800bc50:	b015      	add	sp, #84	; 0x54
 800bc52:	ecbd 8b10 	vpop	{d8-d15}
 800bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5a:	bf00      	nop

0800bc5c <memset>:
 800bc5c:	4402      	add	r2, r0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d100      	bne.n	800bc66 <memset+0xa>
 800bc64:	4770      	bx	lr
 800bc66:	f803 1b01 	strb.w	r1, [r3], #1
 800bc6a:	e7f9      	b.n	800bc60 <memset+0x4>

0800bc6c <__errno>:
 800bc6c:	4b01      	ldr	r3, [pc, #4]	; (800bc74 <__errno+0x8>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20000058 	.word	0x20000058

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4d0d      	ldr	r5, [pc, #52]	; (800bcb0 <__libc_init_array+0x38>)
 800bc7c:	4c0d      	ldr	r4, [pc, #52]	; (800bcb4 <__libc_init_array+0x3c>)
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	2600      	movs	r6, #0
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	4d0b      	ldr	r5, [pc, #44]	; (800bcb8 <__libc_init_array+0x40>)
 800bc8a:	4c0c      	ldr	r4, [pc, #48]	; (800bcbc <__libc_init_array+0x44>)
 800bc8c:	f000 fdf4 	bl	800c878 <_init>
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	2600      	movs	r6, #0
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	0801fd14 	.word	0x0801fd14
 800bcb4:	0801fd14 	.word	0x0801fd14
 800bcb8:	0801fd14 	.word	0x0801fd14
 800bcbc:	0801fd18 	.word	0x0801fd18

0800bcc0 <sqrtf>:
 800bcc0:	b508      	push	{r3, lr}
 800bcc2:	ed2d 8b02 	vpush	{d8}
 800bcc6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcca:	f000 f85b 	bl	800bd84 <__ieee754_sqrtf>
 800bcce:	eeb4 8a48 	vcmp.f32	s16, s16
 800bcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd6:	d60c      	bvs.n	800bcf2 <sqrtf+0x32>
 800bcd8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800bcf8 <sqrtf+0x38>
 800bcdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce4:	d505      	bpl.n	800bcf2 <sqrtf+0x32>
 800bce6:	f7ff ffc1 	bl	800bc6c <__errno>
 800bcea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bcee:	2321      	movs	r3, #33	; 0x21
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	ecbd 8b02 	vpop	{d8}
 800bcf6:	bd08      	pop	{r3, pc}
 800bcf8:	00000000 	.word	0x00000000

0800bcfc <cosf>:
 800bcfc:	ee10 3a10 	vmov	r3, s0
 800bd00:	b507      	push	{r0, r1, r2, lr}
 800bd02:	4a1e      	ldr	r2, [pc, #120]	; (800bd7c <cosf+0x80>)
 800bd04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	dc06      	bgt.n	800bd1a <cosf+0x1e>
 800bd0c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800bd80 <cosf+0x84>
 800bd10:	b003      	add	sp, #12
 800bd12:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd16:	f000 b8bb 	b.w	800be90 <__kernel_cosf>
 800bd1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd1e:	db04      	blt.n	800bd2a <cosf+0x2e>
 800bd20:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bd24:	b003      	add	sp, #12
 800bd26:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd2a:	4668      	mov	r0, sp
 800bd2c:	f000 f956 	bl	800bfdc <__ieee754_rem_pio2f>
 800bd30:	f000 0003 	and.w	r0, r0, #3
 800bd34:	2801      	cmp	r0, #1
 800bd36:	d009      	beq.n	800bd4c <cosf+0x50>
 800bd38:	2802      	cmp	r0, #2
 800bd3a:	d010      	beq.n	800bd5e <cosf+0x62>
 800bd3c:	b9b0      	cbnz	r0, 800bd6c <cosf+0x70>
 800bd3e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd42:	ed9d 0a00 	vldr	s0, [sp]
 800bd46:	f000 f8a3 	bl	800be90 <__kernel_cosf>
 800bd4a:	e7eb      	b.n	800bd24 <cosf+0x28>
 800bd4c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd50:	ed9d 0a00 	vldr	s0, [sp]
 800bd54:	f000 f8fa 	bl	800bf4c <__kernel_sinf>
 800bd58:	eeb1 0a40 	vneg.f32	s0, s0
 800bd5c:	e7e2      	b.n	800bd24 <cosf+0x28>
 800bd5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd62:	ed9d 0a00 	vldr	s0, [sp]
 800bd66:	f000 f893 	bl	800be90 <__kernel_cosf>
 800bd6a:	e7f5      	b.n	800bd58 <cosf+0x5c>
 800bd6c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd70:	ed9d 0a00 	vldr	s0, [sp]
 800bd74:	2001      	movs	r0, #1
 800bd76:	f000 f8e9 	bl	800bf4c <__kernel_sinf>
 800bd7a:	e7d3      	b.n	800bd24 <cosf+0x28>
 800bd7c:	3f490fd8 	.word	0x3f490fd8
 800bd80:	00000000 	.word	0x00000000

0800bd84 <__ieee754_sqrtf>:
 800bd84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bd88:	4770      	bx	lr
 800bd8a:	0000      	movs	r0, r0
 800bd8c:	0000      	movs	r0, r0
	...

0800bd90 <floor>:
 800bd90:	ec51 0b10 	vmov	r0, r1, d0
 800bd94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800bda0:	2e13      	cmp	r6, #19
 800bda2:	ee10 5a10 	vmov	r5, s0
 800bda6:	ee10 8a10 	vmov	r8, s0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	dc31      	bgt.n	800be12 <floor+0x82>
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	da14      	bge.n	800bddc <floor+0x4c>
 800bdb2:	a333      	add	r3, pc, #204	; (adr r3, 800be80 <floor+0xf0>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa28 	bl	800020c <__adddf3>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f7f4 fe6a 	bl	8000a98 <__aeabi_dcmpgt>
 800bdc4:	b138      	cbz	r0, 800bdd6 <floor+0x46>
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	da53      	bge.n	800be72 <floor+0xe2>
 800bdca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800bdce:	4325      	orrs	r5, r4
 800bdd0:	d052      	beq.n	800be78 <floor+0xe8>
 800bdd2:	4c2d      	ldr	r4, [pc, #180]	; (800be88 <floor+0xf8>)
 800bdd4:	2500      	movs	r5, #0
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	e024      	b.n	800be26 <floor+0x96>
 800bddc:	4f2b      	ldr	r7, [pc, #172]	; (800be8c <floor+0xfc>)
 800bdde:	4137      	asrs	r7, r6
 800bde0:	ea01 0307 	and.w	r3, r1, r7
 800bde4:	4303      	orrs	r3, r0
 800bde6:	d01e      	beq.n	800be26 <floor+0x96>
 800bde8:	a325      	add	r3, pc, #148	; (adr r3, 800be80 <floor+0xf0>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa0d 	bl	800020c <__adddf3>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f7f4 fe4f 	bl	8000a98 <__aeabi_dcmpgt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0eb      	beq.n	800bdd6 <floor+0x46>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	bfbe      	ittt	lt
 800be02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800be06:	4133      	asrlt	r3, r6
 800be08:	18e4      	addlt	r4, r4, r3
 800be0a:	ea24 0407 	bic.w	r4, r4, r7
 800be0e:	2500      	movs	r5, #0
 800be10:	e7e1      	b.n	800bdd6 <floor+0x46>
 800be12:	2e33      	cmp	r6, #51	; 0x33
 800be14:	dd0b      	ble.n	800be2e <floor+0x9e>
 800be16:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be1a:	d104      	bne.n	800be26 <floor+0x96>
 800be1c:	ee10 2a10 	vmov	r2, s0
 800be20:	460b      	mov	r3, r1
 800be22:	f7f4 f9f3 	bl	800020c <__adddf3>
 800be26:	ec41 0b10 	vmov	d0, r0, r1
 800be2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800be32:	f04f 37ff 	mov.w	r7, #4294967295
 800be36:	40df      	lsrs	r7, r3
 800be38:	4238      	tst	r0, r7
 800be3a:	d0f4      	beq.n	800be26 <floor+0x96>
 800be3c:	a310      	add	r3, pc, #64	; (adr r3, 800be80 <floor+0xf0>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	f7f4 f9e3 	bl	800020c <__adddf3>
 800be46:	2200      	movs	r2, #0
 800be48:	2300      	movs	r3, #0
 800be4a:	f7f4 fe25 	bl	8000a98 <__aeabi_dcmpgt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0c1      	beq.n	800bdd6 <floor+0x46>
 800be52:	2c00      	cmp	r4, #0
 800be54:	da0a      	bge.n	800be6c <floor+0xdc>
 800be56:	2e14      	cmp	r6, #20
 800be58:	d101      	bne.n	800be5e <floor+0xce>
 800be5a:	3401      	adds	r4, #1
 800be5c:	e006      	b.n	800be6c <floor+0xdc>
 800be5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800be62:	2301      	movs	r3, #1
 800be64:	40b3      	lsls	r3, r6
 800be66:	441d      	add	r5, r3
 800be68:	45a8      	cmp	r8, r5
 800be6a:	d8f6      	bhi.n	800be5a <floor+0xca>
 800be6c:	ea25 0507 	bic.w	r5, r5, r7
 800be70:	e7b1      	b.n	800bdd6 <floor+0x46>
 800be72:	2500      	movs	r5, #0
 800be74:	462c      	mov	r4, r5
 800be76:	e7ae      	b.n	800bdd6 <floor+0x46>
 800be78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be7c:	e7ab      	b.n	800bdd6 <floor+0x46>
 800be7e:	bf00      	nop
 800be80:	8800759c 	.word	0x8800759c
 800be84:	7e37e43c 	.word	0x7e37e43c
 800be88:	bff00000 	.word	0xbff00000
 800be8c:	000fffff 	.word	0x000fffff

0800be90 <__kernel_cosf>:
 800be90:	ee10 3a10 	vmov	r3, s0
 800be94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be98:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800be9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bea0:	da05      	bge.n	800beae <__kernel_cosf+0x1e>
 800bea2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bea6:	ee17 2a90 	vmov	r2, s15
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d03b      	beq.n	800bf26 <__kernel_cosf+0x96>
 800beae:	ee20 7a00 	vmul.f32	s14, s0, s0
 800beb2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bf2c <__kernel_cosf+0x9c>
 800beb6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800bf30 <__kernel_cosf+0xa0>
 800beba:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <__kernel_cosf+0xa4>)
 800bebc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bec0:	4293      	cmp	r3, r2
 800bec2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800bf38 <__kernel_cosf+0xa8>
 800bec6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800beca:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800bf3c <__kernel_cosf+0xac>
 800bece:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bed2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800bf40 <__kernel_cosf+0xb0>
 800bed6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800beda:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800bf44 <__kernel_cosf+0xb4>
 800bede:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bee2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bee6:	ee26 6a07 	vmul.f32	s12, s12, s14
 800beea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800beee:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef6:	dc04      	bgt.n	800bf02 <__kernel_cosf+0x72>
 800bef8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800befc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800bf00:	4770      	bx	lr
 800bf02:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <__kernel_cosf+0xb8>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	bfda      	itte	le
 800bf08:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bf0c:	ee07 3a10 	vmovle	s14, r3
 800bf10:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800bf14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf18:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800bf1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bf20:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf24:	4770      	bx	lr
 800bf26:	eeb0 0a66 	vmov.f32	s0, s13
 800bf2a:	4770      	bx	lr
 800bf2c:	ad47d74e 	.word	0xad47d74e
 800bf30:	310f74f6 	.word	0x310f74f6
 800bf34:	3e999999 	.word	0x3e999999
 800bf38:	b493f27c 	.word	0xb493f27c
 800bf3c:	37d00d01 	.word	0x37d00d01
 800bf40:	bab60b61 	.word	0xbab60b61
 800bf44:	3d2aaaab 	.word	0x3d2aaaab
 800bf48:	3f480000 	.word	0x3f480000

0800bf4c <__kernel_sinf>:
 800bf4c:	ee10 3a10 	vmov	r3, s0
 800bf50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bf58:	da04      	bge.n	800bf64 <__kernel_sinf+0x18>
 800bf5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf5e:	ee17 3a90 	vmov	r3, s15
 800bf62:	b35b      	cbz	r3, 800bfbc <__kernel_sinf+0x70>
 800bf64:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bf68:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bfc0 <__kernel_sinf+0x74>
 800bf6c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bfc4 <__kernel_sinf+0x78>
 800bf70:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf74:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bfc8 <__kernel_sinf+0x7c>
 800bf78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf7c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bfcc <__kernel_sinf+0x80>
 800bf80:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bf84:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bfd0 <__kernel_sinf+0x84>
 800bf88:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bf8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf90:	b930      	cbnz	r0, 800bfa0 <__kernel_sinf+0x54>
 800bf92:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bfd4 <__kernel_sinf+0x88>
 800bf96:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf9a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf9e:	4770      	bx	lr
 800bfa0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bfa4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bfa8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bfac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bfb0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bfd8 <__kernel_sinf+0x8c>
 800bfb4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bfb8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	2f2ec9d3 	.word	0x2f2ec9d3
 800bfc4:	b2d72f34 	.word	0xb2d72f34
 800bfc8:	3638ef1b 	.word	0x3638ef1b
 800bfcc:	b9500d01 	.word	0xb9500d01
 800bfd0:	3c088889 	.word	0x3c088889
 800bfd4:	be2aaaab 	.word	0xbe2aaaab
 800bfd8:	3e2aaaab 	.word	0x3e2aaaab

0800bfdc <__ieee754_rem_pio2f>:
 800bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfde:	ee10 6a10 	vmov	r6, s0
 800bfe2:	4b86      	ldr	r3, [pc, #536]	; (800c1fc <__ieee754_rem_pio2f+0x220>)
 800bfe4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bfe8:	429d      	cmp	r5, r3
 800bfea:	b087      	sub	sp, #28
 800bfec:	4604      	mov	r4, r0
 800bfee:	dc05      	bgt.n	800bffc <__ieee754_rem_pio2f+0x20>
 800bff0:	2300      	movs	r3, #0
 800bff2:	ed80 0a00 	vstr	s0, [r0]
 800bff6:	6043      	str	r3, [r0, #4]
 800bff8:	2000      	movs	r0, #0
 800bffa:	e020      	b.n	800c03e <__ieee754_rem_pio2f+0x62>
 800bffc:	4b80      	ldr	r3, [pc, #512]	; (800c200 <__ieee754_rem_pio2f+0x224>)
 800bffe:	429d      	cmp	r5, r3
 800c000:	dc38      	bgt.n	800c074 <__ieee754_rem_pio2f+0x98>
 800c002:	2e00      	cmp	r6, #0
 800c004:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c204 <__ieee754_rem_pio2f+0x228>
 800c008:	4b7f      	ldr	r3, [pc, #508]	; (800c208 <__ieee754_rem_pio2f+0x22c>)
 800c00a:	f025 050f 	bic.w	r5, r5, #15
 800c00e:	dd18      	ble.n	800c042 <__ieee754_rem_pio2f+0x66>
 800c010:	429d      	cmp	r5, r3
 800c012:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c016:	bf09      	itett	eq
 800c018:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c20c <__ieee754_rem_pio2f+0x230>
 800c01c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c210 <__ieee754_rem_pio2f+0x234>
 800c020:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c024:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c214 <__ieee754_rem_pio2f+0x238>
 800c028:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c02c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c030:	edc0 6a00 	vstr	s13, [r0]
 800c034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c038:	edc0 7a01 	vstr	s15, [r0, #4]
 800c03c:	2001      	movs	r0, #1
 800c03e:	b007      	add	sp, #28
 800c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c042:	429d      	cmp	r5, r3
 800c044:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c048:	bf09      	itett	eq
 800c04a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c20c <__ieee754_rem_pio2f+0x230>
 800c04e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c210 <__ieee754_rem_pio2f+0x234>
 800c052:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c056:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c214 <__ieee754_rem_pio2f+0x238>
 800c05a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c05e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c062:	edc0 6a00 	vstr	s13, [r0]
 800c066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c06a:	edc0 7a01 	vstr	s15, [r0, #4]
 800c06e:	f04f 30ff 	mov.w	r0, #4294967295
 800c072:	e7e4      	b.n	800c03e <__ieee754_rem_pio2f+0x62>
 800c074:	4b68      	ldr	r3, [pc, #416]	; (800c218 <__ieee754_rem_pio2f+0x23c>)
 800c076:	429d      	cmp	r5, r3
 800c078:	dc71      	bgt.n	800c15e <__ieee754_rem_pio2f+0x182>
 800c07a:	f000 f8db 	bl	800c234 <fabsf>
 800c07e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c21c <__ieee754_rem_pio2f+0x240>
 800c082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c086:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c092:	ee17 0a90 	vmov	r0, s15
 800c096:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c204 <__ieee754_rem_pio2f+0x228>
 800c09a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c09e:	281f      	cmp	r0, #31
 800c0a0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c210 <__ieee754_rem_pio2f+0x234>
 800c0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a8:	eeb1 6a47 	vneg.f32	s12, s14
 800c0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c0b0:	ee16 2a90 	vmov	r2, s13
 800c0b4:	dc1c      	bgt.n	800c0f0 <__ieee754_rem_pio2f+0x114>
 800c0b6:	495a      	ldr	r1, [pc, #360]	; (800c220 <__ieee754_rem_pio2f+0x244>)
 800c0b8:	1e47      	subs	r7, r0, #1
 800c0ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c0be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c0c2:	428b      	cmp	r3, r1
 800c0c4:	d014      	beq.n	800c0f0 <__ieee754_rem_pio2f+0x114>
 800c0c6:	6022      	str	r2, [r4, #0]
 800c0c8:	ed94 7a00 	vldr	s14, [r4]
 800c0cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c0d6:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0da:	dab0      	bge.n	800c03e <__ieee754_rem_pio2f+0x62>
 800c0dc:	eeb1 7a47 	vneg.f32	s14, s14
 800c0e0:	eeb1 0a40 	vneg.f32	s0, s0
 800c0e4:	ed84 7a00 	vstr	s14, [r4]
 800c0e8:	ed84 0a01 	vstr	s0, [r4, #4]
 800c0ec:	4240      	negs	r0, r0
 800c0ee:	e7a6      	b.n	800c03e <__ieee754_rem_pio2f+0x62>
 800c0f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c0f4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800c0f8:	2908      	cmp	r1, #8
 800c0fa:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c0fe:	dde2      	ble.n	800c0c6 <__ieee754_rem_pio2f+0xea>
 800c100:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c20c <__ieee754_rem_pio2f+0x230>
 800c104:	eef0 6a40 	vmov.f32	s13, s0
 800c108:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c10c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c110:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c114:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c214 <__ieee754_rem_pio2f+0x238>
 800c118:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c11c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c120:	ee15 2a90 	vmov	r2, s11
 800c124:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c128:	1a5b      	subs	r3, r3, r1
 800c12a:	2b19      	cmp	r3, #25
 800c12c:	dc04      	bgt.n	800c138 <__ieee754_rem_pio2f+0x15c>
 800c12e:	edc4 5a00 	vstr	s11, [r4]
 800c132:	eeb0 0a66 	vmov.f32	s0, s13
 800c136:	e7c7      	b.n	800c0c8 <__ieee754_rem_pio2f+0xec>
 800c138:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c224 <__ieee754_rem_pio2f+0x248>
 800c13c:	eeb0 0a66 	vmov.f32	s0, s13
 800c140:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c144:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c148:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c228 <__ieee754_rem_pio2f+0x24c>
 800c14c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c150:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c154:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c158:	ed84 7a00 	vstr	s14, [r4]
 800c15c:	e7b4      	b.n	800c0c8 <__ieee754_rem_pio2f+0xec>
 800c15e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c162:	db06      	blt.n	800c172 <__ieee754_rem_pio2f+0x196>
 800c164:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c168:	edc0 7a01 	vstr	s15, [r0, #4]
 800c16c:	edc0 7a00 	vstr	s15, [r0]
 800c170:	e742      	b.n	800bff8 <__ieee754_rem_pio2f+0x1c>
 800c172:	15ea      	asrs	r2, r5, #23
 800c174:	3a86      	subs	r2, #134	; 0x86
 800c176:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c182:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c22c <__ieee754_rem_pio2f+0x250>
 800c186:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c18a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c18e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c192:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c196:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c19a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c19e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c1a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	edcd 7a05 	vstr	s15, [sp, #20]
 800c1b6:	d11e      	bne.n	800c1f6 <__ieee754_rem_pio2f+0x21a>
 800c1b8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c0:	bf14      	ite	ne
 800c1c2:	2302      	movne	r3, #2
 800c1c4:	2301      	moveq	r3, #1
 800c1c6:	491a      	ldr	r1, [pc, #104]	; (800c230 <__ieee754_rem_pio2f+0x254>)
 800c1c8:	9101      	str	r1, [sp, #4]
 800c1ca:	2102      	movs	r1, #2
 800c1cc:	9100      	str	r1, [sp, #0]
 800c1ce:	a803      	add	r0, sp, #12
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	f000 f837 	bl	800c244 <__kernel_rem_pio2f>
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	f6bf af31 	bge.w	800c03e <__ieee754_rem_pio2f+0x62>
 800c1dc:	edd4 7a00 	vldr	s15, [r4]
 800c1e0:	eef1 7a67 	vneg.f32	s15, s15
 800c1e4:	edc4 7a00 	vstr	s15, [r4]
 800c1e8:	edd4 7a01 	vldr	s15, [r4, #4]
 800c1ec:	eef1 7a67 	vneg.f32	s15, s15
 800c1f0:	edc4 7a01 	vstr	s15, [r4, #4]
 800c1f4:	e77a      	b.n	800c0ec <__ieee754_rem_pio2f+0x110>
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e7e5      	b.n	800c1c6 <__ieee754_rem_pio2f+0x1ea>
 800c1fa:	bf00      	nop
 800c1fc:	3f490fd8 	.word	0x3f490fd8
 800c200:	4016cbe3 	.word	0x4016cbe3
 800c204:	3fc90f80 	.word	0x3fc90f80
 800c208:	3fc90fd0 	.word	0x3fc90fd0
 800c20c:	37354400 	.word	0x37354400
 800c210:	37354443 	.word	0x37354443
 800c214:	2e85a308 	.word	0x2e85a308
 800c218:	43490f80 	.word	0x43490f80
 800c21c:	3f22f984 	.word	0x3f22f984
 800c220:	0801f93c 	.word	0x0801f93c
 800c224:	2e85a300 	.word	0x2e85a300
 800c228:	248d3132 	.word	0x248d3132
 800c22c:	43800000 	.word	0x43800000
 800c230:	0801f9bc 	.word	0x0801f9bc

0800c234 <fabsf>:
 800c234:	ee10 3a10 	vmov	r3, s0
 800c238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c23c:	ee00 3a10 	vmov	s0, r3
 800c240:	4770      	bx	lr
	...

0800c244 <__kernel_rem_pio2f>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	ed2d 8b04 	vpush	{d8-d9}
 800c24c:	b0d9      	sub	sp, #356	; 0x164
 800c24e:	4688      	mov	r8, r1
 800c250:	9002      	str	r0, [sp, #8]
 800c252:	49b8      	ldr	r1, [pc, #736]	; (800c534 <__kernel_rem_pio2f+0x2f0>)
 800c254:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c25c:	9901      	ldr	r1, [sp, #4]
 800c25e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800c260:	f101 3bff 	add.w	fp, r1, #4294967295
 800c264:	1d11      	adds	r1, r2, #4
 800c266:	db25      	blt.n	800c2b4 <__kernel_rem_pio2f+0x70>
 800c268:	1ed0      	subs	r0, r2, #3
 800c26a:	bf48      	it	mi
 800c26c:	1d10      	addmi	r0, r2, #4
 800c26e:	10c0      	asrs	r0, r0, #3
 800c270:	1c45      	adds	r5, r0, #1
 800c272:	00e9      	lsls	r1, r5, #3
 800c274:	eba0 070b 	sub.w	r7, r0, fp
 800c278:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c27c:	9103      	str	r1, [sp, #12]
 800c27e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c282:	eb0a 0c0b 	add.w	ip, sl, fp
 800c286:	ae1c      	add	r6, sp, #112	; 0x70
 800c288:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800c28c:	2400      	movs	r4, #0
 800c28e:	4564      	cmp	r4, ip
 800c290:	dd12      	ble.n	800c2b8 <__kernel_rem_pio2f+0x74>
 800c292:	9901      	ldr	r1, [sp, #4]
 800c294:	ac1c      	add	r4, sp, #112	; 0x70
 800c296:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800c29a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800c29e:	f04f 0c00 	mov.w	ip, #0
 800c2a2:	45d4      	cmp	ip, sl
 800c2a4:	dc27      	bgt.n	800c2f6 <__kernel_rem_pio2f+0xb2>
 800c2a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c2aa:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c2ae:	4627      	mov	r7, r4
 800c2b0:	2600      	movs	r6, #0
 800c2b2:	e016      	b.n	800c2e2 <__kernel_rem_pio2f+0x9e>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e7db      	b.n	800c270 <__kernel_rem_pio2f+0x2c>
 800c2b8:	42e7      	cmn	r7, r4
 800c2ba:	bf5d      	ittte	pl
 800c2bc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800c2c0:	ee07 1a90 	vmovpl	s15, r1
 800c2c4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c2c8:	eef0 7a47 	vmovmi.f32	s15, s14
 800c2cc:	ece6 7a01 	vstmia	r6!, {s15}
 800c2d0:	3401      	adds	r4, #1
 800c2d2:	e7dc      	b.n	800c28e <__kernel_rem_pio2f+0x4a>
 800c2d4:	ecfe 6a01 	vldmia	lr!, {s13}
 800c2d8:	ed97 7a00 	vldr	s14, [r7]
 800c2dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	455e      	cmp	r6, fp
 800c2e4:	f1a7 0704 	sub.w	r7, r7, #4
 800c2e8:	ddf4      	ble.n	800c2d4 <__kernel_rem_pio2f+0x90>
 800c2ea:	ece9 7a01 	vstmia	r9!, {s15}
 800c2ee:	f10c 0c01 	add.w	ip, ip, #1
 800c2f2:	3404      	adds	r4, #4
 800c2f4:	e7d5      	b.n	800c2a2 <__kernel_rem_pio2f+0x5e>
 800c2f6:	a908      	add	r1, sp, #32
 800c2f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c300:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800c540 <__kernel_rem_pio2f+0x2fc>
 800c304:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800c53c <__kernel_rem_pio2f+0x2f8>
 800c308:	9105      	str	r1, [sp, #20]
 800c30a:	9304      	str	r3, [sp, #16]
 800c30c:	4656      	mov	r6, sl
 800c30e:	00b3      	lsls	r3, r6, #2
 800c310:	9306      	str	r3, [sp, #24]
 800c312:	ab58      	add	r3, sp, #352	; 0x160
 800c314:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c318:	ac08      	add	r4, sp, #32
 800c31a:	ab44      	add	r3, sp, #272	; 0x110
 800c31c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c320:	46a4      	mov	ip, r4
 800c322:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c326:	4637      	mov	r7, r6
 800c328:	2f00      	cmp	r7, #0
 800c32a:	f1a0 0004 	sub.w	r0, r0, #4
 800c32e:	dc4a      	bgt.n	800c3c6 <__kernel_rem_pio2f+0x182>
 800c330:	4628      	mov	r0, r5
 800c332:	9207      	str	r2, [sp, #28]
 800c334:	f000 f9f8 	bl	800c728 <scalbnf>
 800c338:	eeb0 8a40 	vmov.f32	s16, s0
 800c33c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c340:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c344:	f000 fa56 	bl	800c7f4 <floorf>
 800c348:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c34c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c350:	2d00      	cmp	r5, #0
 800c352:	9a07      	ldr	r2, [sp, #28]
 800c354:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c358:	ee17 9a90 	vmov	r9, s15
 800c35c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c360:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c364:	dd41      	ble.n	800c3ea <__kernel_rem_pio2f+0x1a6>
 800c366:	f106 3cff 	add.w	ip, r6, #4294967295
 800c36a:	ab08      	add	r3, sp, #32
 800c36c:	f1c5 0e08 	rsb	lr, r5, #8
 800c370:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c374:	fa47 f00e 	asr.w	r0, r7, lr
 800c378:	4481      	add	r9, r0
 800c37a:	fa00 f00e 	lsl.w	r0, r0, lr
 800c37e:	1a3f      	subs	r7, r7, r0
 800c380:	f1c5 0007 	rsb	r0, r5, #7
 800c384:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c388:	4107      	asrs	r7, r0
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	dd3c      	ble.n	800c408 <__kernel_rem_pio2f+0x1c4>
 800c38e:	f04f 0e00 	mov.w	lr, #0
 800c392:	f109 0901 	add.w	r9, r9, #1
 800c396:	4671      	mov	r1, lr
 800c398:	4576      	cmp	r6, lr
 800c39a:	dc67      	bgt.n	800c46c <__kernel_rem_pio2f+0x228>
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	dd03      	ble.n	800c3a8 <__kernel_rem_pio2f+0x164>
 800c3a0:	2d01      	cmp	r5, #1
 800c3a2:	d074      	beq.n	800c48e <__kernel_rem_pio2f+0x24a>
 800c3a4:	2d02      	cmp	r5, #2
 800c3a6:	d07b      	beq.n	800c4a0 <__kernel_rem_pio2f+0x25c>
 800c3a8:	2f02      	cmp	r7, #2
 800c3aa:	d12d      	bne.n	800c408 <__kernel_rem_pio2f+0x1c4>
 800c3ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c3b4:	b341      	cbz	r1, 800c408 <__kernel_rem_pio2f+0x1c4>
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	9207      	str	r2, [sp, #28]
 800c3ba:	f000 f9b5 	bl	800c728 <scalbnf>
 800c3be:	9a07      	ldr	r2, [sp, #28]
 800c3c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c3c4:	e020      	b.n	800c408 <__kernel_rem_pio2f+0x1c4>
 800c3c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c3ca:	3f01      	subs	r7, #1
 800c3cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c3d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c3dc:	ecac 0a01 	vstmia	ip!, {s0}
 800c3e0:	ed90 0a00 	vldr	s0, [r0]
 800c3e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c3e8:	e79e      	b.n	800c328 <__kernel_rem_pio2f+0xe4>
 800c3ea:	d105      	bne.n	800c3f8 <__kernel_rem_pio2f+0x1b4>
 800c3ec:	1e70      	subs	r0, r6, #1
 800c3ee:	ab08      	add	r3, sp, #32
 800c3f0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c3f4:	11ff      	asrs	r7, r7, #7
 800c3f6:	e7c8      	b.n	800c38a <__kernel_rem_pio2f+0x146>
 800c3f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c404:	da30      	bge.n	800c468 <__kernel_rem_pio2f+0x224>
 800c406:	2700      	movs	r7, #0
 800c408:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c410:	f040 809a 	bne.w	800c548 <__kernel_rem_pio2f+0x304>
 800c414:	1e74      	subs	r4, r6, #1
 800c416:	46a4      	mov	ip, r4
 800c418:	2100      	movs	r1, #0
 800c41a:	45d4      	cmp	ip, sl
 800c41c:	da47      	bge.n	800c4ae <__kernel_rem_pio2f+0x26a>
 800c41e:	2900      	cmp	r1, #0
 800c420:	d063      	beq.n	800c4ea <__kernel_rem_pio2f+0x2a6>
 800c422:	ab08      	add	r3, sp, #32
 800c424:	3d08      	subs	r5, #8
 800c426:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d07f      	beq.n	800c52e <__kernel_rem_pio2f+0x2ea>
 800c42e:	4628      	mov	r0, r5
 800c430:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c434:	f000 f978 	bl	800c728 <scalbnf>
 800c438:	1c63      	adds	r3, r4, #1
 800c43a:	aa44      	add	r2, sp, #272	; 0x110
 800c43c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c540 <__kernel_rem_pio2f+0x2fc>
 800c440:	0099      	lsls	r1, r3, #2
 800c442:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c446:	4623      	mov	r3, r4
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f280 80ad 	bge.w	800c5a8 <__kernel_rem_pio2f+0x364>
 800c44e:	4623      	mov	r3, r4
 800c450:	2b00      	cmp	r3, #0
 800c452:	f2c0 80cb 	blt.w	800c5ec <__kernel_rem_pio2f+0x3a8>
 800c456:	aa44      	add	r2, sp, #272	; 0x110
 800c458:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c45c:	4e36      	ldr	r6, [pc, #216]	; (800c538 <__kernel_rem_pio2f+0x2f4>)
 800c45e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c462:	2000      	movs	r0, #0
 800c464:	1ae2      	subs	r2, r4, r3
 800c466:	e0b6      	b.n	800c5d6 <__kernel_rem_pio2f+0x392>
 800c468:	2702      	movs	r7, #2
 800c46a:	e790      	b.n	800c38e <__kernel_rem_pio2f+0x14a>
 800c46c:	6820      	ldr	r0, [r4, #0]
 800c46e:	b949      	cbnz	r1, 800c484 <__kernel_rem_pio2f+0x240>
 800c470:	b118      	cbz	r0, 800c47a <__kernel_rem_pio2f+0x236>
 800c472:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c476:	6020      	str	r0, [r4, #0]
 800c478:	2001      	movs	r0, #1
 800c47a:	f10e 0e01 	add.w	lr, lr, #1
 800c47e:	3404      	adds	r4, #4
 800c480:	4601      	mov	r1, r0
 800c482:	e789      	b.n	800c398 <__kernel_rem_pio2f+0x154>
 800c484:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c488:	6020      	str	r0, [r4, #0]
 800c48a:	4608      	mov	r0, r1
 800c48c:	e7f5      	b.n	800c47a <__kernel_rem_pio2f+0x236>
 800c48e:	1e74      	subs	r4, r6, #1
 800c490:	ab08      	add	r3, sp, #32
 800c492:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c496:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c49a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c49e:	e783      	b.n	800c3a8 <__kernel_rem_pio2f+0x164>
 800c4a0:	1e74      	subs	r4, r6, #1
 800c4a2:	ab08      	add	r3, sp, #32
 800c4a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c4a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c4ac:	e7f5      	b.n	800c49a <__kernel_rem_pio2f+0x256>
 800c4ae:	ab08      	add	r3, sp, #32
 800c4b0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800c4b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c4b8:	4301      	orrs	r1, r0
 800c4ba:	e7ae      	b.n	800c41a <__kernel_rem_pio2f+0x1d6>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800c4c2:	2f00      	cmp	r7, #0
 800c4c4:	d0fa      	beq.n	800c4bc <__kernel_rem_pio2f+0x278>
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c4cc:	eb0d 0403 	add.w	r4, sp, r3
 800c4d0:	9b01      	ldr	r3, [sp, #4]
 800c4d2:	18f7      	adds	r7, r6, r3
 800c4d4:	ab1c      	add	r3, sp, #112	; 0x70
 800c4d6:	f106 0c01 	add.w	ip, r6, #1
 800c4da:	3c4c      	subs	r4, #76	; 0x4c
 800c4dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4e0:	4430      	add	r0, r6
 800c4e2:	4560      	cmp	r0, ip
 800c4e4:	da04      	bge.n	800c4f0 <__kernel_rem_pio2f+0x2ac>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	e711      	b.n	800c30e <__kernel_rem_pio2f+0xca>
 800c4ea:	9c05      	ldr	r4, [sp, #20]
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	e7e6      	b.n	800c4be <__kernel_rem_pio2f+0x27a>
 800c4f0:	9b04      	ldr	r3, [sp, #16]
 800c4f2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c4f6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c4fa:	9306      	str	r3, [sp, #24]
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c504:	2600      	movs	r6, #0
 800c506:	ece7 7a01 	vstmia	r7!, {s15}
 800c50a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c50e:	46b9      	mov	r9, r7
 800c510:	455e      	cmp	r6, fp
 800c512:	dd04      	ble.n	800c51e <__kernel_rem_pio2f+0x2da>
 800c514:	ece4 7a01 	vstmia	r4!, {s15}
 800c518:	f10c 0c01 	add.w	ip, ip, #1
 800c51c:	e7e1      	b.n	800c4e2 <__kernel_rem_pio2f+0x29e>
 800c51e:	ecfe 6a01 	vldmia	lr!, {s13}
 800c522:	ed39 7a01 	vldmdb	r9!, {s14}
 800c526:	3601      	adds	r6, #1
 800c528:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c52c:	e7f0      	b.n	800c510 <__kernel_rem_pio2f+0x2cc>
 800c52e:	3c01      	subs	r4, #1
 800c530:	e777      	b.n	800c422 <__kernel_rem_pio2f+0x1de>
 800c532:	bf00      	nop
 800c534:	0801fd00 	.word	0x0801fd00
 800c538:	0801fcd4 	.word	0x0801fcd4
 800c53c:	43800000 	.word	0x43800000
 800c540:	3b800000 	.word	0x3b800000
 800c544:	00000000 	.word	0x00000000
 800c548:	9b03      	ldr	r3, [sp, #12]
 800c54a:	eeb0 0a48 	vmov.f32	s0, s16
 800c54e:	1a98      	subs	r0, r3, r2
 800c550:	f000 f8ea 	bl	800c728 <scalbnf>
 800c554:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c53c <__kernel_rem_pio2f+0x2f8>
 800c558:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c560:	db19      	blt.n	800c596 <__kernel_rem_pio2f+0x352>
 800c562:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c540 <__kernel_rem_pio2f+0x2fc>
 800c566:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c56a:	aa08      	add	r2, sp, #32
 800c56c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c570:	1c74      	adds	r4, r6, #1
 800c572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c576:	3508      	adds	r5, #8
 800c578:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c57c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c580:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c584:	ee10 3a10 	vmov	r3, s0
 800c588:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c58c:	ee17 3a90 	vmov	r3, s15
 800c590:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c594:	e74b      	b.n	800c42e <__kernel_rem_pio2f+0x1ea>
 800c596:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c59a:	aa08      	add	r2, sp, #32
 800c59c:	ee10 3a10 	vmov	r3, s0
 800c5a0:	4634      	mov	r4, r6
 800c5a2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c5a6:	e742      	b.n	800c42e <__kernel_rem_pio2f+0x1ea>
 800c5a8:	a808      	add	r0, sp, #32
 800c5aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c5ae:	9001      	str	r0, [sp, #4]
 800c5b0:	ee07 0a90 	vmov	s15, r0
 800c5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c5be:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c5c2:	ed62 7a01 	vstmdb	r2!, {s15}
 800c5c6:	e73f      	b.n	800c448 <__kernel_rem_pio2f+0x204>
 800c5c8:	ecf6 6a01 	vldmia	r6!, {s13}
 800c5cc:	ecb5 7a01 	vldmia	r5!, {s14}
 800c5d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	4550      	cmp	r0, sl
 800c5d8:	dc01      	bgt.n	800c5de <__kernel_rem_pio2f+0x39a>
 800c5da:	4290      	cmp	r0, r2
 800c5dc:	ddf4      	ble.n	800c5c8 <__kernel_rem_pio2f+0x384>
 800c5de:	a858      	add	r0, sp, #352	; 0x160
 800c5e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c5e4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	e731      	b.n	800c450 <__kernel_rem_pio2f+0x20c>
 800c5ec:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	dc09      	bgt.n	800c606 <__kernel_rem_pio2f+0x3c2>
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dc2b      	bgt.n	800c64e <__kernel_rem_pio2f+0x40a>
 800c5f6:	d044      	beq.n	800c682 <__kernel_rem_pio2f+0x43e>
 800c5f8:	f009 0007 	and.w	r0, r9, #7
 800c5fc:	b059      	add	sp, #356	; 0x164
 800c5fe:	ecbd 8b04 	vpop	{d8-d9}
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d1f5      	bne.n	800c5f8 <__kernel_rem_pio2f+0x3b4>
 800c60c:	aa30      	add	r2, sp, #192	; 0xc0
 800c60e:	1f0b      	subs	r3, r1, #4
 800c610:	4413      	add	r3, r2
 800c612:	461a      	mov	r2, r3
 800c614:	4620      	mov	r0, r4
 800c616:	2800      	cmp	r0, #0
 800c618:	f1a2 0204 	sub.w	r2, r2, #4
 800c61c:	dc52      	bgt.n	800c6c4 <__kernel_rem_pio2f+0x480>
 800c61e:	4622      	mov	r2, r4
 800c620:	2a01      	cmp	r2, #1
 800c622:	f1a3 0304 	sub.w	r3, r3, #4
 800c626:	dc5d      	bgt.n	800c6e4 <__kernel_rem_pio2f+0x4a0>
 800c628:	ab30      	add	r3, sp, #192	; 0xc0
 800c62a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c62e:	440b      	add	r3, r1
 800c630:	2c01      	cmp	r4, #1
 800c632:	dc67      	bgt.n	800c704 <__kernel_rem_pio2f+0x4c0>
 800c634:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c638:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c63c:	2f00      	cmp	r7, #0
 800c63e:	d167      	bne.n	800c710 <__kernel_rem_pio2f+0x4cc>
 800c640:	edc8 6a00 	vstr	s13, [r8]
 800c644:	ed88 7a01 	vstr	s14, [r8, #4]
 800c648:	edc8 7a02 	vstr	s15, [r8, #8]
 800c64c:	e7d4      	b.n	800c5f8 <__kernel_rem_pio2f+0x3b4>
 800c64e:	ab30      	add	r3, sp, #192	; 0xc0
 800c650:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c654:	440b      	add	r3, r1
 800c656:	4622      	mov	r2, r4
 800c658:	2a00      	cmp	r2, #0
 800c65a:	da24      	bge.n	800c6a6 <__kernel_rem_pio2f+0x462>
 800c65c:	b34f      	cbz	r7, 800c6b2 <__kernel_rem_pio2f+0x46e>
 800c65e:	eef1 7a47 	vneg.f32	s15, s14
 800c662:	edc8 7a00 	vstr	s15, [r8]
 800c666:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c66a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c66e:	aa31      	add	r2, sp, #196	; 0xc4
 800c670:	2301      	movs	r3, #1
 800c672:	429c      	cmp	r4, r3
 800c674:	da20      	bge.n	800c6b8 <__kernel_rem_pio2f+0x474>
 800c676:	b10f      	cbz	r7, 800c67c <__kernel_rem_pio2f+0x438>
 800c678:	eef1 7a67 	vneg.f32	s15, s15
 800c67c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c680:	e7ba      	b.n	800c5f8 <__kernel_rem_pio2f+0x3b4>
 800c682:	ab30      	add	r3, sp, #192	; 0xc0
 800c684:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800c544 <__kernel_rem_pio2f+0x300>
 800c688:	440b      	add	r3, r1
 800c68a:	2c00      	cmp	r4, #0
 800c68c:	da05      	bge.n	800c69a <__kernel_rem_pio2f+0x456>
 800c68e:	b10f      	cbz	r7, 800c694 <__kernel_rem_pio2f+0x450>
 800c690:	eef1 7a67 	vneg.f32	s15, s15
 800c694:	edc8 7a00 	vstr	s15, [r8]
 800c698:	e7ae      	b.n	800c5f8 <__kernel_rem_pio2f+0x3b4>
 800c69a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c69e:	3c01      	subs	r4, #1
 800c6a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6a4:	e7f1      	b.n	800c68a <__kernel_rem_pio2f+0x446>
 800c6a6:	ed73 7a01 	vldmdb	r3!, {s15}
 800c6aa:	3a01      	subs	r2, #1
 800c6ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6b0:	e7d2      	b.n	800c658 <__kernel_rem_pio2f+0x414>
 800c6b2:	eef0 7a47 	vmov.f32	s15, s14
 800c6b6:	e7d4      	b.n	800c662 <__kernel_rem_pio2f+0x41e>
 800c6b8:	ecb2 7a01 	vldmia	r2!, {s14}
 800c6bc:	3301      	adds	r3, #1
 800c6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6c2:	e7d6      	b.n	800c672 <__kernel_rem_pio2f+0x42e>
 800c6c4:	edd2 7a00 	vldr	s15, [r2]
 800c6c8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c6cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6d0:	3801      	subs	r0, #1
 800c6d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6d6:	ed82 7a00 	vstr	s14, [r2]
 800c6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6de:	edc2 7a01 	vstr	s15, [r2, #4]
 800c6e2:	e798      	b.n	800c616 <__kernel_rem_pio2f+0x3d2>
 800c6e4:	edd3 7a00 	vldr	s15, [r3]
 800c6e8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c6ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6f0:	3a01      	subs	r2, #1
 800c6f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6f6:	ed83 7a00 	vstr	s14, [r3]
 800c6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fe:	edc3 7a01 	vstr	s15, [r3, #4]
 800c702:	e78d      	b.n	800c620 <__kernel_rem_pio2f+0x3dc>
 800c704:	ed33 7a01 	vldmdb	r3!, {s14}
 800c708:	3c01      	subs	r4, #1
 800c70a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c70e:	e78f      	b.n	800c630 <__kernel_rem_pio2f+0x3ec>
 800c710:	eef1 6a66 	vneg.f32	s13, s13
 800c714:	eeb1 7a47 	vneg.f32	s14, s14
 800c718:	edc8 6a00 	vstr	s13, [r8]
 800c71c:	ed88 7a01 	vstr	s14, [r8, #4]
 800c720:	eef1 7a67 	vneg.f32	s15, s15
 800c724:	e790      	b.n	800c648 <__kernel_rem_pio2f+0x404>
 800c726:	bf00      	nop

0800c728 <scalbnf>:
 800c728:	ee10 3a10 	vmov	r3, s0
 800c72c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c730:	d02b      	beq.n	800c78a <scalbnf+0x62>
 800c732:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c736:	d302      	bcc.n	800c73e <scalbnf+0x16>
 800c738:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c73c:	4770      	bx	lr
 800c73e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c742:	d123      	bne.n	800c78c <scalbnf+0x64>
 800c744:	4b24      	ldr	r3, [pc, #144]	; (800c7d8 <scalbnf+0xb0>)
 800c746:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c7dc <scalbnf+0xb4>
 800c74a:	4298      	cmp	r0, r3
 800c74c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c750:	db17      	blt.n	800c782 <scalbnf+0x5a>
 800c752:	ee10 3a10 	vmov	r3, s0
 800c756:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c75a:	3a19      	subs	r2, #25
 800c75c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c760:	4288      	cmp	r0, r1
 800c762:	dd15      	ble.n	800c790 <scalbnf+0x68>
 800c764:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c7e0 <scalbnf+0xb8>
 800c768:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c7e4 <scalbnf+0xbc>
 800c76c:	ee10 3a10 	vmov	r3, s0
 800c770:	eeb0 7a67 	vmov.f32	s14, s15
 800c774:	2b00      	cmp	r3, #0
 800c776:	bfb8      	it	lt
 800c778:	eef0 7a66 	vmovlt.f32	s15, s13
 800c77c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c780:	4770      	bx	lr
 800c782:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c7e8 <scalbnf+0xc0>
 800c786:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c78a:	4770      	bx	lr
 800c78c:	0dd2      	lsrs	r2, r2, #23
 800c78e:	e7e5      	b.n	800c75c <scalbnf+0x34>
 800c790:	4410      	add	r0, r2
 800c792:	28fe      	cmp	r0, #254	; 0xfe
 800c794:	dce6      	bgt.n	800c764 <scalbnf+0x3c>
 800c796:	2800      	cmp	r0, #0
 800c798:	dd06      	ble.n	800c7a8 <scalbnf+0x80>
 800c79a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c79e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c7a2:	ee00 3a10 	vmov	s0, r3
 800c7a6:	4770      	bx	lr
 800c7a8:	f110 0f16 	cmn.w	r0, #22
 800c7ac:	da09      	bge.n	800c7c2 <scalbnf+0x9a>
 800c7ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c7e8 <scalbnf+0xc0>
 800c7b2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c7ec <scalbnf+0xc4>
 800c7b6:	ee10 3a10 	vmov	r3, s0
 800c7ba:	eeb0 7a67 	vmov.f32	s14, s15
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	e7d9      	b.n	800c776 <scalbnf+0x4e>
 800c7c2:	3019      	adds	r0, #25
 800c7c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c7cc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c7f0 <scalbnf+0xc8>
 800c7d0:	ee07 3a90 	vmov	s15, r3
 800c7d4:	e7d7      	b.n	800c786 <scalbnf+0x5e>
 800c7d6:	bf00      	nop
 800c7d8:	ffff3cb0 	.word	0xffff3cb0
 800c7dc:	4c000000 	.word	0x4c000000
 800c7e0:	7149f2ca 	.word	0x7149f2ca
 800c7e4:	f149f2ca 	.word	0xf149f2ca
 800c7e8:	0da24260 	.word	0x0da24260
 800c7ec:	8da24260 	.word	0x8da24260
 800c7f0:	33000000 	.word	0x33000000

0800c7f4 <floorf>:
 800c7f4:	ee10 3a10 	vmov	r3, s0
 800c7f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c7fc:	3a7f      	subs	r2, #127	; 0x7f
 800c7fe:	2a16      	cmp	r2, #22
 800c800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c804:	dc2a      	bgt.n	800c85c <floorf+0x68>
 800c806:	2a00      	cmp	r2, #0
 800c808:	da11      	bge.n	800c82e <floorf+0x3a>
 800c80a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c86c <floorf+0x78>
 800c80e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c812:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	dd05      	ble.n	800c828 <floorf+0x34>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	da23      	bge.n	800c868 <floorf+0x74>
 800c820:	4a13      	ldr	r2, [pc, #76]	; (800c870 <floorf+0x7c>)
 800c822:	2900      	cmp	r1, #0
 800c824:	bf18      	it	ne
 800c826:	4613      	movne	r3, r2
 800c828:	ee00 3a10 	vmov	s0, r3
 800c82c:	4770      	bx	lr
 800c82e:	4911      	ldr	r1, [pc, #68]	; (800c874 <floorf+0x80>)
 800c830:	4111      	asrs	r1, r2
 800c832:	420b      	tst	r3, r1
 800c834:	d0fa      	beq.n	800c82c <floorf+0x38>
 800c836:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c86c <floorf+0x78>
 800c83a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c83e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c846:	ddef      	ble.n	800c828 <floorf+0x34>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bfbe      	ittt	lt
 800c84c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c850:	fa40 f202 	asrlt.w	r2, r0, r2
 800c854:	189b      	addlt	r3, r3, r2
 800c856:	ea23 0301 	bic.w	r3, r3, r1
 800c85a:	e7e5      	b.n	800c828 <floorf+0x34>
 800c85c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c860:	d3e4      	bcc.n	800c82c <floorf+0x38>
 800c862:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c866:	4770      	bx	lr
 800c868:	2300      	movs	r3, #0
 800c86a:	e7dd      	b.n	800c828 <floorf+0x34>
 800c86c:	7149f2ca 	.word	0x7149f2ca
 800c870:	bf800000 	.word	0xbf800000
 800c874:	007fffff 	.word	0x007fffff

0800c878 <_init>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr

0800c884 <_fini>:
 800c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c886:	bf00      	nop
 800c888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88a:	bc08      	pop	{r3}
 800c88c:	469e      	mov	lr, r3
 800c88e:	4770      	bx	lr
>>>>>>> Stashed changes
