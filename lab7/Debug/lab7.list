
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d58c  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134d0  0800d750  0800d750  0000e750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c20  08020c20  00022070  2**0
                  CONTENTS
  4 .ARM          00000008  08020c20  08020c20  00021c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020c28  08020c28  00022070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020c28  08020c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c2c  08020c2c  00021c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08020c30  00022000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000070  08020ca0  00022070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08020ca0  000225c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c60  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c3  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00049dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  0004b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000185cb  00000000  00000000  0004c743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000812e  00000000  00000000  00064d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0006ce3c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006d3c  00000000  00000000  0006cef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  00073c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000035ee  00000000  00000000  00073c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000000e8  00000000  00000000  00077286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d734 	.word	0x0800d734

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800d734 	.word	0x0800d734

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000458 	.word	0x20000458

08000f18 <apply_hanning_window>:


void apply_hanning_window(float32_t * signal, uint32_t length){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; ++i){
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e033      	b.n	8000f90 <apply_hanning_window+0x78>
		float32_t han_value = 0.5f * (1.0f - cosf(2 * PI * i / (length - 1)));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f32:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000fa4 <apply_hanning_window+0x8c>
 8000f36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f4a:	eeb0 0a66 	vmov.f32	s0, s13
 8000f4e:	f00a ff4d 	bl	800bdec <cosf>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	edc7 7a02 	vstr	s15, [r7, #8]
		signal[i] *= han_value;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f86:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < length; ++i){
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8c7      	bhi.n	8000f28 <apply_hanning_window+0x10>
	}
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40c90fdb 	.word	0x40c90fdb

08000fa8 <set_motor_speed_1>:

    arm_rfft_fast_f32(&fftInstance, power_spectrum, autocorrelation, 1);

    arm_abs_f32(autocorrelation, autocorrelation, BUFFER_LENGTH);
}
void set_motor_speed_1(int motor_speed) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fa77 	bl	80004a4 <__aeabi_i2d>
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <set_motor_speed_1+0xa0>)
 8000fbc:	f7ff fc06 	bl	80007cc <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	a319      	add	r3, pc, #100	@ (adr r3, 8001030 <set_motor_speed_1+0x88>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fad3 	bl	8000578 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	a317      	add	r3, pc, #92	@ (adr r3, 8001038 <set_motor_speed_1+0x90>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f914 	bl	800020c <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <set_motor_speed_1+0xa4>)
 8000ff2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ff6:	f7ff fbe9 	bl	80007cc <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	a30f      	add	r3, pc, #60	@ (adr r3, 8001040 <set_motor_speed_1+0x98>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fab6 	bl	8000578 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fd60 	bl	8000ad8 <__aeabi_d2iz>
 8001018:	4603      	mov	r3, r0
 800101a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR1 = temp_ccr1;
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <set_motor_speed_1+0xa8>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	c28f5c29 	.word	0xc28f5c29
 8001034:	3fdc28f5 	.word	0x3fdc28f5
 8001038:	47ae147b 	.word	0x47ae147b
 800103c:	3ff47ae1 	.word	0x3ff47ae1
 8001040:	00000000 	.word	0x00000000
 8001044:	412e8480 	.word	0x412e8480
 8001048:	40590000 	.word	0x40590000
 800104c:	408f4000 	.word	0x408f4000
 8001050:	40000800 	.word	0x40000800
 8001054:	00000000 	.word	0x00000000

08001058 <set_motor_speed_2>:

void set_motor_speed_2(int motor_speed) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fa1f 	bl	80004a4 <__aeabi_i2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <set_motor_speed_2+0xa0>)
 800106c:	f7ff fbae 	bl	80007cc <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a319      	add	r3, pc, #100	@ (adr r3, 80010e0 <set_motor_speed_2+0x88>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fa7b 	bl	8000578 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	a317      	add	r3, pc, #92	@ (adr r3, 80010e8 <set_motor_speed_2+0x90>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff f8bc 	bl	800020c <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr2 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <set_motor_speed_2+0xa4>)
 80010a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a6:	f7ff fb91 	bl	80007cc <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80010f0 <set_motor_speed_2+0x98>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fa5e 	bl	8000578 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd08 	bl	8000ad8 <__aeabi_d2iz>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]

  TIM4->CCR2 = temp_ccr2;
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <set_motor_speed_2+0xa8>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	c28f5c29 	.word	0xc28f5c29
 80010e4:	3fdc28f5 	.word	0x3fdc28f5
 80010e8:	47ae147b 	.word	0x47ae147b
 80010ec:	3ff47ae1 	.word	0x3ff47ae1
 80010f0:	00000000 	.word	0x00000000
 80010f4:	412e8480 	.word	0x412e8480
 80010f8:	40590000 	.word	0x40590000
 80010fc:	408f4000 	.word	0x408f4000
 8001100:	40000800 	.word	0x40000800
 8001104:	00000000 	.word	0x00000000

08001108 <set_motor_speed_3>:

void set_motor_speed_3(int motor_speed) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f9c7 	bl	80004a4 <__aeabi_i2d>
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <set_motor_speed_3+0xa0>)
 800111c:	f7ff fb56 	bl	80007cc <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	a319      	add	r3, pc, #100	@ (adr r3, 8001190 <set_motor_speed_3+0x88>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa23 	bl	8000578 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	a317      	add	r3, pc, #92	@ (adr r3, 8001198 <set_motor_speed_3+0x90>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f7ff f864 	bl	800020c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <set_motor_speed_3+0xa4>)
 8001152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001156:	f7ff fb39 	bl	80007cc <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	a30f      	add	r3, pc, #60	@ (adr r3, 80011a0 <set_motor_speed_3+0x98>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fa06 	bl	8000578 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcb0 	bl	8000ad8 <__aeabi_d2iz>
 8001178:	4603      	mov	r3, r0
 800117a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR3 = temp_ccr3;
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <set_motor_speed_3+0xa8>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	c28f5c29 	.word	0xc28f5c29
 8001194:	3fdc28f5 	.word	0x3fdc28f5
 8001198:	47ae147b 	.word	0x47ae147b
 800119c:	3ff47ae1 	.word	0x3ff47ae1
 80011a0:	00000000 	.word	0x00000000
 80011a4:	412e8480 	.word	0x412e8480
 80011a8:	40590000 	.word	0x40590000
 80011ac:	408f4000 	.word	0x408f4000
 80011b0:	40000800 	.word	0x40000800
 80011b4:	00000000 	.word	0x00000000

080011b8 <set_motor_speed_4>:

void set_motor_speed_4(int motor_speed) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f96f 	bl	80004a4 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <set_motor_speed_4+0xa0>)
 80011cc:	f7ff fafe 	bl	80007cc <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a319      	add	r3, pc, #100	@ (adr r3, 8001240 <set_motor_speed_4+0x88>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff f9cb 	bl	8000578 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a317      	add	r3, pc, #92	@ (adr r3, 8001248 <set_motor_speed_4+0x90>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f80c 	bl	800020c <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr4 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b16      	ldr	r3, [pc, #88]	@ (800125c <set_motor_speed_4+0xa4>)
 8001202:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001206:	f7ff fae1 	bl	80007cc <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	a30f      	add	r3, pc, #60	@ (adr r3, 8001250 <set_motor_speed_4+0x98>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f9ae 	bl	8000578 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc58 	bl	8000ad8 <__aeabi_d2iz>
 8001228:	4603      	mov	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]

  TIM4->CCR4 = temp_ccr4;
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <set_motor_speed_4+0xa8>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	c28f5c29 	.word	0xc28f5c29
 8001244:	3fdc28f5 	.word	0x3fdc28f5
 8001248:	47ae147b 	.word	0x47ae147b
 800124c:	3ff47ae1 	.word	0x3ff47ae1
 8001250:	00000000 	.word	0x00000000
 8001254:	412e8480 	.word	0x412e8480
 8001258:	40590000 	.word	0x40590000
 800125c:	408f4000 	.word	0x408f4000
 8001260:	40000800 	.word	0x40000800
 8001264:	00000000 	.word	0x00000000

08001268 <set_motor_speed_5>:

void set_motor_speed_5(int motor_speed) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f917 	bl	80004a4 <__aeabi_i2d>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <set_motor_speed_5+0xa0>)
 800127c:	f7ff faa6 	bl	80007cc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	a319      	add	r3, pc, #100	@ (adr r3, 80012f0 <set_motor_speed_5+0x88>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff f973 	bl	8000578 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	a317      	add	r3, pc, #92	@ (adr r3, 80012f8 <set_motor_speed_5+0x90>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7fe ffb4 	bl	800020c <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr1 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <set_motor_speed_5+0xa4>)
 80012b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b6:	f7ff fa89 	bl	80007cc <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001300 <set_motor_speed_5+0x98>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f956 	bl	8000578 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc00 	bl	8000ad8 <__aeabi_d2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	60fb      	str	r3, [r7, #12]

  TIM5->CCR1 = temp_ccr1;
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <set_motor_speed_5+0xa8>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	c28f5c29 	.word	0xc28f5c29
 80012f4:	3fdc28f5 	.word	0x3fdc28f5
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	3ff47ae1 	.word	0x3ff47ae1
 8001300:	00000000 	.word	0x00000000
 8001304:	412e8480 	.word	0x412e8480
 8001308:	40590000 	.word	0x40590000
 800130c:	408f4000 	.word	0x408f4000
 8001310:	40000c00 	.word	0x40000c00
 8001314:	00000000 	.word	0x00000000

08001318 <set_motor_speed_6>:
void set_motor_speed_6(int motor_speed) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  // 0 = Full Clockwise Rotation
  // 50 = No Rotation
  // 100 = Full Counterclockwise Rotation

  // converting motor speed to pulse width (in ms)
  double pulse_width = (1.28) + (0.44 * ((double)motor_speed/100));
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff f8bf 	bl	80004a4 <__aeabi_i2d>
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <set_motor_speed_6+0xa0>)
 800132c:	f7ff fa4e 	bl	80007cc <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	a319      	add	r3, pc, #100	@ (adr r3, 80013a0 <set_motor_speed_6+0x88>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f91b 	bl	8000578 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	a317      	add	r3, pc, #92	@ (adr r3, 80013a8 <set_motor_speed_6+0x90>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7fe ff5c 	bl	800020c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int temp_ccr3 = (pulse_width / 1000) * (PROCESSOR_CLOCK / PRESCALER);
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <set_motor_speed_6+0xa4>)
 8001362:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001366:	f7ff fa31 	bl	80007cc <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	a30f      	add	r3, pc, #60	@ (adr r3, 80013b0 <set_motor_speed_6+0x98>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f8fe 	bl	8000578 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fba8 	bl	8000ad8 <__aeabi_d2iz>
 8001388:	4603      	mov	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]

  TIM5->CCR3 = temp_ccr3;
 800138c:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <set_motor_speed_6+0xa8>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	c28f5c29 	.word	0xc28f5c29
 80013a4:	3fdc28f5 	.word	0x3fdc28f5
 80013a8:	47ae147b 	.word	0x47ae147b
 80013ac:	3ff47ae1 	.word	0x3ff47ae1
 80013b0:	00000000 	.word	0x00000000
 80013b4:	412e8480 	.word	0x412e8480
 80013b8:	40590000 	.word	0x40590000
 80013bc:	408f4000 	.word	0x408f4000
 80013c0:	40000c00 	.word	0x40000c00

080013c4 <reverse>:
	ILI9341_TouchUnselect();
	ILI9341_Init();
}

void reverse(char* str, int len)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80013d8:	e018      	b.n	800140c <reverse+0x48>
        temp = str[i];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	441a      	add	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	440b      	add	r3, r1
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
        i++;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
        j--;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3b01      	subs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbe2      	blt.n	80013da <reverse+0x16>
    }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
    while (x) {
 8001434:	e01d      	b.n	8001472 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <intToStr+0x8c>)
 800143a:	fb83 1302 	smull	r1, r3, r3, r2
 800143e:	1099      	asrs	r1, r3, #2
 8001440:	17d3      	asrs	r3, r2, #31
 8001442:	1ac9      	subs	r1, r1, r3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad1      	subs	r1, r2, r3
 800144e:	b2ca      	uxtb	r2, r1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	6179      	str	r1, [r7, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	440b      	add	r3, r1
 800145c:	3230      	adds	r2, #48	@ 0x30
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <intToStr+0x8c>)
 8001466:	fb82 1203 	smull	r1, r2, r2, r3
 800146a:	1092      	asrs	r2, r2, #2
 800146c:	17db      	asrs	r3, r3, #31
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1de      	bne.n	8001436 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001478:	e007      	b.n	800148a <intToStr+0x66>
        str[i++] = '0';
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	461a      	mov	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	2230      	movs	r2, #48	@ 0x30
 8001488:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	dbf3      	blt.n	800147a <intToStr+0x56>

    reverse(str, i);
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff ff95 	bl	80013c4 <reverse>
    str[i] = '\0';
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    return i;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	66666667 	.word	0x66666667
 80014b4:	00000000 	.word	0x00000000

080014b8 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a03 	vstr	s0, [r7, #12]
 80014c2:	60b8      	str	r0, [r7, #8]
 80014c4:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80014c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	69f8      	ldr	r0, [r7, #28]
 80014f0:	f7ff ff98 	bl	8001424 <intToStr>
 80014f4:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d030      	beq.n	800155e <ftoa+0xa6>
        res[i] = '.'; // add dot
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	222e      	movs	r2, #46	@ 0x2e
 8001504:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001506:	69b8      	ldr	r0, [r7, #24]
 8001508:	f7fe ffde 	bl	80004c8 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7fe ffc7 	bl	80004a4 <__aeabi_i2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	ec43 2b11 	vmov	d1, r2, r3
 800151e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001568 <ftoa+0xb0>
 8001522:	f00a fbd5 	bl	800bcd0 <pow>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f823 	bl	8000578 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb15 	bl	8000b68 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001542:	edd7 7a06 	vldr	s15, [r7, #24]
 8001546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4619      	mov	r1, r3
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7ff ff63 	bl	8001424 <intToStr>
    }
}
 800155e:	bf00      	nop
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bdb0      	pop	{r4, r5, r7, pc}
 8001566:	bf00      	nop
 8001568:	00000000 	.word	0x00000000
 800156c:	40240000 	.word	0x40240000

08001570 <HAL_GPIO_EXTI_Callback>:
	  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, &actual_guitar_freq,  4, HAL_MAX_DELAY);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == 64) {
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	2b40      	cmp	r3, #64	@ 0x40
 800157e:	d10d      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x2c>
		if (startFlag) {
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_EXTI_Callback+0x20>
			startFlag = 0;
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x38>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
			loop = 0;
		}
	}


}
 800158e:	e005      	b.n	800159c <HAL_GPIO_EXTI_Callback+0x2c>
			startFlag = 1;
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
			loop = 0;
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	2000045c 	.word	0x2000045c
 80015ac:	20000000 	.word	0x20000000

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 80015b6:	b0be      	sub	sp, #248	@ 0xf8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	convFlag = 0;
 80015ba:	4bd1      	ldr	r3, [pc, #836]	@ (8001900 <main+0x350>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
	//E (low), A, D, G, B, E (high)
	float32_t string_freqs[6] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 80015c0:	4bd0      	ldr	r3, [pc, #832]	@ (8001904 <main+0x354>)
 80015c2:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 80015c6:	f104 0464 	add.w	r4, r4, #100	@ 0x64
 80015ca:	461d      	mov	r5, r3
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015d4:	e884 0003 	stmia.w	r4, {r0, r1}
	float32_t measured_freq;
	char *strings[] = {"E (low)", "A       ", "D       ", "G       ", "B       ", "E (high)" };
 80015d8:	4bcb      	ldr	r3, [pc, #812]	@ (8001908 <main+0x358>)
 80015da:	f507 3480 	add.w	r4, r7, #65536	@ 0x10000
 80015de:	f104 044c 	add.w	r4, r4, #76	@ 0x4c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ec:	e884 0003 	stmia.w	r4, {r0, r1}
		  uint8_t buf[4];
	 };

	union Float_as_buffer actual_guitar_freq;

	uint16_t key = 0xFFFF;
 80015f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f4:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80015f8:	f102 0246 	add.w	r2, r2, #70	@ 0x46
 80015fc:	8013      	strh	r3, [r2, #0]

	uint8_t start = 0b1;
 80015fe:	2301      	movs	r3, #1
 8001600:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001604:	f102 0297 	add.w	r2, r2, #151	@ 0x97
 8001608:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160a:	f002 fa02 	bl	8003a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160e:	f001 f8c1 	bl	8002794 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001612:	f001 f905 	bl	8002820 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f001 fc75 	bl	8002f04 <MX_GPIO_Init>
  MX_DMA_Init();
 800161a:	f001 fc49 	bl	8002eb0 <MX_DMA_Init>
  MX_ADC1_Init();
 800161e:	f001 f92f 	bl	8002880 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001622:	f001 f993 	bl	800294c <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 8001626:	f001 fa29 	bl	8002a7c <MX_SAI1_Init>
  MX_TIM1_Init();
 800162a:	f001 fa9b 	bl	8002b64 <MX_TIM1_Init>
  MX_TIM4_Init();
 800162e:	f001 fb5d 	bl	8002cec <MX_TIM4_Init>
  MX_SPI1_Init();
 8001632:	f001 fa59 	bl	8002ae8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001636:	f001 fbd5 	bl	8002de4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800163a:	f001 f9d3 	bl	80029e4 <MX_USART1_UART_Init>
  //arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);

  float32_t signal[BUFFER_LENGTH];
  float32_t autocorrelation[BUFFER_LENGTH];

  uint32_t LOWEST_PERIOD = SAMPLING_RATE / 440; //440hz max
 800163e:	2304      	movs	r3, #4
 8001640:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001644:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8001648:	6013      	str	r3, [r2, #0]
  uint32_t HIGHEST_PERIOD = SAMPLING_RATE / 50; //60 Hz min (change to 50)
 800164a:	2329      	movs	r3, #41	@ 0x29
 800164c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001650:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8001654:	6013      	str	r3, [r2, #0]

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

//  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;

  HAL_TIM_Base_Start_IT(&htim1);
 8001656:	48ad      	ldr	r0, [pc, #692]	@ (800190c <main+0x35c>)
 8001658:	f007 f9f8 	bl	8008a4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	48ac      	ldr	r0, [pc, #688]	@ (8001910 <main+0x360>)
 8001660:	f007 fabc 	bl	8008bdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	48aa      	ldr	r0, [pc, #680]	@ (8001910 <main+0x360>)
 8001668:	f007 fab8 	bl	8008bdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800166c:	2108      	movs	r1, #8
 800166e:	48a8      	ldr	r0, [pc, #672]	@ (8001910 <main+0x360>)
 8001670:	f007 fab4 	bl	8008bdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001674:	210c      	movs	r1, #12
 8001676:	48a6      	ldr	r0, [pc, #664]	@ (8001910 <main+0x360>)
 8001678:	f007 fab0 	bl	8008bdc <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	48a5      	ldr	r0, [pc, #660]	@ (8001914 <main+0x364>)
 8001680:	f007 faac 	bl	8008bdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001684:	2108      	movs	r1, #8
 8001686:	48a3      	ldr	r0, [pc, #652]	@ (8001914 <main+0x364>)
 8001688:	f007 faa8 	bl	8008bdc <HAL_TIM_PWM_Start>
//  ILI9341_WriteString(45, 60, "TO START", Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t previous = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001692:	f102 028b 	add.w	r2, r2, #139	@ 0x8b
 8001696:	7013      	strb	r3, [r2, #0]
  uint8_t hold = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800169e:	f102 028a 	add.w	r2, r2, #138	@ 0x8a
 80016a2:	7013      	strb	r3, [r2, #0]
  while (1)
  {
	while (!startFlag) {
 80016a4:	e040      	b.n	8001728 <main+0x178>
		actual_guitar_freq.f = 0.0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80016ae:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 80016b2:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80016ba:	f102 02f4 	add.w	r2, r2, #244	@ 0xf4
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e025      	b.n	800170e <main+0x15e>
			  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 80016c2:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 80016c6:	f101 0146 	add.w	r1, r1, #70	@ 0x46
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	2202      	movs	r2, #2
 80016d0:	4891      	ldr	r0, [pc, #580]	@ (8001918 <main+0x368>)
 80016d2:	f008 faed 	bl	8009cb0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	2201      	movs	r2, #1
 80016dc:	498f      	ldr	r1, [pc, #572]	@ (800191c <main+0x36c>)
 80016de:	488e      	ldr	r0, [pc, #568]	@ (8001918 <main+0x368>)
 80016e0:	f008 fae6 	bl	8009cb0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, &actual_guitar_freq.buf,  4, HAL_MAX_DELAY);
 80016e4:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 80016e8:	f101 0148 	add.w	r1, r1, #72	@ 0x48
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	2204      	movs	r2, #4
 80016f2:	4889      	ldr	r0, [pc, #548]	@ (8001918 <main+0x368>)
 80016f4:	f008 fadc 	bl	8009cb0 <HAL_UART_Transmit>
		for (int i = 0; i < 3; ++i) {
 80016f8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80016fc:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001708:	f102 02f4 	add.w	r2, r2, #244	@ 0xf4
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001712:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b02      	cmp	r3, #2
 800171a:	ddd2      	ble.n	80016c2 <main+0x112>
		  }
		previous = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001722:	f102 028b 	add.w	r2, r2, #139	@ 0x8b
 8001726:	7013      	strb	r3, [r2, #0]
	while (!startFlag) {
 8001728:	4b7c      	ldr	r3, [pc, #496]	@ (800191c <main+0x36c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ba      	beq.n	80016a6 <main+0xf6>
	}

	while (startFlag) {
 8001730:	f001 b820 	b.w	8002774 <main+0x11c4>


		uint16_t key = 0xFFFF;
 8001734:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001738:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800173c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001740:	f823 2cb6 	strh.w	r2, [r3, #-182]
		uint32_t holder = 0x0000;
 8001744:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001748:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800174c:	461a      	mov	r2, r3
 800174e:	2300      	movs	r3, #0
 8001750:	f842 3cbc 	str.w	r3, [r2, #-188]
		if(loop < 10) {
 8001754:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <main+0x370>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b09      	cmp	r3, #9
 800175a:	d835      	bhi.n	80017c8 <main+0x218>
		for (int i = 0; i < 3; ++i) {
 800175c:	2300      	movs	r3, #0
 800175e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001762:	f102 02f0 	add.w	r2, r2, #240	@ 0xf0
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e027      	b.n	80017ba <main+0x20a>
		  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 800176a:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 800176e:	f101 0178 	add.w	r1, r1, #120	@ 0x78
 8001772:	39b6      	subs	r1, #182	@ 0xb6
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	2202      	movs	r2, #2
 800177a:	4867      	ldr	r0, [pc, #412]	@ (8001918 <main+0x368>)
 800177c:	f008 fa98 	bl	8009cb0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2201      	movs	r2, #1
 8001786:	4965      	ldr	r1, [pc, #404]	@ (800191c <main+0x36c>)
 8001788:	4863      	ldr	r0, [pc, #396]	@ (8001918 <main+0x368>)
 800178a:	f008 fa91 	bl	8009cb0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &holder,  4, HAL_MAX_DELAY);
 800178e:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 8001792:	f101 0178 	add.w	r1, r1, #120	@ 0x78
 8001796:	39bc      	subs	r1, #188	@ 0xbc
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2204      	movs	r2, #4
 800179e:	485e      	ldr	r0, [pc, #376]	@ (8001918 <main+0x368>)
 80017a0:	f008 fa86 	bl	8009cb0 <HAL_UART_Transmit>
		for (int i = 0; i < 3; ++i) {
 80017a4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017a8:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80017b4:	f102 02f0 	add.w	r2, r2, #240	@ 0xf0
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80017be:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	ddd0      	ble.n	800176a <main+0x1ba>
		}
		}
		loop += 1;
 80017c8:	4b55      	ldr	r3, [pc, #340]	@ (8001920 <main+0x370>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <main+0x370>)
 80017d2:	701a      	strb	r2, [r3, #0]

	 HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, BUFFER_LENGTH);
 80017d4:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 80017d8:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80017dc:	3bb4      	subs	r3, #180	@ 0xb4
 80017de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e2:	4619      	mov	r1, r3
 80017e4:	484f      	ldr	r0, [pc, #316]	@ (8001924 <main+0x374>)
 80017e6:	f002 fccd 	bl	8004184 <HAL_ADC_Start_DMA>
//	  }

	 //Calculate average of ADC values over a range, do this for both noise (to get a threshold) and for when the individual strings
	 //are strummed

	  while(convFlag == 0) {;}
 80017ea:	bf00      	nop
 80017ec:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <main+0x350>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0fb      	beq.n	80017ec <main+0x23c>

	  float32_t output[BUFFER_LENGTH];
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80017fa:	f102 02ec 	add.w	r2, r2, #236	@ 0xec
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e031      	b.n	8001866 <main+0x2b6>
		  signal[i] = (double)(ADC_BUFFER[i]);
 8001802:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001806:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800180a:	461a      	mov	r2, r3
 800180c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001810:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	f833 3cb4 	ldrh.w	r3, [r3, #-180]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe2f 	bl	8000484 <__aeabi_ui2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f99b 	bl	8000b68 <__aeabi_d2f>
 8001832:	4602      	mov	r2, r0
 8001834:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8001838:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 800183c:	4619      	mov	r1, r3
 800183e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001842:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	3bb4      	subs	r3, #180	@ 0xb4
 800184e:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8001850:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001854:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001860:	f102 02ec 	add.w	r2, r2, #236	@ 0xec
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800186a:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001874:	dbc5      	blt.n	8001802 <main+0x252>

	  }

	apply_hanning_window(&signal, BUFFER_LENGTH);
 8001876:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 800187a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800187e:	3b34      	subs	r3, #52	@ 0x34
 8001880:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fb47 	bl	8000f18 <apply_hanning_window>

    arm_rfft_fast_instance_f32 fftInstance;


    // Initialize the FFT instance
    arm_rfft_fast_init_f32(&fftInstance, BUFFER_LENGTH);
 800188a:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 800188e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001892:	3bd4      	subs	r3, #212	@ 0xd4
 8001894:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001898:	4618      	mov	r0, r3
 800189a:	f009 fa21 	bl	800ace0 <arm_rfft_fast_init_f32>


    arm_rfft_fast_f32(&fftInstance, signal, output, 0);
 800189e:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80018a2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80018a6:	3af8      	subs	r2, #248	@ 0xf8
 80018a8:	f507 4140 	add.w	r1, r7, #49152	@ 0xc000
 80018ac:	f101 0178 	add.w	r1, r1, #120	@ 0x78
 80018b0:	3934      	subs	r1, #52	@ 0x34
 80018b2:	f507 40c1 	add.w	r0, r7, #24704	@ 0x6080
 80018b6:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 80018ba:	38d4      	subs	r0, #212	@ 0xd4
 80018bc:	2300      	movs	r3, #0
 80018be:	f009 faf3 	bl	800aea8 <arm_rfft_fast_f32>

    output[0] = 0;
 80018c2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80018c6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018ca:	461a      	mov	r2, r3
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f842 3cf8 	str.w	r3, [r2, #-248]
    output[1] = 0;
 80018d4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80018d8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018dc:	461a      	mov	r2, r3
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f842 3cf4 	str.w	r3, [r2, #-244]

	  if(!startFlag){
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <main+0x36c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 873f 	beq.w	800276e <main+0x11be>
	  	    	 continue;
	  	     }

    // Rest of the frequency bins (upto N/2)
    float32_t HPS[BUFFER_LENGTH / 2];
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80018f6:	f102 02e8 	add.w	r2, r2, #232	@ 0xe8
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e07c      	b.n	80019f8 <main+0x448>
 80018fe:	bf00      	nop
 8001900:	20000458 	.word	0x20000458
 8001904:	0800d750 	.word	0x0800d750
 8001908:	0800d7ac 	.word	0x0800d7ac
 800190c:	20000374 	.word	0x20000374
 8001910:	200003c0 	.word	0x200003c0
 8001914:	2000040c 	.word	0x2000040c
 8001918:	200001e8 	.word	0x200001e8
 800191c:	2000045c 	.word	0x2000045c
 8001920:	20000000 	.word	0x20000000
 8001924:	2000008c 	.word	0x2000008c
 8001928:	442a8000 	.word	0x442a8000
 800192c:	44000000 	.word	0x44000000
 8001930:	43cc8000 	.word	0x43cc8000
        HPS[i] = sqrtf(output[2 * i] * output[2 * i] + output[2 * i + 1] * output[2 * i + 1]); // Real part
 8001934:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001938:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001944:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3bf8      	subs	r3, #248	@ 0xf8
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001956:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001962:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3bf8      	subs	r3, #248	@ 0xf8
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001974:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001978:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	3301      	adds	r3, #1
 8001982:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001986:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3bf8      	subs	r3, #248	@ 0xf8
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001998:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	3301      	adds	r3, #1
 80019a2:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80019a6:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3bf8      	subs	r3, #248	@ 0xf8
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	f00a f9f6 	bl	800bdb0 <sqrtf>
 80019c4:	eef0 7a40 	vmov.f32	s15, s0
 80019c8:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80019cc:	461a      	mov	r2, r3
 80019ce:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019d2:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3bf8      	subs	r3, #248	@ 0xf8
 80019de:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < BUFFER_LENGTH / 2; ++i) {
 80019e2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019e6:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80019f2:	f102 02e8 	add.w	r2, r2, #232	@ 0xe8
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80019fc:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a06:	d395      	bcc.n	8001934 <main+0x384>
    }
//
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001a0e:	f102 02e4 	add.w	r2, r2, #228	@ 0xe4
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e0e2      	b.n	8001bdc <main+0x62c>

      HPS[i] = HPS[i] * HPS[2*i];
 8001a16:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a20:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3bf8      	subs	r3, #248	@ 0xf8
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a34:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3bf8      	subs	r3, #248	@ 0xf8
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001a52:	461a      	mov	r2, r3
 8001a54:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a58:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3bf8      	subs	r3, #248	@ 0xf8
 8001a64:	edc3 7a00 	vstr	s15, [r3]

      if(i < floorf(BUFFER_LENGTH / 6)) {
 8001a68:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a6c:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	ed1f 7a55 	vldr	s14, [pc, #-340]	@ 8001928 <main+0x378>
 8001a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	d52a      	bpl.n	8001ade <main+0x52e>
        HPS[i] = HPS[i] * HPS[3*i];
 8001a88:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001a92:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3bf8      	subs	r3, #248	@ 0xf8
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001aa6:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3bf8      	subs	r3, #248	@ 0xf8
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ace:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3bf8      	subs	r3, #248	@ 0xf8
 8001ada:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 8)) {
 8001ade:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ae2:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 800192c <main+0x37c>
 8001af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	d528      	bpl.n	8001b50 <main+0x5a0>
        HPS[i] = HPS[i] * HPS[4*i];
 8001afe:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b02:	461a      	mov	r2, r3
 8001b04:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b08:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3bf8      	subs	r3, #248	@ 0xf8
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b1c:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3bf8      	subs	r3, #248	@ 0xf8
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b36:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b40:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3bf8      	subs	r3, #248	@ 0xf8
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
      }

      if(i < floorf(BUFFER_LENGTH / 10)) {
 8001b50:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b54:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8001930 <main+0x380>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d52a      	bpl.n	8001bc6 <main+0x616>
    	  HPS[i] = HPS[i] * HPS[5*i];
 8001b70:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b74:	461a      	mov	r2, r3
 8001b76:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b7a:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3bf8      	subs	r3, #248	@ 0xf8
 8001b86:	ed93 7a00 	vldr	s14, [r3]
 8001b8a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001b8e:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3bf8      	subs	r3, #248	@ 0xf8
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001bb6:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3bf8      	subs	r3, #248	@ 0xf8
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < BUFFER_LENGTH / 4; i++) {
 8001bc6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001bca:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001bd6:	f102 02e4 	add.w	r2, r2, #228	@ 0xe4
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001be0:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	f6ff af14 	blt.w	8001a16 <main+0x466>

    }


    //Filter lower and higher frequencies, 30Hz and 450 Hz
    for(int i = 0; i < 50; ++i){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001bf4:	f102 02e0 	add.w	r2, r2, #224	@ 0xe0
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e018      	b.n	8001c2e <main+0x67e>
    	HPS[i] = 0;
 8001bfc:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c00:	461a      	mov	r2, r3
 8001c02:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c06:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3bf8      	subs	r3, #248	@ 0xf8
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 50; ++i){
 8001c18:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c1c:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c28:	f102 02e0 	add.w	r2, r2, #224	@ 0xe0
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c32:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b31      	cmp	r3, #49	@ 0x31
 8001c3a:	dddf      	ble.n	8001bfc <main+0x64c>
    }
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001c3c:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8001c40:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c44:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e018      	b.n	8001c7e <main+0x6ce>
    	HPS[i] = 0;
 8001c4c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c50:	461a      	mov	r2, r3
 8001c52:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c56:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3bf8      	subs	r3, #248	@ 0xf8
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
    for(int i = 370; i < BUFFER_LENGTH / 2; ++i){ //370 since likely will never be higher and issues with 3rd string harmonics
 8001c68:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c6c:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001c78:	f102 02dc 	add.w	r2, r2, #220	@ 0xdc
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001c82:	f103 03dc 	add.w	r3, r3, #220	@ 0xdc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c8c:	dbde      	blt.n	8001c4c <main+0x69c>
    }

    float32_t average;
	arm_mean_f32(HPS, BUFFER_LENGTH/2, &average);
 8001c8e:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 8001c92:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8001c96:	3ad8      	subs	r2, #216	@ 0xd8
 8001c98:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c9c:	3bf8      	subs	r3, #248	@ 0xf8
 8001c9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 feaa 	bl	800a9fc <arm_mean_f32>
	if(average < (2E20)){ //Based on sampled data,see spreadsheet
 8001ca8:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001cac:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001cb0:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc07 	bl	80004c8 <__aeabi_f2d>
 8001cba:	f20f 53b4 	addw	r3, pc, #1460	@ 0x5b4
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fecb 	bl	8000a5c <__aeabi_dcmplt>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <main+0x72c>
		hold = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001cd2:	f102 028a 	add.w	r2, r2, #138	@ 0x8a
 8001cd6:	7013      	strb	r3, [r2, #0]
		continue;
 8001cd8:	f000 bd4c 	b.w	8002774 <main+0x11c4>
	}


    int max_peak = 0;
 8001cdc:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001ce0:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f842 3cdc 	str.w	r3, [r2, #-220]
    int max_mag = 0;
 8001cec:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001cf0:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f842 3ce0 	str.w	r3, [r2, #-224]
    arm_max_f32(HPS, BUFFER_LENGTH / 2, &max_mag, &max_peak);
 8001cfc:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001d00:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001d04:	3bdc      	subs	r3, #220	@ 0xdc
 8001d06:	f507 42c1 	add.w	r2, r7, #24704	@ 0x6080
 8001d0a:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8001d0e:	3ae0      	subs	r2, #224	@ 0xe0
 8001d10:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8001d14:	38f8      	subs	r0, #248	@ 0xf8
 8001d16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d1a:	f008 fead 	bl	800aa78 <arm_max_f32>

    float32_t measured_freq = max_peak * (2* SAMPLING_RATE/(BUFFER_LENGTH));
 8001d1e:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001d22:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001d26:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fbba 	bl	80004a4 <__aeabi_i2d>
 8001d30:	f20f 5344 	addw	r3, pc, #1348	@ 0x544
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc1e 	bl	8000578 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe ff10 	bl	8000b68 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d4e:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8001d52:	6013      	str	r3, [r2, #0]

	     //Match frequency to string

	     //find smallest magnitude of distance
	     float32_t min_freqs[6];
	     for(int i = 0; i < 6; ++i){
 8001d54:	2300      	movs	r3, #0
 8001d56:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001d5a:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e02f      	b.n	8001dc2 <main+0x812>
	    	 min_freqs[i] = string_freqs[i] - measured_freq;
 8001d62:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d66:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001d72:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8001d76:	443b      	add	r3, r7
 8001d78:	3b94      	subs	r3, #148	@ 0x94
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d82:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001d92:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001d96:	461a      	mov	r2, r3
 8001d98:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001d9c:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3bf8      	subs	r3, #248	@ 0xf8
 8001da8:	edc3 7a00 	vstr	s15, [r3]
	     for(int i = 0; i < 6; ++i){
 8001dac:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001db0:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001dbc:	f102 02d8 	add.w	r2, r2, #216	@ 0xd8
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001dc6:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	ddc8      	ble.n	8001d62 <main+0x7b2>
	     }

	     arm_abs_f32(min_freqs, min_freqs, 6);
 8001dd0:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 8001dd4:	f101 0178 	add.w	r1, r1, #120	@ 0x78
 8001dd8:	39f8      	subs	r1, #248	@ 0xf8
 8001dda:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001dde:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001de2:	3bf8      	subs	r3, #248	@ 0xf8
 8001de4:	2206      	movs	r2, #6
 8001de6:	4618      	mov	r0, r3
 8001de8:	f009 fc3c 	bl	800b664 <arm_abs_f32>

	     //find the argmin
	     float32_t current_min = min_freqs[0];
 8001dec:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001df0:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001df4:	f853 3cf8 	ldr.w	r3, [r3, #-248]
 8001df8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001dfc:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 8001e00:	6013      	str	r3, [r2, #0]
	     uint8_t index = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e08:	f102 02d3 	add.w	r2, r2, #211	@ 0xd3
 8001e0c:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e14:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e041      	b.n	8001ea0 <main+0x8f0>
	    	 if (min_freqs[i] < current_min){
 8001e1c:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001e20:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001e24:	461a      	mov	r2, r3
 8001e26:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e2a:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3bf8      	subs	r3, #248	@ 0xf8
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e3e:	f103 03d4 	add.w	r3, r3, #212	@ 0xd4
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	dd1c      	ble.n	8001e8a <main+0x8da>
	    		 current_min = min_freqs[i];
 8001e50:	f507 43c1 	add.w	r3, r7, #24704	@ 0x6080
 8001e54:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e5e:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3bf8      	subs	r3, #248	@ 0xf8
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e70:	f102 02d4 	add.w	r2, r2, #212	@ 0xd4
 8001e74:	6013      	str	r3, [r2, #0]
	    		 index = i;
 8001e76:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e7a:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e84:	f102 02d3 	add.w	r2, r2, #211	@ 0xd3
 8001e88:	7013      	strb	r3, [r2, #0]
	     for(int i = 0; i < 6; ++i){
 8001e8a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001e8e:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001e9a:	f102 02cc 	add.w	r2, r2, #204	@ 0xcc
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ea4:	f103 03cc 	add.w	r3, r3, #204	@ 0xcc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	ddb6      	ble.n	8001e1c <main+0x86c>
	    	 }
	     }

	     //assign detected string
	     detected_string = strings[index];
 8001eae:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001eb2:	f103 03d3 	add.w	r3, r3, #211	@ 0xd3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001ebe:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8001ec2:	443b      	add	r3, r7
 8001ec4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8001ec8:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001ecc:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8001ed0:	6013      	str	r3, [r2, #0]

	     string_offset = measured_freq - string_freqs[index];
 8001ed2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ed6:	f103 03d3 	add.w	r3, r3, #211	@ 0xd3
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001ee2:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8001ee6:	443b      	add	r3, r7
 8001ee8:	3b94      	subs	r3, #148	@ 0x94
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001ef2:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f02:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8001f06:	edc3 7a00 	vstr	s15, [r3]


	     actual_guitar_freq.f = measured_freq;
 8001f0a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f0e:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001f18:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8001f1c:	6013      	str	r3, [r2, #0]

	 // Transmit the string message
	  for (int i = 0; i < 3; ++i) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001f24:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e026      	b.n	8001f7a <main+0x9ca>
		  HAL_UART_Transmit(&huart1, &key,                 2, HAL_MAX_DELAY);
 8001f2c:	f507 41c1 	add.w	r1, r7, #24704	@ 0x6080
 8001f30:	f101 0178 	add.w	r1, r1, #120	@ 0x78
 8001f34:	39b6      	subs	r1, #182	@ 0xb6
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	48c6      	ldr	r0, [pc, #792]	@ (8002258 <main+0xca8>)
 8001f3e:	f007 feb7 	bl	8009cb0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &startFlag,               1, HAL_MAX_DELAY);
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	2201      	movs	r2, #1
 8001f48:	49c4      	ldr	r1, [pc, #784]	@ (800225c <main+0xcac>)
 8001f4a:	48c3      	ldr	r0, [pc, #780]	@ (8002258 <main+0xca8>)
 8001f4c:	f007 feb0 	bl	8009cb0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, &actual_guitar_freq.buf,  4, HAL_MAX_DELAY);
 8001f50:	f507 3180 	add.w	r1, r7, #65536	@ 0x10000
 8001f54:	f101 0148 	add.w	r1, r1, #72	@ 0x48
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	48be      	ldr	r0, [pc, #760]	@ (8002258 <main+0xca8>)
 8001f60:	f007 fea6 	bl	8009cb0 <HAL_UART_Transmit>
	  for (int i = 0; i < 3; ++i) {
 8001f64:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f68:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8001f74:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f7e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	ddd1      	ble.n	8001f2c <main+0x97c>
	  }


	  ftoa(measured_freq, charFreq, 2);
 8001f88:	2102      	movs	r1, #2
 8001f8a:	48b5      	ldr	r0, [pc, #724]	@ (8002260 <main+0xcb0>)
 8001f8c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001f90:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8001f94:	ed93 0a00 	vldr	s0, [r3]
 8001f98:	f7ff fa8e 	bl	80014b8 <ftoa>
	  ftoa(string_freqs[index], desiredFreq, 2);
 8001f9c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001fa0:	f103 03d3 	add.w	r3, r3, #211	@ 0xd3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001fac:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8001fb0:	443b      	add	r3, r7
 8001fb2:	3b94      	subs	r3, #148	@ 0x94
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	2102      	movs	r1, #2
 8001fba:	48aa      	ldr	r0, [pc, #680]	@ (8002264 <main+0xcb4>)
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	f7ff fa7a 	bl	80014b8 <ftoa>

	    if(!startFlag){
 8001fc4:	4ba5      	ldr	r3, [pc, #660]	@ (800225c <main+0xcac>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 83d2 	beq.w	8002772 <main+0x11c2>
		// ILI9341_WriteString(100, 90, charFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);
		// ILI9341_WriteString(100, 150, desiredFreq, Font_16x26, ILI9341_WHITE, ILI9341_BLACK);


	     //Tune strings (yeah yeah)
	     switch (index){
 8001fce:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8001fd2:	f103 03d3 	add.w	r3, r3, #211	@ 0xd3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	f200 83c1 	bhi.w	8002760 <main+0x11b0>
 8001fde:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe4 <main+0xa34>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002129 	.word	0x08002129
 8001fec:	08002295 	.word	0x08002295
 8001ff0:	080023c1 	.word	0x080023c1
 8001ff4:	08002509 	.word	0x08002509
 8001ff8:	08002635 	.word	0x08002635
	     	 case 0: //E low
	     		if(string_offset > 0){
 8001ffc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002000:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	dd3d      	ble.n	800208e <main+0xade>
				 uint32_t delay = floor(80 * string_offset);
 8002012:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002016:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800228c <main+0xcdc>
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002026:	ee17 0a90 	vmov	r0, s15
 800202a:	f7fe fa4d 	bl	80004c8 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b10 	vmov	d0, r2, r3
 8002036:	f009 ff2b 	bl	800be90 <floor>
 800203a:	ec53 2b10 	vmov	r2, r3, d0
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fd71 	bl	8000b28 <__aeabi_d2uiz>
 8002046:	4603      	mov	r3, r0
 8002048:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800204c:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002050:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002052:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002056:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002060:	4293      	cmp	r3, r2
 8002062:	d906      	bls.n	8002072 <main+0xac2>
					delay = MAX_DELAY;
 8002064:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002068:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800206c:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002070:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_1(68);
 8002072:	2044      	movs	r0, #68	@ 0x44
 8002074:	f7fe ff98 	bl	8000fa8 <set_motor_speed_1>
				  HAL_Delay(delay);
 8002078:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800207c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f001 fd3b 	bl	8003afc <HAL_Delay>
				  set_motor_speed_1(50);
 8002086:	2032      	movs	r0, #50	@ 0x32
 8002088:	f7fe ff8e 	bl	8000fa8 <set_motor_speed_1>
				 }
				 set_motor_speed_1(20);
				 HAL_Delay(delay);
				 set_motor_speed_1(50);
				}
	     		 break;
 800208c:	e368      	b.n	8002760 <main+0x11b0>
				else if(string_offset < 0){
 800208e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002092:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	d400      	bmi.n	80020a6 <main+0xaf6>
	     		 break;
 80020a4:	e35c      	b.n	8002760 <main+0x11b0>
				 uint32_t delay = floor(-1* (75 * string_offset));
 80020a6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80020aa:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002268 <main+0xcb8>
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	eef1 7a67 	vneg.f32	s15, s15
 80020be:	ee17 3a90 	vmov	r3, s15
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa00 	bl	80004c8 <__aeabi_f2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	ec43 2b10 	vmov	d0, r2, r3
 80020d0:	f009 fede 	bl	800be90 <floor>
 80020d4:	ec53 2b10 	vmov	r2, r3, d0
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f7fe fd24 	bl	8000b28 <__aeabi_d2uiz>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80020e6:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80020ea:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80020ec:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80020f0:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d906      	bls.n	800210c <main+0xb5c>
					delay = MAX_DELAY;
 80020fe:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002102:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002106:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800210a:	6013      	str	r3, [r2, #0]
				 set_motor_speed_1(20);
 800210c:	2014      	movs	r0, #20
 800210e:	f7fe ff4b 	bl	8000fa8 <set_motor_speed_1>
				 HAL_Delay(delay);
 8002112:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002116:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	f001 fcee 	bl	8003afc <HAL_Delay>
				 set_motor_speed_1(50);
 8002120:	2032      	movs	r0, #50	@ 0x32
 8002122:	f7fe ff41 	bl	8000fa8 <set_motor_speed_1>
	     		 break;
 8002126:	e31b      	b.n	8002760 <main+0x11b0>

	     	 case 1: //A
	     		if(string_offset > 0){
 8002128:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800212c:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	dd3d      	ble.n	80021ba <main+0xc0a>
				 uint32_t delay = floor(85 * string_offset);
 800213e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002142:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800226c <main+0xcbc>
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002152:	ee17 0a90 	vmov	r0, s15
 8002156:	f7fe f9b7 	bl	80004c8 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ec43 2b10 	vmov	d0, r2, r3
 8002162:	f009 fe95 	bl	800be90 <floor>
 8002166:	ec53 2b10 	vmov	r2, r3, d0
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fcdb 	bl	8000b28 <__aeabi_d2uiz>
 8002172:	4603      	mov	r3, r0
 8002174:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002178:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 800217c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 800217e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002182:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800218c:	4293      	cmp	r3, r2
 800218e:	d906      	bls.n	800219e <main+0xbee>
					delay = MAX_DELAY;
 8002190:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002194:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002198:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 800219c:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_2(74);
 800219e:	204a      	movs	r0, #74	@ 0x4a
 80021a0:	f7fe ff5a 	bl	8001058 <set_motor_speed_2>
				  HAL_Delay(delay);
 80021a4:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021a8:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	f001 fca5 	bl	8003afc <HAL_Delay>
				  set_motor_speed_2(50);
 80021b2:	2032      	movs	r0, #50	@ 0x32
 80021b4:	f7fe ff50 	bl	8001058 <set_motor_speed_2>
				 }
				 set_motor_speed_2(15);
				 HAL_Delay(delay);
				 set_motor_speed_2(50);
				}
	     		 break;
 80021b8:	e2d2      	b.n	8002760 <main+0x11b0>
				else if(string_offset < 0){
 80021ba:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021be:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	d400      	bmi.n	80021d2 <main+0xc22>
	     		 break;
 80021d0:	e2c6      	b.n	8002760 <main+0x11b0>
				 uint32_t delay = floor(-1* (115 * string_offset));
 80021d2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80021d6:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002284 <main+0xcd4>
 80021e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e6:	eef1 7a67 	vneg.f32	s15, s15
 80021ea:	ee17 3a90 	vmov	r3, s15
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f96a 	bl	80004c8 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	ec43 2b10 	vmov	d0, r2, r3
 80021fc:	f009 fe48 	bl	800be90 <floor>
 8002200:	ec53 2b10 	vmov	r2, r3, d0
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fc8e 	bl	8000b28 <__aeabi_d2uiz>
 800220c:	4603      	mov	r3, r0
 800220e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002212:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8002216:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002218:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800221c:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002226:	4293      	cmp	r3, r2
 8002228:	d906      	bls.n	8002238 <main+0xc88>
					delay = MAX_DELAY;
 800222a:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800222e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002232:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8002236:	6013      	str	r3, [r2, #0]
				 set_motor_speed_2(15);
 8002238:	200f      	movs	r0, #15
 800223a:	f7fe ff0d 	bl	8001058 <set_motor_speed_2>
				 HAL_Delay(delay);
 800223e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002242:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	f001 fc58 	bl	8003afc <HAL_Delay>
				 set_motor_speed_2(50);
 800224c:	2032      	movs	r0, #50	@ 0x32
 800224e:	f7fe ff03 	bl	8001058 <set_motor_speed_2>
	     		 break;
 8002252:	e285      	b.n	8002760 <main+0x11b0>
 8002254:	f3af 8000 	nop.w
 8002258:	200001e8 	.word	0x200001e8
 800225c:	2000045c 	.word	0x2000045c
 8002260:	20000460 	.word	0x20000460
 8002264:	20000474 	.word	0x20000474
 8002268:	42960000 	.word	0x42960000
 800226c:	42aa0000 	.word	0x42aa0000
 8002270:	78b58c40 	.word	0x78b58c40
 8002274:	4425af1d 	.word	0x4425af1d
 8002278:	624dd2f2 	.word	0x624dd2f2
 800227c:	3ff00690 	.word	0x3ff00690
 8002280:	43020000 	.word	0x43020000
 8002284:	42e60000 	.word	0x42e60000
 8002288:	43200000 	.word	0x43200000
 800228c:	42a00000 	.word	0x42a00000
 8002290:	42700000 	.word	0x42700000

	     	 case 2: //D
	     		if(string_offset > 0){
 8002294:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002298:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	dd3d      	ble.n	8002326 <main+0xd76>
				 uint32_t delay = floor(130 * string_offset); // (500/3 )
 80022aa:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80022ae:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 8002280 <main+0xcd0>
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	ee17 0a90 	vmov	r0, s15
 80022c2:	f7fe f901 	bl	80004c8 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b10 	vmov	d0, r2, r3
 80022ce:	f009 fddf 	bl	800be90 <floor>
 80022d2:	ec53 2b10 	vmov	r2, r3, d0
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc25 	bl	8000b28 <__aeabi_d2uiz>
 80022de:	4603      	mov	r3, r0
 80022e0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80022e4:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 80022e8:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80022ea:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80022ee:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d906      	bls.n	800230a <main+0xd5a>
					delay = MAX_DELAY;
 80022fc:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002300:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002304:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 8002308:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_3(70);
 800230a:	2046      	movs	r0, #70	@ 0x46
 800230c:	f7fe fefc 	bl	8001108 <set_motor_speed_3>
				  HAL_Delay(delay);
 8002310:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002314:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	f001 fbef 	bl	8003afc <HAL_Delay>
				  set_motor_speed_3(50);
 800231e:	2032      	movs	r0, #50	@ 0x32
 8002320:	f7fe fef2 	bl	8001108 <set_motor_speed_3>
				 }
				 set_motor_speed_3(18);
				 HAL_Delay(delay);
				 set_motor_speed_3(50);
	     		}
	     		 break;
 8002324:	e21c      	b.n	8002760 <main+0x11b0>
				else if(string_offset < 0){
 8002326:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800232a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d400      	bmi.n	800233e <main+0xd8e>
	     		 break;
 800233c:	e210      	b.n	8002760 <main+0x11b0>
				 uint32_t delay = floor(-1* (130 * string_offset)); // (500/3 )
 800233e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002342:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 8002280 <main+0xcd0>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	eef1 7a67 	vneg.f32	s15, s15
 8002356:	ee17 3a90 	vmov	r3, s15
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f8b4 	bl	80004c8 <__aeabi_f2d>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	ec43 2b10 	vmov	d0, r2, r3
 8002368:	f009 fd92 	bl	800be90 <floor>
 800236c:	ec53 2b10 	vmov	r2, r3, d0
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbd8 	bl	8000b28 <__aeabi_d2uiz>
 8002378:	4603      	mov	r3, r0
 800237a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800237e:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8002382:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002384:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002388:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002392:	4293      	cmp	r3, r2
 8002394:	d906      	bls.n	80023a4 <main+0xdf4>
					delay = MAX_DELAY;
 8002396:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800239a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800239e:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 80023a2:	6013      	str	r3, [r2, #0]
				 set_motor_speed_3(18);
 80023a4:	2012      	movs	r0, #18
 80023a6:	f7fe feaf 	bl	8001108 <set_motor_speed_3>
				 HAL_Delay(delay);
 80023aa:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80023ae:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	f001 fba2 	bl	8003afc <HAL_Delay>
				 set_motor_speed_3(50);
 80023b8:	2032      	movs	r0, #50	@ 0x32
 80023ba:	f7fe fea5 	bl	8001108 <set_motor_speed_3>
	     		 break;
 80023be:	e1cf      	b.n	8002760 <main+0x11b0>

	     	 case 3: //G
	     		if(string_offset > 0){
 80023c0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80023c4:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd3d      	ble.n	8002452 <main+0xea2>
				 uint32_t delay = floor(115 * string_offset);
 80023d6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80023da:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ed1f 7a58 	vldr	s14, [pc, #-352]	@ 8002284 <main+0xcd4>
 80023e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ea:	ee17 0a90 	vmov	r0, s15
 80023ee:	f7fe f86b 	bl	80004c8 <__aeabi_f2d>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	ec43 2b10 	vmov	d0, r2, r3
 80023fa:	f009 fd49 	bl	800be90 <floor>
 80023fe:	ec53 2b10 	vmov	r2, r3, d0
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fb8f 	bl	8000b28 <__aeabi_d2uiz>
 800240a:	4603      	mov	r3, r0
 800240c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002410:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8002414:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 8002416:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800241a:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002424:	4293      	cmp	r3, r2
 8002426:	d906      	bls.n	8002436 <main+0xe86>
				 	delay = MAX_DELAY;
 8002428:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800242c:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002430:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8002434:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_4(72);
 8002436:	2048      	movs	r0, #72	@ 0x48
 8002438:	f7fe febe 	bl	80011b8 <set_motor_speed_4>
				  HAL_Delay(delay);
 800243c:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002440:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f001 fb59 	bl	8003afc <HAL_Delay>
				  set_motor_speed_4(50);
 800244a:	2032      	movs	r0, #50	@ 0x32
 800244c:	f7fe feb4 	bl	80011b8 <set_motor_speed_4>
				 }
				 set_motor_speed_4(20);
				 HAL_Delay(delay);
				 set_motor_speed_4(50);
				}
	     		 break;
 8002450:	e186      	b.n	8002760 <main+0x11b0>
				else if(string_offset < 0 && string_offset < -1){
 8002452:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002456:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d400      	bmi.n	800246a <main+0xeba>
	     		 break;
 8002468:	e17a      	b.n	8002760 <main+0x11b0>
				else if(string_offset < 0 && string_offset < -1){
 800246a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800246e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800247a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	d400      	bmi.n	8002486 <main+0xed6>
	     		 break;
 8002484:	e16c      	b.n	8002760 <main+0x11b0>
				 uint32_t delay = floor(-1* (160 * string_offset));
 8002486:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800248a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ed1f 7a83 	vldr	s14, [pc, #-524]	@ 8002288 <main+0xcd8>
 8002496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249a:	eef1 7a67 	vneg.f32	s15, s15
 800249e:	ee17 3a90 	vmov	r3, s15
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f810 	bl	80004c8 <__aeabi_f2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	ec43 2b10 	vmov	d0, r2, r3
 80024b0:	f009 fcee 	bl	800be90 <floor>
 80024b4:	ec53 2b10 	vmov	r2, r3, d0
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb34 	bl	8000b28 <__aeabi_d2uiz>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80024c6:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80024ca:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80024cc:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80024d0:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80024da:	4293      	cmp	r3, r2
 80024dc:	d906      	bls.n	80024ec <main+0xf3c>
				 	delay = MAX_DELAY;
 80024de:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80024e2:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80024e6:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80024ea:	6013      	str	r3, [r2, #0]
				 set_motor_speed_4(20);
 80024ec:	2014      	movs	r0, #20
 80024ee:	f7fe fe63 	bl	80011b8 <set_motor_speed_4>
				 HAL_Delay(delay);
 80024f2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80024f6:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	f001 fafe 	bl	8003afc <HAL_Delay>
				 set_motor_speed_4(50);
 8002500:	2032      	movs	r0, #50	@ 0x32
 8002502:	f7fe fe59 	bl	80011b8 <set_motor_speed_4>
	     		 break;
 8002506:	e12b      	b.n	8002760 <main+0x11b0>

	     	 case 4: //B
	     		if(string_offset > 0){ // COULD TEST FOR EXPECTED VALUE (BASED ON 1H range) when in tune
 8002508:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800250c:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd3d      	ble.n	800259a <main+0xfea>
	     		 uint32_t delay = floor(80 * string_offset);	//OR could just do > 1 and let user decide when good, display in tune or sum
 800251e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002522:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 800228c <main+0xcdc>
 800252e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002532:	ee17 0a90 	vmov	r0, s15
 8002536:	f7fd ffc7 	bl	80004c8 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	ec43 2b10 	vmov	d0, r2, r3
 8002542:	f009 fca5 	bl	800be90 <floor>
 8002546:	ec53 2b10 	vmov	r2, r3, d0
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe faeb 	bl	8000b28 <__aeabi_d2uiz>
 8002552:	4603      	mov	r3, r0
 8002554:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002558:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 800255c:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){								//Since it has 1 Hz accuracy might be nice to have it turn small amounts
 800255e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002562:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800256c:	4293      	cmp	r3, r2
 800256e:	d906      	bls.n	800257e <main+0xfce>
				 	delay = MAX_DELAY;
 8002570:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8002574:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002578:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 800257c:	6013      	str	r3, [r2, #0]
				 }
				  set_motor_speed_5(65);
 800257e:	2041      	movs	r0, #65	@ 0x41
 8002580:	f7fe fe72 	bl	8001268 <set_motor_speed_5>
				  HAL_Delay(delay);
 8002584:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002588:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f001 fab5 	bl	8003afc <HAL_Delay>
				  set_motor_speed_5(50);
 8002592:	2032      	movs	r0, #50	@ 0x32
 8002594:	f7fe fe68 	bl	8001268 <set_motor_speed_5>
				 }
				 set_motor_speed_5(20);
				 HAL_Delay(delay);
				 set_motor_speed_5(50);
	     		}
	     		 break;
 8002598:	e0e2      	b.n	8002760 <main+0x11b0>
	     		else if(string_offset < 0){
 800259a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800259e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d400      	bmi.n	80025b2 <main+0x1002>
	     		 break;
 80025b0:	e0d6      	b.n	8002760 <main+0x11b0>
				 uint32_t delay = floor(-1* (60 * string_offset));
 80025b2:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80025b6:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ed1f 7acc 	vldr	s14, [pc, #-816]	@ 8002290 <main+0xce0>
 80025c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c6:	eef1 7a67 	vneg.f32	s15, s15
 80025ca:	ee17 3a90 	vmov	r3, s15
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff7a 	bl	80004c8 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	ec43 2b10 	vmov	d0, r2, r3
 80025dc:	f009 fc58 	bl	800be90 <floor>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fa9e 	bl	8000b28 <__aeabi_d2uiz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80025f2:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 80025f6:	6013      	str	r3, [r2, #0]
				 if(delay > MAX_DELAY){
 80025f8:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80025fc:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002606:	4293      	cmp	r3, r2
 8002608:	d906      	bls.n	8002618 <main+0x1068>
				 	delay = MAX_DELAY;
 800260a:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800260e:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002612:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8002616:	6013      	str	r3, [r2, #0]
				 set_motor_speed_5(20);
 8002618:	2014      	movs	r0, #20
 800261a:	f7fe fe25 	bl	8001268 <set_motor_speed_5>
				 HAL_Delay(delay);
 800261e:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002622:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f001 fa68 	bl	8003afc <HAL_Delay>
				 set_motor_speed_5(50);
 800262c:	2032      	movs	r0, #50	@ 0x32
 800262e:	f7fe fe1b 	bl	8001268 <set_motor_speed_5>
	     		 break;
 8002632:	e095      	b.n	8002760 <main+0x11b0>

	     	 case 5: //Low E
	     		if(string_offset > 0){
 8002634:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002638:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	dd3d      	ble.n	80026c6 <main+0x1116>
					 uint32_t delay = floor(135 * string_offset);
 800264a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800264e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002784 <main+0x11d4>
 800265a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff31 	bl	80004c8 <__aeabi_f2d>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	ec43 2b10 	vmov	d0, r2, r3
 800266e:	f009 fc0f 	bl	800be90 <floor>
 8002672:	ec53 2b10 	vmov	r2, r3, d0
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fa55 	bl	8000b28 <__aeabi_d2uiz>
 800267e:	4603      	mov	r3, r0
 8002680:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 8002684:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8002688:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 800268a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800268e:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002698:	4293      	cmp	r3, r2
 800269a:	d906      	bls.n	80026aa <main+0x10fa>
					 	delay = MAX_DELAY;
 800269c:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80026a0:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 80026a4:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 80026a8:	6013      	str	r3, [r2, #0]
					 }
					  set_motor_speed_6(68);
 80026aa:	2044      	movs	r0, #68	@ 0x44
 80026ac:	f7fe fe34 	bl	8001318 <set_motor_speed_6>
					  HAL_Delay(delay);
 80026b0:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026b4:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	f001 fa1f 	bl	8003afc <HAL_Delay>
					  set_motor_speed_6(50);
 80026be:	2032      	movs	r0, #50	@ 0x32
 80026c0:	f7fe fe2a 	bl	8001318 <set_motor_speed_6>
					 }
					 set_motor_speed_6(22);
					 HAL_Delay(delay);
					 set_motor_speed_6(50);
				 }
	     		 break;
 80026c4:	e04b      	b.n	800275e <main+0x11ae>
	     		else if(string_offset < 0){
 80026c6:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026ca:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	d400      	bmi.n	80026de <main+0x112e>
	     		 break;
 80026dc:	e03f      	b.n	800275e <main+0x11ae>
					 uint32_t delay = floor(-1* (95 * string_offset));
 80026de:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 80026e2:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002788 <main+0x11d8>
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	eef1 7a67 	vneg.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fee4 	bl	80004c8 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	ec43 2b10 	vmov	d0, r2, r3
 8002708:	f009 fbc2 	bl	800be90 <floor>
 800270c:	ec53 2b10 	vmov	r2, r3, d0
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe fa08 	bl	8000b28 <__aeabi_d2uiz>
 8002718:	4603      	mov	r3, r0
 800271a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800271e:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002722:	6013      	str	r3, [r2, #0]
					 if(delay > MAX_DELAY){
 8002724:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 8002728:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002732:	4293      	cmp	r3, r2
 8002734:	d906      	bls.n	8002744 <main+0x1194>
					 	delay = MAX_DELAY;
 8002736:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800273a:	f507 3280 	add.w	r2, r7, #65536	@ 0x10000
 800273e:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002742:	6013      	str	r3, [r2, #0]
					 set_motor_speed_6(22);
 8002744:	2016      	movs	r0, #22
 8002746:	f7fe fde7 	bl	8001318 <set_motor_speed_6>
					 HAL_Delay(delay);
 800274a:	f507 3380 	add.w	r3, r7, #65536	@ 0x10000
 800274e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	f001 f9d2 	bl	8003afc <HAL_Delay>
					 set_motor_speed_6(50);
 8002758:	2032      	movs	r0, #50	@ 0x32
 800275a:	f7fe fddd 	bl	8001318 <set_motor_speed_6>
	     		 break;
 800275e:	bf00      	nop
	     }



	  //To prevent strum from previous affecting next
	  HAL_Delay(250);
 8002760:	20fa      	movs	r0, #250	@ 0xfa
 8002762:	f001 f9cb 	bl	8003afc <HAL_Delay>
	  convFlag = 0;
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <main+0x11dc>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e002      	b.n	8002774 <main+0x11c4>
	  	    	 continue;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <main+0x11c4>
	    	 continue;
 8002772:	bf00      	nop
	while (startFlag) {
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <main+0x11e0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47e afdb 	bne.w	8001734 <main+0x184>
	while (!startFlag) {
 800277e:	f7fe bfd3 	b.w	8001728 <main+0x178>
 8002782:	bf00      	nop
 8002784:	43070000 	.word	0x43070000
 8002788:	42be0000 	.word	0x42be0000
 800278c:	20000458 	.word	0x20000458
 8002790:	2000045c 	.word	0x2000045c

08002794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b096      	sub	sp, #88	@ 0x58
 8002798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	2244      	movs	r2, #68	@ 0x44
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f009 fa62 	bl	800bc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a8:	463b      	mov	r3, r7
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027ba:	f002 fff7 	bl	80057ac <HAL_PWREx_ControlVoltageScaling>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027c4:	f000 fd82 	bl	80032cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027c8:	2310      	movs	r3, #16
 80027ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80027d4:	2370      	movs	r3, #112	@ 0x70
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027d8:	2300      	movs	r3, #0
 80027da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 f897 	bl	8005914 <HAL_RCC_OscConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80027ec:	f000 fd6e 	bl	80032cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f0:	230f      	movs	r3, #15
 80027f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002804:	463b      	mov	r3, r7
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fc9d 	bl	8006148 <HAL_RCC_ClockConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002814:	f000 fd5a 	bl	80032cc <Error_Handler>
  }
}
 8002818:	bf00      	nop
 800281a:	3758      	adds	r7, #88	@ 0x58
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b0a6      	sub	sp, #152	@ 0x98
 8002824:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2294      	movs	r2, #148	@ 0x94
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f009 fa1d 	bl	800bc6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8002832:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8002836:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002838:	2300      	movs	r3, #0
 800283a:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800283c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002844:	2301      	movs	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002848:	2301      	movs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800284c:	2308      	movs	r3, #8
 800284e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002850:	2302      	movs	r3, #2
 8002852:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002858:	2302      	movs	r3, #2
 800285a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <PeriphCommonClock_Config+0x5c>)
 800285e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f003 ff2e 	bl	80066c4 <HAL_RCCEx_PeriphCLKConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800286e:	f000 fd2d 	bl	80032cc <Error_Handler>
  }
}
 8002872:	bf00      	nop
 8002874:	3798      	adds	r7, #152	@ 0x98
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	01010000 	.word	0x01010000

08002880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002886:	463b      	mov	r3, r7
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
 8002894:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <MX_ADC1_Init+0xc0>)
 8002898:	4a2a      	ldr	r2, [pc, #168]	@ (8002944 <MX_ADC1_Init+0xc4>)
 800289a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800289c:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <MX_ADC1_Init+0xc0>)
 800289e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80028a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028d8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028de:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028fc:	4810      	ldr	r0, [pc, #64]	@ (8002940 <MX_ADC1_Init+0xc0>)
 80028fe:	f001 fafb 	bl	8003ef8 <HAL_ADC_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002908:	f000 fce0 	bl	80032cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <MX_ADC1_Init+0xc8>)
 800290e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002910:	2306      	movs	r3, #6
 8002912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002914:	2307      	movs	r3, #7
 8002916:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002918:	237f      	movs	r3, #127	@ 0x7f
 800291a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800291c:	2304      	movs	r3, #4
 800291e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	@ (8002940 <MX_ADC1_Init+0xc0>)
 800292a:	f001 fcc3 	bl	80042b4 <HAL_ADC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002934:	f000 fcca 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000008c 	.word	0x2000008c
 8002944:	50040000 	.word	0x50040000
 8002948:	04300002 	.word	0x04300002

0800294c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002950:	4b22      	ldr	r3, [pc, #136]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002952:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <MX_LPUART1_UART_Init+0x94>)
 8002954:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002956:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800295c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b1f      	ldr	r3, [pc, #124]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297c:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002982:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002988:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002990:	2200      	movs	r2, #0
 8002992:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002994:	4811      	ldr	r0, [pc, #68]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 8002996:	f007 f93b 	bl	8009c10 <HAL_UART_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80029a0:	f000 fc94 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029a4:	2100      	movs	r1, #0
 80029a6:	480d      	ldr	r0, [pc, #52]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 80029a8:	f007 ff5e 	bl	800a868 <HAL_UARTEx_SetTxFifoThreshold>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029b2:	f000 fc8b 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b6:	2100      	movs	r1, #0
 80029b8:	4808      	ldr	r0, [pc, #32]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 80029ba:	f007 ff93 	bl	800a8e4 <HAL_UARTEx_SetRxFifoThreshold>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029c4:	f000 fc82 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	@ (80029dc <MX_LPUART1_UART_Init+0x90>)
 80029ca:	f007 ff14 	bl	800a7f6 <HAL_UARTEx_DisableFifoMode>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029d4:	f000 fc7a 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000154 	.word	0x20000154
 80029e0:	40008000 	.word	0x40008000

080029e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 80029ea:	4a23      	ldr	r2, [pc, #140]	@ (8002a78 <MX_USART1_UART_Init+0x94>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029ee:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 80029f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a2c:	4811      	ldr	r0, [pc, #68]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a2e:	f007 f8ef 	bl	8009c10 <HAL_UART_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a38:	f000 fc48 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a40:	f007 ff12 	bl	800a868 <HAL_UARTEx_SetTxFifoThreshold>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a4a:	f000 fc3f 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a52:	f007 ff47 	bl	800a8e4 <HAL_UARTEx_SetRxFifoThreshold>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a5c:	f000 fc36 	bl	80032cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a60:	4804      	ldr	r0, [pc, #16]	@ (8002a74 <MX_USART1_UART_Init+0x90>)
 8002a62:	f007 fec8 	bl	800a7f6 <HAL_UARTEx_DisableFifoMode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a6c:	f000 fc2e 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200001e8 	.word	0x200001e8
 8002a78:	40013800 	.word	0x40013800

08002a7c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002a80:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <MX_SAI1_Init+0x64>)
 8002a84:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae4 <MX_SAI1_Init+0x68>)
 8002aa8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002abc:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MX_SAI1_Init+0x60>)
 8002aca:	f005 fb47 	bl	800815c <HAL_SAI_InitProtocol>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8002ad4:	f000 fbfa 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000027c 	.word	0x2000027c
 8002ae0:	40015404 	.word	0x40015404
 8002ae4:	0002ee00 	.word	0x0002ee00

08002ae8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002aee:	4a1c      	ldr	r2, [pc, #112]	@ (8002b60 <MX_SPI1_Init+0x78>)
 8002af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b00:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b1e:	2228      	movs	r2, #40	@ 0x28
 8002b20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b36:	2207      	movs	r2, #7
 8002b38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b40:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b42:	2208      	movs	r2, #8
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b46:	4805      	ldr	r0, [pc, #20]	@ (8002b5c <MX_SPI1_Init+0x74>)
 8002b48:	f005 fe86 	bl	8008858 <HAL_SPI_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b52:	f000 fbbb 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000310 	.word	0x20000310
 8002b60:	40013000 	.word	0x40013000

08002b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b09a      	sub	sp, #104	@ 0x68
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
 8002b94:	615a      	str	r2, [r3, #20]
 8002b96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	222c      	movs	r2, #44	@ 0x2c
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f009 f864 	bl	800bc6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002ba6:	4a50      	ldr	r2, [pc, #320]	@ (8002ce8 <MX_TIM1_Init+0x184>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 194;
 8002baa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bac:	22c2      	movs	r2, #194	@ 0xc2
 8002bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bb8:	2209      	movs	r2, #9
 8002bba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc8:	4b46      	ldr	r3, [pc, #280]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bce:	4845      	ldr	r0, [pc, #276]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bd0:	f005 fee5 	bl	800899e <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002bda:	f000 fb77 	bl	80032cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002be4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002be8:	4619      	mov	r1, r3
 8002bea:	483e      	ldr	r0, [pc, #248]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bec:	f006 fa10 	bl	8009010 <HAL_TIM_ConfigClockSource>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002bf6:	f000 fb69 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bfa:	483a      	ldr	r0, [pc, #232]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002bfc:	f005 ff96 	bl	8008b2c <HAL_TIM_PWM_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c06:	f000 fb61 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4831      	ldr	r0, [pc, #196]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002c1e:	f006 fef1 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002c28:	f000 fb50 	bl	80032cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2c:	2360      	movs	r3, #96	@ 0x60
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4824      	ldr	r0, [pc, #144]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002c52:	f006 f8c9 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002c5c:	f000 fb36 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c64:	2204      	movs	r2, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	481e      	ldr	r0, [pc, #120]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002c6a:	f006 f8bd 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002c74:	f000 fb2a 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4818      	ldr	r0, [pc, #96]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002c82:	f006 f8b1 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002c8c:	f000 fb1e 	bl	80032cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4807      	ldr	r0, [pc, #28]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002cc6:	f006 ff25 	bl	8009b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8002cd0:	f000 fafc 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cd4:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <MX_TIM1_Init+0x180>)
 8002cd6:	f000 fd3f 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8002cda:	bf00      	nop
 8002cdc:	3768      	adds	r7, #104	@ 0x68
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000374 	.word	0x20000374
 8002ce8:	40012c00 	.word	0x40012c00

08002cec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfe:	463b      	mov	r3, r7
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d10:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <MX_TIM4_Init+0xf4>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002d16:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d18:	2207      	movs	r2, #7
 8002d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8002d22:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d24:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d30:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d36:	4829      	ldr	r0, [pc, #164]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d38:	f005 fef8 	bl	8008b2c <HAL_TIM_PWM_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002d42:	f000 fac3 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	4821      	ldr	r0, [pc, #132]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d56:	f006 fe55 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002d60:	f000 fab4 	bl	80032cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d64:	2360      	movs	r3, #96	@ 0x60
 8002d66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002d68:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d7e:	f006 f833 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002d88:	f000 faa0 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002d94:	f006 f828 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002d9e:	f000 fa95 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002da2:	463b      	mov	r3, r7
 8002da4:	2208      	movs	r2, #8
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002daa:	f006 f81d 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002db4:	f000 fa8a 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002db8:	463b      	mov	r3, r7
 8002dba:	220c      	movs	r2, #12
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4807      	ldr	r0, [pc, #28]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002dc0:	f006 f812 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002dca:	f000 fa7f 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002dce:	4803      	ldr	r0, [pc, #12]	@ (8002ddc <MX_TIM4_Init+0xf0>)
 8002dd0:	f000 fcc2 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	@ 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200003c0 	.word	0x200003c0
 8002de0:	40000800 	.word	0x40000800

08002de4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df6:	463b      	mov	r3, r7
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	615a      	str	r2, [r3, #20]
 8002e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e08:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e0a:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <MX_TIM5_Init+0xc8>)
 8002e0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e1c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002e20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e22:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e2e:	481e      	ldr	r0, [pc, #120]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e30:	f005 fe7c 	bl	8008b2c <HAL_TIM_PWM_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002e3a:	f000 fa47 	bl	80032cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4816      	ldr	r0, [pc, #88]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e4e:	f006 fdd9 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002e58:	f000 fa38 	bl	80032cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5c:	2360      	movs	r3, #96	@ 0x60
 8002e5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002e60:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002e64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6e:	463b      	mov	r3, r7
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	480c      	ldr	r0, [pc, #48]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e76:	f005 ffb7 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002e80:	f000 fa24 	bl	80032cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	2208      	movs	r2, #8
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e8c:	f005 ffac 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8002e96:	f000 fa19 	bl	80032cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <MX_TIM5_Init+0xc4>)
 8002e9c:	f000 fc5c 	bl	8003758 <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	@ 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000040c 	.word	0x2000040c
 8002eac:	40000c00 	.word	0x40000c00

08002eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eba:	4a11      	ldr	r2, [pc, #68]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <MX_DMA_Init+0x50>)
 8002edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	200b      	movs	r0, #11
 8002eec:	f001 ffd3 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ef0:	200b      	movs	r0, #11
 8002ef2:	f001 ffec 	bl	8004ece <HAL_NVIC_EnableIRQ>

}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000

08002f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	@ 0x38
 8002f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	4bb4      	ldr	r3, [pc, #720]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1e:	4ab3      	ldr	r2, [pc, #716]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f26:	4bb1      	ldr	r3, [pc, #708]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	4bae      	ldr	r3, [pc, #696]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	4aad      	ldr	r2, [pc, #692]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f3e:	4bab      	ldr	r3, [pc, #684]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f4a:	4ba8      	ldr	r3, [pc, #672]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	4aa7      	ldr	r2, [pc, #668]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f50:	f043 0320 	orr.w	r3, r3, #32
 8002f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f56:	4ba5      	ldr	r3, [pc, #660]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f62:	4ba2      	ldr	r3, [pc, #648]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	4aa1      	ldr	r2, [pc, #644]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f6e:	4b9f      	ldr	r3, [pc, #636]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7e:	4a9b      	ldr	r2, [pc, #620]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f86:	4b99      	ldr	r3, [pc, #612]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	4b96      	ldr	r3, [pc, #600]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	4a95      	ldr	r2, [pc, #596]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f9e:	4b93      	ldr	r3, [pc, #588]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002faa:	4b90      	ldr	r3, [pc, #576]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fae:	4a8f      	ldr	r2, [pc, #572]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fc2:	4b8a      	ldr	r3, [pc, #552]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	4a89      	ldr	r2, [pc, #548]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fce:	4b87      	ldr	r3, [pc, #540]	@ (80031ec <MX_GPIO_Init+0x2e8>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002fda:	f002 fc8b 	bl	80058f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2110      	movs	r1, #16
 8002fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe6:	f002 fb91 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8002fea:	2200      	movs	r2, #0
 8002fec:	f244 0187 	movw	r1, #16519	@ 0x4087
 8002ff0:	487f      	ldr	r0, [pc, #508]	@ (80031f0 <MX_GPIO_Init+0x2ec>)
 8002ff2:	f002 fb8b 	bl	800570c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2140      	movs	r1, #64	@ 0x40
 8002ffa:	487e      	ldr	r0, [pc, #504]	@ (80031f4 <MX_GPIO_Init+0x2f0>)
 8002ffc:	f002 fb86 	bl	800570c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003000:	2307      	movs	r3, #7
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003004:	2312      	movs	r3, #18
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003010:	2304      	movs	r3, #4
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003018:	4619      	mov	r1, r3
 800301a:	4877      	ldr	r0, [pc, #476]	@ (80031f8 <MX_GPIO_Init+0x2f4>)
 800301c:	f002 f9e4 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302c:	2300      	movs	r3, #0
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003030:	2301      	movs	r3, #1
 8003032:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800303e:	f002 f9d3 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003042:	2310      	movs	r3, #16
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800305c:	f002 f9c4 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003060:	2340      	movs	r3, #64	@ 0x40
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003064:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003078:	f002 f9b6 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 800307c:	f244 0387 	movw	r3, #16519	@ 0x4087
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003082:	2301      	movs	r3, #1
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003092:	4619      	mov	r1, r3
 8003094:	4856      	ldr	r0, [pc, #344]	@ (80031f0 <MX_GPIO_Init+0x2ec>)
 8003096:	f002 f9a7 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800309a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ac:	2301      	movs	r3, #1
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030b4:	4619      	mov	r1, r3
 80030b6:	484e      	ldr	r0, [pc, #312]	@ (80031f0 <MX_GPIO_Init+0x2ec>)
 80030b8:	f002 f996 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80030bc:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80030ce:	230d      	movs	r3, #13
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030d6:	4619      	mov	r1, r3
 80030d8:	4845      	ldr	r0, [pc, #276]	@ (80031f0 <MX_GPIO_Init+0x2ec>)
 80030da:	f002 f985 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030f0:	2307      	movs	r3, #7
 80030f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f8:	4619      	mov	r1, r3
 80030fa:	4840      	ldr	r0, [pc, #256]	@ (80031fc <MX_GPIO_Init+0x2f8>)
 80030fc:	f002 f974 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003100:	2320      	movs	r3, #32
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4838      	ldr	r0, [pc, #224]	@ (80031f4 <MX_GPIO_Init+0x2f0>)
 8003114:	f002 f968 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003118:	2340      	movs	r3, #64	@ 0x40
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311c:	2301      	movs	r3, #1
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	4831      	ldr	r0, [pc, #196]	@ (80031f4 <MX_GPIO_Init+0x2f0>)
 8003130:	f002 f95a 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003134:	2340      	movs	r3, #64	@ 0x40
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003144:	230d      	movs	r3, #13
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800314c:	4619      	mov	r1, r3
 800314e:	482c      	ldr	r0, [pc, #176]	@ (8003200 <MX_GPIO_Init+0x2fc>)
 8003150:	f002 f94a 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003164:	2302      	movs	r3, #2
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800316c:	4619      	mov	r1, r3
 800316e:	4824      	ldr	r0, [pc, #144]	@ (8003200 <MX_GPIO_Init+0x2fc>)
 8003170:	f002 f93a 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003174:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003186:	230c      	movs	r3, #12
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318e:	4619      	mov	r1, r3
 8003190:	481b      	ldr	r0, [pc, #108]	@ (8003200 <MX_GPIO_Init+0x2fc>)
 8003192:	f002 f929 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003196:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031a8:	230a      	movs	r3, #10
 80031aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b0:	4619      	mov	r1, r3
 80031b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b6:	f002 f917 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031cc:	4619      	mov	r1, r3
 80031ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031d2:	f002 f909 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80031e6:	2309      	movs	r3, #9
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ea:	e00b      	b.n	8003204 <MX_GPIO_Init+0x300>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	48000400 	.word	0x48000400
 80031f4:	48001800 	.word	0x48001800
 80031f8:	48001400 	.word	0x48001400
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003208:	4619      	mov	r1, r3
 800320a:	482e      	ldr	r0, [pc, #184]	@ (80032c4 <MX_GPIO_Init+0x3c0>)
 800320c:	f002 f8ec 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003210:	2304      	movs	r3, #4
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003220:	230c      	movs	r3, #12
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	4826      	ldr	r0, [pc, #152]	@ (80032c4 <MX_GPIO_Init+0x3c0>)
 800322c:	f002 f8dc 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003230:	2378      	movs	r3, #120	@ 0x78
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003240:	2307      	movs	r3, #7
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003248:	4619      	mov	r1, r3
 800324a:	481e      	ldr	r0, [pc, #120]	@ (80032c4 <MX_GPIO_Init+0x3c0>)
 800324c:	f002 f8cc 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003250:	2330      	movs	r3, #48	@ 0x30
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003260:	2306      	movs	r3, #6
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003268:	4619      	mov	r1, r3
 800326a:	4817      	ldr	r0, [pc, #92]	@ (80032c8 <MX_GPIO_Init+0x3c4>)
 800326c:	f002 f8bc 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003270:	2340      	movs	r3, #64	@ 0x40
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003274:	2303      	movs	r3, #3
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4811      	ldr	r0, [pc, #68]	@ (80032c8 <MX_GPIO_Init+0x3c4>)
 8003284:	f002 f8b0 	bl	80053e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003288:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800328e:	2312      	movs	r3, #18
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800329a:	2304      	movs	r3, #4
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a2:	4619      	mov	r1, r3
 80032a4:	4808      	ldr	r0, [pc, #32]	@ (80032c8 <MX_GPIO_Init+0x3c4>)
 80032a6:	f002 f89f 	bl	80053e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2017      	movs	r0, #23
 80032b0:	f001 fdf1 	bl	8004e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032b4:	2017      	movs	r0, #23
 80032b6:	f001 fe0a 	bl	8004ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032ba:	bf00      	nop
 80032bc:	3738      	adds	r7, #56	@ 0x38
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	48000c00 	.word	0x48000c00
 80032c8:	48000400 	.word	0x48000400

080032cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d0:	b672      	cpsid	i
}
 80032d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <Error_Handler+0x8>

080032d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_MspInit+0x44>)
 80032e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e2:	4a0e      	ldr	r2, [pc, #56]	@ (800331c <HAL_MspInit+0x44>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_MspInit+0x44>)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_MspInit+0x44>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_MspInit+0x44>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_MspInit+0x44>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a37      	ldr	r2, [pc, #220]	@ (800341c <HAL_ADC_MspInit+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d168      	bne.n	8003414 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003342:	4b37      	ldr	r3, [pc, #220]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	4a36      	ldr	r2, [pc, #216]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003348:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800334c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800334e:	4b34      	ldr	r3, [pc, #208]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335a:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800335e:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003366:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	4a2a      	ldr	r2, [pc, #168]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_ADC_MspInit+0x100>)
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800338a:	233f      	movs	r3, #63	@ 0x3f
 800338c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800338e:	230b      	movs	r3, #11
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	4821      	ldr	r0, [pc, #132]	@ (8003424 <HAL_ADC_MspInit+0x104>)
 800339e:	f002 f823 	bl	80053e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80033a2:	230a      	movs	r3, #10
 80033a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033a6:	230b      	movs	r3, #11
 80033a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033b8:	f002 f816 	bl	80053e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033be:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <HAL_ADC_MspInit+0x10c>)
 80033c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033c2:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033c4:	2205      	movs	r2, #5
 80033c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c8:	4b17      	ldr	r3, [pc, #92]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ce:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033d4:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033d6:	2280      	movs	r2, #128	@ 0x80
 80033d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033e2:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033ec:	2220      	movs	r2, #32
 80033ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033f2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80033f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033f8:	480b      	ldr	r0, [pc, #44]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 80033fa:	f001 fd83 	bl	8004f04 <HAL_DMA_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8003404:	f7ff ff62 	bl	80032cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a07      	ldr	r2, [pc, #28]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 800340c:	651a      	str	r2, [r3, #80]	@ 0x50
 800340e:	4a06      	ldr	r2, [pc, #24]	@ (8003428 <HAL_ADC_MspInit+0x108>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	@ 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	50040000 	.word	0x50040000
 8003420:	40021000 	.word	0x40021000
 8003424:	48000800 	.word	0x48000800
 8003428:	200000f4 	.word	0x200000f4
 800342c:	40020008 	.word	0x40020008

08003430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b0b0      	sub	sp, #192	@ 0xc0
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	2294      	movs	r2, #148	@ 0x94
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f008 fc0b 	bl	800bc6c <memset>
  if(huart->Instance==LPUART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a44      	ldr	r2, [pc, #272]	@ (800356c <HAL_UART_MspInit+0x13c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d13e      	bne.n	80034de <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003460:	2320      	movs	r3, #32
 8003462:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003464:	2300      	movs	r3, #0
 8003466:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f003 f929 	bl	80066c4 <HAL_RCCEx_PeriphCLKConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003478:	f7ff ff28 	bl	80032cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800347c:	4b3c      	ldr	r3, [pc, #240]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	4a3b      	ldr	r2, [pc, #236]	@ (8003570 <HAL_UART_MspInit+0x140>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003488:	4b39      	ldr	r3, [pc, #228]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003494:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <HAL_UART_MspInit+0x140>)
 8003496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003498:	4a35      	ldr	r2, [pc, #212]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800349a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800349e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a0:	4b33      	ldr	r3, [pc, #204]	@ (8003570 <HAL_UART_MspInit+0x140>)
 80034a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80034ac:	f002 fa22 	bl	80058f4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80034b0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80034b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80034ca:	2308      	movs	r3, #8
 80034cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80034d4:	4619      	mov	r1, r3
 80034d6:	4827      	ldr	r0, [pc, #156]	@ (8003574 <HAL_UART_MspInit+0x144>)
 80034d8:	f001 ff86 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034dc:	e042      	b.n	8003564 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a25      	ldr	r2, [pc, #148]	@ (8003578 <HAL_UART_MspInit+0x148>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d13d      	bne.n	8003564 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034ec:	2300      	movs	r3, #0
 80034ee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 f8e5 	bl	80066c4 <HAL_RCCEx_PeriphCLKConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003500:	f7ff fee4 	bl	80032cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_UART_MspInit+0x140>)
 8003506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800350a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800350e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <HAL_UART_MspInit+0x140>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800351c:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003520:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <HAL_UART_MspInit+0x140>)
 8003522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003528:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_UART_MspInit+0x140>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8003534:	f002 f9de 	bl	80058f4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003538:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800353c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003552:	2307      	movs	r3, #7
 8003554:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003558:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800355c:	4619      	mov	r1, r3
 800355e:	4805      	ldr	r0, [pc, #20]	@ (8003574 <HAL_UART_MspInit+0x144>)
 8003560:	f001 ff42 	bl	80053e8 <HAL_GPIO_Init>
}
 8003564:	bf00      	nop
 8003566:	37c0      	adds	r7, #192	@ 0xc0
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40008000 	.word	0x40008000
 8003570:	40021000 	.word	0x40021000
 8003574:	48001800 	.word	0x48001800
 8003578:	40013800 	.word	0x40013800

0800357c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_SPI_MspInit+0x7c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d128      	bne.n	80035f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800359e:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a2:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	4a10      	ldr	r2, [pc, #64]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c2:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <HAL_SPI_MspInit+0x80>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80035ce:	23a0      	movs	r3, #160	@ 0xa0
 80035d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035de:	2305      	movs	r3, #5
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ec:	f001 fefc 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	@ 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40013000 	.word	0x40013000
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_TIM_Base_MspInit+0x9c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d138      	bne.n	8003694 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003622:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 8003624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003626:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 8003628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800362c:	6613      	str	r3, [r2, #96]	@ 0x60
 800362e:	4b1c      	ldr	r3, [pc, #112]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800363a:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 8003640:	f043 0310 	orr.w	r3, r3, #16
 8003644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_TIM_Base_MspInit+0xa0>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003662:	2301      	movs	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4619      	mov	r1, r3
 800366c:	480d      	ldr	r0, [pc, #52]	@ (80036a4 <HAL_TIM_Base_MspInit+0xa4>)
 800366e:	f001 febb 	bl	80053e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003672:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8003684:	2303      	movs	r3, #3
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	4805      	ldr	r0, [pc, #20]	@ (80036a4 <HAL_TIM_Base_MspInit+0xa4>)
 8003690:	f001 feaa 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003694:	bf00      	nop
 8003696:	3728      	adds	r7, #40	@ 0x28
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	48001000 	.word	0x48001000

080036a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM4)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a20      	ldr	r2, [pc, #128]	@ (8003748 <HAL_TIM_PWM_MspInit+0xa0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d128      	bne.n	800371c <HAL_TIM_PWM_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	4a1f      	ldr	r2, [pc, #124]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d6:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036e2:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036e8:	f043 0310 	orr.w	r3, r3, #16
 80036ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ee:	4b17      	ldr	r3, [pc, #92]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036fa:	2301      	movs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800370a:	2302      	movs	r3, #2
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	4619      	mov	r1, r3
 8003714:	480e      	ldr	r0, [pc, #56]	@ (8003750 <HAL_TIM_PWM_MspInit+0xa8>)
 8003716:	f001 fe67 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800371a:	e010      	b.n	800373e <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM5)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0c      	ldr	r2, [pc, #48]	@ (8003754 <HAL_TIM_PWM_MspInit+0xac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10b      	bne.n	800373e <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	4a08      	ldr	r2, [pc, #32]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	6593      	str	r3, [r2, #88]	@ 0x58
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_TIM_PWM_MspInit+0xa4>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
}
 800373e:	bf00      	nop
 8003740:	3728      	adds	r7, #40	@ 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40000800 	.word	0x40000800
 800374c:	40021000 	.word	0x40021000
 8003750:	48001000 	.word	0x48001000
 8003754:	40000c00 	.word	0x40000c00

08003758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	@ 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a34      	ldr	r2, [pc, #208]	@ (8003848 <HAL_TIM_MspPostInit+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d11d      	bne.n	80037b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800377a:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	4a33      	ldr	r2, [pc, #204]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003792:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8003796:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4619      	mov	r1, r3
 80037ae:	4828      	ldr	r0, [pc, #160]	@ (8003850 <HAL_TIM_MspPostInit+0xf8>)
 80037b0:	f001 fe1a 	bl	80053e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80037b4:	e044      	b.n	8003840 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_TIM_MspPostInit+0xfc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d11d      	bne.n	80037fc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c0:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c4:	4a21      	ldr	r2, [pc, #132]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 80037c6:	f043 0308 	orr.w	r3, r3, #8
 80037ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037cc:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 80037ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80037d8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80037dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ea:	2302      	movs	r3, #2
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4818      	ldr	r0, [pc, #96]	@ (8003858 <HAL_TIM_MspPostInit+0x100>)
 80037f6:	f001 fdf7 	bl	80053e8 <HAL_GPIO_Init>
}
 80037fa:	e021      	b.n	8003840 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM5)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a16      	ldr	r2, [pc, #88]	@ (800385c <HAL_TIM_MspPostInit+0x104>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d11c      	bne.n	8003840 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003806:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	4a10      	ldr	r2, [pc, #64]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003812:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_TIM_MspPostInit+0xf4>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800381e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003830:	2302      	movs	r3, #2
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4619      	mov	r1, r3
 800383a:	4809      	ldr	r0, [pc, #36]	@ (8003860 <HAL_TIM_MspPostInit+0x108>)
 800383c:	f001 fdd4 	bl	80053e8 <HAL_GPIO_Init>
}
 8003840:	bf00      	nop
 8003842:	3728      	adds	r7, #40	@ 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40021000 	.word	0x40021000
 8003850:	48001000 	.word	0x48001000
 8003854:	40000800 	.word	0x40000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	40000c00 	.word	0x40000c00
 8003860:	48001400 	.word	0x48001400

08003864 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <HAL_SAI_MspInit+0x84>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d134      	bne.n	80038e0 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003876:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_SAI_MspInit+0x88>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10b      	bne.n	8003896 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800387e:	4b1c      	ldr	r3, [pc, #112]	@ (80038f0 <HAL_SAI_MspInit+0x8c>)
 8003880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003882:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_SAI_MspInit+0x8c>)
 8003884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003888:	6613      	str	r3, [r2, #96]	@ 0x60
 800388a:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_SAI_MspInit+0x8c>)
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003896:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <HAL_SAI_MspInit+0x88>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4a13      	ldr	r2, [pc, #76]	@ (80038ec <HAL_SAI_MspInit+0x88>)
 800389e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80038a0:	237c      	movs	r3, #124	@ 0x7c
 80038a2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80038b0:	230d      	movs	r3, #13
 80038b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	4619      	mov	r1, r3
 80038ba:	480e      	ldr	r0, [pc, #56]	@ (80038f4 <HAL_SAI_MspInit+0x90>)
 80038bc:	f001 fd94 	bl	80053e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038c0:	2380      	movs	r3, #128	@ 0x80
 80038c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80038d0:	230d      	movs	r3, #13
 80038d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4619      	mov	r1, r3
 80038da:	4807      	ldr	r0, [pc, #28]	@ (80038f8 <HAL_SAI_MspInit+0x94>)
 80038dc:	f001 fd84 	bl	80053e8 <HAL_GPIO_Init>

    }
}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40015404 	.word	0x40015404
 80038ec:	20000488 	.word	0x20000488
 80038f0:	40021000 	.word	0x40021000
 80038f4:	48001000 	.word	0x48001000
 80038f8:	48001400 	.word	0x48001400

080038fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <NMI_Handler+0x4>

08003904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <HardFault_Handler+0x4>

0800390c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <MemManage_Handler+0x4>

08003914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <BusFault_Handler+0x4>

0800391c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <UsageFault_Handler+0x4>

08003924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003952:	f000 f8b3 	bl	8003abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <DMA1_Channel1_IRQHandler+0x10>)
 8003962:	f001 fbf2 	bl	800514a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200000f4 	.word	0x200000f4

08003970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	for (int i = 0; i < 1000000; i++);
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e002      	b.n	8003982 <EXTI9_5_IRQHandler+0x12>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3301      	adds	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <EXTI9_5_IRQHandler+0x28>)
 8003986:	4293      	cmp	r3, r2
 8003988:	ddf8      	ble.n	800397c <EXTI9_5_IRQHandler+0xc>
	//HAL_Delay(250);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800398a:	2040      	movs	r0, #64	@ 0x40
 800398c:	f001 fed6 	bl	800573c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	000f423f 	.word	0x000f423f

0800399c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <SystemInit+0x20>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	4a05      	ldr	r2, [pc, #20]	@ (80039bc <SystemInit+0x20>)
 80039a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039c4:	f7ff ffea 	bl	800399c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039c8:	480c      	ldr	r0, [pc, #48]	@ (80039fc <LoopForever+0x6>)
  ldr r1, =_edata
 80039ca:	490d      	ldr	r1, [pc, #52]	@ (8003a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <LoopForever+0xe>)
  movs r3, #0
 80039ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d0:	e002      	b.n	80039d8 <LoopCopyDataInit>

080039d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039d6:	3304      	adds	r3, #4

080039d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039dc:	d3f9      	bcc.n	80039d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039de:	4a0a      	ldr	r2, [pc, #40]	@ (8003a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039e0:	4c0a      	ldr	r4, [pc, #40]	@ (8003a0c <LoopForever+0x16>)
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e4:	e001      	b.n	80039ea <LoopFillZerobss>

080039e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e8:	3204      	adds	r2, #4

080039ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ec:	d3fb      	bcc.n	80039e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039ee:	f008 f94b 	bl	800bc88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039f2:	f7fd fddd 	bl	80015b0 <main>

080039f6 <LoopForever>:

LoopForever:
    b LoopForever
 80039f6:	e7fe      	b.n	80039f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80039f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80039fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003a04:	08020c30 	.word	0x08020c30
  ldr r2, =_sbss
 8003a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003a0c:	200005c8 	.word	0x200005c8

08003a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a10:	e7fe      	b.n	8003a10 <ADC1_IRQHandler>

08003a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	f001 fa2f 	bl	8004e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a22:	2000      	movs	r0, #0
 8003a24:	f000 f80e 	bl	8003a44 <HAL_InitTick>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	71fb      	strb	r3, [r7, #7]
 8003a32:	e001      	b.n	8003a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a34:	f7ff fc50 	bl	80032d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a38:	79fb      	ldrb	r3, [r7, #7]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a50:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <HAL_InitTick+0x6c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d023      	beq.n	8003aa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a58:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <HAL_InitTick+0x70>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_InitTick+0x6c>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fa3b 	bl	8004eea <HAL_SYSTICK_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d809      	bhi.n	8003a94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a80:	2200      	movs	r2, #0
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f001 fa05 	bl	8004e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <HAL_InitTick+0x74>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e007      	b.n	8003aa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e004      	b.n	8003aa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	e001      	b.n	8003aa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000000c 	.word	0x2000000c
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	20000008 	.word	0x20000008

08003abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_IncTick+0x20>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_IncTick+0x24>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_IncTick+0x24>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	2000048c 	.word	0x2000048c

08003ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_GetTick+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000048c 	.word	0x2000048c

08003afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff ffee 	bl	8003ae4 <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d005      	beq.n	8003b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <HAL_Delay+0x44>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b22:	bf00      	nop
 8003b24:	f7ff ffde 	bl	8003ae4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d8f7      	bhi.n	8003b24 <HAL_Delay+0x28>
  {
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3360      	adds	r3, #96	@ 0x60
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <LL_ADC_SetOffset+0x44>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	03fff000 	.word	0x03fff000

08003bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3360      	adds	r3, #96	@ 0x60
 8003c02:	461a      	mov	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3360      	adds	r3, #96	@ 0x60
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	615a      	str	r2, [r3, #20]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3330      	adds	r3, #48	@ 0x30
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	4413      	add	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	211f      	movs	r1, #31
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 011f 	and.w	r1, r3, #31
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	0e5b      	lsrs	r3, r3, #25
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	4413      	add	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	0d1b      	lsrs	r3, r3, #20
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2107      	movs	r1, #7
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	401a      	ands	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	0d1b      	lsrs	r3, r3, #20
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0318 	and.w	r3, r3, #24
 8003d72:	4908      	ldr	r1, [pc, #32]	@ (8003d94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d74:	40d9      	lsrs	r1, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	400b      	ands	r3, r1
 8003d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	0007ffff 	.word	0x0007ffff

08003d98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003da8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6093      	str	r3, [r2, #8]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd0:	d101      	bne.n	8003dd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003df8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e20:	d101      	bne.n	8003e26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <LL_ADC_IsEnabled+0x18>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <LL_ADC_IsEnabled+0x1a>
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d101      	bne.n	8003ec2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d101      	bne.n	8003ee8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e129      	b.n	8004166 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff f9fd 	bl	8003320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff3f 	bl	8003dbc <LL_ADC_IsDeepPowerDownEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff25 	bl	8003d98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff5a 	bl	8003e0c <LL_ADC_IsInternalRegulatorEnabled>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff3e 	bl	8003de4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f68:	4b81      	ldr	r3, [pc, #516]	@ (8004170 <HAL_ADC_Init+0x278>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	4a81      	ldr	r2, [pc, #516]	@ (8004174 <HAL_ADC_Init+0x27c>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f7c:	e002      	b.n	8003f84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f9      	bne.n	8003f7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff3c 	bl	8003e0c <LL_ADC_IsInternalRegulatorEnabled>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff75 	bl	8003eaa <LL_ADC_REG_IsConversionOngoing>
 8003fc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 80c2 	bne.w	8004154 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80be 	bne.w	8004154 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003fe0:	f043 0202 	orr.w	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff35 	bl	8003e5c <LL_ADC_IsEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff8:	485f      	ldr	r0, [pc, #380]	@ (8004178 <HAL_ADC_Init+0x280>)
 8003ffa:	f7ff ff2f 	bl	8003e5c <LL_ADC_IsEnabled>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	485c      	ldr	r0, [pc, #368]	@ (800417c <HAL_ADC_Init+0x284>)
 800400c:	f7ff fd9a 	bl	8003b44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7e5b      	ldrb	r3, [r3, #25]
 8004014:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800401a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004020:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004026:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d106      	bne.n	800404c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	3b01      	subs	r3, #1
 8004044:	045b      	lsls	r3, r3, #17
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	4b44      	ldr	r3, [pc, #272]	@ (8004180 <HAL_ADC_Init+0x288>)
 8004070:	4013      	ands	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	69b9      	ldr	r1, [r7, #24]
 8004078:	430b      	orrs	r3, r1
 800407a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff25 	bl	8003ed0 <LL_ADC_INJ_IsConversionOngoing>
 8004086:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d140      	bne.n	8004110 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d13d      	bne.n	8004110 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7e1b      	ldrb	r3, [r3, #24]
 800409c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800409e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040b6:	f023 0306 	bic.w	r3, r3, #6
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d118      	bne.n	8004100 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80040d8:	f023 0304 	bic.w	r3, r3, #4
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040f0:	430a      	orrs	r2, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e007      	b.n	8004110 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10c      	bne.n	8004132 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f023 010f 	bic.w	r1, r3, #15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	1e5a      	subs	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004130:	e007      	b.n	8004142 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 020f 	bic.w	r2, r2, #15
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	659a      	str	r2, [r3, #88]	@ 0x58
 8004152:	e007      	b.n	8004164 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004164:	7ffb      	ldrb	r3, [r7, #31]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000004 	.word	0x20000004
 8004174:	053e2d63 	.word	0x053e2d63
 8004178:	50040000 	.word	0x50040000
 800417c:	50040300 	.word	0x50040300
 8004180:	fff0c007 	.word	0xfff0c007

08004184 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe88 	bl	8003eaa <LL_ADC_REG_IsConversionOngoing>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d167      	bne.n	8004270 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_Start_DMA+0x2a>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e063      	b.n	8004276 <HAL_ADC_Start_DMA+0xf2>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fc78 	bl	8004aac <ADC_Enable>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d14f      	bne.n	8004266 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f023 0206 	bic.w	r2, r3, #6
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041f2:	e002      	b.n	80041fa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fe:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_ADC_Start_DMA+0xfc>)
 8004200:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	4a1f      	ldr	r2, [pc, #124]	@ (8004284 <HAL_ADC_Start_DMA+0x100>)
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420e:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <HAL_ADC_Start_DMA+0x104>)
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	221c      	movs	r2, #28
 8004218:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0210 	orr.w	r2, r2, #16
 8004230:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3340      	adds	r3, #64	@ 0x40
 800424c:	4619      	mov	r1, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f000 feff 	bl	8005054 <HAL_DMA_Start_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fe0f 	bl	8003e82 <LL_ADC_REG_StartConversion>
 8004264:	e006      	b.n	8004274 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800426e:	e001      	b.n	8004274 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	08004bb9 	.word	0x08004bb9
 8004284:	08004c91 	.word	0x08004c91
 8004288:	08004cad 	.word	0x08004cad

0800428c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0b6      	sub	sp, #216	@ 0xd8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x22>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e3d5      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x7ce>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fde1 	bl	8003eaa <LL_ADC_REG_IsConversionOngoing>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 83ba 	bne.w	8004a64 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	d824      	bhi.n	800434a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	3b02      	subs	r3, #2
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81b      	bhi.n	8004342 <HAL_ADC_ConfigChannel+0x8e>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_ADC_ConfigChannel+0x5c>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004321 	.word	0x08004321
 8004314:	08004329 	.word	0x08004329
 8004318:	08004331 	.word	0x08004331
 800431c:	08004339 	.word	0x08004339
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004320:	230c      	movs	r3, #12
 8004322:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004326:	e010      	b.n	800434a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004328:	2312      	movs	r3, #18
 800432a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800432e:	e00c      	b.n	800434a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004330:	2318      	movs	r3, #24
 8004332:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004336:	e008      	b.n	800434a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800433c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004340:	e003      	b.n	800434a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004342:	2306      	movs	r3, #6
 8004344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004348:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004358:	f7ff fca3 	bl	8003ca2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fda2 	bl	8003eaa <LL_ADC_REG_IsConversionOngoing>
 8004366:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fdae 	bl	8003ed0 <LL_ADC_INJ_IsConversionOngoing>
 8004374:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 81bf 	bne.w	8004700 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 81ba 	bne.w	8004700 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004394:	d10f      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff fcaa 	bl	8003cfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fc51 	bl	8003c56 <LL_ADC_SetSamplingTimeCommonConfig>
 80043b4:	e00e      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7ff fc99 	bl	8003cfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fc41 	bl	8003c56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00a      	beq.n	800440c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6919      	ldr	r1, [r3, #16]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004406:	f7ff fbd1 	bl	8003bac <LL_ADC_SetOffset>
 800440a:	e179      	b.n	8004700 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fbee 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 8004418:	4603      	mov	r3, r0
 800441a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x184>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fbe3 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 800442e:	4603      	mov	r3, r0
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	f003 021f 	and.w	r2, r3, #31
 8004436:	e01e      	b.n	8004476 <HAL_ADC_ConfigChannel+0x1c2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fbd8 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 8004444:	4603      	mov	r3, r0
 8004446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800445a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800445e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004466:	2320      	movs	r3, #32
 8004468:	e004      	b.n	8004474 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800446a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_ADC_ConfigChannel+0x1da>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0e9b      	lsrs	r3, r3, #26
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	e018      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x20c>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80044a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80044aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e004      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80044b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d106      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fba7 	bl	8003c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fb8b 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x24a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fb80 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	e01e      	b.n	800453c <HAL_ADC_ConfigChannel+0x288>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fb75 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800451c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004524:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e004      	b.n	800453a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x2a0>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	e018      	b.n	8004586 <HAL_ADC_ConfigChannel+0x2d2>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004568:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004578:	2320      	movs	r3, #32
 800457a:	e004      	b.n	8004586 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800457c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004586:	429a      	cmp	r2, r3
 8004588:	d106      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fb44 	bl	8003c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fb28 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x310>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2102      	movs	r1, #2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fb1d 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 80045ba:	4603      	mov	r3, r0
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	f003 021f 	and.w	r2, r3, #31
 80045c2:	e01e      	b.n	8004602 <HAL_ADC_ConfigChannel+0x34e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2102      	movs	r1, #2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fb12 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80045e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80045ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e004      	b.n	8004600 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80045f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <HAL_ADC_ConfigChannel+0x366>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0e9b      	lsrs	r3, r3, #26
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	e014      	b.n	8004644 <HAL_ADC_ConfigChannel+0x390>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800462a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800462e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004636:	2320      	movs	r3, #32
 8004638:	e004      	b.n	8004644 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800463a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004644:	429a      	cmp	r2, r3
 8004646:	d106      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fae5 	bl	8003c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2103      	movs	r1, #3
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fac9 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x3ce>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2103      	movs	r1, #3
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fabe 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 8004678:	4603      	mov	r3, r0
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	e017      	b.n	80046b2 <HAL_ADC_ConfigChannel+0x3fe>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2103      	movs	r1, #3
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fab3 	bl	8003bf4 <LL_ADC_GetOffsetChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800469a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800469e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80046a4:	2320      	movs	r3, #32
 80046a6:	e003      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80046a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x416>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	e011      	b.n	80046ee <HAL_ADC_ConfigChannel+0x43a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80046d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046da:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80046dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e003      	b.n	80046ee <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80046e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d106      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2103      	movs	r1, #3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fa90 	bl	8003c20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fba9 	bl	8003e5c <LL_ADC_IsEnabled>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 813f 	bne.w	8004990 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	f7ff fb16 	bl	8003d50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a8e      	ldr	r2, [pc, #568]	@ (8004964 <HAL_ADC_ConfigChannel+0x6b0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f040 8130 	bne.w	8004990 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x4a4>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	3301      	adds	r3, #1
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2b09      	cmp	r3, #9
 800474e:	bf94      	ite	ls
 8004750:	2301      	movls	r3, #1
 8004752:	2300      	movhi	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e019      	b.n	800478c <HAL_ADC_ConfigChannel+0x4d8>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004768:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800476a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e003      	b.n	800477c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3301      	adds	r3, #1
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2b09      	cmp	r3, #9
 8004784:	bf94      	ite	ls
 8004786:	2301      	movls	r3, #1
 8004788:	2300      	movhi	r3, #0
 800478a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800478c:	2b00      	cmp	r3, #0
 800478e:	d079      	beq.n	8004884 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x4f8>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e9b      	lsrs	r3, r3, #26
 80047a2:	3301      	adds	r3, #1
 80047a4:	069b      	lsls	r3, r3, #26
 80047a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047aa:	e015      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x524>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80047ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80047be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80047c4:	2320      	movs	r3, #32
 80047c6:	e003      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80047c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	069b      	lsls	r3, r3, #26
 80047d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x544>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	0e9b      	lsrs	r3, r3, #26
 80047ea:	3301      	adds	r3, #1
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	e017      	b.n	8004828 <HAL_ADC_ConfigChannel+0x574>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2101      	movs	r1, #1
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	ea42 0103 	orr.w	r1, r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_ADC_ConfigChannel+0x59a>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	3301      	adds	r3, #1
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	051b      	lsls	r3, r3, #20
 800484c:	e018      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5cc>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004866:	2320      	movs	r3, #32
 8004868:	e003      	b.n	8004872 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	fab3 f383 	clz	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004880:	430b      	orrs	r3, r1
 8004882:	e080      	b.n	8004986 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x5ec>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0e9b      	lsrs	r3, r3, #26
 8004896:	3301      	adds	r3, #1
 8004898:	069b      	lsls	r3, r3, #26
 800489a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800489e:	e015      	b.n	80048cc <HAL_ADC_ConfigChannel+0x618>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80048b8:	2320      	movs	r3, #32
 80048ba:	e003      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	069b      	lsls	r3, r3, #26
 80048c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x638>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	0e9b      	lsrs	r3, r3, #26
 80048de:	3301      	adds	r3, #1
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	e017      	b.n	800491c <HAL_ADC_ConfigChannel+0x668>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	61bb      	str	r3, [r7, #24]
  return result;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004904:	2320      	movs	r3, #32
 8004906:	e003      	b.n	8004910 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	fab3 f383 	clz	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	3301      	adds	r3, #1
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	2101      	movs	r1, #1
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	ea42 0103 	orr.w	r1, r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x694>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	3301      	adds	r3, #1
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	3b1e      	subs	r3, #30
 8004940:	051b      	lsls	r3, r3, #20
 8004942:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004946:	e01d      	b.n	8004984 <HAL_ADC_ConfigChannel+0x6d0>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	60fb      	str	r3, [r7, #12]
  return result;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004960:	2320      	movs	r3, #32
 8004962:	e005      	b.n	8004970 <HAL_ADC_ConfigChannel+0x6bc>
 8004964:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fab3 f383 	clz	r3, r3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f003 021f 	and.w	r2, r3, #31
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	3b1e      	subs	r3, #30
 800497e:	051b      	lsls	r3, r3, #20
 8004980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004984:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800498a:	4619      	mov	r1, r3
 800498c:	f7ff f9b5 	bl	8003cfa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <HAL_ADC_ConfigChannel+0x7d8>)
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d06c      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800499c:	483c      	ldr	r0, [pc, #240]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7dc>)
 800499e:	f7ff f8f7 	bl	8003b90 <LL_ADC_GetCommonPathInternalCh>
 80049a2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a3a      	ldr	r2, [pc, #232]	@ (8004a94 <HAL_ADC_ConfigChannel+0x7e0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d127      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d121      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	@ (8004a98 <HAL_ADC_ConfigChannel+0x7e4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d157      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049ce:	4619      	mov	r1, r3
 80049d0:	482f      	ldr	r0, [pc, #188]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7dc>)
 80049d2:	f7ff f8ca 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d6:	4b31      	ldr	r3, [pc, #196]	@ (8004a9c <HAL_ADC_ConfigChannel+0x7e8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	4a30      	ldr	r2, [pc, #192]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x7ec>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80049f0:	e002      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f9      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049fe:	e03a      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a27      	ldr	r2, [pc, #156]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d12a      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4819      	ldr	r0, [pc, #100]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a2c:	f7ff f89d 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a30:	e021      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d11c      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d116      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d111      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	480c      	ldr	r0, [pc, #48]	@ (8004a90 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a5e:	f7ff f884 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
 8004a62:	e008      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	37d8      	adds	r7, #216	@ 0xd8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	80080000 	.word	0x80080000
 8004a90:	50040300 	.word	0x50040300
 8004a94:	c7520000 	.word	0xc7520000
 8004a98:	50040000 	.word	0x50040000
 8004a9c:	20000004 	.word	0x20000004
 8004aa0:	053e2d63 	.word	0x053e2d63
 8004aa4:	cb840000 	.word	0xcb840000
 8004aa8:	80000001 	.word	0x80000001

08004aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff f9cd 	bl	8003e5c <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d169      	bne.n	8004b9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <ADC_Enable+0xfc>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f043 0210 	orr.w	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e055      	b.n	8004b9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f99c 	bl	8003e34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004afc:	482b      	ldr	r0, [pc, #172]	@ (8004bac <ADC_Enable+0x100>)
 8004afe:	f7ff f847 	bl	8003b90 <LL_ADC_GetCommonPathInternalCh>
 8004b02:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b0c:	4b28      	ldr	r3, [pc, #160]	@ (8004bb0 <ADC_Enable+0x104>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <ADC_Enable+0x108>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b26:	e002      	b.n	8004b2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b34:	f7fe ffd6 	bl	8003ae4 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b3a:	e028      	b.n	8004b8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f98b 	bl	8003e5c <LL_ADC_IsEnabled>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff f96f 	bl	8003e34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b56:	f7fe ffc5 	bl	8003ae4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d914      	bls.n	8004b8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d00d      	beq.n	8004b8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d1cf      	bne.n	8004b3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	8000003f 	.word	0x8000003f
 8004bac:	50040300 	.word	0x50040300
 8004bb0:	20000004 	.word	0x20000004
 8004bb4:	053e2d63 	.word	0x053e2d63

08004bb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d14b      	bne.n	8004c6a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d021      	beq.n	8004c30 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff f843 	bl	8003c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d032      	beq.n	8004c62 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d12b      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11f      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c2e:	e018      	b.n	8004c62 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d111      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f043 0201 	orr.w	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7fc f948 	bl	8000ef8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c68:	e00e      	b.n	8004c88 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fb12 	bl	80042a0 <HAL_ADC_ErrorCallback>
}
 8004c7c:	e004      	b.n	8004c88 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff faf4 	bl	800428c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fae4 	bl	80042a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d12:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <__NVIC_SetPriorityGrouping+0x44>)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	60d3      	str	r3, [r2, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d2c:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <__NVIC_GetPriorityGrouping+0x18>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f003 0307 	and.w	r3, r3, #7
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	db0b      	blt.n	8004d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4907      	ldr	r1, [pc, #28]	@ (8004d7c <__NVIC_EnableIRQ+0x38>)
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2001      	movs	r0, #1
 8004d66:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	e000e100 	.word	0xe000e100

08004d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	6039      	str	r1, [r7, #0]
 8004d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	db0a      	blt.n	8004daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	490c      	ldr	r1, [pc, #48]	@ (8004dcc <__NVIC_SetPriority+0x4c>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	440b      	add	r3, r1
 8004da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da8:	e00a      	b.n	8004dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	4908      	ldr	r1, [pc, #32]	@ (8004dd0 <__NVIC_SetPriority+0x50>)
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	3b04      	subs	r3, #4
 8004db8:	0112      	lsls	r2, r2, #4
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	761a      	strb	r2, [r3, #24]
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000e100 	.word	0xe000e100
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	@ 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f1c3 0307 	rsb	r3, r3, #7
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	bf28      	it	cs
 8004df2:	2304      	movcs	r3, #4
 8004df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d902      	bls.n	8004e04 <NVIC_EncodePriority+0x30>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3b03      	subs	r3, #3
 8004e02:	e000      	b.n	8004e06 <NVIC_EncodePriority+0x32>
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	401a      	ands	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	43d9      	mvns	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e2c:	4313      	orrs	r3, r2
         );
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3724      	adds	r7, #36	@ 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e4c:	d301      	bcc.n	8004e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e00f      	b.n	8004e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e52:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <SysTick_Config+0x40>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	f7ff ff8e 	bl	8004d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <SysTick_Config+0x40>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e6a:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <SysTick_Config+0x40>)
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	e000e010 	.word	0xe000e010

08004e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff29 	bl	8004ce0 <__NVIC_SetPriorityGrouping>
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea8:	f7ff ff3e 	bl	8004d28 <__NVIC_GetPriorityGrouping>
 8004eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ff8e 	bl	8004dd4 <NVIC_EncodePriority>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff5d 	bl	8004d80 <__NVIC_SetPriority>
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff31 	bl	8004d44 <__NVIC_EnableIRQ>
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ffa2 	bl	8004e3c <SysTick_Config>
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e08d      	b.n	8005032 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b47      	ldr	r3, [pc, #284]	@ (800503c <HAL_DMA_Init+0x138>)
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d80f      	bhi.n	8004f42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b45      	ldr	r3, [pc, #276]	@ (8005040 <HAL_DMA_Init+0x13c>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a45      	ldr	r2, [pc, #276]	@ (8005044 <HAL_DMA_Init+0x140>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	009a      	lsls	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a42      	ldr	r2, [pc, #264]	@ (8005048 <HAL_DMA_Init+0x144>)
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f40:	e00e      	b.n	8004f60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b40      	ldr	r3, [pc, #256]	@ (800504c <HAL_DMA_Init+0x148>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005044 <HAL_DMA_Init+0x140>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	009a      	lsls	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005050 <HAL_DMA_Init+0x14c>)
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9b6 	bl	8005324 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc0:	d102      	bne.n	8004fc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fdc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_DMA_Init+0x104>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d80c      	bhi.n	8005008 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9d6 	bl	80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e008      	b.n	800501a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40020407 	.word	0x40020407
 8005040:	bffdfff8 	.word	0xbffdfff8
 8005044:	cccccccd 	.word	0xcccccccd
 8005048:	40020000 	.word	0x40020000
 800504c:	bffdfbf8 	.word	0xbffdfbf8
 8005050:	40020400 	.word	0x40020400

08005054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_DMA_Start_IT+0x20>
 8005070:	2302      	movs	r3, #2
 8005072:	e066      	b.n	8005142 <HAL_DMA_Start_IT+0xee>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d155      	bne.n	8005134 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8fb 	bl	80052a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 020e 	orr.w	r2, r2, #14
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e00f      	b.n	80050ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0204 	bic.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 020a 	orr.w	r2, r2, #10
 80050ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005108:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005120:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e005      	b.n	8005140 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800513c:	2302      	movs	r3, #2
 800513e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f003 031c 	and.w	r3, r3, #28
 800516a:	2204      	movs	r2, #4
 800516c:	409a      	lsls	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d026      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7a>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d021      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0204 	bic.w	r2, r2, #4
 800519c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f003 021c 	and.w	r2, r3, #28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2104      	movs	r1, #4
 80051ac:	fa01 f202 	lsl.w	r2, r1, r2
 80051b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d071      	beq.n	800529e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051c2:	e06c      	b.n	800529e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c8:	f003 031c 	and.w	r3, r3, #28
 80051cc:	2202      	movs	r2, #2
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02e      	beq.n	8005236 <HAL_DMA_IRQHandler+0xec>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d029      	beq.n	8005236 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 020a 	bic.w	r2, r2, #10
 80051fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	f003 021c 	and.w	r2, r3, #28
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	2102      	movs	r1, #2
 8005216:	fa01 f202 	lsl.w	r2, r1, r2
 800521a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d038      	beq.n	800529e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005234:	e033      	b.n	800529e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f003 031c 	and.w	r3, r3, #28
 800523e:	2208      	movs	r2, #8
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02a      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x156>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d025      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 020e 	bic.w	r2, r2, #14
 8005262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005268:	f003 021c 	and.w	r2, r3, #28
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f202 	lsl.w	r2, r1, r2
 8005276:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
}
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052d0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	f003 021c 	and.w	r2, r3, #28
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f202 	lsl.w	r2, r1, r2
 80052e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d108      	bne.n	8005308 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005306:	e007      	b.n	8005318 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d80a      	bhi.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005344:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6493      	str	r3, [r2, #72]	@ 0x48
 800534c:	e007      	b.n	800535e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	009a      	lsls	r2, r3, #2
 8005356:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005358:	4413      	add	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	3b08      	subs	r3, #8
 8005366:	4a0c      	ldr	r2, [pc, #48]	@ (8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005374:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40020407 	.word	0x40020407
 8005394:	4002081c 	.word	0x4002081c
 8005398:	cccccccd 	.word	0xcccccccd
 800539c:	40020880 	.word	0x40020880

080053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a08      	ldr	r2, [pc, #32]	@ (80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	1000823f 	.word	0x1000823f
 80053e4:	40020940 	.word	0x40020940

080053e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053f6:	e166      	b.n	80056c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2101      	movs	r1, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8158 	beq.w	80056c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d005      	beq.n	8005428 <HAL_GPIO_Init+0x40>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d130      	bne.n	800548a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800545e:	2201      	movs	r2, #1
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 0201 	and.w	r2, r3, #1
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b03      	cmp	r3, #3
 8005494:	d017      	beq.n	80054c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	2203      	movs	r2, #3
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d123      	bne.n	800551a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	08da      	lsrs	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3208      	adds	r2, #8
 80054da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	220f      	movs	r2, #15
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	08da      	lsrs	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3208      	adds	r2, #8
 8005514:	6939      	ldr	r1, [r7, #16]
 8005516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	2203      	movs	r2, #3
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80b2 	beq.w	80056c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800555c:	4b61      	ldr	r3, [pc, #388]	@ (80056e4 <HAL_GPIO_Init+0x2fc>)
 800555e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005560:	4a60      	ldr	r2, [pc, #384]	@ (80056e4 <HAL_GPIO_Init+0x2fc>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6613      	str	r3, [r2, #96]	@ 0x60
 8005568:	4b5e      	ldr	r3, [pc, #376]	@ (80056e4 <HAL_GPIO_Init+0x2fc>)
 800556a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005574:	4a5c      	ldr	r2, [pc, #368]	@ (80056e8 <HAL_GPIO_Init+0x300>)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	3302      	adds	r3, #2
 800557c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	220f      	movs	r2, #15
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4013      	ands	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800559e:	d02b      	beq.n	80055f8 <HAL_GPIO_Init+0x210>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a52      	ldr	r2, [pc, #328]	@ (80056ec <HAL_GPIO_Init+0x304>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d025      	beq.n	80055f4 <HAL_GPIO_Init+0x20c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a51      	ldr	r2, [pc, #324]	@ (80056f0 <HAL_GPIO_Init+0x308>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01f      	beq.n	80055f0 <HAL_GPIO_Init+0x208>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a50      	ldr	r2, [pc, #320]	@ (80056f4 <HAL_GPIO_Init+0x30c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d019      	beq.n	80055ec <HAL_GPIO_Init+0x204>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a4f      	ldr	r2, [pc, #316]	@ (80056f8 <HAL_GPIO_Init+0x310>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_GPIO_Init+0x200>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a4e      	ldr	r2, [pc, #312]	@ (80056fc <HAL_GPIO_Init+0x314>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00d      	beq.n	80055e4 <HAL_GPIO_Init+0x1fc>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005700 <HAL_GPIO_Init+0x318>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <HAL_GPIO_Init+0x1f8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005704 <HAL_GPIO_Init+0x31c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d101      	bne.n	80055dc <HAL_GPIO_Init+0x1f4>
 80055d8:	2307      	movs	r3, #7
 80055da:	e00e      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055dc:	2308      	movs	r3, #8
 80055de:	e00c      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055e0:	2306      	movs	r3, #6
 80055e2:	e00a      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055e4:	2305      	movs	r3, #5
 80055e6:	e008      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055e8:	2304      	movs	r3, #4
 80055ea:	e006      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055ec:	2303      	movs	r3, #3
 80055ee:	e004      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e002      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_GPIO_Init+0x212>
 80055f8:	2300      	movs	r3, #0
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	f002 0203 	and.w	r2, r2, #3
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	4093      	lsls	r3, r2
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800560a:	4937      	ldr	r1, [pc, #220]	@ (80056e8 <HAL_GPIO_Init+0x300>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	3302      	adds	r3, #2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005618:	4b3b      	ldr	r3, [pc, #236]	@ (8005708 <HAL_GPIO_Init+0x320>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800563c:	4a32      	ldr	r2, [pc, #200]	@ (8005708 <HAL_GPIO_Init+0x320>)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005642:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <HAL_GPIO_Init+0x320>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	43db      	mvns	r3, r3
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4013      	ands	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005666:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <HAL_GPIO_Init+0x320>)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800566c:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <HAL_GPIO_Init+0x320>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	43db      	mvns	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005690:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <HAL_GPIO_Init+0x320>)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005696:	4b1c      	ldr	r3, [pc, #112]	@ (8005708 <HAL_GPIO_Init+0x320>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	43db      	mvns	r3, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ba:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <HAL_GPIO_Init+0x320>)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3301      	adds	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f47f ae91 	bne.w	80053f8 <HAL_GPIO_Init+0x10>
  }
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40010000 	.word	0x40010000
 80056ec:	48000400 	.word	0x48000400
 80056f0:	48000800 	.word	0x48000800
 80056f4:	48000c00 	.word	0x48000c00
 80056f8:	48001000 	.word	0x48001000
 80056fc:	48001400 	.word	0x48001400
 8005700:	48001800 	.word	0x48001800
 8005704:	48001c00 	.word	0x48001c00
 8005708:	40010400 	.word	0x40010400

0800570c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
 8005718:	4613      	mov	r3, r2
 800571a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800571c:	787b      	ldrb	r3, [r7, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005728:	e002      	b.n	8005730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800572a:	887a      	ldrh	r2, [r7, #2]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005746:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d006      	beq.n	8005760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005752:	4a05      	ldr	r2, [pc, #20]	@ (8005768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb ff08 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40010400 	.word	0x40010400

0800576c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005770:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577c:	d102      	bne.n	8005784 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800577e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005782:	e00b      	b.n	800579c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005784:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	d102      	bne.n	800579a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005798:	e000      	b.n	800579c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800579a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40007000 	.word	0x40007000

080057ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d141      	bne.n	800583e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057ba:	4b4b      	ldr	r3, [pc, #300]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c6:	d131      	bne.n	800582c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c8:	4b47      	ldr	r3, [pc, #284]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ce:	4a46      	ldr	r2, [pc, #280]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057d8:	4b43      	ldr	r3, [pc, #268]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057e0:	4a41      	ldr	r2, [pc, #260]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80057e8:	4b40      	ldr	r3, [pc, #256]	@ (80058ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2232      	movs	r2, #50	@ 0x32
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	4a3f      	ldr	r2, [pc, #252]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	0c9b      	lsrs	r3, r3, #18
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057fe:	e002      	b.n	8005806 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b01      	subs	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005806:	4b38      	ldr	r3, [pc, #224]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005812:	d102      	bne.n	800581a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f2      	bne.n	8005800 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005826:	d158      	bne.n	80058da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e057      	b.n	80058dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800582c:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005832:	4a2d      	ldr	r2, [pc, #180]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005838:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800583c:	e04d      	b.n	80058da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005844:	d141      	bne.n	80058ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005846:	4b28      	ldr	r3, [pc, #160]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005852:	d131      	bne.n	80058b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005854:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585a:	4a23      	ldr	r2, [pc, #140]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005864:	4b20      	ldr	r3, [pc, #128]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800586c:	4a1e      	ldr	r2, [pc, #120]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005872:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005874:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2232      	movs	r2, #50	@ 0x32
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	0c9b      	lsrs	r3, r3, #18
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588a:	e002      	b.n	8005892 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3b01      	subs	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005892:	4b15      	ldr	r3, [pc, #84]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589e:	d102      	bne.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f2      	bne.n	800588c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b2:	d112      	bne.n	80058da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e011      	b.n	80058dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058be:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058c8:	e007      	b.n	80058da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058ca:	4b07      	ldr	r3, [pc, #28]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d2:	4a05      	ldr	r2, [pc, #20]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40007000 	.word	0x40007000
 80058ec:	20000004 	.word	0x20000004
 80058f0:	431bde83 	.word	0x431bde83

080058f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a04      	ldr	r2, [pc, #16]	@ (8005910 <HAL_PWREx_EnableVddIO2+0x1c>)
 80058fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005902:	6053      	str	r3, [r2, #4]
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40007000 	.word	0x40007000

08005914 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f000 bc08 	b.w	8006138 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005928:	4b96      	ldr	r3, [pc, #600]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005932:	4b94      	ldr	r3, [pc, #592]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80e4 	beq.w	8005b12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_RCC_OscConfig+0x4c>
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b0c      	cmp	r3, #12
 8005954:	f040 808b 	bne.w	8005a6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 8087 	bne.w	8005a6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005960:	4b88      	ldr	r3, [pc, #544]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_RCC_OscConfig+0x64>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e3df      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	4b81      	ldr	r3, [pc, #516]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_RCC_OscConfig+0x7e>
 8005988:	4b7e      	ldr	r3, [pc, #504]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005990:	e005      	b.n	800599e <HAL_RCC_OscConfig+0x8a>
 8005992:	4b7c      	ldr	r3, [pc, #496]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800599e:	4293      	cmp	r3, r2
 80059a0:	d223      	bcs.n	80059ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fdcc 	bl	8006544 <RCC_SetFlashLatencyFromMSIRange>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e3c0      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059b6:	4b73      	ldr	r3, [pc, #460]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a72      	ldr	r2, [pc, #456]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b70      	ldr	r3, [pc, #448]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	496d      	ldr	r1, [pc, #436]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	4968      	ldr	r1, [pc, #416]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	e025      	b.n	8005a36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ea:	4b66      	ldr	r3, [pc, #408]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a65      	ldr	r2, [pc, #404]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059f0:	f043 0308 	orr.w	r3, r3, #8
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	4b63      	ldr	r3, [pc, #396]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4960      	ldr	r1, [pc, #384]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a08:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	495b      	ldr	r1, [pc, #364]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fd8c 	bl	8006544 <RCC_SetFlashLatencyFromMSIRange>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e380      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a36:	f000 fcc1 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b51      	ldr	r3, [pc, #324]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	4950      	ldr	r1, [pc, #320]	@ (8005b88 <HAL_RCC_OscConfig+0x274>)
 8005a48:	5ccb      	ldrb	r3, [r1, r3]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	4a4e      	ldr	r2, [pc, #312]	@ (8005b8c <HAL_RCC_OscConfig+0x278>)
 8005a54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a56:	4b4e      	ldr	r3, [pc, #312]	@ (8005b90 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd fff2 	bl	8003a44 <HAL_InitTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d052      	beq.n	8005b10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	e364      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d032      	beq.n	8005adc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a76:	4b43      	ldr	r3, [pc, #268]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a82:	f7fe f82f 	bl	8003ae4 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a8a:	f7fe f82b 	bl	8003ae4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e34d      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a9c:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa8:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a35      	ldr	r2, [pc, #212]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b33      	ldr	r3, [pc, #204]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	4930      	ldr	r1, [pc, #192]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	492b      	ldr	r1, [pc, #172]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
 8005ada:	e01a      	b.n	8005b12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005adc:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae8:	f7fd fffc 	bl	8003ae4 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af0:	f7fd fff8 	bl	8003ae4 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e31a      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b02:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1dc>
 8005b0e:	e000      	b.n	8005b12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d073      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_OscConfig+0x21c>
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b0c      	cmp	r3, #12
 8005b28:	d10e      	bne.n	8005b48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d10b      	bne.n	8005b48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	4b14      	ldr	r3, [pc, #80]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d063      	beq.n	8005c04 <HAL_RCC_OscConfig+0x2f0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d15f      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e2f7      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_OscConfig+0x24c>
 8005b52:	4b0c      	ldr	r3, [pc, #48]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a0b      	ldr	r2, [pc, #44]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	e025      	b.n	8005bac <HAL_RCC_OscConfig+0x298>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b68:	d114      	bne.n	8005b94 <HAL_RCC_OscConfig+0x280>
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a05      	ldr	r2, [pc, #20]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b03      	ldr	r3, [pc, #12]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a02      	ldr	r2, [pc, #8]	@ (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e013      	b.n	8005bac <HAL_RCC_OscConfig+0x298>
 8005b84:	40021000 	.word	0x40021000
 8005b88:	0800d7c4 	.word	0x0800d7c4
 8005b8c:	20000004 	.word	0x20000004
 8005b90:	20000008 	.word	0x20000008
 8005b94:	4ba0      	ldr	r3, [pc, #640]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a9f      	ldr	r2, [pc, #636]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a9c      	ldr	r2, [pc, #624]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fd ff96 	bl	8003ae4 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fd ff92 	bl	8003ae4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	@ 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e2b4      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bce:	4b92      	ldr	r3, [pc, #584]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x2a8>
 8005bda:	e014      	b.n	8005c06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fd ff82 	bl	8003ae4 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be4:	f7fd ff7e 	bl	8003ae4 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	@ 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e2a0      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bf6:	4b88      	ldr	r3, [pc, #544]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x2d0>
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d060      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x310>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b0c      	cmp	r3, #12
 8005c1c:	d119      	bne.n	8005c52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d116      	bne.n	8005c52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c24:	4b7c      	ldr	r3, [pc, #496]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_OscConfig+0x328>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e27d      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3c:	4b76      	ldr	r3, [pc, #472]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	4973      	ldr	r1, [pc, #460]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c50:	e040      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d023      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fd ff3d 	bl	8003ae4 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c6e:	f7fd ff39 	bl	8003ae4 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e25b      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c80:	4b65      	ldr	r3, [pc, #404]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8c:	4b62      	ldr	r3, [pc, #392]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	061b      	lsls	r3, r3, #24
 8005c9a:	495f      	ldr	r1, [pc, #380]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	e018      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fd ff19 	bl	8003ae4 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fd ff15 	bl	8003ae4 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e237      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cc8:	4b53      	ldr	r3, [pc, #332]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f0      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d03c      	beq.n	8005d5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01c      	beq.n	8005d22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cee:	4a4a      	ldr	r2, [pc, #296]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fd fef4 	bl	8003ae4 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d00:	f7fd fef0 	bl	8003ae4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e212      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d12:	4b41      	ldr	r3, [pc, #260]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0ef      	beq.n	8005d00 <HAL_RCC_OscConfig+0x3ec>
 8005d20:	e01b      	b.n	8005d5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d22:	4b3d      	ldr	r3, [pc, #244]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d28:	4a3b      	ldr	r2, [pc, #236]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fd fed7 	bl	8003ae4 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d3a:	f7fd fed3 	bl	8003ae4 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e1f5      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d4c:	4b32      	ldr	r3, [pc, #200]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ef      	bne.n	8005d3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80a6 	beq.w	8005eb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d78:	4b27      	ldr	r3, [pc, #156]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7c:	4a26      	ldr	r2, [pc, #152]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d84:	4b24      	ldr	r3, [pc, #144]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d90:	2301      	movs	r3, #1
 8005d92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d94:	4b21      	ldr	r3, [pc, #132]	@ (8005e1c <HAL_RCC_OscConfig+0x508>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d118      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005da0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e1c <HAL_RCC_OscConfig+0x508>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_RCC_OscConfig+0x508>)
 8005da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dac:	f7fd fe9a 	bl	8003ae4 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db4:	f7fd fe96 	bl	8003ae4 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e1b8      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <HAL_RCC_OscConfig+0x508>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d108      	bne.n	8005dec <HAL_RCC_OscConfig+0x4d8>
 8005dda:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dea:	e029      	b.n	8005e40 <HAL_RCC_OscConfig+0x52c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d115      	bne.n	8005e20 <HAL_RCC_OscConfig+0x50c>
 8005df4:	4b08      	ldr	r3, [pc, #32]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfa:	4a07      	ldr	r2, [pc, #28]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005dfc:	f043 0304 	orr.w	r3, r3, #4
 8005e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e04:	4b04      	ldr	r3, [pc, #16]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0a:	4a03      	ldr	r2, [pc, #12]	@ (8005e18 <HAL_RCC_OscConfig+0x504>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e14:	e014      	b.n	8005e40 <HAL_RCC_OscConfig+0x52c>
 8005e16:	bf00      	nop
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	4b9d      	ldr	r3, [pc, #628]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	4a9c      	ldr	r2, [pc, #624]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e30:	4b99      	ldr	r3, [pc, #612]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e36:	4a98      	ldr	r2, [pc, #608]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d016      	beq.n	8005e76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fd fe4c 	bl	8003ae4 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4e:	e00a      	b.n	8005e66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e50:	f7fd fe48 	bl	8003ae4 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e168      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e66:	4b8c      	ldr	r3, [pc, #560]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0ed      	beq.n	8005e50 <HAL_RCC_OscConfig+0x53c>
 8005e74:	e015      	b.n	8005ea2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7fd fe35 	bl	8003ae4 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fd fe31 	bl	8003ae4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e151      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e94:	4b80      	ldr	r3, [pc, #512]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ed      	bne.n	8005e7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea8:	4b7b      	ldr	r3, [pc, #492]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eac:	4a7a      	ldr	r2, [pc, #488]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d03c      	beq.n	8005f3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01c      	beq.n	8005f02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec8:	4b73      	ldr	r3, [pc, #460]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ece:	4a72      	ldr	r2, [pc, #456]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fd fe04 	bl	8003ae4 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ee0:	f7fd fe00 	bl	8003ae4 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e122      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ef2:	4b69      	ldr	r3, [pc, #420]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ef      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x5cc>
 8005f00:	e01b      	b.n	8005f3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f02:	4b65      	ldr	r3, [pc, #404]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f08:	4a63      	ldr	r2, [pc, #396]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f12:	f7fd fde7 	bl	8003ae4 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f1a:	f7fd fde3 	bl	8003ae4 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e105      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ef      	bne.n	8005f1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80f9 	beq.w	8006136 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f040 80cf 	bne.w	80060ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f4e:	4b52      	ldr	r3, [pc, #328]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f003 0203 	and.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d12c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d123      	bne.n	8005fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d11b      	bne.n	8005fbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d113      	bne.n	8005fbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d109      	bne.n	8005fbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d071      	beq.n	80060a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b0c      	cmp	r3, #12
 8005fc0:	d068      	beq.n	8006094 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fc2:	4b35      	ldr	r3, [pc, #212]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005fce:	4b32      	ldr	r3, [pc, #200]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0ac      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fde:	4b2e      	ldr	r3, [pc, #184]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8005fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fea:	f7fd fd7b 	bl	8003ae4 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff2:	f7fd fd77 	bl	8003ae4 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e099      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006004:	4b24      	ldr	r3, [pc, #144]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006010:	4b21      	ldr	r3, [pc, #132]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	4b21      	ldr	r3, [pc, #132]	@ (800609c <HAL_RCC_OscConfig+0x788>)
 8006016:	4013      	ands	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006020:	3a01      	subs	r2, #1
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800602a:	0212      	lsls	r2, r2, #8
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006032:	0852      	lsrs	r2, r2, #1
 8006034:	3a01      	subs	r2, #1
 8006036:	0552      	lsls	r2, r2, #21
 8006038:	4311      	orrs	r1, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800603e:	0852      	lsrs	r2, r2, #1
 8006040:	3a01      	subs	r2, #1
 8006042:	0652      	lsls	r2, r2, #25
 8006044:	4311      	orrs	r1, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800604a:	06d2      	lsls	r2, r2, #27
 800604c:	430a      	orrs	r2, r1
 800604e:	4912      	ldr	r1, [pc, #72]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006050:	4313      	orrs	r3, r2
 8006052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006054:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0f      	ldr	r2, [pc, #60]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 800605a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800605e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006060:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a0c      	ldr	r2, [pc, #48]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800606a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800606c:	f7fd fd3a 	bl	8003ae4 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fd fd36 	bl	8003ae4 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e058      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006086:	4b04      	ldr	r3, [pc, #16]	@ (8006098 <HAL_RCC_OscConfig+0x784>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006092:	e050      	b.n	8006136 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e04f      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
 8006098:	40021000 	.word	0x40021000
 800609c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a0:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d144      	bne.n	8006136 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060ac:	4b24      	ldr	r3, [pc, #144]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a23      	ldr	r2, [pc, #140]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060b8:	4b21      	ldr	r3, [pc, #132]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a20      	ldr	r2, [pc, #128]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060c4:	f7fd fd0e 	bl	8003ae4 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fd fd0a 	bl	8003ae4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e02c      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060de:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x7b8>
 80060ea:	e024      	b.n	8006136 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b0c      	cmp	r3, #12
 80060f0:	d01f      	beq.n	8006132 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f2:	4b13      	ldr	r3, [pc, #76]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a12      	ldr	r2, [pc, #72]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 80060f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fd fcf1 	bl	8003ae4 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006106:	f7fd fced 	bl	8003ae4 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e00f      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006118:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f0      	bne.n	8006106 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006124:	4b06      	ldr	r3, [pc, #24]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	4905      	ldr	r1, [pc, #20]	@ (8006140 <HAL_RCC_OscConfig+0x82c>)
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCC_OscConfig+0x830>)
 800612c:	4013      	ands	r3, r2
 800612e:	60cb      	str	r3, [r1, #12]
 8006130:	e001      	b.n	8006136 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40021000 	.word	0x40021000
 8006144:	feeefffc 	.word	0xfeeefffc

08006148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e11d      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b90      	ldr	r3, [pc, #576]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d910      	bls.n	8006190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b8d      	ldr	r3, [pc, #564]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 020f 	bic.w	r2, r3, #15
 8006176:	498b      	ldr	r1, [pc, #556]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b89      	ldr	r3, [pc, #548]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e105      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	4b81      	ldr	r3, [pc, #516]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d908      	bls.n	80061be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ac:	4b7e      	ldr	r3, [pc, #504]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	497b      	ldr	r1, [pc, #492]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d079      	beq.n	80062be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d11e      	bne.n	8006210 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d2:	4b75      	ldr	r3, [pc, #468]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e0dc      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80061e2:	f000 fa09 	bl	80065f8 <RCC_GetSysClockFreqFromPLLSource>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4a70      	ldr	r2, [pc, #448]	@ (80063ac <HAL_RCC_ClockConfig+0x264>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d946      	bls.n	800627c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80061ee:	4b6e      	ldr	r3, [pc, #440]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d140      	bne.n	800627c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061fa:	4b6b      	ldr	r3, [pc, #428]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006202:	4a69      	ldr	r2, [pc, #420]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006208:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800620a:	2380      	movs	r3, #128	@ 0x80
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e035      	b.n	800627c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d107      	bne.n	8006228 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006218:	4b63      	ldr	r3, [pc, #396]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d115      	bne.n	8006250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0b9      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d107      	bne.n	8006240 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006230:	4b5d      	ldr	r3, [pc, #372]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0ad      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006240:	4b59      	ldr	r3, [pc, #356]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0a5      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006250:	f000 f8b4 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8006254:	4603      	mov	r3, r0
 8006256:	4a55      	ldr	r2, [pc, #340]	@ (80063ac <HAL_RCC_ClockConfig+0x264>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d90f      	bls.n	800627c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800625c:	4b52      	ldr	r3, [pc, #328]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006268:	4b4f      	ldr	r3, [pc, #316]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006270:	4a4d      	ldr	r2, [pc, #308]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800627c:	4b4a      	ldr	r3, [pc, #296]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f023 0203 	bic.w	r2, r3, #3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4947      	ldr	r1, [pc, #284]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800628a:	4313      	orrs	r3, r2
 800628c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628e:	f7fd fc29 	bl	8003ae4 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006294:	e00a      	b.n	80062ac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006296:	f7fd fc25 	bl	8003ae4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e077      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ac:	4b3e      	ldr	r3, [pc, #248]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 020c 	and.w	r2, r3, #12
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d1eb      	bne.n	8006296 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d105      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062c4:	4b38      	ldr	r3, [pc, #224]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a37      	ldr	r2, [pc, #220]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d010      	beq.n	80062fe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	4b31      	ldr	r3, [pc, #196]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d208      	bcs.n	80062fe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ec:	4b2e      	ldr	r3, [pc, #184]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	492b      	ldr	r1, [pc, #172]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062fe:	4b29      	ldr	r3, [pc, #164]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d210      	bcs.n	800632e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630c:	4b25      	ldr	r3, [pc, #148]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f023 020f 	bic.w	r2, r3, #15
 8006314:	4923      	ldr	r1, [pc, #140]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631c:	4b21      	ldr	r3, [pc, #132]	@ (80063a4 <HAL_RCC_ClockConfig+0x25c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d001      	beq.n	800632e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e036      	b.n	800639c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800633a:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	4918      	ldr	r1, [pc, #96]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006348:	4313      	orrs	r3, r2
 800634a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006358:	4b13      	ldr	r3, [pc, #76]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4910      	ldr	r1, [pc, #64]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006368:	4313      	orrs	r3, r2
 800636a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800636c:	f000 f826 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <HAL_RCC_ClockConfig+0x260>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <HAL_RCC_ClockConfig+0x268>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	4a0a      	ldr	r2, [pc, #40]	@ (80063b4 <HAL_RCC_ClockConfig+0x26c>)
 800638a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800638c:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <HAL_RCC_ClockConfig+0x270>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f7fd fb57 	bl	8003a44 <HAL_InitTick>
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]

  return status;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40022000 	.word	0x40022000
 80063a8:	40021000 	.word	0x40021000
 80063ac:	04c4b400 	.word	0x04c4b400
 80063b0:	0800d7c4 	.word	0x0800d7c4
 80063b4:	20000004 	.word	0x20000004
 80063b8:	20000008 	.word	0x20000008

080063bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	b089      	sub	sp, #36	@ 0x24
 80063c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ca:	4b3e      	ldr	r3, [pc, #248]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
 80063d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063d4:	4b3b      	ldr	r3, [pc, #236]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x34>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d121      	bne.n	800642e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d11e      	bne.n	800642e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063f0:	4b34      	ldr	r3, [pc, #208]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d107      	bne.n	800640c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063fc:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	e005      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800640c:	4b2d      	ldr	r3, [pc, #180]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006418:	4a2b      	ldr	r2, [pc, #172]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10d      	bne.n	8006444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800642c:	e00a      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d102      	bne.n	800643a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006434:	4b25      	ldr	r3, [pc, #148]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e004      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d101      	bne.n	8006444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006440:	4b23      	ldr	r3, [pc, #140]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d134      	bne.n	80064b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800644a:	4b1e      	ldr	r3, [pc, #120]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0xa6>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b03      	cmp	r3, #3
 800645e:	d003      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0xac>
 8006460:	e005      	b.n	800646e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006462:	4b1a      	ldr	r3, [pc, #104]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006464:	617b      	str	r3, [r7, #20]
      break;
 8006466:	e005      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006468:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800646a:	617b      	str	r3, [r7, #20]
      break;
 800646c:	e002      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	617b      	str	r3, [r7, #20]
      break;
 8006472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006474:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	3301      	adds	r3, #1
 8006480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006482:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	fb03 f202 	mul.w	r2, r3, r2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800649a:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	0e5b      	lsrs	r3, r3, #25
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	3301      	adds	r3, #1
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064b4:	69bb      	ldr	r3, [r7, #24]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3724      	adds	r7, #36	@ 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40021000 	.word	0x40021000
 80064c8:	0800d7dc 	.word	0x0800d7dc
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	007a1200 	.word	0x007a1200

080064d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d8:	4b03      	ldr	r3, [pc, #12]	@ (80064e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064da:	681b      	ldr	r3, [r3, #0]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064f0:	f7ff fff0 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4904      	ldr	r1, [pc, #16]	@ (8006514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40021000 	.word	0x40021000
 8006514:	0800d7d4 	.word	0x0800d7d4

08006518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800651c:	f7ff ffda 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b06      	ldr	r3, [pc, #24]	@ (800653c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	0adb      	lsrs	r3, r3, #11
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4904      	ldr	r1, [pc, #16]	@ (8006540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40021000 	.word	0x40021000
 8006540:	0800d7d4 	.word	0x0800d7d4

08006544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006550:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800655c:	f7ff f906 	bl	800576c <HAL_PWREx_GetVoltageRange>
 8006560:	6178      	str	r0, [r7, #20]
 8006562:	e014      	b.n	800658e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006564:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006568:	4a21      	ldr	r2, [pc, #132]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800656a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800656e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006570:	4b1f      	ldr	r3, [pc, #124]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800657c:	f7ff f8f6 	bl	800576c <HAL_PWREx_GetVoltageRange>
 8006580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006582:	4b1b      	ldr	r3, [pc, #108]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800658c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006594:	d10b      	bne.n	80065ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b80      	cmp	r3, #128	@ 0x80
 800659a:	d913      	bls.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2ba0      	cmp	r3, #160	@ 0xa0
 80065a0:	d902      	bls.n	80065a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065a2:	2302      	movs	r3, #2
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e00d      	b.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065a8:	2301      	movs	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e00a      	b.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b2:	d902      	bls.n	80065ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80065b4:	2302      	movs	r3, #2
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	e004      	b.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b70      	cmp	r3, #112	@ 0x70
 80065be:	d101      	bne.n	80065c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065c0:	2301      	movs	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f023 020f 	bic.w	r2, r3, #15
 80065cc:	4909      	ldr	r1, [pc, #36]	@ (80065f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40022000 	.word	0x40022000

080065f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065fe:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d00b      	beq.n	8006626 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d825      	bhi.n	8006660 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d008      	beq.n	800662c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d11f      	bne.n	8006660 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006620:	4b25      	ldr	r3, [pc, #148]	@ (80066b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006622:	613b      	str	r3, [r7, #16]
    break;
 8006624:	e01f      	b.n	8006666 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006626:	4b25      	ldr	r3, [pc, #148]	@ (80066bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006628:	613b      	str	r3, [r7, #16]
    break;
 800662a:	e01c      	b.n	8006666 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800662c:	4b21      	ldr	r3, [pc, #132]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006638:	4b1e      	ldr	r3, [pc, #120]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800663a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e005      	b.n	8006654 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006654:	4a1a      	ldr	r2, [pc, #104]	@ (80066c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	613b      	str	r3, [r7, #16]
    break;
 800665e:	e002      	b.n	8006666 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
    break;
 8006664:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	3301      	adds	r3, #1
 8006672:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006674:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	fb03 f202 	mul.w	r2, r3, r2
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	0e5b      	lsrs	r3, r3, #25
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	3301      	adds	r3, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80066a6:	683b      	ldr	r3, [r7, #0]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40021000 	.word	0x40021000
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	007a1200 	.word	0x007a1200
 80066c0:	0800d7dc 	.word	0x0800d7dc

080066c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066cc:	2300      	movs	r3, #0
 80066ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066d0:	2300      	movs	r3, #0
 80066d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d040      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066e4:	2b80      	cmp	r3, #128	@ 0x80
 80066e6:	d02a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066e8:	2b80      	cmp	r3, #128	@ 0x80
 80066ea:	d825      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066ec:	2b60      	cmp	r3, #96	@ 0x60
 80066ee:	d026      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066f0:	2b60      	cmp	r3, #96	@ 0x60
 80066f2:	d821      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d006      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80066f8:	2b40      	cmp	r3, #64	@ 0x40
 80066fa:	d81d      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d010      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006704:	e018      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006706:	4b89      	ldr	r3, [pc, #548]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4a88      	ldr	r2, [pc, #544]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006710:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006712:	e015      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fa24 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006724:	e00c      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3320      	adds	r3, #32
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f001 fb0f 	bl	8007d50 <RCCEx_PLLSAI2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006736:	e003      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	74fb      	strb	r3, [r7, #19]
      break;
 800673c:	e000      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800673e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006746:	4b79      	ldr	r3, [pc, #484]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800674c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006754:	4975      	ldr	r1, [pc, #468]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800675c:	e001      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	7cfb      	ldrb	r3, [r7, #19]
 8006760:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d047      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006776:	d030      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677c:	d82a      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800677e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006782:	d02a      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006784:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006788:	d824      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800678a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800678e:	d008      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006794:	d81e      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800679a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679e:	d010      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80067a0:	e018      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067a2:	4b62      	ldr	r3, [pc, #392]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4a61      	ldr	r2, [pc, #388]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067ae:	e015      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f9d6 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067c0:	e00c      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3320      	adds	r3, #32
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fac1 	bl	8007d50 <RCCEx_PLLSAI2_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	74fb      	strb	r3, [r7, #19]
      break;
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80067da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067e2:	4b52      	ldr	r3, [pc, #328]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	494e      	ldr	r1, [pc, #312]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80067f8:	e001      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 809f 	beq.w	800694a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680c:	2300      	movs	r3, #0
 800680e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006810:	4b46      	ldr	r3, [pc, #280]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	4b41      	ldr	r3, [pc, #260]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	4a40      	ldr	r2, [pc, #256]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
 8006832:	4b3e      	ldr	r3, [pc, #248]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683e:	2301      	movs	r3, #1
 8006840:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006842:	4b3b      	ldr	r3, [pc, #236]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3a      	ldr	r2, [pc, #232]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800684e:	f7fd f949 	bl	8003ae4 <HAL_GetTick>
 8006852:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006854:	e009      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006856:	f7fd f945 	bl	8003ae4 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d902      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	74fb      	strb	r3, [r7, #19]
        break;
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800686a:	4b31      	ldr	r3, [pc, #196]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ef      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d15b      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800687c:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006886:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01f      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d019      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800689a:	4b24      	ldr	r3, [pc, #144]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a6:	4b21      	ldr	r3, [pc, #132]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ac:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b6:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068bc:	4a1b      	ldr	r2, [pc, #108]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068c6:	4a19      	ldr	r2, [pc, #100]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d016      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fd f904 	bl	8003ae4 <HAL_GetTick>
 80068dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068de:	e00b      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e0:	f7fd f900 	bl	8003ae4 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d902      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	74fb      	strb	r3, [r7, #19]
            break;
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f8:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ec      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10c      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691c:	4903      	ldr	r1, [pc, #12]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006924:	e008      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	74bb      	strb	r3, [r7, #18]
 800692a:	e005      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800692c:	40021000 	.word	0x40021000
 8006930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006938:	7c7b      	ldrb	r3, [r7, #17]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693e:	4ba0      	ldr	r3, [pc, #640]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	4a9f      	ldr	r2, [pc, #636]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006956:	4b9a      	ldr	r3, [pc, #616]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695c:	f023 0203 	bic.w	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006964:	4996      	ldr	r1, [pc, #600]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006978:	4b91      	ldr	r3, [pc, #580]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697e:	f023 020c 	bic.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	498e      	ldr	r1, [pc, #568]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800699a:	4b89      	ldr	r3, [pc, #548]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a8:	4985      	ldr	r1, [pc, #532]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069bc:	4b80      	ldr	r3, [pc, #512]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ca:	497d      	ldr	r1, [pc, #500]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069de:	4b78      	ldr	r3, [pc, #480]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ec:	4974      	ldr	r1, [pc, #464]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a00:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0e:	496c      	ldr	r1, [pc, #432]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a22:	4b67      	ldr	r3, [pc, #412]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a30:	4963      	ldr	r1, [pc, #396]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a44:	4b5e      	ldr	r3, [pc, #376]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a52:	495b      	ldr	r1, [pc, #364]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a66:	4b56      	ldr	r3, [pc, #344]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a74:	4952      	ldr	r1, [pc, #328]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a88:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a96:	494a      	ldr	r1, [pc, #296]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aaa:	4b45      	ldr	r3, [pc, #276]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab8:	4941      	ldr	r1, [pc, #260]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006acc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ad2:	f023 0203 	bic.w	r2, r3, #3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ada:	4939      	ldr	r1, [pc, #228]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d028      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aee:	4b34      	ldr	r3, [pc, #208]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006afc:	4930      	ldr	r1, [pc, #192]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	4a2b      	ldr	r2, [pc, #172]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b18:	60d3      	str	r3, [r2, #12]
 8006b1a:	e011      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f81b 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006b3c:	7cfb      	ldrb	r3, [r7, #19]
 8006b3e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d04d      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b54:	d108      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b5c:	4a18      	ldr	r2, [pc, #96]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006b66:	e012      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006b68:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b6e:	4a14      	ldr	r2, [pc, #80]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006b78:	4b11      	ldr	r3, [pc, #68]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b86:	490e      	ldr	r1, [pc, #56]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b98:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a08      	ldr	r2, [pc, #32]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ba2:	60d3      	str	r3, [r2, #12]
 8006ba4:	e020      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bb0:	4b03      	ldr	r3, [pc, #12]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a02      	ldr	r2, [pc, #8]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bba:	60d3      	str	r3, [r2, #12]
 8006bbc:	e014      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006bbe:	bf00      	nop
 8006bc0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ffc7 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006be4:	7cfb      	ldrb	r3, [r7, #19]
 8006be6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d028      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c02:	4947      	ldr	r1, [pc, #284]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c12:	d106      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c14:	4b42      	ldr	r3, [pc, #264]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a41      	ldr	r2, [pc, #260]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c1e:	60d3      	str	r3, [r2, #12]
 8006c20:	e011      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 ff98 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c3c:	7cfb      	ldrb	r3, [r7, #19]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006c42:	7cfb      	ldrb	r3, [r7, #19]
 8006c44:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01e      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c52:	4b33      	ldr	r3, [pc, #204]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c58:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c62:	492f      	ldr	r1, [pc, #188]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ff73 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c86:	7cfb      	ldrb	r3, [r7, #19]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006c8c:	7cfb      	ldrb	r3, [r7, #19]
 8006c8e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c9c:	4b20      	ldr	r3, [pc, #128]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca2:	f023 0204 	bic.w	r2, r3, #4
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cac:	491c      	ldr	r1, [pc, #112]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cc0:	4b17      	ldr	r3, [pc, #92]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cc6:	f023 0218 	bic.w	r2, r3, #24
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd0:	4913      	ldr	r1, [pc, #76]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf4:	490a      	ldr	r1, [pc, #40]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d06:	d105      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d08:	4b05      	ldr	r3, [pc, #20]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4a04      	ldr	r2, [pc, #16]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d14:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40021000 	.word	0x40021000

08006d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d36:	d13e      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006d38:	4bb6      	ldr	r3, [pc, #728]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d42:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d4a:	d028      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d52:	f200 86f4 	bhi.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5c:	d005      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d64:	d00e      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006d66:	f000 beea 	b.w	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d6a:	4baa      	ldr	r3, [pc, #680]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f040 86e4 	bne.w	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7e:	61fb      	str	r3, [r7, #28]
      break;
 8006d80:	f000 bedf 	b.w	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006d84:	4ba3      	ldr	r3, [pc, #652]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	f040 86d9 	bne.w	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006d94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d98:	61fb      	str	r3, [r7, #28]
      break;
 8006d9a:	f000 bed4 	b.w	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d9e:	4b9d      	ldr	r3, [pc, #628]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006daa:	f040 86ce 	bne.w	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006dae:	4b9a      	ldr	r3, [pc, #616]	@ (8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006db0:	61fb      	str	r3, [r7, #28]
      break;
 8006db2:	f000 beca 	b.w	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006db6:	4b97      	ldr	r3, [pc, #604]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d036      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d840      	bhi.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d003      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d020      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006dd8:	e039      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006dda:	4b8e      	ldr	r3, [pc, #568]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d116      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006de6:	4b8b      	ldr	r3, [pc, #556]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006df2:	4b88      	ldr	r3, [pc, #544]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	e005      	b.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006dfe:	4b85      	ldr	r3, [pc, #532]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	4a84      	ldr	r2, [pc, #528]	@ (800701c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006e12:	e01f      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61bb      	str	r3, [r7, #24]
      break;
 8006e18:	e01c      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e1a:	4b7e      	ldr	r3, [pc, #504]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e26:	d102      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006e28:	4b7d      	ldr	r3, [pc, #500]	@ (8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006e2a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006e2c:	e012      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
      break;
 8006e32:	e00f      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e34:	4b77      	ldr	r3, [pc, #476]	@ (8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e40:	d102      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006e42:	4b78      	ldr	r3, [pc, #480]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006e44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006e46:	e005      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
      break;
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
      break;
 8006e52:	bf00      	nop
    }

    switch(PeriphClk)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e5a:	f000 8606 	beq.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e64:	f200 8673 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e6e:	f000 8469 	beq.w	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e78:	f200 8669 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e82:	f000 8531 	beq.w	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e8c:	f200 865f 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e96:	f000 8187 	beq.w	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ea0:	f200 8655 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eaa:	f000 80cd 	beq.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006eb4:	f200 864b 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ebe:	f000 8430 	beq.w	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec8:	f200 8641 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ed2:	f000 83e4 	beq.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006edc:	f200 8637 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee6:	f000 80af 	beq.w	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef0:	f200 862d 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efa:	f000 809d 	beq.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	f200 8623 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f0e:	f000 808b 	beq.w	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f18:	f200 8619 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f22:	f000 8554 	beq.w	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2c:	f200 860f 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f36:	f000 8500 	beq.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	f200 8605 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4a:	f000 84a1 	beq.w	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f54:	f200 85fb 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b80      	cmp	r3, #128	@ 0x80
 8006f5c:	f000 846c 	beq.w	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	f200 85f3 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d84c      	bhi.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 85ec 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	2b1f      	cmp	r3, #31
 8006f7c:	f200 85e7 	bhi.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006f80:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	0800739d 	.word	0x0800739d
 8006f8c:	0800740b 	.word	0x0800740b
 8006f90:	08007b4f 	.word	0x08007b4f
 8006f94:	0800749f 	.word	0x0800749f
 8006f98:	08007b4f 	.word	0x08007b4f
 8006f9c:	08007b4f 	.word	0x08007b4f
 8006fa0:	08007b4f 	.word	0x08007b4f
 8006fa4:	08007517 	.word	0x08007517
 8006fa8:	08007b4f 	.word	0x08007b4f
 8006fac:	08007b4f 	.word	0x08007b4f
 8006fb0:	08007b4f 	.word	0x08007b4f
 8006fb4:	08007b4f 	.word	0x08007b4f
 8006fb8:	08007b4f 	.word	0x08007b4f
 8006fbc:	08007b4f 	.word	0x08007b4f
 8006fc0:	08007b4f 	.word	0x08007b4f
 8006fc4:	0800759b 	.word	0x0800759b
 8006fc8:	08007b4f 	.word	0x08007b4f
 8006fcc:	08007b4f 	.word	0x08007b4f
 8006fd0:	08007b4f 	.word	0x08007b4f
 8006fd4:	08007b4f 	.word	0x08007b4f
 8006fd8:	08007b4f 	.word	0x08007b4f
 8006fdc:	08007b4f 	.word	0x08007b4f
 8006fe0:	08007b4f 	.word	0x08007b4f
 8006fe4:	08007b4f 	.word	0x08007b4f
 8006fe8:	08007b4f 	.word	0x08007b4f
 8006fec:	08007b4f 	.word	0x08007b4f
 8006ff0:	08007b4f 	.word	0x08007b4f
 8006ff4:	08007b4f 	.word	0x08007b4f
 8006ff8:	08007b4f 	.word	0x08007b4f
 8006ffc:	08007b4f 	.word	0x08007b4f
 8007000:	08007b4f 	.word	0x08007b4f
 8007004:	0800761d 	.word	0x0800761d
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b40      	cmp	r3, #64	@ 0x40
 800700c:	f000 83e8 	beq.w	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007010:	f000 bd9d 	b.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007014:	40021000 	.word	0x40021000
 8007018:	0003d090 	.word	0x0003d090
 800701c:	0800d7dc 	.word	0x0800d7dc
 8007020:	00f42400 	.word	0x00f42400
 8007024:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800702e:	f000 ff83 	bl	8007f38 <RCCEx_GetSAIxPeriphCLKFreq>
 8007032:	61f8      	str	r0, [r7, #28]
      break;
 8007034:	f000 bd8e 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800703e:	f000 ff7b 	bl	8007f38 <RCCEx_GetSAIxPeriphCLKFreq>
 8007042:	61f8      	str	r0, [r7, #28]
      break;
 8007044:	f000 bd86 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007048:	4b9a      	ldr	r3, [pc, #616]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800705a:	d015      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007062:	f200 8092 	bhi.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800706c:	d029      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007074:	f200 8089 	bhi.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d07b      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007084:	d04a      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007086:	e080      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007088:	4b8a      	ldr	r3, [pc, #552]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d17d      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007094:	4b87      	ldr	r3, [pc, #540]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80070a0:	4b84      	ldr	r3, [pc, #528]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	091b      	lsrs	r3, r3, #4
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	e005      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80070ac:	4b81      	ldr	r3, [pc, #516]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	4a7f      	ldr	r2, [pc, #508]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070be:	61fb      	str	r3, [r7, #28]
          break;
 80070c0:	e066      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80070c2:	4b7c      	ldr	r3, [pc, #496]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ce:	d162      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80070d0:	4b78      	ldr	r3, [pc, #480]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070dc:	d15b      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070de:	4b75      	ldr	r3, [pc, #468]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	fb03 f202 	mul.w	r2, r3, r2
 80070f2:	4b70      	ldr	r3, [pc, #448]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	3301      	adds	r3, #1
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007104:	4b6b      	ldr	r3, [pc, #428]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	0d5b      	lsrs	r3, r3, #21
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	3301      	adds	r3, #1
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	61fb      	str	r3, [r7, #28]
          break;
 800711a:	e03c      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800711c:	4b65      	ldr	r3, [pc, #404]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007128:	d138      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800712a:	4b62      	ldr	r3, [pc, #392]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007136:	d131      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007138:	4b5e      	ldr	r3, [pc, #376]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007142:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	fb03 f202 	mul.w	r2, r3, r2
 800714c:	4b59      	ldr	r3, [pc, #356]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	3301      	adds	r3, #1
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800715e:	4b55      	ldr	r3, [pc, #340]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	0d5b      	lsrs	r3, r3, #21
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	3301      	adds	r3, #1
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007172:	61fb      	str	r3, [r7, #28]
          break;
 8007174:	e012      	b.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007176:	4b4f      	ldr	r3, [pc, #316]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d10e      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007184:	4b4d      	ldr	r3, [pc, #308]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007186:	61fb      	str	r3, [r7, #28]
          break;
 8007188:	e00b      	b.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800718a:	bf00      	nop
 800718c:	f000 bce2 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007190:	bf00      	nop
 8007192:	f000 bcdf 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007196:	bf00      	nop
 8007198:	f000 bcdc 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800719c:	bf00      	nop
 800719e:	f000 bcd9 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80071a2:	bf00      	nop
        break;
 80071a4:	f000 bcd6 	b.w	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80071a8:	4b42      	ldr	r3, [pc, #264]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b6:	d13d      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80071b8:	4b3e      	ldr	r3, [pc, #248]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c4:	f040 84c5 	bne.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80071c8:	4b3a      	ldr	r3, [pc, #232]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d4:	f040 84bd 	bne.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80071d8:	4b36      	ldr	r3, [pc, #216]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	fb03 f202 	mul.w	r2, r3, r2
 80071ec:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	3301      	adds	r3, #1
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80071fe:	4b2d      	ldr	r3, [pc, #180]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	0edb      	lsrs	r3, r3, #27
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007210:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800721c:	2311      	movs	r3, #17
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e001      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8007222:	2307      	movs	r3, #7
 8007224:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	61fb      	str	r3, [r7, #28]
      break;
 8007230:	f000 bc8f 	b.w	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007234:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007246:	d016      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800724e:	f200 809b 	bhi.w	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007258:	d032      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007260:	f200 8092 	bhi.w	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8084 	beq.w	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007272:	d052      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007274:	e088      	b.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007276:	4b0f      	ldr	r3, [pc, #60]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b02      	cmp	r3, #2
 8007280:	f040 8084 	bne.w	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007284:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	e005      	b.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800729e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	4a03      	ldr	r2, [pc, #12]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80072aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ae:	61fb      	str	r3, [r7, #28]
          break;
 80072b0:	e06c      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80072b2:	bf00      	nop
 80072b4:	40021000 	.word	0x40021000
 80072b8:	0800d7dc 	.word	0x0800d7dc
 80072bc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80072c0:	4ba5      	ldr	r3, [pc, #660]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072cc:	d160      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80072ce:	4ba2      	ldr	r3, [pc, #648]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072da:	d159      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80072dc:	4b9e      	ldr	r3, [pc, #632]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	fb03 f202 	mul.w	r2, r3, r2
 80072f0:	4b99      	ldr	r3, [pc, #612]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	091b      	lsrs	r3, r3, #4
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	3301      	adds	r3, #1
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007302:	4b95      	ldr	r3, [pc, #596]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	0d5b      	lsrs	r3, r3, #21
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	3301      	adds	r3, #1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	fbb2 f3f3 	udiv	r3, r2, r3
 8007316:	61fb      	str	r3, [r7, #28]
          break;
 8007318:	e03a      	b.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800731a:	4b8f      	ldr	r3, [pc, #572]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007326:	d135      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007328:	4b8b      	ldr	r3, [pc, #556]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007334:	d12e      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007336:	4b88      	ldr	r3, [pc, #544]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007340:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	fb03 f202 	mul.w	r2, r3, r2
 800734a:	4b83      	ldr	r3, [pc, #524]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	3301      	adds	r3, #1
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800735c:	4b7e      	ldr	r3, [pc, #504]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	0d5b      	lsrs	r3, r3, #21
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	61fb      	str	r3, [r7, #28]
          break;
 8007372:	e00f      	b.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007374:	4b78      	ldr	r3, [pc, #480]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	d10a      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007382:	4b76      	ldr	r3, [pc, #472]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007384:	61fb      	str	r3, [r7, #28]
          break;
 8007386:	e007      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007388:	bf00      	nop
 800738a:	e3e2      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800738c:	bf00      	nop
 800738e:	e3e0      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007390:	bf00      	nop
 8007392:	e3de      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007394:	bf00      	nop
 8007396:	e3dc      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007398:	bf00      	nop
      break;
 800739a:	e3da      	b.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800739c:	4b6e      	ldr	r3, [pc, #440]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d827      	bhi.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80073ae:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073d5 	.word	0x080073d5
 80073c0:	080073e9 	.word	0x080073e9
          frequency = HAL_RCC_GetPCLK2Freq();
 80073c4:	f7ff f8a8 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 80073c8:	61f8      	str	r0, [r7, #28]
          break;
 80073ca:	e01d      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80073cc:	f7fe fff6 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80073d0:	61f8      	str	r0, [r7, #28]
          break;
 80073d2:	e019      	b.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d4:	4b60      	ldr	r3, [pc, #384]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e0:	d10f      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80073e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073e4:	61fb      	str	r3, [r7, #28]
          break;
 80073e6:	e00c      	b.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d107      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073fa:	61fb      	str	r3, [r7, #28]
          break;
 80073fc:	e003      	b.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80073fe:	bf00      	nop
 8007400:	e3a8      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007402:	bf00      	nop
 8007404:	e3a6      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007406:	bf00      	nop
        break;
 8007408:	e3a4      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800740a:	4b53      	ldr	r3, [pc, #332]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b0c      	cmp	r3, #12
 800741a:	d83a      	bhi.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800741c:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007459 	.word	0x08007459
 8007428:	08007493 	.word	0x08007493
 800742c:	08007493 	.word	0x08007493
 8007430:	08007493 	.word	0x08007493
 8007434:	08007461 	.word	0x08007461
 8007438:	08007493 	.word	0x08007493
 800743c:	08007493 	.word	0x08007493
 8007440:	08007493 	.word	0x08007493
 8007444:	08007469 	.word	0x08007469
 8007448:	08007493 	.word	0x08007493
 800744c:	08007493 	.word	0x08007493
 8007450:	08007493 	.word	0x08007493
 8007454:	0800747d 	.word	0x0800747d
          frequency = HAL_RCC_GetPCLK1Freq();
 8007458:	f7ff f848 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800745c:	61f8      	str	r0, [r7, #28]
          break;
 800745e:	e01d      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8007460:	f7fe ffac 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007464:	61f8      	str	r0, [r7, #28]
          break;
 8007466:	e019      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007468:	4b3b      	ldr	r3, [pc, #236]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007474:	d10f      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007476:	4b3a      	ldr	r3, [pc, #232]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007478:	61fb      	str	r3, [r7, #28]
          break;
 800747a:	e00c      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800747c:	4b36      	ldr	r3, [pc, #216]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d107      	bne.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800748e:	61fb      	str	r3, [r7, #28]
          break;
 8007490:	e003      	b.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007492:	bf00      	nop
 8007494:	e35e      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007496:	bf00      	nop
 8007498:	e35c      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800749a:	bf00      	nop
        break;
 800749c:	e35a      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800749e:	4b2e      	ldr	r3, [pc, #184]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b30      	cmp	r3, #48	@ 0x30
 80074ae:	d021      	beq.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b30      	cmp	r3, #48	@ 0x30
 80074b4:	d829      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d011      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d823      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d004      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80074ce:	e01c      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7ff f80c 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 80074d4:	61f8      	str	r0, [r7, #28]
          break;
 80074d6:	e01d      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80074d8:	f7fe ff70 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80074dc:	61f8      	str	r0, [r7, #28]
          break;
 80074de:	e019      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ec:	d10f      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80074ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80074f0:	61fb      	str	r3, [r7, #28]
          break;
 80074f2:	e00c      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074f4:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d107      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007506:	61fb      	str	r3, [r7, #28]
          break;
 8007508:	e003      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800750a:	bf00      	nop
 800750c:	e322      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800750e:	bf00      	nop
 8007510:	e320      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007512:	bf00      	nop
        break;
 8007514:	e31e      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007516:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2bc0      	cmp	r3, #192	@ 0xc0
 8007526:	d027      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2bc0      	cmp	r3, #192	@ 0xc0
 800752c:	d82f      	bhi.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b80      	cmp	r3, #128	@ 0x80
 8007532:	d017      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d829      	bhi.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d004      	beq.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8007546:	e022      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007548:	f7fe ffd0 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800754c:	61f8      	str	r0, [r7, #28]
          break;
 800754e:	e023      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8007550:	f7fe ff34 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007554:	61f8      	str	r0, [r7, #28]
          break;
 8007556:	e01f      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8007558:	40021000 	.word	0x40021000
 800755c:	02dc6c00 	.word	0x02dc6c00
 8007560:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007564:	4b9b      	ldr	r3, [pc, #620]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007570:	d10f      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007572:	4b99      	ldr	r3, [pc, #612]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007574:	61fb      	str	r3, [r7, #28]
          break;
 8007576:	e00c      	b.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007578:	4b96      	ldr	r3, [pc, #600]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d107      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800758a:	61fb      	str	r3, [r7, #28]
          break;
 800758c:	e003      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800758e:	bf00      	nop
 8007590:	e2e0      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007592:	bf00      	nop
 8007594:	e2de      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007596:	bf00      	nop
        break;
 8007598:	e2dc      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800759a:	4b8e      	ldr	r3, [pc, #568]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ac:	d025      	beq.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075b4:	d82c      	bhi.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075bc:	d013      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c4:	d824      	bhi.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d2:	d004      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80075d4:	e01c      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80075d6:	f7fe ff89 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 80075da:	61f8      	str	r0, [r7, #28]
          break;
 80075dc:	e01d      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80075de:	f7fe feed 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80075e2:	61f8      	str	r0, [r7, #28]
          break;
 80075e4:	e019      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075e6:	4b7b      	ldr	r3, [pc, #492]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f2:	d10f      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80075f4:	4b78      	ldr	r3, [pc, #480]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80075f6:	61fb      	str	r3, [r7, #28]
          break;
 80075f8:	e00c      	b.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075fa:	4b76      	ldr	r3, [pc, #472]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80075fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b02      	cmp	r3, #2
 8007606:	d107      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800760c:	61fb      	str	r3, [r7, #28]
          break;
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007610:	bf00      	nop
 8007612:	e29f      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007614:	bf00      	nop
 8007616:	e29d      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007618:	bf00      	nop
        break;
 800761a:	e29b      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800761c:	4b6d      	ldr	r3, [pc, #436]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007622:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800762e:	d025      	beq.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007636:	d82c      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763e:	d013      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007646:	d824      	bhi.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007656:	e01c      	b.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007658:	f7fe ff48 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800765c:	61f8      	str	r0, [r7, #28]
          break;
 800765e:	e01d      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007660:	f7fe feac 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007664:	61f8      	str	r0, [r7, #28]
          break;
 8007666:	e019      	b.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007668:	4b5a      	ldr	r3, [pc, #360]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007674:	d10f      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007676:	4b58      	ldr	r3, [pc, #352]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007678:	61fb      	str	r3, [r7, #28]
          break;
 800767a:	e00c      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800767c:	4b55      	ldr	r3, [pc, #340]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d107      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768e:	61fb      	str	r3, [r7, #28]
          break;
 8007690:	e003      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007692:	bf00      	nop
 8007694:	e25e      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007696:	bf00      	nop
 8007698:	e25c      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800769a:	bf00      	nop
        break;
 800769c:	e25a      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800769e:	4b4d      	ldr	r3, [pc, #308]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076b0:	d007      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076b8:	d12f      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fe fe7f 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80076be:	61f8      	str	r0, [r7, #28]
          break;
 80076c0:	e02e      	b.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80076c2:	4b44      	ldr	r3, [pc, #272]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ce:	d126      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80076d0:	4b40      	ldr	r3, [pc, #256]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d020      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80076dc:	4b3d      	ldr	r3, [pc, #244]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	fb03 f202 	mul.w	r2, r3, r2
 80076f0:	4b38      	ldr	r3, [pc, #224]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	3301      	adds	r3, #1
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007702:	4b34      	ldr	r3, [pc, #208]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	0e5b      	lsrs	r3, r3, #25
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	3301      	adds	r3, #1
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	61fb      	str	r3, [r7, #28]
          break;
 8007718:	e001      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800771a:	bf00      	nop
 800771c:	e21a      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800771e:	bf00      	nop
        break;
 8007720:	e218      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007722:	4b2c      	ldr	r3, [pc, #176]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fe fef0 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 8007738:	61f8      	str	r0, [r7, #28]
        break;
 800773a:	e20b      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800773c:	f7fe fe3e 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007740:	61f8      	str	r0, [r7, #28]
        break;
 8007742:	e207      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007744:	4b23      	ldr	r3, [pc, #140]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800774a:	f003 0318 	and.w	r3, r3, #24
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b10      	cmp	r3, #16
 8007754:	d010      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b10      	cmp	r3, #16
 800775a:	d834      	bhi.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b08      	cmp	r3, #8
 8007766:	d024      	beq.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007768:	e02d      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800776a:	69b9      	ldr	r1, [r7, #24]
 800776c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007770:	f000 fbe2 	bl	8007f38 <RCCEx_GetSAIxPeriphCLKFreq>
 8007774:	61f8      	str	r0, [r7, #28]
          break;
 8007776:	e02b      	b.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007778:	4b16      	ldr	r3, [pc, #88]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b02      	cmp	r3, #2
 8007782:	d122      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007784:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007790:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	091b      	lsrs	r3, r3, #4
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	e005      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800779c:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800779e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80077aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ae:	61fb      	str	r3, [r7, #28]
          break;
 80077b0:	e00b      	b.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077b2:	4b08      	ldr	r3, [pc, #32]	@ (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077be:	d106      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80077c2:	61fb      	str	r3, [r7, #28]
          break;
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80077c6:	bf00      	nop
 80077c8:	e1c4      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077ca:	bf00      	nop
 80077cc:	e1c2      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80077ce:	bf00      	nop
        break;
 80077d0:	e1c0      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000
 80077d8:	00f42400 	.word	0x00f42400
 80077dc:	0800d7dc 	.word	0x0800d7dc
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80077e0:	4b96      	ldr	r3, [pc, #600]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f2:	d013      	beq.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077fa:	d819      	bhi.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d004      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800780a:	e011      	b.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fe fe6e 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007810:	61f8      	str	r0, [r7, #28]
          break;
 8007812:	e010      	b.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007814:	f7fe fdd2 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007818:	61f8      	str	r0, [r7, #28]
          break;
 800781a:	e00c      	b.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800781c:	4b87      	ldr	r3, [pc, #540]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d104      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800782a:	4b85      	ldr	r3, [pc, #532]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800782c:	61fb      	str	r3, [r7, #28]
          break;
 800782e:	e001      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007830:	bf00      	nop
 8007832:	e18f      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007834:	bf00      	nop
        break;
 8007836:	e18d      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007838:	4b80      	ldr	r3, [pc, #512]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800783a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800784a:	d013      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007852:	d819      	bhi.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007860:	d004      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007862:	e011      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007864:	f7fe fe42 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007868:	61f8      	str	r0, [r7, #28]
          break;
 800786a:	e010      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800786c:	f7fe fda6 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007870:	61f8      	str	r0, [r7, #28]
          break;
 8007872:	e00c      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007874:	4b71      	ldr	r3, [pc, #452]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007880:	d104      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007882:	4b6f      	ldr	r3, [pc, #444]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007884:	61fb      	str	r3, [r7, #28]
          break;
 8007886:	e001      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007888:	bf00      	nop
 800788a:	e163      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800788c:	bf00      	nop
        break;
 800788e:	e161      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007890:	4b6a      	ldr	r3, [pc, #424]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007896:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078a2:	d013      	beq.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078aa:	d819      	bhi.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b8:	d004      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80078ba:	e011      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80078bc:	f7fe fe16 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 80078c0:	61f8      	str	r0, [r7, #28]
          break;
 80078c2:	e010      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80078c4:	f7fe fd7a 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80078c8:	61f8      	str	r0, [r7, #28]
          break;
 80078ca:	e00c      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078cc:	4b5b      	ldr	r3, [pc, #364]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d8:	d104      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80078da:	4b59      	ldr	r3, [pc, #356]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80078dc:	61fb      	str	r3, [r7, #28]
          break;
 80078de:	e001      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80078e0:	bf00      	nop
 80078e2:	e137      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80078e4:	bf00      	nop
        break;
 80078e6:	e135      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80078e8:	4b54      	ldr	r3, [pc, #336]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80078ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d011      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d818      	bhi.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d004      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800790c:	e011      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800790e:	f7fe fded 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007912:	61f8      	str	r0, [r7, #28]
          break;
 8007914:	e010      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007916:	f7fe fd51 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800791a:	61f8      	str	r0, [r7, #28]
          break;
 800791c:	e00c      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800791e:	4b47      	ldr	r3, [pc, #284]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800792a:	d104      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800792c:	4b44      	ldr	r3, [pc, #272]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800792e:	61fb      	str	r3, [r7, #28]
          break;
 8007930:	e001      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007932:	bf00      	nop
 8007934:	e10e      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007936:	bf00      	nop
        break;
 8007938:	e10c      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800793a:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800793c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007940:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800794c:	d02c      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007954:	d833      	bhi.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800795c:	d01a      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007964:	d82b      	bhi.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007972:	d004      	beq.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007974:	e023      	b.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007976:	f7fe fdb9 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800797a:	61f8      	str	r0, [r7, #28]
          break;
 800797c:	e026      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800797e:	4b2f      	ldr	r3, [pc, #188]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b02      	cmp	r3, #2
 800798a:	d11a      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800798c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007990:	61fb      	str	r3, [r7, #28]
          break;
 8007992:	e016      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007994:	4b29      	ldr	r3, [pc, #164]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a0:	d111      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80079a2:	4b27      	ldr	r3, [pc, #156]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80079a4:	61fb      	str	r3, [r7, #28]
          break;
 80079a6:	e00e      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80079a8:	4b24      	ldr	r3, [pc, #144]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d109      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ba:	61fb      	str	r3, [r7, #28]
          break;
 80079bc:	e005      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80079be:	bf00      	nop
 80079c0:	e0c8      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079c2:	bf00      	nop
 80079c4:	e0c6      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079c6:	bf00      	nop
 80079c8:	e0c4      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079ca:	bf00      	nop
        break;
 80079cc:	e0c2      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80079ce:	4b1b      	ldr	r3, [pc, #108]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079e0:	d030      	beq.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079e8:	d837      	bhi.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079f0:	d01a      	beq.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079f8:	d82f      	bhi.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a06:	d004      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007a08:	e027      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a0a:	f7fe fd6f 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007a0e:	61f8      	str	r0, [r7, #28]
          break;
 8007a10:	e02a      	b.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007a12:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d11e      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007a20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a24:	61fb      	str	r3, [r7, #28]
          break;
 8007a26:	e01a      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a28:	4b04      	ldr	r3, [pc, #16]	@ (8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a34:	d115      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007a36:	4b02      	ldr	r3, [pc, #8]	@ (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007a38:	61fb      	str	r3, [r7, #28]
          break;
 8007a3a:	e012      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a44:	4b46      	ldr	r3, [pc, #280]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d109      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a56:	61fb      	str	r3, [r7, #28]
          break;
 8007a58:	e005      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007a5a:	bf00      	nop
 8007a5c:	e07a      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a5e:	bf00      	nop
 8007a60:	e078      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a62:	bf00      	nop
 8007a64:	e076      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a66:	bf00      	nop
        break;
 8007a68:	e074      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a7c:	d02c      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a84:	d855      	bhi.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a92:	d004      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007a94:	e04d      	b.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a96:	f7fe fc91 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8007a9a:	61f8      	str	r0, [r7, #28]
          break;
 8007a9c:	e04e      	b.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007a9e:	4b30      	ldr	r3, [pc, #192]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d145      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	091b      	lsrs	r3, r3, #4
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	e005      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007ac2:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	4a25      	ldr	r2, [pc, #148]	@ (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad4:	61fb      	str	r3, [r7, #28]
          break;
 8007ad6:	e02e      	b.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007ad8:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ae4:	d129      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af2:	d122      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007af4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007afe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	fb03 f202 	mul.w	r2, r3, r2
 8007b08:	4b15      	ldr	r3, [pc, #84]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	3301      	adds	r3, #1
 8007b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b18:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007b1a:	4b11      	ldr	r3, [pc, #68]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	0d5b      	lsrs	r3, r3, #21
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	3301      	adds	r3, #1
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	61fb      	str	r3, [r7, #28]
          break;
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007b32:	bf00      	nop
 8007b34:	e00e      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b36:	bf00      	nop
 8007b38:	e00c      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b3a:	bf00      	nop
        break;
 8007b3c:	e00a      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e008      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b42:	bf00      	nop
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b46:	bf00      	nop
 8007b48:	e004      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007b52:	bf00      	nop
    }
  }

  return(frequency);
 8007b54:	69fb      	ldr	r3, [r7, #28]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	40021000 	.word	0x40021000
 8007b64:	0800d7dc 	.word	0x0800d7dc

08007b68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b76:	4b72      	ldr	r3, [pc, #456]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b82:	4b6f      	ldr	r3, [pc, #444]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0203 	and.w	r2, r3, #3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d103      	bne.n	8007b9a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
       ||
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d142      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	e03f      	b.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d018      	beq.n	8007bda <RCCEx_PLLSAI1_Config+0x72>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d825      	bhi.n	8007bf8 <RCCEx_PLLSAI1_Config+0x90>
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d002      	beq.n	8007bb6 <RCCEx_PLLSAI1_Config+0x4e>
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d009      	beq.n	8007bc8 <RCCEx_PLLSAI1_Config+0x60>
 8007bb4:	e020      	b.n	8007bf8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bb6:	4b62      	ldr	r3, [pc, #392]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11d      	bne.n	8007bfe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc6:	e01a      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d116      	bne.n	8007c02 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bd8:	e013      	b.n	8007c02 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bda:	4b59      	ldr	r3, [pc, #356]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10f      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007be6:	4b56      	ldr	r3, [pc, #344]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bf6:	e006      	b.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	e004      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e002      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4949      	ldr	r1, [pc, #292]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 8086 	bne.w	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c28:	4b45      	ldr	r3, [pc, #276]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a44      	ldr	r2, [pc, #272]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c34:	f7fb ff56 	bl	8003ae4 <HAL_GetTick>
 8007c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c3a:	e009      	b.n	8007c50 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c3c:	f7fb ff52 	bl	8003ae4 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d902      	bls.n	8007c50 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007c4e:	e005      	b.n	8007c5c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c50:	4b3b      	ldr	r3, [pc, #236]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1ef      	bne.n	8007c3c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d168      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d113      	bne.n	8007c90 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c68:	4b35      	ldr	r3, [pc, #212]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	4b35      	ldr	r3, [pc, #212]	@ (8007d44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6892      	ldr	r2, [r2, #8]
 8007c74:	0211      	lsls	r1, r2, #8
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68d2      	ldr	r2, [r2, #12]
 8007c7a:	06d2      	lsls	r2, r2, #27
 8007c7c:	4311      	orrs	r1, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6852      	ldr	r2, [r2, #4]
 8007c82:	3a01      	subs	r2, #1
 8007c84:	0112      	lsls	r2, r2, #4
 8007c86:	430a      	orrs	r2, r1
 8007c88:	492d      	ldr	r1, [pc, #180]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	610b      	str	r3, [r1, #16]
 8007c8e:	e02d      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d115      	bne.n	8007cc2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c96:	4b2a      	ldr	r3, [pc, #168]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8007d48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6892      	ldr	r2, [r2, #8]
 8007ca2:	0211      	lsls	r1, r2, #8
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6912      	ldr	r2, [r2, #16]
 8007ca8:	0852      	lsrs	r2, r2, #1
 8007caa:	3a01      	subs	r2, #1
 8007cac:	0552      	lsls	r2, r2, #21
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6852      	ldr	r2, [r2, #4]
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	0112      	lsls	r2, r2, #4
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	4921      	ldr	r1, [pc, #132]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	610b      	str	r3, [r1, #16]
 8007cc0:	e014      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	4b21      	ldr	r3, [pc, #132]	@ (8007d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6892      	ldr	r2, [r2, #8]
 8007cce:	0211      	lsls	r1, r2, #8
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6952      	ldr	r2, [r2, #20]
 8007cd4:	0852      	lsrs	r2, r2, #1
 8007cd6:	3a01      	subs	r2, #1
 8007cd8:	0652      	lsls	r2, r2, #25
 8007cda:	4311      	orrs	r1, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6852      	ldr	r2, [r2, #4]
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	0112      	lsls	r2, r2, #4
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	4916      	ldr	r1, [pc, #88]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cec:	4b14      	ldr	r3, [pc, #80]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fb fef4 	bl	8003ae4 <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cfe:	e009      	b.n	8007d14 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d00:	f7fb fef0 	bl	8003ae4 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d902      	bls.n	8007d14 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	73fb      	strb	r3, [r7, #15]
          break;
 8007d12:	e005      	b.n	8007d20 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d14:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ef      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	4904      	ldr	r1, [pc, #16]	@ (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	07ff800f 	.word	0x07ff800f
 8007d48:	ff9f800f 	.word	0xff9f800f
 8007d4c:	f9ff800f 	.word	0xf9ff800f

08007d50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d5e:	4b72      	ldr	r3, [pc, #456]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00e      	beq.n	8007d88 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0203 	and.w	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d103      	bne.n	8007d82 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d142      	bne.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e03f      	b.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d018      	beq.n	8007dc2 <RCCEx_PLLSAI2_Config+0x72>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d825      	bhi.n	8007de0 <RCCEx_PLLSAI2_Config+0x90>
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d002      	beq.n	8007d9e <RCCEx_PLLSAI2_Config+0x4e>
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d009      	beq.n	8007db0 <RCCEx_PLLSAI2_Config+0x60>
 8007d9c:	e020      	b.n	8007de0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d9e:	4b62      	ldr	r3, [pc, #392]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11d      	bne.n	8007de6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dae:	e01a      	b.n	8007de6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007db0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d116      	bne.n	8007dea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dc0:	e013      	b.n	8007dea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dc2:	4b59      	ldr	r3, [pc, #356]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dce:	4b56      	ldr	r3, [pc, #344]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dde:	e006      	b.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
      break;
 8007de4:	e004      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007df6:	4b4c      	ldr	r3, [pc, #304]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f023 0203 	bic.w	r2, r3, #3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4949      	ldr	r1, [pc, #292]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f040 8086 	bne.w	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e10:	4b45      	ldr	r3, [pc, #276]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a44      	ldr	r2, [pc, #272]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1c:	f7fb fe62 	bl	8003ae4 <HAL_GetTick>
 8007e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e22:	e009      	b.n	8007e38 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e24:	f7fb fe5e 	bl	8003ae4 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d902      	bls.n	8007e38 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
        break;
 8007e36:	e005      	b.n	8007e44 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e38:	4b3b      	ldr	r3, [pc, #236]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1ef      	bne.n	8007e24 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d168      	bne.n	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d113      	bne.n	8007e78 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e50:	4b35      	ldr	r3, [pc, #212]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	4b35      	ldr	r3, [pc, #212]	@ (8007f2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6892      	ldr	r2, [r2, #8]
 8007e5c:	0211      	lsls	r1, r2, #8
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68d2      	ldr	r2, [r2, #12]
 8007e62:	06d2      	lsls	r2, r2, #27
 8007e64:	4311      	orrs	r1, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	492d      	ldr	r1, [pc, #180]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	614b      	str	r3, [r1, #20]
 8007e76:	e02d      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d115      	bne.n	8007eaa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e80:	695a      	ldr	r2, [r3, #20]
 8007e82:	4b2b      	ldr	r3, [pc, #172]	@ (8007f30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6892      	ldr	r2, [r2, #8]
 8007e8a:	0211      	lsls	r1, r2, #8
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6912      	ldr	r2, [r2, #16]
 8007e90:	0852      	lsrs	r2, r2, #1
 8007e92:	3a01      	subs	r2, #1
 8007e94:	0552      	lsls	r2, r2, #21
 8007e96:	4311      	orrs	r1, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6852      	ldr	r2, [r2, #4]
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	0112      	lsls	r2, r2, #4
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	4921      	ldr	r1, [pc, #132]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	614b      	str	r3, [r1, #20]
 8007ea8:	e014      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eac:	695a      	ldr	r2, [r3, #20]
 8007eae:	4b21      	ldr	r3, [pc, #132]	@ (8007f34 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6892      	ldr	r2, [r2, #8]
 8007eb6:	0211      	lsls	r1, r2, #8
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6952      	ldr	r2, [r2, #20]
 8007ebc:	0852      	lsrs	r2, r2, #1
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	0652      	lsls	r2, r2, #25
 8007ec2:	4311      	orrs	r1, r2
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6852      	ldr	r2, [r2, #4]
 8007ec8:	3a01      	subs	r2, #1
 8007eca:	0112      	lsls	r2, r2, #4
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	4916      	ldr	r1, [pc, #88]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ed4:	4b14      	ldr	r3, [pc, #80]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a13      	ldr	r2, [pc, #76]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee0:	f7fb fe00 	bl	8003ae4 <HAL_GetTick>
 8007ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ee6:	e009      	b.n	8007efc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ee8:	f7fb fdfc 	bl	8003ae4 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d902      	bls.n	8007efc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8007efa:	e005      	b.n	8007f08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0ef      	beq.n	8007ee8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007f0e:	4b06      	ldr	r3, [pc, #24]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	4904      	ldr	r1, [pc, #16]	@ (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	07ff800f 	.word	0x07ff800f
 8007f30:	ff9f800f 	.word	0xff9f800f
 8007f34:	f9ff800f 	.word	0xf9ff800f

08007f38 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	@ 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f54:	d10b      	bne.n	8007f6e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007f56:	4b7e      	ldr	r3, [pc, #504]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f5c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007f60:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b60      	cmp	r3, #96	@ 0x60
 8007f66:	d112      	bne.n	8007f8e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f68:	4b7a      	ldr	r3, [pc, #488]	@ (8008154 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e00f      	b.n	8007f8e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f74:	d10b      	bne.n	8007f8e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f76:	4b76      	ldr	r3, [pc, #472]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f80:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f88:	d101      	bne.n	8007f8e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007f8a:	4b72      	ldr	r3, [pc, #456]	@ (8008154 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007f8c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 80d6 	bne.w	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b40      	cmp	r3, #64	@ 0x40
 8007f9e:	d003      	beq.n	8007fa8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa6:	d13b      	bne.n	8008020 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007fa8:	4b69      	ldr	r3, [pc, #420]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fb4:	f040 80c4 	bne.w	8008140 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007fb8:	4b65      	ldr	r3, [pc, #404]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80bd 	beq.w	8008140 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007fc6:	4b62      	ldr	r3, [pc, #392]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	091b      	lsrs	r3, r3, #4
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007fda:	4b5d      	ldr	r3, [pc, #372]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	0edb      	lsrs	r3, r3, #27
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007ff8:	4b55      	ldr	r3, [pc, #340]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8008004:	2311      	movs	r3, #17
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e001      	b.n	800800e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800800a:	2307      	movs	r3, #7
 800800c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	fb03 f202 	mul.w	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800801e:	e08f      	b.n	8008140 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d13a      	bne.n	800809c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008026:	4b4a      	ldr	r3, [pc, #296]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800802e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008032:	f040 8086 	bne.w	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008036:	4b46      	ldr	r3, [pc, #280]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d07f      	beq.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008042:	4b43      	ldr	r3, [pc, #268]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	091b      	lsrs	r3, r3, #4
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	3301      	adds	r3, #1
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	fbb2 f3f3 	udiv	r3, r2, r3
 8008054:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008056:	4b3e      	ldr	r3, [pc, #248]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008060:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008062:	4b3b      	ldr	r3, [pc, #236]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	0edb      	lsrs	r3, r3, #27
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008074:	4b36      	ldr	r3, [pc, #216]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008080:	2311      	movs	r3, #17
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e001      	b.n	800808a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008086:	2307      	movs	r3, #7
 8008088:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	fb03 f202 	mul.w	r2, r3, r2
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	fbb2 f3f3 	udiv	r3, r2, r3
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e052      	b.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b80      	cmp	r3, #128	@ 0x80
 80080a0:	d003      	beq.n	80080aa <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080a8:	d109      	bne.n	80080be <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080aa:	4b29      	ldr	r3, [pc, #164]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b6:	d144      	bne.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80080b8:	4b27      	ldr	r3, [pc, #156]	@ (8008158 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80080ba:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080bc:	e041      	b.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d003      	beq.n	80080cc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ca:	d13a      	bne.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80080cc:	4b20      	ldr	r3, [pc, #128]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080d8:	d133      	bne.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80080da:	4b1d      	ldr	r3, [pc, #116]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d02d      	beq.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80080e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	3301      	adds	r3, #1
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80080fa:	4b15      	ldr	r3, [pc, #84]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008104:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008106:	4b12      	ldr	r3, [pc, #72]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	0edb      	lsrs	r3, r3, #27
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008118:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008124:	2311      	movs	r3, #17
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e001      	b.n	800812e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800812a:	2307      	movs	r3, #7
 800812c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	fb03 f202 	mul.w	r2, r3, r2
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	fbb2 f3f3 	udiv	r3, r2, r3
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	e000      	b.n	8008142 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008140:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008142:	69fb      	ldr	r3, [r7, #28]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3724      	adds	r7, #36	@ 0x24
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	40021000 	.word	0x40021000
 8008154:	001fff68 	.word	0x001fff68
 8008158:	00f42400 	.word	0x00f42400

0800815c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d904      	bls.n	800817a <HAL_SAI_InitProtocol+0x1e>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3b03      	subs	r3, #3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d812      	bhi.n	800819e <HAL_SAI_InitProtocol+0x42>
 8008178:	e008      	b.n	800818c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f9fb 	bl	800857c <SAI_InitI2S>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]
      break;
 800818a:	e00b      	b.n	80081a4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 faa4 	bl	80086e0 <SAI_InitPCM>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]
      break;
 800819c:	e002      	b.n	80081a4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	bf00      	nop
  }

  if (status == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d104      	bne.n	80081b4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f808 	bl	80081c0 <HAL_SAI_Init>
 80081b0:	4603      	mov	r3, r0
 80081b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	@ 0x28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e1c7      	b.n	8008562 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d10e      	bne.n	80081fa <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a81      	ldr	r2, [pc, #516]	@ (80083e8 <HAL_SAI_Init+0x228>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d107      	bne.n	80081f6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d103      	bne.n	80081f6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e1b3      	b.n	8008562 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fb fb28 	bl	8003864 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fae5 	bl	80087e4 <SAI_Disable>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e19e      	b.n	8008562 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d00c      	beq.n	800824e <HAL_SAI_Init+0x8e>
 8008234:	2b02      	cmp	r3, #2
 8008236:	d80d      	bhi.n	8008254 <HAL_SAI_Init+0x94>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_SAI_Init+0x82>
 800823c:	2b01      	cmp	r3, #1
 800823e:	d003      	beq.n	8008248 <HAL_SAI_Init+0x88>
 8008240:	e008      	b.n	8008254 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008246:	e008      	b.n	800825a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008248:	2310      	movs	r3, #16
 800824a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800824c:	e005      	b.n	800825a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800824e:	2320      	movs	r3, #32
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008252:	e002      	b.n	800825a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008258:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b03      	cmp	r3, #3
 8008260:	d81d      	bhi.n	800829e <HAL_SAI_Init+0xde>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <HAL_SAI_Init+0xa8>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008279 	.word	0x08008279
 800826c:	0800827f 	.word	0x0800827f
 8008270:	08008287 	.word	0x08008287
 8008274:	0800828f 	.word	0x0800828f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	61fb      	str	r3, [r7, #28]
      break;
 800827c:	e012      	b.n	80082a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800827e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008282:	61fb      	str	r3, [r7, #28]
      break;
 8008284:	e00e      	b.n	80082a4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800828a:	61fb      	str	r3, [r7, #28]
      break;
 800828c:	e00a      	b.n	80082a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800828e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008292:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800829c:	e002      	b.n	80082a4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	61fb      	str	r3, [r7, #28]
      break;
 80082a2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a4f      	ldr	r2, [pc, #316]	@ (80083e8 <HAL_SAI_Init+0x228>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <HAL_SAI_Init+0xf8>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a4e      	ldr	r2, [pc, #312]	@ (80083ec <HAL_SAI_Init+0x22c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d103      	bne.n	80082c0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80082b8:	4a4d      	ldr	r2, [pc, #308]	@ (80083f0 <HAL_SAI_Init+0x230>)
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e002      	b.n	80082c6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80082c0:	4a4c      	ldr	r2, [pc, #304]	@ (80083f4 <HAL_SAI_Init+0x234>)
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d073      	beq.n	80083b6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a45      	ldr	r2, [pc, #276]	@ (80083e8 <HAL_SAI_Init+0x228>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_SAI_Init+0x122>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a43      	ldr	r2, [pc, #268]	@ (80083ec <HAL_SAI_Init+0x22c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d105      	bne.n	80082ee <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80082e2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80082e6:	f7fe fd1d 	bl	8006d24 <HAL_RCCEx_GetPeriphCLKFreq>
 80082ea:	61b8      	str	r0, [r7, #24]
 80082ec:	e004      	b.n	80082f8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80082ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80082f2:	f7fe fd17 	bl	8006d24 <HAL_RCCEx_GetPeriphCLKFreq>
 80082f6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008300:	d120      	bne.n	8008344 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008306:	2b04      	cmp	r3, #4
 8008308:	d102      	bne.n	8008310 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800830a:	2340      	movs	r3, #64	@ 0x40
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	e00a      	b.n	8008326 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008314:	2b08      	cmp	r3, #8
 8008316:	d103      	bne.n	8008320 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	e002      	b.n	8008326 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008324:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4619      	mov	r1, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	fb02 f303 	mul.w	r3, r2, r3
 800833c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	e017      	b.n	8008374 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800834c:	d101      	bne.n	8008352 <HAL_SAI_Init+0x192>
 800834e:	2302      	movs	r3, #2
 8008350:	e000      	b.n	8008354 <HAL_SAI_Init+0x194>
 8008352:	2301      	movs	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4619      	mov	r1, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	fb02 f303 	mul.w	r3, r2, r3
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008372:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	4a20      	ldr	r2, [pc, #128]	@ (80083f8 <HAL_SAI_Init+0x238>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	08da      	lsrs	r2, r3, #3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008382:	6979      	ldr	r1, [r7, #20]
 8008384:	4b1c      	ldr	r3, [pc, #112]	@ (80083f8 <HAL_SAI_Init+0x238>)
 8008386:	fba3 2301 	umull	r2, r3, r3, r1
 800838a:	08da      	lsrs	r2, r3, #3
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	1aca      	subs	r2, r1, r3
 8008396:	2a08      	cmp	r2, #8
 8008398:	d904      	bls.n	80083a4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d104      	bne.n	80083b6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	085a      	lsrs	r2, r3, #1
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_SAI_Init+0x206>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d109      	bne.n	80083da <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_SAI_Init+0x212>
 80083ce:	2300      	movs	r3, #0
 80083d0:	e001      	b.n	80083d6 <HAL_SAI_Init+0x216>
 80083d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083d6:	623b      	str	r3, [r7, #32]
 80083d8:	e012      	b.n	8008400 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10c      	bne.n	80083fc <HAL_SAI_Init+0x23c>
 80083e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083e6:	e00a      	b.n	80083fe <HAL_SAI_Init+0x23e>
 80083e8:	40015404 	.word	0x40015404
 80083ec:	40015424 	.word	0x40015424
 80083f0:	40015400 	.word	0x40015400
 80083f4:	40015800 	.word	0x40015800
 80083f8:	cccccccd 	.word	0xcccccccd
 80083fc:	2300      	movs	r3, #0
 80083fe:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6819      	ldr	r1, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b58      	ldr	r3, [pc, #352]	@ (800856c <HAL_SAI_Init+0x3ac>)
 800840c:	400b      	ands	r3, r1
 800840e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6819      	ldr	r1, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008424:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842a:	431a      	orrs	r2, r3
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8008438:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008444:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	051b      	lsls	r3, r3, #20
 800844c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008452:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800846a:	f023 030f 	bic.w	r3, r3, #15
 800846e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6859      	ldr	r1, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6899      	ldr	r1, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b35      	ldr	r3, [pc, #212]	@ (8008570 <HAL_SAI_Init+0x3b0>)
 800849a:	400b      	ands	r3, r1
 800849c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6899      	ldr	r1, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084ae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 80084b4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 80084ba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c0:	3b01      	subs	r3, #1
 80084c2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80084c4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68d9      	ldr	r1, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80084dc:	400b      	ands	r3, r1
 80084de:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68d9      	ldr	r1, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ee:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80084f6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fc:	3b01      	subs	r3, #1
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a19      	ldr	r2, [pc, #100]	@ (8008574 <HAL_SAI_Init+0x3b4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d119      	bne.n	8008548 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008514:	4b18      	ldr	r3, [pc, #96]	@ (8008578 <HAL_SAI_Init+0x3b8>)
 8008516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008518:	4a17      	ldr	r2, [pc, #92]	@ (8008578 <HAL_SAI_Init+0x3b8>)
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008526:	2b01      	cmp	r3, #1
 8008528:	d10e      	bne.n	8008548 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008532:	3b01      	subs	r3, #1
 8008534:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008536:	4910      	ldr	r1, [pc, #64]	@ (8008578 <HAL_SAI_Init+0x3b8>)
 8008538:	4313      	orrs	r3, r2
 800853a:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800853c:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <HAL_SAI_Init+0x3b8>)
 800853e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008540:	4a0d      	ldr	r2, [pc, #52]	@ (8008578 <HAL_SAI_Init+0x3b8>)
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3728      	adds	r7, #40	@ 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	f805c010 	.word	0xf805c010
 8008570:	fff88000 	.word	0xfff88000
 8008574:	40015404 	.word	0x40015404
 8008578:	40015400 	.word	0x40015400

0800857c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <SAI_InitI2S+0x2e>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d103      	bne.n	80085b2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80085b0:	e002      	b.n	80085b8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80085be:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085c6:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e077      	b.n	80086d2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d107      	bne.n	80085f8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80085f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80085f6:	e006      	b.n	8008606 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80085fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b03      	cmp	r3, #3
 800860a:	d84f      	bhi.n	80086ac <SAI_InitI2S+0x130>
 800860c:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <SAI_InitI2S+0x98>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008625 	.word	0x08008625
 8008618:	08008647 	.word	0x08008647
 800861c:	08008669 	.word	0x08008669
 8008620:	0800868b 	.word	0x0800868b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2280      	movs	r2, #128	@ 0x80
 8008628:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	085b      	lsrs	r3, r3, #1
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	011a      	lsls	r2, r3, #4
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2240      	movs	r2, #64	@ 0x40
 8008642:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008644:	e035      	b.n	80086b2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2280      	movs	r2, #128	@ 0x80
 800864a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	085b      	lsrs	r3, r3, #1
 8008650:	019a      	lsls	r2, r3, #6
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2280      	movs	r2, #128	@ 0x80
 8008664:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008666:	e024      	b.n	80086b2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	22c0      	movs	r2, #192	@ 0xc0
 800866c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	019a      	lsls	r2, r3, #6
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	085b      	lsrs	r3, r3, #1
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2280      	movs	r2, #128	@ 0x80
 8008686:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8008688:	e013      	b.n	80086b2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	22e0      	movs	r2, #224	@ 0xe0
 800868e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	019a      	lsls	r2, r3, #6
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2280      	movs	r2, #128	@ 0x80
 80086a8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80086aa:	e002      	b.n	80086b2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
      break;
 80086b0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d10b      	bne.n	80086d0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d102      	bne.n	80086c4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2210      	movs	r2, #16
 80086c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d102      	bne.n	80086d0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2208      	movs	r2, #8
 80086ce:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop

080086e0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <SAI_InitPCM+0x2e>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d103      	bne.n	8008716 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008714:	e002      	b.n	800871c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008728:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008730:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008744:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d103      	bne.n	8008754 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	655a      	str	r2, [r3, #84]	@ 0x54
 8008752:	e002      	b.n	800875a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	220d      	movs	r2, #13
 8008758:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d837      	bhi.n	80087d0 <SAI_InitPCM+0xf0>
 8008760:	a201      	add	r2, pc, #4	@ (adr r2, 8008768 <SAI_InitPCM+0x88>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	08008779 	.word	0x08008779
 800876c:	0800878f 	.word	0x0800878f
 8008770:	080087a5 	.word	0x080087a5
 8008774:	080087bb 	.word	0x080087bb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2280      	movs	r2, #128	@ 0x80
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	011a      	lsls	r2, r3, #4
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2240      	movs	r2, #64	@ 0x40
 800878a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800878c:	e023      	b.n	80087d6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2280      	movs	r2, #128	@ 0x80
 8008792:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2280      	movs	r2, #128	@ 0x80
 80087a0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80087a2:	e018      	b.n	80087d6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	22c0      	movs	r2, #192	@ 0xc0
 80087a8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2280      	movs	r2, #128	@ 0x80
 80087b6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80087b8:	e00d      	b.n	80087d6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	22e0      	movs	r2, #224	@ 0xe0
 80087be:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2280      	movs	r2, #128	@ 0x80
 80087cc:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80087ce:	e002      	b.n	80087d6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	75fb      	strb	r3, [r7, #23]
      break;
 80087d4:	bf00      	nop
  }

  return status;
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80087ec:	4b18      	ldr	r3, [pc, #96]	@ (8008850 <SAI_Disable+0x6c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a18      	ldr	r2, [pc, #96]	@ (8008854 <SAI_Disable+0x70>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	0b1b      	lsrs	r3, r3, #12
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800880e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	72fb      	strb	r3, [r7, #11]
      break;
 800882a:	e009      	b.n	8008840 <SAI_Disable+0x5c>
    }
    count--;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3b01      	subs	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e7      	bne.n	8008810 <SAI_Disable+0x2c>

  return status;
 8008840:	7afb      	ldrb	r3, [r7, #11]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000004 	.word	0x20000004
 8008854:	95cbec1b 	.word	0x95cbec1b

08008858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e095      	b.n	8008996 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d108      	bne.n	8008884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800887a:	d009      	beq.n	8008890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	61da      	str	r2, [r3, #28]
 8008882:	e005      	b.n	8008890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fa fe66 	bl	800357c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088d0:	d902      	bls.n	80088d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	e002      	b.n	80088de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80088dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80088e6:	d007      	beq.n	80088f8 <HAL_SPI_Init+0xa0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088f0:	d002      	beq.n	80088f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893a:	ea42 0103 	orr.w	r1, r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008942:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	f003 0204 	and.w	r2, r3, #4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008974:	ea42 0103 	orr.w	r1, r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e049      	b.n	8008a44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fa fe1b 	bl	8003600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f000 fbe1 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d001      	beq.n	8008a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e04f      	b.n	8008b04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a23      	ldr	r2, [pc, #140]	@ (8008b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01d      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8e:	d018      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1f      	ldr	r2, [pc, #124]	@ (8008b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8008b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIM_Base_Start_IT+0x76>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a19      	ldr	r2, [pc, #100]	@ (8008b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d115      	bne.n	8008aee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	4b17      	ldr	r3, [pc, #92]	@ (8008b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b06      	cmp	r3, #6
 8008ad2:	d015      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0xb4>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ada:	d011      	beq.n	8008b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0201 	orr.w	r2, r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	e008      	b.n	8008b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0201 	orr.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e000      	b.n	8008b02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40000400 	.word	0x40000400
 8008b18:	40000800 	.word	0x40000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	40013400 	.word	0x40013400
 8008b24:	40014000 	.word	0x40014000
 8008b28:	00010007 	.word	0x00010007

08008b2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e049      	b.n	8008bd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fa fda8 	bl	80036a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f000 fb1a 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_TIM_PWM_Start+0x24>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	bf14      	ite	ne
 8008bf8:	2301      	movne	r3, #1
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e03c      	b.n	8008c7a <HAL_TIM_PWM_Start+0x9e>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d109      	bne.n	8008c1a <HAL_TIM_PWM_Start+0x3e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	bf14      	ite	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	2300      	moveq	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	e02f      	b.n	8008c7a <HAL_TIM_PWM_Start+0x9e>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d109      	bne.n	8008c34 <HAL_TIM_PWM_Start+0x58>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	bf14      	ite	ne
 8008c2c:	2301      	movne	r3, #1
 8008c2e:	2300      	moveq	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e022      	b.n	8008c7a <HAL_TIM_PWM_Start+0x9e>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b0c      	cmp	r3, #12
 8008c38:	d109      	bne.n	8008c4e <HAL_TIM_PWM_Start+0x72>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	bf14      	ite	ne
 8008c46:	2301      	movne	r3, #1
 8008c48:	2300      	moveq	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	e015      	b.n	8008c7a <HAL_TIM_PWM_Start+0x9e>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d109      	bne.n	8008c68 <HAL_TIM_PWM_Start+0x8c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	bf14      	ite	ne
 8008c60:	2301      	movne	r3, #1
 8008c62:	2300      	moveq	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	e008      	b.n	8008c7a <HAL_TIM_PWM_Start+0x9e>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	bf14      	ite	ne
 8008c74:	2301      	movne	r3, #1
 8008c76:	2300      	moveq	r3, #0
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e09c      	b.n	8008dbc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <HAL_TIM_PWM_Start+0xb6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c90:	e023      	b.n	8008cda <HAL_TIM_PWM_Start+0xfe>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d104      	bne.n	8008ca2 <HAL_TIM_PWM_Start+0xc6>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ca0:	e01b      	b.n	8008cda <HAL_TIM_PWM_Start+0xfe>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d104      	bne.n	8008cb2 <HAL_TIM_PWM_Start+0xd6>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb0:	e013      	b.n	8008cda <HAL_TIM_PWM_Start+0xfe>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b0c      	cmp	r3, #12
 8008cb6:	d104      	bne.n	8008cc2 <HAL_TIM_PWM_Start+0xe6>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cc0:	e00b      	b.n	8008cda <HAL_TIM_PWM_Start+0xfe>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d104      	bne.n	8008cd2 <HAL_TIM_PWM_Start+0xf6>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cd0:	e003      	b.n	8008cda <HAL_TIM_PWM_Start+0xfe>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fe68 	bl	80099b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a35      	ldr	r2, [pc, #212]	@ (8008dc4 <HAL_TIM_PWM_Start+0x1e8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x13e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a34      	ldr	r2, [pc, #208]	@ (8008dc8 <HAL_TIM_PWM_Start+0x1ec>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00e      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x13e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a32      	ldr	r2, [pc, #200]	@ (8008dcc <HAL_TIM_PWM_Start+0x1f0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x13e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a31      	ldr	r2, [pc, #196]	@ (8008dd0 <HAL_TIM_PWM_Start+0x1f4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIM_PWM_Start+0x13e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a2f      	ldr	r2, [pc, #188]	@ (8008dd4 <HAL_TIM_PWM_Start+0x1f8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_PWM_Start+0x142>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <HAL_TIM_PWM_Start+0x144>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a22      	ldr	r2, [pc, #136]	@ (8008dc4 <HAL_TIM_PWM_Start+0x1e8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d01d      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d46:	d018      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a22      	ldr	r2, [pc, #136]	@ (8008dd8 <HAL_TIM_PWM_Start+0x1fc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d013      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a21      	ldr	r2, [pc, #132]	@ (8008ddc <HAL_TIM_PWM_Start+0x200>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00e      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1f      	ldr	r2, [pc, #124]	@ (8008de0 <HAL_TIM_PWM_Start+0x204>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d009      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a17      	ldr	r2, [pc, #92]	@ (8008dc8 <HAL_TIM_PWM_Start+0x1ec>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d004      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x19e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a15      	ldr	r2, [pc, #84]	@ (8008dcc <HAL_TIM_PWM_Start+0x1f0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d115      	bne.n	8008da6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	4b18      	ldr	r3, [pc, #96]	@ (8008de4 <HAL_TIM_PWM_Start+0x208>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b06      	cmp	r3, #6
 8008d8a:	d015      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x1dc>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d92:	d011      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0201 	orr.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da4:	e008      	b.n	8008db8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0201 	orr.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	e000      	b.n	8008dba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400
 8008dd4:	40014800 	.word	0x40014800
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40000c00 	.word	0x40000c00
 8008de4:	00010007 	.word	0x00010007

08008de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e0ff      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b14      	cmp	r3, #20
 8008e12:	f200 80f0 	bhi.w	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e16:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008ff7 	.word	0x08008ff7
 8008e24:	08008ff7 	.word	0x08008ff7
 8008e28:	08008ff7 	.word	0x08008ff7
 8008e2c:	08008eb1 	.word	0x08008eb1
 8008e30:	08008ff7 	.word	0x08008ff7
 8008e34:	08008ff7 	.word	0x08008ff7
 8008e38:	08008ff7 	.word	0x08008ff7
 8008e3c:	08008ef3 	.word	0x08008ef3
 8008e40:	08008ff7 	.word	0x08008ff7
 8008e44:	08008ff7 	.word	0x08008ff7
 8008e48:	08008ff7 	.word	0x08008ff7
 8008e4c:	08008f33 	.word	0x08008f33
 8008e50:	08008ff7 	.word	0x08008ff7
 8008e54:	08008ff7 	.word	0x08008ff7
 8008e58:	08008ff7 	.word	0x08008ff7
 8008e5c:	08008f75 	.word	0x08008f75
 8008e60:	08008ff7 	.word	0x08008ff7
 8008e64:	08008ff7 	.word	0x08008ff7
 8008e68:	08008ff7 	.word	0x08008ff7
 8008e6c:	08008fb5 	.word	0x08008fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fa2e 	bl	80092d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0204 	bic.w	r2, r2, #4
 8008e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6999      	ldr	r1, [r3, #24]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	619a      	str	r2, [r3, #24]
      break;
 8008eae:	e0a5      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa9e 	bl	80093f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	619a      	str	r2, [r3, #24]
      break;
 8008ef0:	e084      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fb07 	bl	800950c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0204 	bic.w	r2, r2, #4
 8008f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69d9      	ldr	r1, [r3, #28]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	61da      	str	r2, [r3, #28]
      break;
 8008f30:	e064      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fb6f 	bl	800961c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	021a      	lsls	r2, r3, #8
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	61da      	str	r2, [r3, #28]
      break;
 8008f72:	e043      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fbb8 	bl	80096f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0208 	orr.w	r2, r2, #8
 8008f8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0204 	bic.w	r2, r2, #4
 8008f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008fb2:	e023      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fbfc 	bl	80097b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	021a      	lsls	r2, r3, #8
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ff4:	e002      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop

08009010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_TIM_ConfigClockSource+0x1c>
 8009028:	2302      	movs	r3, #2
 800902a:	e0b6      	b.n	800919a <HAL_TIM_ConfigClockSource+0x18a>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800904a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800904e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009068:	d03e      	beq.n	80090e8 <HAL_TIM_ConfigClockSource+0xd8>
 800906a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906e:	f200 8087 	bhi.w	8009180 <HAL_TIM_ConfigClockSource+0x170>
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009076:	f000 8086 	beq.w	8009186 <HAL_TIM_ConfigClockSource+0x176>
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907e:	d87f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 8009080:	2b70      	cmp	r3, #112	@ 0x70
 8009082:	d01a      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0xaa>
 8009084:	2b70      	cmp	r3, #112	@ 0x70
 8009086:	d87b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 8009088:	2b60      	cmp	r3, #96	@ 0x60
 800908a:	d050      	beq.n	800912e <HAL_TIM_ConfigClockSource+0x11e>
 800908c:	2b60      	cmp	r3, #96	@ 0x60
 800908e:	d877      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 8009090:	2b50      	cmp	r3, #80	@ 0x50
 8009092:	d03c      	beq.n	800910e <HAL_TIM_ConfigClockSource+0xfe>
 8009094:	2b50      	cmp	r3, #80	@ 0x50
 8009096:	d873      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 8009098:	2b40      	cmp	r3, #64	@ 0x40
 800909a:	d058      	beq.n	800914e <HAL_TIM_ConfigClockSource+0x13e>
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d86f      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d064      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15e>
 80090a4:	2b30      	cmp	r3, #48	@ 0x30
 80090a6:	d86b      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d060      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15e>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d867      	bhi.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d05c      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15e>
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d05a      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x15e>
 80090b8:	e062      	b.n	8009180 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090ca:	f000 fc55 	bl	8009978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	609a      	str	r2, [r3, #8]
      break;
 80090e6:	e04f      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090f8:	f000 fc3e 	bl	8009978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800910a:	609a      	str	r2, [r3, #8]
      break;
 800910c:	e03c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800911a:	461a      	mov	r2, r3
 800911c:	f000 fbb2 	bl	8009884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2150      	movs	r1, #80	@ 0x50
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fc0b 	bl	8009942 <TIM_ITRx_SetConfig>
      break;
 800912c:	e02c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800913a:	461a      	mov	r2, r3
 800913c:	f000 fbd1 	bl	80098e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2160      	movs	r1, #96	@ 0x60
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fbfb 	bl	8009942 <TIM_ITRx_SetConfig>
      break;
 800914c:	e01c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800915a:	461a      	mov	r2, r3
 800915c:	f000 fb92 	bl	8009884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2140      	movs	r1, #64	@ 0x40
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fbeb 	bl	8009942 <TIM_ITRx_SetConfig>
      break;
 800916c:	e00c      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f000 fbe2 	bl	8009942 <TIM_ITRx_SetConfig>
      break;
 800917e:	e003      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	73fb      	strb	r3, [r7, #15]
      break;
 8009184:	e000      	b.n	8009188 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a40      	ldr	r2, [pc, #256]	@ (80092b8 <TIM_Base_SetConfig+0x114>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d013      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c2:	d00f      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a3d      	ldr	r2, [pc, #244]	@ (80092bc <TIM_Base_SetConfig+0x118>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00b      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a3c      	ldr	r2, [pc, #240]	@ (80092c0 <TIM_Base_SetConfig+0x11c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a3b      	ldr	r2, [pc, #236]	@ (80092c4 <TIM_Base_SetConfig+0x120>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_Base_SetConfig+0x40>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a3a      	ldr	r2, [pc, #232]	@ (80092c8 <TIM_Base_SetConfig+0x124>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d108      	bne.n	80091f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a2f      	ldr	r2, [pc, #188]	@ (80092b8 <TIM_Base_SetConfig+0x114>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01f      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009204:	d01b      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2c      	ldr	r2, [pc, #176]	@ (80092bc <TIM_Base_SetConfig+0x118>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d017      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a2b      	ldr	r2, [pc, #172]	@ (80092c0 <TIM_Base_SetConfig+0x11c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d013      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a2a      	ldr	r2, [pc, #168]	@ (80092c4 <TIM_Base_SetConfig+0x120>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00f      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a29      	ldr	r2, [pc, #164]	@ (80092c8 <TIM_Base_SetConfig+0x124>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00b      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a28      	ldr	r2, [pc, #160]	@ (80092cc <TIM_Base_SetConfig+0x128>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d007      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a27      	ldr	r2, [pc, #156]	@ (80092d0 <TIM_Base_SetConfig+0x12c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d003      	beq.n	800923e <TIM_Base_SetConfig+0x9a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a26      	ldr	r2, [pc, #152]	@ (80092d4 <TIM_Base_SetConfig+0x130>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d108      	bne.n	8009250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a10      	ldr	r2, [pc, #64]	@ (80092b8 <TIM_Base_SetConfig+0x114>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a12      	ldr	r2, [pc, #72]	@ (80092c8 <TIM_Base_SetConfig+0x124>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00b      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a11      	ldr	r2, [pc, #68]	@ (80092cc <TIM_Base_SetConfig+0x128>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a10      	ldr	r2, [pc, #64]	@ (80092d0 <TIM_Base_SetConfig+0x12c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_Base_SetConfig+0xf8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a0f      	ldr	r2, [pc, #60]	@ (80092d4 <TIM_Base_SetConfig+0x130>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d103      	bne.n	80092a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	615a      	str	r2, [r3, #20]
}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800
 80092c4:	40000c00 	.word	0x40000c00
 80092c8:	40013400 	.word	0x40013400
 80092cc:	40014000 	.word	0x40014000
 80092d0:	40014400 	.word	0x40014400
 80092d4:	40014800 	.word	0x40014800

080092d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f023 0201 	bic.w	r2, r3, #1
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 0302 	bic.w	r3, r3, #2
 8009324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a2c      	ldr	r2, [pc, #176]	@ (80093e4 <TIM_OC1_SetConfig+0x10c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00f      	beq.n	8009358 <TIM_OC1_SetConfig+0x80>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a2b      	ldr	r2, [pc, #172]	@ (80093e8 <TIM_OC1_SetConfig+0x110>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00b      	beq.n	8009358 <TIM_OC1_SetConfig+0x80>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a2a      	ldr	r2, [pc, #168]	@ (80093ec <TIM_OC1_SetConfig+0x114>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <TIM_OC1_SetConfig+0x80>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a29      	ldr	r2, [pc, #164]	@ (80093f0 <TIM_OC1_SetConfig+0x118>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_OC1_SetConfig+0x80>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a28      	ldr	r2, [pc, #160]	@ (80093f4 <TIM_OC1_SetConfig+0x11c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d10c      	bne.n	8009372 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f023 0308 	bic.w	r3, r3, #8
 800935e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 0304 	bic.w	r3, r3, #4
 8009370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a1b      	ldr	r2, [pc, #108]	@ (80093e4 <TIM_OC1_SetConfig+0x10c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00f      	beq.n	800939a <TIM_OC1_SetConfig+0xc2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1a      	ldr	r2, [pc, #104]	@ (80093e8 <TIM_OC1_SetConfig+0x110>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00b      	beq.n	800939a <TIM_OC1_SetConfig+0xc2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a19      	ldr	r2, [pc, #100]	@ (80093ec <TIM_OC1_SetConfig+0x114>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d007      	beq.n	800939a <TIM_OC1_SetConfig+0xc2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a18      	ldr	r2, [pc, #96]	@ (80093f0 <TIM_OC1_SetConfig+0x118>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d003      	beq.n	800939a <TIM_OC1_SetConfig+0xc2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a17      	ldr	r2, [pc, #92]	@ (80093f4 <TIM_OC1_SetConfig+0x11c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d111      	bne.n	80093be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	621a      	str	r2, [r3, #32]
}
 80093d8:	bf00      	nop
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	40012c00 	.word	0x40012c00
 80093e8:	40013400 	.word	0x40013400
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	f023 0210 	bic.w	r2, r3, #16
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800942a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a28      	ldr	r2, [pc, #160]	@ (80094f8 <TIM_OC2_SetConfig+0x100>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d003      	beq.n	8009464 <TIM_OC2_SetConfig+0x6c>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a27      	ldr	r2, [pc, #156]	@ (80094fc <TIM_OC2_SetConfig+0x104>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d10d      	bne.n	8009480 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800946a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800947e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a1d      	ldr	r2, [pc, #116]	@ (80094f8 <TIM_OC2_SetConfig+0x100>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00f      	beq.n	80094a8 <TIM_OC2_SetConfig+0xb0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a1c      	ldr	r2, [pc, #112]	@ (80094fc <TIM_OC2_SetConfig+0x104>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00b      	beq.n	80094a8 <TIM_OC2_SetConfig+0xb0>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1b      	ldr	r2, [pc, #108]	@ (8009500 <TIM_OC2_SetConfig+0x108>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d007      	beq.n	80094a8 <TIM_OC2_SetConfig+0xb0>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1a      	ldr	r2, [pc, #104]	@ (8009504 <TIM_OC2_SetConfig+0x10c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_OC2_SetConfig+0xb0>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a19      	ldr	r2, [pc, #100]	@ (8009508 <TIM_OC2_SetConfig+0x110>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d113      	bne.n	80094d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	40012c00 	.word	0x40012c00
 80094fc:	40013400 	.word	0x40013400
 8009500:	40014000 	.word	0x40014000
 8009504:	40014400 	.word	0x40014400
 8009508:	40014800 	.word	0x40014800

0800950c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800953a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800953e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a27      	ldr	r2, [pc, #156]	@ (8009608 <TIM_OC3_SetConfig+0xfc>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d003      	beq.n	8009576 <TIM_OC3_SetConfig+0x6a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a26      	ldr	r2, [pc, #152]	@ (800960c <TIM_OC3_SetConfig+0x100>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d10d      	bne.n	8009592 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800957c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a1c      	ldr	r2, [pc, #112]	@ (8009608 <TIM_OC3_SetConfig+0xfc>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00f      	beq.n	80095ba <TIM_OC3_SetConfig+0xae>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a1b      	ldr	r2, [pc, #108]	@ (800960c <TIM_OC3_SetConfig+0x100>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00b      	beq.n	80095ba <TIM_OC3_SetConfig+0xae>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009610 <TIM_OC3_SetConfig+0x104>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d007      	beq.n	80095ba <TIM_OC3_SetConfig+0xae>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a19      	ldr	r2, [pc, #100]	@ (8009614 <TIM_OC3_SetConfig+0x108>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d003      	beq.n	80095ba <TIM_OC3_SetConfig+0xae>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a18      	ldr	r2, [pc, #96]	@ (8009618 <TIM_OC3_SetConfig+0x10c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d113      	bne.n	80095e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	4313      	orrs	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	621a      	str	r2, [r3, #32]
}
 80095fc:	bf00      	nop
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40013400 	.word	0x40013400
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800

0800961c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800966a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	031b      	lsls	r3, r3, #12
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4313      	orrs	r3, r2
 8009676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a18      	ldr	r2, [pc, #96]	@ (80096dc <TIM_OC4_SetConfig+0xc0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d00f      	beq.n	80096a0 <TIM_OC4_SetConfig+0x84>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <TIM_OC4_SetConfig+0xc4>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00b      	beq.n	80096a0 <TIM_OC4_SetConfig+0x84>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a16      	ldr	r2, [pc, #88]	@ (80096e4 <TIM_OC4_SetConfig+0xc8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d007      	beq.n	80096a0 <TIM_OC4_SetConfig+0x84>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a15      	ldr	r2, [pc, #84]	@ (80096e8 <TIM_OC4_SetConfig+0xcc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_OC4_SetConfig+0x84>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a14      	ldr	r2, [pc, #80]	@ (80096ec <TIM_OC4_SetConfig+0xd0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d109      	bne.n	80096b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	019b      	lsls	r3, r3, #6
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	621a      	str	r2, [r3, #32]
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40012c00 	.word	0x40012c00
 80096e0:	40013400 	.word	0x40013400
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800

080096f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	041b      	lsls	r3, r3, #16
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4313      	orrs	r3, r2
 8009740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a17      	ldr	r2, [pc, #92]	@ (80097a4 <TIM_OC5_SetConfig+0xb4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00f      	beq.n	800976a <TIM_OC5_SetConfig+0x7a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a16      	ldr	r2, [pc, #88]	@ (80097a8 <TIM_OC5_SetConfig+0xb8>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00b      	beq.n	800976a <TIM_OC5_SetConfig+0x7a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a15      	ldr	r2, [pc, #84]	@ (80097ac <TIM_OC5_SetConfig+0xbc>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d007      	beq.n	800976a <TIM_OC5_SetConfig+0x7a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a14      	ldr	r2, [pc, #80]	@ (80097b0 <TIM_OC5_SetConfig+0xc0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d003      	beq.n	800976a <TIM_OC5_SetConfig+0x7a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a13      	ldr	r2, [pc, #76]	@ (80097b4 <TIM_OC5_SetConfig+0xc4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d109      	bne.n	800977e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40013400 	.word	0x40013400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	021b      	lsls	r3, r3, #8
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	051b      	lsls	r3, r3, #20
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a18      	ldr	r2, [pc, #96]	@ (8009870 <TIM_OC6_SetConfig+0xb8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00f      	beq.n	8009834 <TIM_OC6_SetConfig+0x7c>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a17      	ldr	r2, [pc, #92]	@ (8009874 <TIM_OC6_SetConfig+0xbc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00b      	beq.n	8009834 <TIM_OC6_SetConfig+0x7c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a16      	ldr	r2, [pc, #88]	@ (8009878 <TIM_OC6_SetConfig+0xc0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d007      	beq.n	8009834 <TIM_OC6_SetConfig+0x7c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a15      	ldr	r2, [pc, #84]	@ (800987c <TIM_OC6_SetConfig+0xc4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_OC6_SetConfig+0x7c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a14      	ldr	r2, [pc, #80]	@ (8009880 <TIM_OC6_SetConfig+0xc8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d109      	bne.n	8009848 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800983a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	621a      	str	r2, [r3, #32]
}
 8009862:	bf00      	nop
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	40012c00 	.word	0x40012c00
 8009874:	40013400 	.word	0x40013400
 8009878:	40014000 	.word	0x40014000
 800987c:	40014400 	.word	0x40014400
 8009880:	40014800 	.word	0x40014800

08009884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f023 0201 	bic.w	r2, r3, #1
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f023 030a 	bic.w	r3, r3, #10
 80098c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b087      	sub	sp, #28
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	60b9      	str	r1, [r7, #8]
 80098ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	f023 0210 	bic.w	r2, r3, #16
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800990c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	031b      	lsls	r3, r3, #12
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	4313      	orrs	r3, r2
 8009916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800991e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	621a      	str	r2, [r3, #32]
}
 8009936:	bf00      	nop
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	f043 0307 	orr.w	r3, r3, #7
 8009964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	609a      	str	r2, [r3, #8]
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	021a      	lsls	r2, r3, #8
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	431a      	orrs	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4313      	orrs	r3, r2
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	609a      	str	r2, [r3, #8]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	2201      	movs	r2, #1
 80099cc:	fa02 f303 	lsl.w	r3, r2, r3
 80099d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a1a      	ldr	r2, [r3, #32]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	43db      	mvns	r3, r3
 80099da:	401a      	ands	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a1a      	ldr	r2, [r3, #32]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 031f 	and.w	r3, r3, #31
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	fa01 f303 	lsl.w	r3, r1, r3
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e068      	b.n	8009aee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2e      	ldr	r2, [pc, #184]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d004      	beq.n	8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d108      	bne.n	8009a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d01d      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8e:	d018      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1b      	ldr	r2, [pc, #108]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d013      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00e      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a18      	ldr	r2, [pc, #96]	@ (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d009      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a13      	ldr	r2, [pc, #76]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d004      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a14      	ldr	r2, [pc, #80]	@ (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10c      	bne.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40000400 	.word	0x40000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	40000c00 	.word	0x40000c00
 8009b10:	40014000 	.word	0x40014000

08009b14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e065      	b.n	8009bfc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a16      	ldr	r2, [pc, #88]	@ (8009c08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a14      	ldr	r2, [pc, #80]	@ (8009c0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d115      	bne.n	8009bea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc8:	051b      	lsls	r3, r3, #20
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40012c00 	.word	0x40012c00
 8009c0c:	40013400 	.word	0x40013400

08009c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e042      	b.n	8009ca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7f9 fbfb 	bl	8003430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2224      	movs	r2, #36	@ 0x24
 8009c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0201 	bic.w	r2, r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbb2 	bl	800a3c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f8b3 	bl	8009dcc <UART_SetConfig>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e01b      	b.n	8009ca8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fc31 	bl	800a508 <UART_CheckIdleState>
 8009ca6:	4603      	mov	r3, r0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	@ 0x28
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d17b      	bne.n	8009dc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <HAL_UART_Transmit+0x26>
 8009cd0:	88fb      	ldrh	r3, [r7, #6]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e074      	b.n	8009dc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2221      	movs	r2, #33	@ 0x21
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cea:	f7f9 fefb 	bl	8003ae4 <HAL_GetTick>
 8009cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	88fa      	ldrh	r2, [r7, #6]
 8009cf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d08:	d108      	bne.n	8009d1c <HAL_UART_Transmit+0x6c>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	e003      	b.n	8009d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d24:	e030      	b.n	8009d88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2180      	movs	r1, #128	@ 0x80
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fc93 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e03d      	b.n	8009dc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10b      	bne.n	8009d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	881a      	ldrh	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d5a:	b292      	uxth	r2, r2
 8009d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	3302      	adds	r3, #2
 8009d62:	61bb      	str	r3, [r7, #24]
 8009d64:	e007      	b.n	8009d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	781a      	ldrb	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3301      	adds	r3, #1
 8009d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1c8      	bne.n	8009d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2140      	movs	r1, #64	@ 0x40
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fc5c 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e006      	b.n	8009dc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd0:	b08c      	sub	sp, #48	@ 0x30
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4baa      	ldr	r3, [pc, #680]	@ (800a0a4 <UART_SetConfig+0x2d8>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a9f      	ldr	r2, [pc, #636]	@ (800a0a8 <UART_SetConfig+0x2dc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d004      	beq.n	8009e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e34:	4313      	orrs	r3, r2
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	f023 010f 	bic.w	r1, r3, #15
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a90      	ldr	r2, [pc, #576]	@ (800a0ac <UART_SetConfig+0x2e0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d125      	bne.n	8009ebc <UART_SetConfig+0xf0>
 8009e70:	4b8f      	ldr	r3, [pc, #572]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e76:	f003 0303 	and.w	r3, r3, #3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d81a      	bhi.n	8009eb4 <UART_SetConfig+0xe8>
 8009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e84 <UART_SetConfig+0xb8>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009e95 	.word	0x08009e95
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009e9d 	.word	0x08009e9d
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e9a:	e116      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea2:	e112      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eaa:	e10e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009eac:	2308      	movs	r3, #8
 8009eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb2:	e10a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eba:	e106      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a7c      	ldr	r2, [pc, #496]	@ (800a0b4 <UART_SetConfig+0x2e8>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d138      	bne.n	8009f38 <UART_SetConfig+0x16c>
 8009ec6:	4b7a      	ldr	r3, [pc, #488]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ecc:	f003 030c 	and.w	r3, r3, #12
 8009ed0:	2b0c      	cmp	r3, #12
 8009ed2:	d82d      	bhi.n	8009f30 <UART_SetConfig+0x164>
 8009ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <UART_SetConfig+0x110>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f11 	.word	0x08009f11
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f31 	.word	0x08009f31
 8009eec:	08009f21 	.word	0x08009f21
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f31 	.word	0x08009f31
 8009ef8:	08009f31 	.word	0x08009f31
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f31 	.word	0x08009f31
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f16:	e0d8      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f1e:	e0d4      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f26:	e0d0      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f2e:	e0cc      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f36:	e0c8      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a5e      	ldr	r2, [pc, #376]	@ (800a0b8 <UART_SetConfig+0x2ec>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d125      	bne.n	8009f8e <UART_SetConfig+0x1c2>
 8009f42:	4b5b      	ldr	r3, [pc, #364]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f4c:	2b30      	cmp	r3, #48	@ 0x30
 8009f4e:	d016      	beq.n	8009f7e <UART_SetConfig+0x1b2>
 8009f50:	2b30      	cmp	r3, #48	@ 0x30
 8009f52:	d818      	bhi.n	8009f86 <UART_SetConfig+0x1ba>
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d00a      	beq.n	8009f6e <UART_SetConfig+0x1a2>
 8009f58:	2b20      	cmp	r3, #32
 8009f5a:	d814      	bhi.n	8009f86 <UART_SetConfig+0x1ba>
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <UART_SetConfig+0x19a>
 8009f60:	2b10      	cmp	r3, #16
 8009f62:	d008      	beq.n	8009f76 <UART_SetConfig+0x1aa>
 8009f64:	e00f      	b.n	8009f86 <UART_SetConfig+0x1ba>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6c:	e0ad      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f74:	e0a9      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f76:	2304      	movs	r3, #4
 8009f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7c:	e0a5      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f84:	e0a1      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f86:	2310      	movs	r3, #16
 8009f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8c:	e09d      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a4a      	ldr	r2, [pc, #296]	@ (800a0bc <UART_SetConfig+0x2f0>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d125      	bne.n	8009fe4 <UART_SetConfig+0x218>
 8009f98:	4b45      	ldr	r3, [pc, #276]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa4:	d016      	beq.n	8009fd4 <UART_SetConfig+0x208>
 8009fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa8:	d818      	bhi.n	8009fdc <UART_SetConfig+0x210>
 8009faa:	2b80      	cmp	r3, #128	@ 0x80
 8009fac:	d00a      	beq.n	8009fc4 <UART_SetConfig+0x1f8>
 8009fae:	2b80      	cmp	r3, #128	@ 0x80
 8009fb0:	d814      	bhi.n	8009fdc <UART_SetConfig+0x210>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <UART_SetConfig+0x1f0>
 8009fb6:	2b40      	cmp	r3, #64	@ 0x40
 8009fb8:	d008      	beq.n	8009fcc <UART_SetConfig+0x200>
 8009fba:	e00f      	b.n	8009fdc <UART_SetConfig+0x210>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc2:	e082      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fca:	e07e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd2:	e07a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fd4:	2308      	movs	r3, #8
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	e076      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	e072      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a35      	ldr	r2, [pc, #212]	@ (800a0c0 <UART_SetConfig+0x2f4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d12a      	bne.n	800a044 <UART_SetConfig+0x278>
 8009fee:	4b30      	ldr	r3, [pc, #192]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ffc:	d01a      	beq.n	800a034 <UART_SetConfig+0x268>
 8009ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a002:	d81b      	bhi.n	800a03c <UART_SetConfig+0x270>
 800a004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a008:	d00c      	beq.n	800a024 <UART_SetConfig+0x258>
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00e:	d815      	bhi.n	800a03c <UART_SetConfig+0x270>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <UART_SetConfig+0x250>
 800a014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a018:	d008      	beq.n	800a02c <UART_SetConfig+0x260>
 800a01a:	e00f      	b.n	800a03c <UART_SetConfig+0x270>
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a022:	e052      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a024:	2302      	movs	r3, #2
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02a:	e04e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a032:	e04a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a034:	2308      	movs	r3, #8
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03a:	e046      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a03c:	2310      	movs	r3, #16
 800a03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a042:	e042      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a17      	ldr	r2, [pc, #92]	@ (800a0a8 <UART_SetConfig+0x2dc>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d13a      	bne.n	800a0c4 <UART_SetConfig+0x2f8>
 800a04e:	4b18      	ldr	r3, [pc, #96]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a05c:	d01a      	beq.n	800a094 <UART_SetConfig+0x2c8>
 800a05e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a062:	d81b      	bhi.n	800a09c <UART_SetConfig+0x2d0>
 800a064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a068:	d00c      	beq.n	800a084 <UART_SetConfig+0x2b8>
 800a06a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a06e:	d815      	bhi.n	800a09c <UART_SetConfig+0x2d0>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <UART_SetConfig+0x2b0>
 800a074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a078:	d008      	beq.n	800a08c <UART_SetConfig+0x2c0>
 800a07a:	e00f      	b.n	800a09c <UART_SetConfig+0x2d0>
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e022      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e01e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a08c:	2304      	movs	r3, #4
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a092:	e01a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a094:	2308      	movs	r3, #8
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e016      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a09c:	2310      	movs	r3, #16
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e012      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a0a4:	cfff69f3 	.word	0xcfff69f3
 800a0a8:	40008000 	.word	0x40008000
 800a0ac:	40013800 	.word	0x40013800
 800a0b0:	40021000 	.word	0x40021000
 800a0b4:	40004400 	.word	0x40004400
 800a0b8:	40004800 	.word	0x40004800
 800a0bc:	40004c00 	.word	0x40004c00
 800a0c0:	40005000 	.word	0x40005000
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4aae      	ldr	r2, [pc, #696]	@ (800a388 <UART_SetConfig+0x5bc>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	f040 8097 	bne.w	800a204 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d823      	bhi.n	800a126 <UART_SetConfig+0x35a>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <UART_SetConfig+0x318>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a109 	.word	0x0800a109
 800a0e8:	0800a127 	.word	0x0800a127
 800a0ec:	0800a111 	.word	0x0800a111
 800a0f0:	0800a127 	.word	0x0800a127
 800a0f4:	0800a117 	.word	0x0800a117
 800a0f8:	0800a127 	.word	0x0800a127
 800a0fc:	0800a127 	.word	0x0800a127
 800a100:	0800a127 	.word	0x0800a127
 800a104:	0800a11f 	.word	0x0800a11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a108:	f7fc f9f0 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800a10c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a10e:	e010      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a110:	4b9e      	ldr	r3, [pc, #632]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a114:	e00d      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a116:	f7fc f951 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800a11a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a11c:	e009      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a124:	e005      	b.n	800a132 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8130 	beq.w	800a39a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13e:	4a94      	ldr	r2, [pc, #592]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a144:	461a      	mov	r2, r3
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d305      	bcc.n	800a16a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d903      	bls.n	800a172 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a170:	e113      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	60fa      	str	r2, [r7, #12]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17e:	4a84      	ldr	r2, [pc, #528]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a184:	b29b      	uxth	r3, r3
 800a186:	2200      	movs	r2, #0
 800a188:	603b      	str	r3, [r7, #0]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a194:	f7f6 fd38 	bl	8000c08 <__aeabi_uldivmod>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4610      	mov	r0, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	f04f 0300 	mov.w	r3, #0
 800a1a8:	020b      	lsls	r3, r1, #8
 800a1aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1ae:	0202      	lsls	r2, r0, #8
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	6849      	ldr	r1, [r1, #4]
 800a1b4:	0849      	lsrs	r1, r1, #1
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	eb12 0804 	adds.w	r8, r2, r4
 800a1c0:	eb43 0905 	adc.w	r9, r3, r5
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	4693      	mov	fp, r2
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	465b      	mov	r3, fp
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 fd17 	bl	8000c08 <__aeabi_uldivmod>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4613      	mov	r3, r2
 800a1e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1e8:	d308      	bcc.n	800a1fc <UART_SetConfig+0x430>
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1f0:	d204      	bcs.n	800a1fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	e0ce      	b.n	800a39a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a202:	e0ca      	b.n	800a39a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a20c:	d166      	bne.n	800a2dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a20e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a212:	2b08      	cmp	r3, #8
 800a214:	d827      	bhi.n	800a266 <UART_SetConfig+0x49a>
 800a216:	a201      	add	r2, pc, #4	@ (adr r2, 800a21c <UART_SetConfig+0x450>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	0800a267 	.word	0x0800a267
 800a22c:	0800a257 	.word	0x0800a257
 800a230:	0800a267 	.word	0x0800a267
 800a234:	0800a267 	.word	0x0800a267
 800a238:	0800a267 	.word	0x0800a267
 800a23c:	0800a25f 	.word	0x0800a25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a240:	f7fc f954 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800a244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a246:	e014      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a248:	f7fc f966 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 800a24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a24e:	e010      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a250:	4b4e      	ldr	r3, [pc, #312]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a254:	e00d      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a256:	f7fc f8b1 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800a25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a25c:	e009      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a264:	e005      	b.n	800a272 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8090 	beq.w	800a39a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	4a44      	ldr	r2, [pc, #272]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a284:	461a      	mov	r2, r3
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28c:	005a      	lsls	r2, r3, #1
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	441a      	add	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b0f      	cmp	r3, #15
 800a2a4:	d916      	bls.n	800a2d4 <UART_SetConfig+0x508>
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ac:	d212      	bcs.n	800a2d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f023 030f 	bic.w	r3, r3, #15
 800a2b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	8bfb      	ldrh	r3, [r7, #30]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	8bfa      	ldrh	r2, [r7, #30]
 800a2d0:	60da      	str	r2, [r3, #12]
 800a2d2:	e062      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2da:	e05e      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d828      	bhi.n	800a336 <UART_SetConfig+0x56a>
 800a2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0x520>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	0800a337 	.word	0x0800a337
 800a2fc:	0800a327 	.word	0x0800a327
 800a300:	0800a337 	.word	0x0800a337
 800a304:	0800a337 	.word	0x0800a337
 800a308:	0800a337 	.word	0x0800a337
 800a30c:	0800a32f 	.word	0x0800a32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a310:	f7fc f8ec 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 800a314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a316:	e014      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a318:	f7fc f8fe 	bl	8006518 <HAL_RCC_GetPCLK2Freq>
 800a31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a320:	4b1a      	ldr	r3, [pc, #104]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a324:	e00d      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a326:	f7fc f849 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800a32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a32c:	e009      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a334:	e005      	b.n	800a342 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a340:	bf00      	nop
    }

    if (pclk != 0U)
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	d028      	beq.n	800a39a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	4a10      	ldr	r2, [pc, #64]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a352:	461a      	mov	r2, r3
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	fbb3 f2f2 	udiv	r2, r3, r2
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	085b      	lsrs	r3, r3, #1
 800a360:	441a      	add	r2, r3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	2b0f      	cmp	r3, #15
 800a370:	d910      	bls.n	800a394 <UART_SetConfig+0x5c8>
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a378:	d20c      	bcs.n	800a394 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60da      	str	r2, [r3, #12]
 800a384:	e009      	b.n	800a39a <UART_SetConfig+0x5ce>
 800a386:	bf00      	nop
 800a388:	40008000 	.word	0x40008000
 800a38c:	00f42400 	.word	0x00f42400
 800a390:	0800d80c 	.word	0x0800d80c
      }
      else
      {
        ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3730      	adds	r7, #48	@ 0x30
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c2:	d10a      	bne.n	800a4da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	605a      	str	r2, [r3, #4]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b098      	sub	sp, #96	@ 0x60
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a518:	f7f9 fae4 	bl	8003ae4 <HAL_GetTick>
 800a51c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d12f      	bne.n	800a58c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a52c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a534:	2200      	movs	r2, #0
 800a536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f88e 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d022      	beq.n	800a58c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a55a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a564:	647b      	str	r3, [r7, #68]	@ 0x44
 800a566:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e6      	bne.n	800a546 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e063      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b04      	cmp	r3, #4
 800a598:	d149      	bne.n	800a62e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f857 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d03c      	beq.n	800a62e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e6      	bne.n	800a5b4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f023 0301 	bic.w	r3, r3, #1
 800a5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a606:	61fa      	str	r2, [r7, #28]
 800a608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	69b9      	ldr	r1, [r7, #24]
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	617b      	str	r3, [r7, #20]
   return(result);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e5      	bne.n	800a5e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e012      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3758      	adds	r7, #88	@ 0x58
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66c:	e049      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d045      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a676:	f7f9 fa35 	bl	8003ae4 <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <UART_WaitOnFlagUntilTimeout+0x30>
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e048      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d031      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d110      	bne.n	800a6ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f838 	bl	800a72a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e029      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6dc:	d111      	bne.n	800a702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f81e 	bl	800a72a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e00f      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69da      	ldr	r2, [r3, #28]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4013      	ands	r3, r2
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	bf0c      	ite	eq
 800a712:	2301      	moveq	r3, #1
 800a714:	2300      	movne	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d0a6      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b095      	sub	sp, #84	@ 0x54
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a750:	643b      	str	r3, [r7, #64]	@ 0x40
 800a752:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	e853 3f00 	ldrex	r3, [r3]
 800a772:	61fb      	str	r3, [r7, #28]
   return(result);
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a77a:	f023 0301 	bic.w	r3, r3, #1
 800a77e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a78a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e3      	bne.n	800a764 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d118      	bne.n	800a7d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f023 0310 	bic.w	r3, r3, #16
 800a7b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c2:	61bb      	str	r3, [r7, #24]
 800a7c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6979      	ldr	r1, [r7, #20]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e6      	bne.n	800a7a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7ea:	bf00      	nop
 800a7ec:	3754      	adds	r7, #84	@ 0x54
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_UARTEx_DisableFifoMode+0x16>
 800a808:	2302      	movs	r3, #2
 800a80a:	e027      	b.n	800a85c <HAL_UARTEx_DisableFifoMode+0x66>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2224      	movs	r2, #36	@ 0x24
 800a818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a83a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d101      	bne.n	800a880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a87c:	2302      	movs	r3, #2
 800a87e:	e02d      	b.n	800a8dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2224      	movs	r2, #36	@ 0x24
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0201 	bic.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f84f 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d101      	bne.n	800a8fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	e02d      	b.n	800a958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2224      	movs	r2, #36	@ 0x24
 800a908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0201 	bic.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	430a      	orrs	r2, r1
 800a936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f811 	bl	800a960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d108      	bne.n	800a982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a980:	e031      	b.n	800a9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a982:	2308      	movs	r3, #8
 800a984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a986:	2308      	movs	r3, #8
 800a988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0e5b      	lsrs	r3, r3, #25
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	0f5b      	lsrs	r3, r3, #29
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	7b3a      	ldrb	r2, [r7, #12]
 800a9ae:	4911      	ldr	r1, [pc, #68]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9b0:	5c8a      	ldrb	r2, [r1, r2]
 800a9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9b6:	7b3a      	ldrb	r2, [r7, #12]
 800a9b8:	490f      	ldr	r1, [pc, #60]	@ (800a9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	7b7a      	ldrb	r2, [r7, #13]
 800a9cc:	4909      	ldr	r1, [pc, #36]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ce:	5c8a      	ldrb	r2, [r1, r2]
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9d4:	7b7a      	ldrb	r2, [r7, #13]
 800a9d6:	4908      	ldr	r1, [pc, #32]	@ (800a9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	0800d824 	.word	0x0800d824
 800a9f8:	0800d82c 	.word	0x0800d82c

0800a9fc <arm_mean_f32>:
 800a9fc:	b430      	push	{r4, r5}
 800a9fe:	088d      	lsrs	r5, r1, #2
 800aa00:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800aa74 <arm_mean_f32+0x78>
 800aa04:	d018      	beq.n	800aa38 <arm_mean_f32+0x3c>
 800aa06:	f100 0310 	add.w	r3, r0, #16
 800aa0a:	462c      	mov	r4, r5
 800aa0c:	ed53 5a04 	vldr	s11, [r3, #-16]
 800aa10:	ed13 6a03 	vldr	s12, [r3, #-12]
 800aa14:	ed53 6a02 	vldr	s13, [r3, #-8]
 800aa18:	ed13 7a01 	vldr	s14, [r3, #-4]
 800aa1c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa20:	3c01      	subs	r4, #1
 800aa22:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aa26:	f103 0310 	add.w	r3, r3, #16
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa32:	d1eb      	bne.n	800aa0c <arm_mean_f32+0x10>
 800aa34:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800aa38:	f011 0303 	ands.w	r3, r1, #3
 800aa3c:	d00f      	beq.n	800aa5e <arm_mean_f32+0x62>
 800aa3e:	ed90 7a00 	vldr	s14, [r0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa48:	d009      	beq.n	800aa5e <arm_mean_f32+0x62>
 800aa4a:	ed90 7a01 	vldr	s14, [r0, #4]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa54:	bf1c      	itt	ne
 800aa56:	ed90 7a02 	vldrne	s14, [r0, #8]
 800aa5a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800aa5e:	ee07 1a10 	vmov	s14, r1
 800aa62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa66:	bc30      	pop	{r4, r5}
 800aa68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa6c:	edc2 6a00 	vstr	s13, [r2]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	00000000 	.word	0x00000000

0800aa78 <arm_max_f32>:
 800aa78:	f101 3cff 	add.w	ip, r1, #4294967295
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	4607      	mov	r7, r0
 800aa80:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800aa84:	ecf7 7a01 	vldmia	r7!, {s15}
 800aa88:	d060      	beq.n	800ab4c <arm_max_f32+0xd4>
 800aa8a:	2400      	movs	r4, #0
 800aa8c:	3014      	adds	r0, #20
 800aa8e:	4625      	mov	r5, r4
 800aa90:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800aa94:	ed10 7a04 	vldr	s14, [r0, #-16]
 800aa98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa0:	bf48      	it	mi
 800aaa2:	eef0 7a47 	vmovmi.f32	s15, s14
 800aaa6:	ed10 7a03 	vldr	s14, [r0, #-12]
 800aaaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaae:	bf48      	it	mi
 800aab0:	1c65      	addmi	r5, r4, #1
 800aab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab6:	bf48      	it	mi
 800aab8:	eef0 7a47 	vmovmi.f32	s15, s14
 800aabc:	ed10 7a02 	vldr	s14, [r0, #-8]
 800aac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aac4:	bf48      	it	mi
 800aac6:	1ca5      	addmi	r5, r4, #2
 800aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aacc:	bf48      	it	mi
 800aace:	eef0 7a47 	vmovmi.f32	s15, s14
 800aad2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800aad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aada:	bf48      	it	mi
 800aadc:	1ce5      	addmi	r5, r4, #3
 800aade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae2:	f104 0404 	add.w	r4, r4, #4
 800aae6:	bf44      	itt	mi
 800aae8:	eef0 7a47 	vmovmi.f32	s15, s14
 800aaec:	4625      	movmi	r5, r4
 800aaee:	42a6      	cmp	r6, r4
 800aaf0:	f100 0010 	add.w	r0, r0, #16
 800aaf4:	d1ce      	bne.n	800aa94 <arm_max_f32+0x1c>
 800aaf6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800aafa:	f01c 0003 	ands.w	r0, ip, #3
 800aafe:	d021      	beq.n	800ab44 <arm_max_f32+0xcc>
 800ab00:	ed97 7a00 	vldr	s14, [r7]
 800ab04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0c:	bfc4      	itt	gt
 800ab0e:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab12:	1a0d      	subgt	r5, r1, r0
 800ab14:	3801      	subs	r0, #1
 800ab16:	d015      	beq.n	800ab44 <arm_max_f32+0xcc>
 800ab18:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	bf44      	itt	mi
 800ab26:	eef0 7a47 	vmovmi.f32	s15, s14
 800ab2a:	1a0d      	submi	r5, r1, r0
 800ab2c:	2801      	cmp	r0, #1
 800ab2e:	d009      	beq.n	800ab44 <arm_max_f32+0xcc>
 800ab30:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3c:	bfc4      	itt	gt
 800ab3e:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab42:	4665      	movgt	r5, ip
 800ab44:	edc2 7a00 	vstr	s15, [r2]
 800ab48:	601d      	str	r5, [r3, #0]
 800ab4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4c:	4675      	mov	r5, lr
 800ab4e:	e7d4      	b.n	800aafa <arm_max_f32+0x82>

0800ab50 <arm_rfft_32_fast_init_f32>:
 800ab50:	b178      	cbz	r0, 800ab72 <arm_rfft_32_fast_init_f32+0x22>
 800ab52:	b430      	push	{r4, r5}
 800ab54:	4908      	ldr	r1, [pc, #32]	@ (800ab78 <arm_rfft_32_fast_init_f32+0x28>)
 800ab56:	4a09      	ldr	r2, [pc, #36]	@ (800ab7c <arm_rfft_32_fast_init_f32+0x2c>)
 800ab58:	2310      	movs	r3, #16
 800ab5a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab5e:	8003      	strh	r3, [r0, #0]
 800ab60:	2520      	movs	r5, #32
 800ab62:	2414      	movs	r4, #20
 800ab64:	4b06      	ldr	r3, [pc, #24]	@ (800ab80 <arm_rfft_32_fast_init_f32+0x30>)
 800ab66:	8205      	strh	r5, [r0, #16]
 800ab68:	8184      	strh	r4, [r0, #12]
 800ab6a:	6143      	str	r3, [r0, #20]
 800ab6c:	bc30      	pop	{r4, r5}
 800ab6e:	2000      	movs	r0, #0
 800ab70:	4770      	bx	lr
 800ab72:	f04f 30ff 	mov.w	r0, #4294967295
 800ab76:	4770      	bx	lr
 800ab78:	0800e7e4 	.word	0x0800e7e4
 800ab7c:	0801311c 	.word	0x0801311c
 800ab80:	0801be9c 	.word	0x0801be9c

0800ab84 <arm_rfft_64_fast_init_f32>:
 800ab84:	b178      	cbz	r0, 800aba6 <arm_rfft_64_fast_init_f32+0x22>
 800ab86:	b430      	push	{r4, r5}
 800ab88:	4908      	ldr	r1, [pc, #32]	@ (800abac <arm_rfft_64_fast_init_f32+0x28>)
 800ab8a:	4a09      	ldr	r2, [pc, #36]	@ (800abb0 <arm_rfft_64_fast_init_f32+0x2c>)
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab92:	8003      	strh	r3, [r0, #0]
 800ab94:	2540      	movs	r5, #64	@ 0x40
 800ab96:	2430      	movs	r4, #48	@ 0x30
 800ab98:	4b06      	ldr	r3, [pc, #24]	@ (800abb4 <arm_rfft_64_fast_init_f32+0x30>)
 800ab9a:	8205      	strh	r5, [r0, #16]
 800ab9c:	8184      	strh	r4, [r0, #12]
 800ab9e:	6143      	str	r3, [r0, #20]
 800aba0:	bc30      	pop	{r4, r5}
 800aba2:	2000      	movs	r0, #0
 800aba4:	4770      	bx	lr
 800aba6:	f04f 30ff 	mov.w	r0, #4294967295
 800abaa:	4770      	bx	lr
 800abac:	0801093c 	.word	0x0801093c
 800abb0:	0801799c 	.word	0x0801799c
 800abb4:	0802071c 	.word	0x0802071c

0800abb8 <arm_rfft_256_fast_init_f32>:
 800abb8:	b180      	cbz	r0, 800abdc <arm_rfft_256_fast_init_f32+0x24>
 800abba:	b430      	push	{r4, r5}
 800abbc:	4909      	ldr	r1, [pc, #36]	@ (800abe4 <arm_rfft_256_fast_init_f32+0x2c>)
 800abbe:	4a0a      	ldr	r2, [pc, #40]	@ (800abe8 <arm_rfft_256_fast_init_f32+0x30>)
 800abc0:	2380      	movs	r3, #128	@ 0x80
 800abc2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800abc6:	8003      	strh	r3, [r0, #0]
 800abc8:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800abcc:	24d0      	movs	r4, #208	@ 0xd0
 800abce:	4b07      	ldr	r3, [pc, #28]	@ (800abec <arm_rfft_256_fast_init_f32+0x34>)
 800abd0:	8205      	strh	r5, [r0, #16]
 800abd2:	8184      	strh	r4, [r0, #12]
 800abd4:	6143      	str	r3, [r0, #20]
 800abd6:	bc30      	pop	{r4, r5}
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	0800e644 	.word	0x0800e644
 800abe8:	08012d1c 	.word	0x08012d1c
 800abec:	0801ba9c 	.word	0x0801ba9c

0800abf0 <arm_rfft_512_fast_init_f32>:
 800abf0:	b190      	cbz	r0, 800ac18 <arm_rfft_512_fast_init_f32+0x28>
 800abf2:	b430      	push	{r4, r5}
 800abf4:	490a      	ldr	r1, [pc, #40]	@ (800ac20 <arm_rfft_512_fast_init_f32+0x30>)
 800abf6:	4a0b      	ldr	r2, [pc, #44]	@ (800ac24 <arm_rfft_512_fast_init_f32+0x34>)
 800abf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abfc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac00:	8003      	strh	r3, [r0, #0]
 800ac02:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ac06:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800ac0a:	4b07      	ldr	r3, [pc, #28]	@ (800ac28 <arm_rfft_512_fast_init_f32+0x38>)
 800ac0c:	8205      	strh	r5, [r0, #16]
 800ac0e:	8184      	strh	r4, [r0, #12]
 800ac10:	6143      	str	r3, [r0, #20]
 800ac12:	bc30      	pop	{r4, r5}
 800ac14:	2000      	movs	r0, #0
 800ac16:	4770      	bx	lr
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	080105cc 	.word	0x080105cc
 800ac24:	0801719c 	.word	0x0801719c
 800ac28:	0801ff1c 	.word	0x0801ff1c

0800ac2c <arm_rfft_1024_fast_init_f32>:
 800ac2c:	b190      	cbz	r0, 800ac54 <arm_rfft_1024_fast_init_f32+0x28>
 800ac2e:	b430      	push	{r4, r5}
 800ac30:	490a      	ldr	r1, [pc, #40]	@ (800ac5c <arm_rfft_1024_fast_init_f32+0x30>)
 800ac32:	4a0b      	ldr	r2, [pc, #44]	@ (800ac60 <arm_rfft_1024_fast_init_f32+0x34>)
 800ac34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac38:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac3c:	8003      	strh	r3, [r0, #0]
 800ac3e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800ac42:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800ac46:	4b07      	ldr	r3, [pc, #28]	@ (800ac64 <arm_rfft_1024_fast_init_f32+0x38>)
 800ac48:	8205      	strh	r5, [r0, #16]
 800ac4a:	8184      	strh	r4, [r0, #12]
 800ac4c:	6143      	str	r3, [r0, #20]
 800ac4e:	bc30      	pop	{r4, r5}
 800ac50:	2000      	movs	r0, #0
 800ac52:	4770      	bx	lr
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	0801099c 	.word	0x0801099c
 800ac60:	08017a9c 	.word	0x08017a9c
 800ac64:	08018a9c 	.word	0x08018a9c

0800ac68 <arm_rfft_2048_fast_init_f32>:
 800ac68:	b190      	cbz	r0, 800ac90 <arm_rfft_2048_fast_init_f32+0x28>
 800ac6a:	b430      	push	{r4, r5}
 800ac6c:	490a      	ldr	r1, [pc, #40]	@ (800ac98 <arm_rfft_2048_fast_init_f32+0x30>)
 800ac6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ac9c <arm_rfft_2048_fast_init_f32+0x34>)
 800ac70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac74:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ac78:	8003      	strh	r3, [r0, #0]
 800ac7a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800ac7e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800ac82:	4b07      	ldr	r3, [pc, #28]	@ (800aca0 <arm_rfft_2048_fast_init_f32+0x38>)
 800ac84:	8205      	strh	r5, [r0, #16]
 800ac86:	8184      	strh	r4, [r0, #12]
 800ac88:	6143      	str	r3, [r0, #20]
 800ac8a:	bc30      	pop	{r4, r5}
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	4770      	bx	lr
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	0800d834 	.word	0x0800d834
 800ac9c:	08010d1c 	.word	0x08010d1c
 800aca0:	08019a9c 	.word	0x08019a9c

0800aca4 <arm_rfft_4096_fast_init_f32>:
 800aca4:	b190      	cbz	r0, 800accc <arm_rfft_4096_fast_init_f32+0x28>
 800aca6:	b430      	push	{r4, r5}
 800aca8:	490a      	ldr	r1, [pc, #40]	@ (800acd4 <arm_rfft_4096_fast_init_f32+0x30>)
 800acaa:	4a0b      	ldr	r2, [pc, #44]	@ (800acd8 <arm_rfft_4096_fast_init_f32+0x34>)
 800acac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acb0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800acb4:	8003      	strh	r3, [r0, #0]
 800acb6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800acba:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800acbe:	4b07      	ldr	r3, [pc, #28]	@ (800acdc <arm_rfft_4096_fast_init_f32+0x38>)
 800acc0:	8205      	strh	r5, [r0, #16]
 800acc2:	8184      	strh	r4, [r0, #12]
 800acc4:	6143      	str	r3, [r0, #20]
 800acc6:	bc30      	pop	{r4, r5}
 800acc8:	2000      	movs	r0, #0
 800acca:	4770      	bx	lr
 800accc:	f04f 30ff 	mov.w	r0, #4294967295
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	0800e80c 	.word	0x0800e80c
 800acd8:	0801319c 	.word	0x0801319c
 800acdc:	0801bf1c 	.word	0x0801bf1c

0800ace0 <arm_rfft_fast_init_f32>:
 800ace0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ace4:	d01f      	beq.n	800ad26 <arm_rfft_fast_init_f32+0x46>
 800ace6:	d90b      	bls.n	800ad00 <arm_rfft_fast_init_f32+0x20>
 800ace8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800acec:	d019      	beq.n	800ad22 <arm_rfft_fast_init_f32+0x42>
 800acee:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800acf2:	d012      	beq.n	800ad1a <arm_rfft_fast_init_f32+0x3a>
 800acf4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800acf8:	d00d      	beq.n	800ad16 <arm_rfft_fast_init_f32+0x36>
 800acfa:	f04f 30ff 	mov.w	r0, #4294967295
 800acfe:	4770      	bx	lr
 800ad00:	2940      	cmp	r1, #64	@ 0x40
 800ad02:	d00c      	beq.n	800ad1e <arm_rfft_fast_init_f32+0x3e>
 800ad04:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800ad08:	d003      	beq.n	800ad12 <arm_rfft_fast_init_f32+0x32>
 800ad0a:	2920      	cmp	r1, #32
 800ad0c:	d1f5      	bne.n	800acfa <arm_rfft_fast_init_f32+0x1a>
 800ad0e:	4b07      	ldr	r3, [pc, #28]	@ (800ad2c <arm_rfft_fast_init_f32+0x4c>)
 800ad10:	4718      	bx	r3
 800ad12:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <arm_rfft_fast_init_f32+0x50>)
 800ad14:	4718      	bx	r3
 800ad16:	4b07      	ldr	r3, [pc, #28]	@ (800ad34 <arm_rfft_fast_init_f32+0x54>)
 800ad18:	4718      	bx	r3
 800ad1a:	4b07      	ldr	r3, [pc, #28]	@ (800ad38 <arm_rfft_fast_init_f32+0x58>)
 800ad1c:	4718      	bx	r3
 800ad1e:	4b07      	ldr	r3, [pc, #28]	@ (800ad3c <arm_rfft_fast_init_f32+0x5c>)
 800ad20:	e7f6      	b.n	800ad10 <arm_rfft_fast_init_f32+0x30>
 800ad22:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <arm_rfft_fast_init_f32+0x60>)
 800ad24:	e7f4      	b.n	800ad10 <arm_rfft_fast_init_f32+0x30>
 800ad26:	4b07      	ldr	r3, [pc, #28]	@ (800ad44 <arm_rfft_fast_init_f32+0x64>)
 800ad28:	e7f2      	b.n	800ad10 <arm_rfft_fast_init_f32+0x30>
 800ad2a:	bf00      	nop
 800ad2c:	0800ab51 	.word	0x0800ab51
 800ad30:	0800abb9 	.word	0x0800abb9
 800ad34:	0800ac2d 	.word	0x0800ac2d
 800ad38:	0800aca5 	.word	0x0800aca5
 800ad3c:	0800ab85 	.word	0x0800ab85
 800ad40:	0800ac69 	.word	0x0800ac69
 800ad44:	0800abf1 	.word	0x0800abf1

0800ad48 <stage_rfft_f32>:
 800ad48:	b410      	push	{r4}
 800ad4a:	edd1 7a00 	vldr	s15, [r1]
 800ad4e:	ed91 7a01 	vldr	s14, [r1, #4]
 800ad52:	8804      	ldrh	r4, [r0, #0]
 800ad54:	6940      	ldr	r0, [r0, #20]
 800ad56:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ad5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ad5e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ad62:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ad66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad6a:	3c01      	subs	r4, #1
 800ad6c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ad70:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad74:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ad78:	ed82 7a00 	vstr	s14, [r2]
 800ad7c:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad80:	3010      	adds	r0, #16
 800ad82:	3210      	adds	r2, #16
 800ad84:	3b08      	subs	r3, #8
 800ad86:	3110      	adds	r1, #16
 800ad88:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ad8c:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad90:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ad94:	edd3 4a03 	vldr	s9, [r3, #12]
 800ad98:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad9c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ada0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800ada4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ada8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800adac:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800adb0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800adb4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800adb8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800adbc:	ee66 6a85 	vmul.f32	s13, s13, s10
 800adc0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800adc4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800adc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800adcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800add0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800add4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800add8:	3c01      	subs	r4, #1
 800adda:	ed02 7a02 	vstr	s14, [r2, #-8]
 800adde:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ade2:	f1a3 0308 	sub.w	r3, r3, #8
 800ade6:	f101 0108 	add.w	r1, r1, #8
 800adea:	f100 0008 	add.w	r0, r0, #8
 800adee:	f102 0208 	add.w	r2, r2, #8
 800adf2:	d1c9      	bne.n	800ad88 <stage_rfft_f32+0x40>
 800adf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop

0800adfc <merge_rfft_f32>:
 800adfc:	b410      	push	{r4}
 800adfe:	edd1 7a00 	vldr	s15, [r1]
 800ae02:	edd1 6a01 	vldr	s13, [r1, #4]
 800ae06:	8804      	ldrh	r4, [r0, #0]
 800ae08:	6940      	ldr	r0, [r0, #20]
 800ae0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ae0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae12:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800ae16:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae1a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae1e:	3c01      	subs	r4, #1
 800ae20:	ed82 7a00 	vstr	s14, [r2]
 800ae24:	edc2 7a01 	vstr	s15, [r2, #4]
 800ae28:	b3dc      	cbz	r4, 800aea2 <merge_rfft_f32+0xa6>
 800ae2a:	00e3      	lsls	r3, r4, #3
 800ae2c:	3b08      	subs	r3, #8
 800ae2e:	440b      	add	r3, r1
 800ae30:	3010      	adds	r0, #16
 800ae32:	3210      	adds	r2, #16
 800ae34:	3110      	adds	r1, #16
 800ae36:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ae3a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae3e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ae42:	edd3 4a03 	vldr	s9, [r3, #12]
 800ae46:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ae4a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ae4e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ae52:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ae56:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ae5a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ae5e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ae62:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ae66:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ae6a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ae6e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ae72:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ae76:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ae7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ae7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ae82:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ae86:	3c01      	subs	r4, #1
 800ae88:	ed02 7a02 	vstr	s14, [r2, #-8]
 800ae8c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ae90:	f1a3 0308 	sub.w	r3, r3, #8
 800ae94:	f101 0108 	add.w	r1, r1, #8
 800ae98:	f100 0008 	add.w	r0, r0, #8
 800ae9c:	f102 0208 	add.w	r2, r2, #8
 800aea0:	d1c9      	bne.n	800ae36 <merge_rfft_f32+0x3a>
 800aea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <arm_rfft_fast_f32>:
 800aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	8a05      	ldrh	r5, [r0, #16]
 800aeae:	086d      	lsrs	r5, r5, #1
 800aeb0:	8005      	strh	r5, [r0, #0]
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4616      	mov	r6, r2
 800aeb6:	461d      	mov	r5, r3
 800aeb8:	b14b      	cbz	r3, 800aece <arm_rfft_fast_f32+0x26>
 800aeba:	f7ff ff9f 	bl	800adfc <merge_rfft_f32>
 800aebe:	462a      	mov	r2, r5
 800aec0:	4631      	mov	r1, r6
 800aec2:	4620      	mov	r0, r4
 800aec4:	2301      	movs	r3, #1
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	f000 bb33 	b.w	800b534 <arm_cfft_f32>
 800aece:	460f      	mov	r7, r1
 800aed0:	461a      	mov	r2, r3
 800aed2:	2301      	movs	r3, #1
 800aed4:	f000 fb2e 	bl	800b534 <arm_cfft_f32>
 800aed8:	4632      	mov	r2, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	4620      	mov	r0, r4
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	f7ff bf31 	b.w	800ad48 <stage_rfft_f32>
 800aee6:	bf00      	nop

0800aee8 <arm_cfft_radix8by2_f32>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	ed2d 8b08 	vpush	{d8-d11}
 800aef0:	4607      	mov	r7, r0
 800aef2:	4608      	mov	r0, r1
 800aef4:	f8b7 c000 	ldrh.w	ip, [r7]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800aefe:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800af02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800af06:	f000 80b0 	beq.w	800b06a <arm_cfft_radix8by2_f32+0x182>
 800af0a:	008c      	lsls	r4, r1, #2
 800af0c:	3410      	adds	r4, #16
 800af0e:	f100 0310 	add.w	r3, r0, #16
 800af12:	1906      	adds	r6, r0, r4
 800af14:	3210      	adds	r2, #16
 800af16:	4444      	add	r4, r8
 800af18:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800af1c:	f108 0510 	add.w	r5, r8, #16
 800af20:	ed15 2a04 	vldr	s4, [r5, #-16]
 800af24:	ed55 2a03 	vldr	s5, [r5, #-12]
 800af28:	ed54 4a04 	vldr	s9, [r4, #-16]
 800af2c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800af30:	ed14 6a02 	vldr	s12, [r4, #-8]
 800af34:	ed54 5a01 	vldr	s11, [r4, #-4]
 800af38:	ed53 3a04 	vldr	s7, [r3, #-16]
 800af3c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800af40:	ed55 0a01 	vldr	s1, [r5, #-4]
 800af44:	ed56 6a04 	vldr	s13, [r6, #-16]
 800af48:	ed16 3a03 	vldr	s6, [r6, #-12]
 800af4c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800af50:	ed13 5a02 	vldr	s10, [r3, #-8]
 800af54:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af58:	ed16 1a02 	vldr	s2, [r6, #-8]
 800af5c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800af60:	ee73 ba82 	vadd.f32	s23, s7, s4
 800af64:	ee37 ba22 	vadd.f32	s22, s14, s5
 800af68:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800af6c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800af70:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800af74:	ee75 aa00 	vadd.f32	s21, s10, s0
 800af78:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800af7c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800af80:	ed43 ba04 	vstr	s23, [r3, #-16]
 800af84:	ed03 ba03 	vstr	s22, [r3, #-12]
 800af88:	ed43 aa02 	vstr	s21, [r3, #-8]
 800af8c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800af90:	ed06 8a01 	vstr	s16, [r6, #-4]
 800af94:	ed46 9a04 	vstr	s19, [r6, #-16]
 800af98:	ed06 9a03 	vstr	s18, [r6, #-12]
 800af9c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800afa0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800afa4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800afa8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800afac:	ed52 6a03 	vldr	s13, [r2, #-12]
 800afb0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800afb4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800afb8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800afbc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800afc0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800afc4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800afc8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800afcc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800afd0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800afd4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800afd8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800afdc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800afe0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800afe4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800afe8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800afec:	ed05 3a04 	vstr	s6, [r5, #-16]
 800aff0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800aff4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800aff8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800affc:	ee76 6a41 	vsub.f32	s13, s12, s2
 800b000:	ee35 5a40 	vsub.f32	s10, s10, s0
 800b004:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800b008:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b00c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b010:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b014:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b018:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b01c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b020:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b024:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b028:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b02c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b030:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b034:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b038:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b03c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b040:	3310      	adds	r3, #16
 800b042:	4563      	cmp	r3, ip
 800b044:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b048:	f106 0610 	add.w	r6, r6, #16
 800b04c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b050:	f102 0210 	add.w	r2, r2, #16
 800b054:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b058:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b05c:	f105 0510 	add.w	r5, r5, #16
 800b060:	f104 0410 	add.w	r4, r4, #16
 800b064:	f47f af5c 	bne.w	800af20 <arm_cfft_radix8by2_f32+0x38>
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	b28c      	uxth	r4, r1
 800b06c:	4621      	mov	r1, r4
 800b06e:	2302      	movs	r3, #2
 800b070:	f000 fb3c 	bl	800b6ec <arm_radix8_butterfly_f32>
 800b074:	ecbd 8b08 	vpop	{d8-d11}
 800b078:	4621      	mov	r1, r4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	4640      	mov	r0, r8
 800b07e:	2302      	movs	r3, #2
 800b080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	f000 bb32 	b.w	800b6ec <arm_radix8_butterfly_f32>

0800b088 <arm_cfft_radix8by4_f32>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	ed2d 8b0a 	vpush	{d8-d12}
 800b090:	b08d      	sub	sp, #52	@ 0x34
 800b092:	460d      	mov	r5, r1
 800b094:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b096:	8801      	ldrh	r1, [r0, #0]
 800b098:	6842      	ldr	r2, [r0, #4]
 800b09a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b09c:	0849      	lsrs	r1, r1, #1
 800b09e:	008b      	lsls	r3, r1, #2
 800b0a0:	18ee      	adds	r6, r5, r3
 800b0a2:	18f0      	adds	r0, r6, r3
 800b0a4:	edd0 5a00 	vldr	s11, [r0]
 800b0a8:	edd5 7a00 	vldr	s15, [r5]
 800b0ac:	ed96 7a00 	vldr	s14, [r6]
 800b0b0:	edd0 3a01 	vldr	s7, [r0, #4]
 800b0b4:	ed96 4a01 	vldr	s8, [r6, #4]
 800b0b8:	ed95 5a01 	vldr	s10, [r5, #4]
 800b0bc:	9008      	str	r0, [sp, #32]
 800b0be:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b0c2:	18c7      	adds	r7, r0, r3
 800b0c4:	edd7 4a00 	vldr	s9, [r7]
 800b0c8:	ed97 3a01 	vldr	s6, [r7, #4]
 800b0cc:	9701      	str	r7, [sp, #4]
 800b0ce:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b0d2:	462c      	mov	r4, r5
 800b0d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b0d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b0dc:	ee16 ca90 	vmov	ip, s13
 800b0e0:	f844 cb08 	str.w	ip, [r4], #8
 800b0e4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b0e8:	edd6 5a01 	vldr	s11, [r6, #4]
 800b0ec:	edd7 2a01 	vldr	s5, [r7, #4]
 800b0f0:	9404      	str	r4, [sp, #16]
 800b0f2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b0f6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b0fa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b0fe:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b102:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b106:	0849      	lsrs	r1, r1, #1
 800b108:	f102 0e08 	add.w	lr, r2, #8
 800b10c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b110:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b114:	9109      	str	r1, [sp, #36]	@ 0x24
 800b116:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b11a:	f1a1 0902 	sub.w	r9, r1, #2
 800b11e:	f8cd e00c 	str.w	lr, [sp, #12]
 800b122:	4631      	mov	r1, r6
 800b124:	ee13 ea90 	vmov	lr, s7
 800b128:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b12c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b130:	4604      	mov	r4, r0
 800b132:	edc5 5a01 	vstr	s11, [r5, #4]
 800b136:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b13a:	f841 eb08 	str.w	lr, [r1], #8
 800b13e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b142:	ee16 ea10 	vmov	lr, s12
 800b146:	ed86 5a01 	vstr	s10, [r6, #4]
 800b14a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b14e:	f844 eb08 	str.w	lr, [r4], #8
 800b152:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b156:	edc0 6a01 	vstr	s13, [r0, #4]
 800b15a:	9405      	str	r4, [sp, #20]
 800b15c:	4604      	mov	r4, r0
 800b15e:	ee17 0a90 	vmov	r0, s15
 800b162:	9106      	str	r1, [sp, #24]
 800b164:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b168:	f102 0110 	add.w	r1, r2, #16
 800b16c:	46bc      	mov	ip, r7
 800b16e:	9100      	str	r1, [sp, #0]
 800b170:	f847 0b08 	str.w	r0, [r7], #8
 800b174:	f102 0118 	add.w	r1, r2, #24
 800b178:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b17c:	9102      	str	r1, [sp, #8]
 800b17e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b182:	9007      	str	r0, [sp, #28]
 800b184:	f000 8134 	beq.w	800b3f0 <arm_cfft_radix8by4_f32+0x368>
 800b188:	f102 0920 	add.w	r9, r2, #32
 800b18c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800b190:	9a01      	ldr	r2, [sp, #4]
 800b192:	f8dd a000 	ldr.w	sl, [sp]
 800b196:	3b0c      	subs	r3, #12
 800b198:	4683      	mov	fp, r0
 800b19a:	4463      	add	r3, ip
 800b19c:	f105 0e10 	add.w	lr, r5, #16
 800b1a0:	f1a4 010c 	sub.w	r1, r4, #12
 800b1a4:	f104 0510 	add.w	r5, r4, #16
 800b1a8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b1ac:	f1a2 040c 	sub.w	r4, r2, #12
 800b1b0:	f106 0010 	add.w	r0, r6, #16
 800b1b4:	3210      	adds	r2, #16
 800b1b6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b1ba:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b1be:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b1c2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b1c6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b1ca:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b1ce:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b1d2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b1d6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b1da:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b1de:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b1e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b1e6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b1ea:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b1ee:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b1f2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b1f6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b1fa:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b1fe:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b202:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b206:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b20a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b20e:	ed94 7a02 	vldr	s14, [r4, #8]
 800b212:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b216:	ed91 ba02 	vldr	s22, [r1, #8]
 800b21a:	edd3 9a02 	vldr	s19, [r3, #8]
 800b21e:	edd4 2a01 	vldr	s5, [r4, #4]
 800b222:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b226:	ed93 5a01 	vldr	s10, [r3, #4]
 800b22a:	edd1 0a01 	vldr	s1, [r1, #4]
 800b22e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b232:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b236:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b23a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b23e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b242:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b246:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b24a:	ed91 7a01 	vldr	s14, [r1, #4]
 800b24e:	edd3 8a01 	vldr	s17, [r3, #4]
 800b252:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b256:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b25a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b25e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b262:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b266:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b26a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b26e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b272:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b276:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b27a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b27e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b282:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b286:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b28a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b28e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b292:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b296:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b29a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b29e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b2a2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b2a6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b2aa:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b2ae:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b2b2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b2b6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b2ba:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b2be:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b2c2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b2c6:	edc1 8a01 	vstr	s17, [r1, #4]
 800b2ca:	ed81 aa02 	vstr	s20, [r1, #8]
 800b2ce:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b2d2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b2d6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b2da:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b2de:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b2e2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b2e6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b2ea:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b2ee:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b2f2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b2f6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b2fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b2fe:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b302:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b306:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b30a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b30e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b312:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b316:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b31a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b31e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b322:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b326:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b32a:	ed84 7a01 	vstr	s14, [r4, #4]
 800b32e:	ed84 4a02 	vstr	s8, [r4, #8]
 800b332:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b336:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b33a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800b33e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800b342:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b346:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b34a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b34e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b352:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b356:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b35a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b35e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b362:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b366:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b36a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b36e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b372:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b376:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b37a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b37e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b382:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b386:	f10e 0e08 	add.w	lr, lr, #8
 800b38a:	ed83 3a02 	vstr	s6, [r3, #8]
 800b38e:	ed83 7a01 	vstr	s14, [r3, #4]
 800b392:	f1ac 0c08 	sub.w	ip, ip, #8
 800b396:	f10a 0a08 	add.w	sl, sl, #8
 800b39a:	f100 0008 	add.w	r0, r0, #8
 800b39e:	f1a1 0108 	sub.w	r1, r1, #8
 800b3a2:	f109 0910 	add.w	r9, r9, #16
 800b3a6:	f105 0508 	add.w	r5, r5, #8
 800b3aa:	f1a4 0408 	sub.w	r4, r4, #8
 800b3ae:	f108 0818 	add.w	r8, r8, #24
 800b3b2:	f102 0208 	add.w	r2, r2, #8
 800b3b6:	f1a3 0308 	sub.w	r3, r3, #8
 800b3ba:	f47f aefc 	bne.w	800b1b6 <arm_cfft_radix8by4_f32+0x12e>
 800b3be:	9907      	ldr	r1, [sp, #28]
 800b3c0:	9800      	ldr	r0, [sp, #0]
 800b3c2:	00cb      	lsls	r3, r1, #3
 800b3c4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b3c8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b3cc:	9100      	str	r1, [sp, #0]
 800b3ce:	9904      	ldr	r1, [sp, #16]
 800b3d0:	4419      	add	r1, r3
 800b3d2:	9104      	str	r1, [sp, #16]
 800b3d4:	9903      	ldr	r1, [sp, #12]
 800b3d6:	4419      	add	r1, r3
 800b3d8:	9103      	str	r1, [sp, #12]
 800b3da:	9906      	ldr	r1, [sp, #24]
 800b3dc:	4419      	add	r1, r3
 800b3de:	9106      	str	r1, [sp, #24]
 800b3e0:	9905      	ldr	r1, [sp, #20]
 800b3e2:	441f      	add	r7, r3
 800b3e4:	4419      	add	r1, r3
 800b3e6:	9b02      	ldr	r3, [sp, #8]
 800b3e8:	9105      	str	r1, [sp, #20]
 800b3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ee:	9302      	str	r3, [sp, #8]
 800b3f0:	9904      	ldr	r1, [sp, #16]
 800b3f2:	9805      	ldr	r0, [sp, #20]
 800b3f4:	ed91 4a00 	vldr	s8, [r1]
 800b3f8:	edd0 6a00 	vldr	s13, [r0]
 800b3fc:	9b06      	ldr	r3, [sp, #24]
 800b3fe:	ed97 3a00 	vldr	s6, [r7]
 800b402:	edd3 7a00 	vldr	s15, [r3]
 800b406:	edd0 4a01 	vldr	s9, [r0, #4]
 800b40a:	edd1 3a01 	vldr	s7, [r1, #4]
 800b40e:	ed97 2a01 	vldr	s4, [r7, #4]
 800b412:	ed93 7a01 	vldr	s14, [r3, #4]
 800b416:	9a03      	ldr	r2, [sp, #12]
 800b418:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800b41c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b420:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b424:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b428:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b42c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b430:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b434:	ed81 5a00 	vstr	s10, [r1]
 800b438:	ed93 5a01 	vldr	s10, [r3, #4]
 800b43c:	edd7 4a01 	vldr	s9, [r7, #4]
 800b440:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b444:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b448:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b44c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b450:	ed81 5a01 	vstr	s10, [r1, #4]
 800b454:	edd2 1a00 	vldr	s3, [r2]
 800b458:	edd2 2a01 	vldr	s5, [r2, #4]
 800b45c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b460:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b464:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b468:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b46c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b470:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b474:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b478:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b47c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b480:	edc3 2a00 	vstr	s5, [r3]
 800b484:	ed83 5a01 	vstr	s10, [r3, #4]
 800b488:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b48c:	9b00      	ldr	r3, [sp, #0]
 800b48e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b492:	ed93 4a01 	vldr	s8, [r3, #4]
 800b496:	ed93 5a00 	vldr	s10, [r3]
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b4a0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b4a4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b4a8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b4ac:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b4b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b4b4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b4b8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b4bc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b4c0:	ed80 6a01 	vstr	s12, [r0, #4]
 800b4c4:	edc0 5a00 	vstr	s11, [r0]
 800b4c8:	edd3 5a01 	vldr	s11, [r3, #4]
 800b4cc:	edd3 6a00 	vldr	s13, [r3]
 800b4d0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b4d4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b4d8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b4dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b4e0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b4e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b4e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b4ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b4f0:	ed87 7a01 	vstr	s14, [r7, #4]
 800b4f4:	edc7 7a00 	vstr	s15, [r7]
 800b4f8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	686a      	ldr	r2, [r5, #4]
 800b500:	2304      	movs	r3, #4
 800b502:	f000 f8f3 	bl	800b6ec <arm_radix8_butterfly_f32>
 800b506:	4630      	mov	r0, r6
 800b508:	4621      	mov	r1, r4
 800b50a:	686a      	ldr	r2, [r5, #4]
 800b50c:	2304      	movs	r3, #4
 800b50e:	f000 f8ed 	bl	800b6ec <arm_radix8_butterfly_f32>
 800b512:	9808      	ldr	r0, [sp, #32]
 800b514:	686a      	ldr	r2, [r5, #4]
 800b516:	4621      	mov	r1, r4
 800b518:	2304      	movs	r3, #4
 800b51a:	f000 f8e7 	bl	800b6ec <arm_radix8_butterfly_f32>
 800b51e:	686a      	ldr	r2, [r5, #4]
 800b520:	9801      	ldr	r0, [sp, #4]
 800b522:	4621      	mov	r1, r4
 800b524:	2304      	movs	r3, #4
 800b526:	b00d      	add	sp, #52	@ 0x34
 800b528:	ecbd 8b0a 	vpop	{d8-d12}
 800b52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	f000 b8dc 	b.w	800b6ec <arm_radix8_butterfly_f32>

0800b534 <arm_cfft_f32>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	2a01      	cmp	r2, #1
 800b53a:	4606      	mov	r6, r0
 800b53c:	4617      	mov	r7, r2
 800b53e:	460c      	mov	r4, r1
 800b540:	4698      	mov	r8, r3
 800b542:	8805      	ldrh	r5, [r0, #0]
 800b544:	d056      	beq.n	800b5f4 <arm_cfft_f32+0xc0>
 800b546:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b54a:	d063      	beq.n	800b614 <arm_cfft_f32+0xe0>
 800b54c:	d916      	bls.n	800b57c <arm_cfft_f32+0x48>
 800b54e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b552:	d01a      	beq.n	800b58a <arm_cfft_f32+0x56>
 800b554:	d947      	bls.n	800b5e6 <arm_cfft_f32+0xb2>
 800b556:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b55a:	d05b      	beq.n	800b614 <arm_cfft_f32+0xe0>
 800b55c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b560:	d105      	bne.n	800b56e <arm_cfft_f32+0x3a>
 800b562:	2301      	movs	r3, #1
 800b564:	6872      	ldr	r2, [r6, #4]
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 f8bf 	bl	800b6ec <arm_radix8_butterfly_f32>
 800b56e:	f1b8 0f00 	cmp.w	r8, #0
 800b572:	d111      	bne.n	800b598 <arm_cfft_f32+0x64>
 800b574:	2f01      	cmp	r7, #1
 800b576:	d016      	beq.n	800b5a6 <arm_cfft_f32+0x72>
 800b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57c:	2d20      	cmp	r5, #32
 800b57e:	d049      	beq.n	800b614 <arm_cfft_f32+0xe0>
 800b580:	d935      	bls.n	800b5ee <arm_cfft_f32+0xba>
 800b582:	2d40      	cmp	r5, #64	@ 0x40
 800b584:	d0ed      	beq.n	800b562 <arm_cfft_f32+0x2e>
 800b586:	2d80      	cmp	r5, #128	@ 0x80
 800b588:	d1f1      	bne.n	800b56e <arm_cfft_f32+0x3a>
 800b58a:	4621      	mov	r1, r4
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7ff fcab 	bl	800aee8 <arm_cfft_radix8by2_f32>
 800b592:	f1b8 0f00 	cmp.w	r8, #0
 800b596:	d0ed      	beq.n	800b574 <arm_cfft_f32+0x40>
 800b598:	68b2      	ldr	r2, [r6, #8]
 800b59a:	89b1      	ldrh	r1, [r6, #12]
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 f841 	bl	800b624 <arm_bitreversal_32>
 800b5a2:	2f01      	cmp	r7, #1
 800b5a4:	d1e8      	bne.n	800b578 <arm_cfft_f32+0x44>
 800b5a6:	ee07 5a90 	vmov	s15, r5
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	d0de      	beq.n	800b578 <arm_cfft_f32+0x44>
 800b5ba:	f104 0108 	add.w	r1, r4, #8
 800b5be:	2300      	movs	r3, #0
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	429d      	cmp	r5, r3
 800b5c4:	f101 0108 	add.w	r1, r1, #8
 800b5c8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b5cc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b5d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b5d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b5d8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b5dc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b5e0:	d1ee      	bne.n	800b5c0 <arm_cfft_f32+0x8c>
 800b5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b5ea:	d0ba      	beq.n	800b562 <arm_cfft_f32+0x2e>
 800b5ec:	e7bf      	b.n	800b56e <arm_cfft_f32+0x3a>
 800b5ee:	2d10      	cmp	r5, #16
 800b5f0:	d0cb      	beq.n	800b58a <arm_cfft_f32+0x56>
 800b5f2:	e7bc      	b.n	800b56e <arm_cfft_f32+0x3a>
 800b5f4:	b19d      	cbz	r5, 800b61e <arm_cfft_f32+0xea>
 800b5f6:	f101 030c 	add.w	r3, r1, #12
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b600:	3201      	adds	r2, #1
 800b602:	eef1 7a67 	vneg.f32	s15, s15
 800b606:	4295      	cmp	r5, r2
 800b608:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b60c:	f103 0308 	add.w	r3, r3, #8
 800b610:	d1f4      	bne.n	800b5fc <arm_cfft_f32+0xc8>
 800b612:	e798      	b.n	800b546 <arm_cfft_f32+0x12>
 800b614:	4621      	mov	r1, r4
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff fd36 	bl	800b088 <arm_cfft_radix8by4_f32>
 800b61c:	e7a7      	b.n	800b56e <arm_cfft_f32+0x3a>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0aa      	beq.n	800b578 <arm_cfft_f32+0x44>
 800b622:	e7b9      	b.n	800b598 <arm_cfft_f32+0x64>

0800b624 <arm_bitreversal_32>:
 800b624:	b1e9      	cbz	r1, 800b662 <arm_bitreversal_32+0x3e>
 800b626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b628:	2500      	movs	r5, #0
 800b62a:	f102 0e02 	add.w	lr, r2, #2
 800b62e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b632:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b636:	08a4      	lsrs	r4, r4, #2
 800b638:	089b      	lsrs	r3, r3, #2
 800b63a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b63e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b642:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b646:	00a6      	lsls	r6, r4, #2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b64e:	3304      	adds	r3, #4
 800b650:	1d34      	adds	r4, r6, #4
 800b652:	3502      	adds	r5, #2
 800b654:	58c6      	ldr	r6, [r0, r3]
 800b656:	5907      	ldr	r7, [r0, r4]
 800b658:	50c7      	str	r7, [r0, r3]
 800b65a:	428d      	cmp	r5, r1
 800b65c:	5106      	str	r6, [r0, r4]
 800b65e:	d3e6      	bcc.n	800b62e <arm_bitreversal_32+0xa>
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b662:	4770      	bx	lr

0800b664 <arm_abs_f32>:
 800b664:	b470      	push	{r4, r5, r6}
 800b666:	0896      	lsrs	r6, r2, #2
 800b668:	d025      	beq.n	800b6b6 <arm_abs_f32+0x52>
 800b66a:	f100 0410 	add.w	r4, r0, #16
 800b66e:	f101 0310 	add.w	r3, r1, #16
 800b672:	4635      	mov	r5, r6
 800b674:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b678:	eef0 7ae7 	vabs.f32	s15, s15
 800b67c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b680:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b684:	eef0 7ae7 	vabs.f32	s15, s15
 800b688:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b68c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b690:	eef0 7ae7 	vabs.f32	s15, s15
 800b694:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b698:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b69c:	3d01      	subs	r5, #1
 800b69e:	eef0 7ae7 	vabs.f32	s15, s15
 800b6a2:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b6a6:	f104 0410 	add.w	r4, r4, #16
 800b6aa:	f103 0310 	add.w	r3, r3, #16
 800b6ae:	d1e1      	bne.n	800b674 <arm_abs_f32+0x10>
 800b6b0:	0136      	lsls	r6, r6, #4
 800b6b2:	4430      	add	r0, r6
 800b6b4:	4431      	add	r1, r6
 800b6b6:	f012 0203 	ands.w	r2, r2, #3
 800b6ba:	d015      	beq.n	800b6e8 <arm_abs_f32+0x84>
 800b6bc:	edd0 7a00 	vldr	s15, [r0]
 800b6c0:	3a01      	subs	r2, #1
 800b6c2:	eef0 7ae7 	vabs.f32	s15, s15
 800b6c6:	edc1 7a00 	vstr	s15, [r1]
 800b6ca:	d00d      	beq.n	800b6e8 <arm_abs_f32+0x84>
 800b6cc:	edd0 7a01 	vldr	s15, [r0, #4]
 800b6d0:	2a01      	cmp	r2, #1
 800b6d2:	eef0 7ae7 	vabs.f32	s15, s15
 800b6d6:	edc1 7a01 	vstr	s15, [r1, #4]
 800b6da:	d005      	beq.n	800b6e8 <arm_abs_f32+0x84>
 800b6dc:	edd0 7a02 	vldr	s15, [r0, #8]
 800b6e0:	eef0 7ae7 	vabs.f32	s15, s15
 800b6e4:	edc1 7a02 	vstr	s15, [r1, #8]
 800b6e8:	bc70      	pop	{r4, r5, r6}
 800b6ea:	4770      	bx	lr

0800b6ec <arm_radix8_butterfly_f32>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	ed2d 8b10 	vpush	{d8-d15}
 800b6f4:	b095      	sub	sp, #84	@ 0x54
 800b6f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800b9e4 <arm_radix8_butterfly_f32+0x2f8>
 800b702:	9012      	str	r0, [sp, #72]	@ 0x48
 800b704:	468b      	mov	fp, r1
 800b706:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b708:	4689      	mov	r9, r1
 800b70a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b70e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b710:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b712:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b716:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b71a:	eb03 0508 	add.w	r5, r3, r8
 800b71e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b722:	eb05 040e 	add.w	r4, r5, lr
 800b726:	0137      	lsls	r7, r6, #4
 800b728:	eba6 030a 	sub.w	r3, r6, sl
 800b72c:	eb04 000e 	add.w	r0, r4, lr
 800b730:	44b2      	add	sl, r6
 800b732:	1d3a      	adds	r2, r7, #4
 800b734:	9702      	str	r7, [sp, #8]
 800b736:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b73a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b73e:	ebae 0c06 	sub.w	ip, lr, r6
 800b742:	9703      	str	r7, [sp, #12]
 800b744:	eb03 0708 	add.w	r7, r3, r8
 800b748:	9701      	str	r7, [sp, #4]
 800b74a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b74e:	9706      	str	r7, [sp, #24]
 800b750:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b752:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b756:	f10e 0104 	add.w	r1, lr, #4
 800b75a:	4439      	add	r1, r7
 800b75c:	443a      	add	r2, r7
 800b75e:	0137      	lsls	r7, r6, #4
 800b760:	00f6      	lsls	r6, r6, #3
 800b762:	9704      	str	r7, [sp, #16]
 800b764:	9605      	str	r6, [sp, #20]
 800b766:	9f01      	ldr	r7, [sp, #4]
 800b768:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b76a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b76e:	f04f 0c00 	mov.w	ip, #0
 800b772:	edd4 6a00 	vldr	s13, [r4]
 800b776:	edd7 1a00 	vldr	s3, [r7]
 800b77a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b77e:	edd5 5a00 	vldr	s11, [r5]
 800b782:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b786:	ed90 6a00 	vldr	s12, [r0]
 800b78a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b78e:	ed93 3a00 	vldr	s6, [r3]
 800b792:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b796:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b79a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b79e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b7a2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b7a6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b7aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b7ae:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b7b2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b7b6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b7ba:	ed85 4a00 	vstr	s8, [r5]
 800b7be:	edd1 6a00 	vldr	s13, [r1]
 800b7c2:	ed94 9a01 	vldr	s18, [r4, #4]
 800b7c6:	edd3 2a01 	vldr	s5, [r3, #4]
 800b7ca:	edd7 8a01 	vldr	s17, [r7, #4]
 800b7ce:	edd6 0a00 	vldr	s1, [r6]
 800b7d2:	edd5 3a01 	vldr	s7, [r5, #4]
 800b7d6:	ed90 8a01 	vldr	s16, [r0, #4]
 800b7da:	ed92 7a00 	vldr	s14, [r2]
 800b7de:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b7e2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b7e6:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b7ea:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b7ee:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b7f2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b7f6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b7fa:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b7fe:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b802:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b806:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b80a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b80e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b812:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b816:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b81a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b81e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b822:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b826:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b82a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b82e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b832:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b836:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b83a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b83e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b842:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b846:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b84a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b84e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b852:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b856:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b85a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b85e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b862:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b866:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b86a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b86e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b872:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b876:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b87a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b87e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b882:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b886:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b88a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b88e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b892:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b896:	44dc      	add	ip, fp
 800b898:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b89c:	45e1      	cmp	r9, ip
 800b89e:	ed86 8a00 	vstr	s16, [r6]
 800b8a2:	ed85 2a01 	vstr	s4, [r5, #4]
 800b8a6:	4456      	add	r6, sl
 800b8a8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b8ac:	4455      	add	r5, sl
 800b8ae:	edc0 6a00 	vstr	s13, [r0]
 800b8b2:	ed82 1a00 	vstr	s2, [r2]
 800b8b6:	ed80 5a01 	vstr	s10, [r0, #4]
 800b8ba:	4452      	add	r2, sl
 800b8bc:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b8c0:	4450      	add	r0, sl
 800b8c2:	edc7 2a00 	vstr	s5, [r7]
 800b8c6:	edc4 4a00 	vstr	s9, [r4]
 800b8ca:	ed83 7a00 	vstr	s14, [r3]
 800b8ce:	edc1 5a00 	vstr	s11, [r1]
 800b8d2:	edc7 3a01 	vstr	s7, [r7, #4]
 800b8d6:	4451      	add	r1, sl
 800b8d8:	ed84 6a01 	vstr	s12, [r4, #4]
 800b8dc:	4457      	add	r7, sl
 800b8de:	edc3 7a01 	vstr	s15, [r3, #4]
 800b8e2:	4454      	add	r4, sl
 800b8e4:	4453      	add	r3, sl
 800b8e6:	f63f af44 	bhi.w	800b772 <arm_radix8_butterfly_f32+0x86>
 800b8ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ec:	2b07      	cmp	r3, #7
 800b8ee:	f240 81b7 	bls.w	800bc60 <arm_radix8_butterfly_f32+0x574>
 800b8f2:	9b06      	ldr	r3, [sp, #24]
 800b8f4:	9903      	ldr	r1, [sp, #12]
 800b8f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b8f8:	9e05      	ldr	r6, [sp, #20]
 800b8fa:	9a04      	ldr	r2, [sp, #16]
 800b8fc:	f103 0c08 	add.w	ip, r3, #8
 800b900:	9b02      	ldr	r3, [sp, #8]
 800b902:	3108      	adds	r1, #8
 800b904:	f108 0808 	add.w	r8, r8, #8
 800b908:	1841      	adds	r1, r0, r1
 800b90a:	3608      	adds	r6, #8
 800b90c:	330c      	adds	r3, #12
 800b90e:	4604      	mov	r4, r0
 800b910:	4444      	add	r4, r8
 800b912:	18c3      	adds	r3, r0, r3
 800b914:	9109      	str	r1, [sp, #36]	@ 0x24
 800b916:	1981      	adds	r1, r0, r6
 800b918:	f10e 0e08 	add.w	lr, lr, #8
 800b91c:	3208      	adds	r2, #8
 800b91e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b920:	9107      	str	r1, [sp, #28]
 800b922:	4604      	mov	r4, r0
 800b924:	4601      	mov	r1, r0
 800b926:	9304      	str	r3, [sp, #16]
 800b928:	f100 030c 	add.w	r3, r0, #12
 800b92c:	4474      	add	r4, lr
 800b92e:	f04f 0801 	mov.w	r8, #1
 800b932:	1882      	adds	r2, r0, r2
 800b934:	4461      	add	r1, ip
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	464b      	mov	r3, r9
 800b93a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b93c:	46c1      	mov	r9, r8
 800b93e:	9208      	str	r2, [sp, #32]
 800b940:	46d8      	mov	r8, fp
 800b942:	9106      	str	r1, [sp, #24]
 800b944:	f04f 0e00 	mov.w	lr, #0
 800b948:	469b      	mov	fp, r3
 800b94a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b94c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b94e:	449e      	add	lr, r3
 800b950:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b954:	441a      	add	r2, r3
 800b956:	920e      	str	r2, [sp, #56]	@ 0x38
 800b958:	441a      	add	r2, r3
 800b95a:	18d4      	adds	r4, r2, r3
 800b95c:	18e5      	adds	r5, r4, r3
 800b95e:	18ee      	adds	r6, r5, r3
 800b960:	18f7      	adds	r7, r6, r3
 800b962:	eb07 0c03 	add.w	ip, r7, r3
 800b966:	920d      	str	r2, [sp, #52]	@ 0x34
 800b968:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b96c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b970:	910c      	str	r1, [sp, #48]	@ 0x30
 800b972:	4419      	add	r1, r3
 800b974:	9103      	str	r1, [sp, #12]
 800b976:	4419      	add	r1, r3
 800b978:	18ca      	adds	r2, r1, r3
 800b97a:	9202      	str	r2, [sp, #8]
 800b97c:	441a      	add	r2, r3
 800b97e:	18d0      	adds	r0, r2, r3
 800b980:	ed92 ea01 	vldr	s28, [r2, #4]
 800b984:	9a02      	ldr	r2, [sp, #8]
 800b986:	edd4 7a00 	vldr	s15, [r4]
 800b98a:	edd2 da01 	vldr	s27, [r2, #4]
 800b98e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b990:	ed91 da01 	vldr	s26, [r1, #4]
 800b994:	ed92 ca01 	vldr	s24, [r2, #4]
 800b998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b99a:	9903      	ldr	r1, [sp, #12]
 800b99c:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9a0:	edd2 7a00 	vldr	s15, [r2]
 800b9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9a6:	edcd 7a02 	vstr	s15, [sp, #8]
 800b9aa:	edd2 7a00 	vldr	s15, [r2]
 800b9ae:	edd0 ea01 	vldr	s29, [r0, #4]
 800b9b2:	edd1 ca01 	vldr	s25, [r1, #4]
 800b9b6:	eddc ba00 	vldr	s23, [ip]
 800b9ba:	edd7 aa00 	vldr	s21, [r7]
 800b9be:	ed96 aa00 	vldr	s20, [r6]
 800b9c2:	edd5 9a00 	vldr	s19, [r5]
 800b9c6:	edcd 7a01 	vstr	s15, [sp, #4]
 800b9ca:	4403      	add	r3, r0
 800b9cc:	ed93 fa01 	vldr	s30, [r3, #4]
 800b9d0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b9d4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b9d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b9e0:	46cc      	mov	ip, r9
 800b9e2:	e001      	b.n	800b9e8 <arm_radix8_butterfly_f32+0x2fc>
 800b9e4:	3f3504f3 	.word	0x3f3504f3
 800b9e8:	ed91 6a00 	vldr	s12, [r1]
 800b9ec:	ed93 5a00 	vldr	s10, [r3]
 800b9f0:	edd0 fa00 	vldr	s31, [r0]
 800b9f4:	edd4 7a00 	vldr	s15, [r4]
 800b9f8:	ed95 7a00 	vldr	s14, [r5]
 800b9fc:	ed56 3a01 	vldr	s7, [r6, #-4]
 800ba00:	ed17 3a01 	vldr	s6, [r7, #-4]
 800ba04:	ed92 2a00 	vldr	s4, [r2]
 800ba08:	ed96 0a00 	vldr	s0, [r6]
 800ba0c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ba10:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ba14:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800ba18:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ba1c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ba20:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ba24:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ba28:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ba2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba30:	ed06 6a01 	vstr	s12, [r6, #-4]
 800ba34:	edd4 8a01 	vldr	s17, [r4, #4]
 800ba38:	ed92 9a01 	vldr	s18, [r2, #4]
 800ba3c:	edd7 0a00 	vldr	s1, [r7]
 800ba40:	edd1 2a01 	vldr	s5, [r1, #4]
 800ba44:	ed95 7a01 	vldr	s14, [r5, #4]
 800ba48:	ed93 6a01 	vldr	s12, [r3, #4]
 800ba4c:	edd0 5a01 	vldr	s11, [r0, #4]
 800ba50:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ba54:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800ba58:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ba5c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800ba60:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ba64:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ba68:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ba6c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ba70:	ee32 9a27 	vadd.f32	s18, s4, s15
 800ba74:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ba78:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ba7c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ba80:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ba84:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ba88:	ee32 1a08 	vadd.f32	s2, s4, s16
 800ba8c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800ba90:	ee32 2a48 	vsub.f32	s4, s4, s16
 800ba94:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ba98:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800ba9c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800baa0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800baa4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800baa8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800baac:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800bab0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bab4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800bab8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800babc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bac0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bac4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bac8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800bacc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bad0:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bad4:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bad8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800badc:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bae0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bae4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bae8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800baec:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800baf0:	ee30 7a68 	vsub.f32	s14, s0, s17
 800baf4:	ee35 8a03 	vadd.f32	s16, s10, s6
 800baf8:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bafc:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bb00:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800bb04:	ed9d 2a01 	vldr	s4, [sp, #4]
 800bb08:	eddd 1a02 	vldr	s3, [sp, #8]
 800bb0c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bb10:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bb14:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bb18:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bb1c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bb20:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bb24:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bb28:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800bb2c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800bb30:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800bb34:	ee21 4a84 	vmul.f32	s8, s3, s8
 800bb38:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800bb3c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800bb40:	ee22 2a08 	vmul.f32	s4, s4, s16
 800bb44:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800bb48:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bb4c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800bb50:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800bb54:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800bb58:	ee74 0a60 	vsub.f32	s1, s8, s1
 800bb5c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bb60:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800bb64:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800bb68:	ee72 1a21 	vadd.f32	s3, s4, s3
 800bb6c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800bb70:	ee38 2a89 	vadd.f32	s4, s17, s18
 800bb74:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800bb78:	ee38 8a04 	vadd.f32	s16, s16, s8
 800bb7c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800bb80:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800bb84:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800bb88:	eddd 5a03 	vldr	s11, [sp, #12]
 800bb8c:	edc6 fa00 	vstr	s31, [r6]
 800bb90:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bb94:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800bb98:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bb9c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bba0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bba4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bba8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bbac:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bbb0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bbb4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800bbb8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bbbc:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bbc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bbc4:	44c4      	add	ip, r8
 800bbc6:	45e3      	cmp	fp, ip
 800bbc8:	edc3 3a00 	vstr	s7, [r3]
 800bbcc:	edc3 6a01 	vstr	s13, [r3, #4]
 800bbd0:	4456      	add	r6, sl
 800bbd2:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bbd6:	edc7 0a00 	vstr	s1, [r7]
 800bbda:	4453      	add	r3, sl
 800bbdc:	ed80 2a00 	vstr	s4, [r0]
 800bbe0:	edc0 2a01 	vstr	s5, [r0, #4]
 800bbe4:	4457      	add	r7, sl
 800bbe6:	edc2 1a00 	vstr	s3, [r2]
 800bbea:	ed82 7a01 	vstr	s14, [r2, #4]
 800bbee:	4450      	add	r0, sl
 800bbf0:	ed85 8a00 	vstr	s16, [r5]
 800bbf4:	ed85 0a01 	vstr	s0, [r5, #4]
 800bbf8:	4452      	add	r2, sl
 800bbfa:	edc1 4a00 	vstr	s9, [r1]
 800bbfe:	4455      	add	r5, sl
 800bc00:	ed81 3a01 	vstr	s6, [r1, #4]
 800bc04:	edc4 8a00 	vstr	s17, [r4]
 800bc08:	ed84 6a01 	vstr	s12, [r4, #4]
 800bc0c:	4451      	add	r1, sl
 800bc0e:	4454      	add	r4, sl
 800bc10:	f63f aeea 	bhi.w	800b9e8 <arm_radix8_butterfly_f32+0x2fc>
 800bc14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc16:	3308      	adds	r3, #8
 800bc18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc22:	3308      	adds	r3, #8
 800bc24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc26:	9b08      	ldr	r3, [sp, #32]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	3308      	adds	r3, #8
 800bc30:	9307      	str	r3, [sp, #28]
 800bc32:	9b06      	ldr	r3, [sp, #24]
 800bc34:	3308      	adds	r3, #8
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	9b04      	ldr	r3, [sp, #16]
 800bc40:	3308      	adds	r3, #8
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc46:	f109 0901 	add.w	r9, r9, #1
 800bc4a:	454b      	cmp	r3, r9
 800bc4c:	f47f ae7d 	bne.w	800b94a <arm_radix8_butterfly_f32+0x25e>
 800bc50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	46d9      	mov	r9, fp
 800bc58:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc5a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800bc5e:	e554      	b.n	800b70a <arm_radix8_butterfly_f32+0x1e>
 800bc60:	b015      	add	sp, #84	@ 0x54
 800bc62:	ecbd 8b10 	vpop	{d8-d15}
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	bf00      	nop

0800bc6c <memset>:
 800bc6c:	4402      	add	r2, r0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d100      	bne.n	800bc76 <memset+0xa>
 800bc74:	4770      	bx	lr
 800bc76:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7a:	e7f9      	b.n	800bc70 <memset+0x4>

0800bc7c <__errno>:
 800bc7c:	4b01      	ldr	r3, [pc, #4]	@ (800bc84 <__errno+0x8>)
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	20000010 	.word	0x20000010

0800bc88 <__libc_init_array>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	4d0d      	ldr	r5, [pc, #52]	@ (800bcc0 <__libc_init_array+0x38>)
 800bc8c:	4c0d      	ldr	r4, [pc, #52]	@ (800bcc4 <__libc_init_array+0x3c>)
 800bc8e:	1b64      	subs	r4, r4, r5
 800bc90:	10a4      	asrs	r4, r4, #2
 800bc92:	2600      	movs	r6, #0
 800bc94:	42a6      	cmp	r6, r4
 800bc96:	d109      	bne.n	800bcac <__libc_init_array+0x24>
 800bc98:	4d0b      	ldr	r5, [pc, #44]	@ (800bcc8 <__libc_init_array+0x40>)
 800bc9a:	4c0c      	ldr	r4, [pc, #48]	@ (800bccc <__libc_init_array+0x44>)
 800bc9c:	f001 fd4a 	bl	800d734 <_init>
 800bca0:	1b64      	subs	r4, r4, r5
 800bca2:	10a4      	asrs	r4, r4, #2
 800bca4:	2600      	movs	r6, #0
 800bca6:	42a6      	cmp	r6, r4
 800bca8:	d105      	bne.n	800bcb6 <__libc_init_array+0x2e>
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}
 800bcac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb0:	4798      	blx	r3
 800bcb2:	3601      	adds	r6, #1
 800bcb4:	e7ee      	b.n	800bc94 <__libc_init_array+0xc>
 800bcb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcba:	4798      	blx	r3
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	e7f2      	b.n	800bca6 <__libc_init_array+0x1e>
 800bcc0:	08020c28 	.word	0x08020c28
 800bcc4:	08020c28 	.word	0x08020c28
 800bcc8:	08020c28 	.word	0x08020c28
 800bccc:	08020c2c 	.word	0x08020c2c

0800bcd0 <pow>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	ed2d 8b02 	vpush	{d8}
 800bcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcda:	eef0 8a60 	vmov.f32	s17, s1
 800bcde:	ec55 4b11 	vmov	r4, r5, d1
 800bce2:	f000 f951 	bl	800bf88 <__ieee754_pow>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	ec57 6b10 	vmov	r6, r7, d0
 800bcf2:	f7f4 fedb 	bl	8000aac <__aeabi_dcmpun>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d13b      	bne.n	800bd72 <pow+0xa2>
 800bcfa:	ec51 0b18 	vmov	r0, r1, d8
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2300      	movs	r3, #0
 800bd02:	f7f4 fea1 	bl	8000a48 <__aeabi_dcmpeq>
 800bd06:	b1b8      	cbz	r0, 800bd38 <pow+0x68>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 fe9a 	bl	8000a48 <__aeabi_dcmpeq>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d146      	bne.n	800bda6 <pow+0xd6>
 800bd18:	ec45 4b10 	vmov	d0, r4, r5
 800bd1c:	f000 f8aa 	bl	800be74 <finite>
 800bd20:	b338      	cbz	r0, 800bd72 <pow+0xa2>
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fe97 	bl	8000a5c <__aeabi_dcmplt>
 800bd2e:	b300      	cbz	r0, 800bd72 <pow+0xa2>
 800bd30:	f7ff ffa4 	bl	800bc7c <__errno>
 800bd34:	2322      	movs	r3, #34	@ 0x22
 800bd36:	e01b      	b.n	800bd70 <pow+0xa0>
 800bd38:	ec47 6b10 	vmov	d0, r6, r7
 800bd3c:	f000 f89a 	bl	800be74 <finite>
 800bd40:	b9e0      	cbnz	r0, 800bd7c <pow+0xac>
 800bd42:	eeb0 0a48 	vmov.f32	s0, s16
 800bd46:	eef0 0a68 	vmov.f32	s1, s17
 800bd4a:	f000 f893 	bl	800be74 <finite>
 800bd4e:	b1a8      	cbz	r0, 800bd7c <pow+0xac>
 800bd50:	ec45 4b10 	vmov	d0, r4, r5
 800bd54:	f000 f88e 	bl	800be74 <finite>
 800bd58:	b180      	cbz	r0, 800bd7c <pow+0xac>
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	463b      	mov	r3, r7
 800bd5e:	4630      	mov	r0, r6
 800bd60:	4639      	mov	r1, r7
 800bd62:	f7f4 fea3 	bl	8000aac <__aeabi_dcmpun>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d0e2      	beq.n	800bd30 <pow+0x60>
 800bd6a:	f7ff ff87 	bl	800bc7c <__errno>
 800bd6e:	2321      	movs	r3, #33	@ 0x21
 800bd70:	6003      	str	r3, [r0, #0]
 800bd72:	ecbd 8b02 	vpop	{d8}
 800bd76:	ec47 6b10 	vmov	d0, r6, r7
 800bd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2300      	movs	r3, #0
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 fe60 	bl	8000a48 <__aeabi_dcmpeq>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d0f2      	beq.n	800bd72 <pow+0xa2>
 800bd8c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd90:	eef0 0a68 	vmov.f32	s1, s17
 800bd94:	f000 f86e 	bl	800be74 <finite>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d0ea      	beq.n	800bd72 <pow+0xa2>
 800bd9c:	ec45 4b10 	vmov	d0, r4, r5
 800bda0:	f000 f868 	bl	800be74 <finite>
 800bda4:	e7c3      	b.n	800bd2e <pow+0x5e>
 800bda6:	4f01      	ldr	r7, [pc, #4]	@ (800bdac <pow+0xdc>)
 800bda8:	2600      	movs	r6, #0
 800bdaa:	e7e2      	b.n	800bd72 <pow+0xa2>
 800bdac:	3ff00000 	.word	0x3ff00000

0800bdb0 <sqrtf>:
 800bdb0:	b508      	push	{r3, lr}
 800bdb2:	ed2d 8b02 	vpush	{d8}
 800bdb6:	eeb0 8a40 	vmov.f32	s16, s0
 800bdba:	f000 f866 	bl	800be8a <__ieee754_sqrtf>
 800bdbe:	eeb4 8a48 	vcmp.f32	s16, s16
 800bdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc6:	d60c      	bvs.n	800bde2 <sqrtf+0x32>
 800bdc8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bde8 <sqrtf+0x38>
 800bdcc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd4:	d505      	bpl.n	800bde2 <sqrtf+0x32>
 800bdd6:	f7ff ff51 	bl	800bc7c <__errno>
 800bdda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bdde:	2321      	movs	r3, #33	@ 0x21
 800bde0:	6003      	str	r3, [r0, #0]
 800bde2:	ecbd 8b02 	vpop	{d8}
 800bde6:	bd08      	pop	{r3, pc}
 800bde8:	00000000 	.word	0x00000000

0800bdec <cosf>:
 800bdec:	ee10 3a10 	vmov	r3, s0
 800bdf0:	b507      	push	{r0, r1, r2, lr}
 800bdf2:	4a1e      	ldr	r2, [pc, #120]	@ (800be6c <cosf+0x80>)
 800bdf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d806      	bhi.n	800be0a <cosf+0x1e>
 800bdfc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800be70 <cosf+0x84>
 800be00:	b003      	add	sp, #12
 800be02:	f85d eb04 	ldr.w	lr, [sp], #4
 800be06:	f000 be0b 	b.w	800ca20 <__kernel_cosf>
 800be0a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be0e:	d304      	bcc.n	800be1a <cosf+0x2e>
 800be10:	ee30 0a40 	vsub.f32	s0, s0, s0
 800be14:	b003      	add	sp, #12
 800be16:	f85d fb04 	ldr.w	pc, [sp], #4
 800be1a:	4668      	mov	r0, sp
 800be1c:	f000 fea0 	bl	800cb60 <__ieee754_rem_pio2f>
 800be20:	f000 0003 	and.w	r0, r0, #3
 800be24:	2801      	cmp	r0, #1
 800be26:	d009      	beq.n	800be3c <cosf+0x50>
 800be28:	2802      	cmp	r0, #2
 800be2a:	d010      	beq.n	800be4e <cosf+0x62>
 800be2c:	b9b0      	cbnz	r0, 800be5c <cosf+0x70>
 800be2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be32:	ed9d 0a00 	vldr	s0, [sp]
 800be36:	f000 fdf3 	bl	800ca20 <__kernel_cosf>
 800be3a:	e7eb      	b.n	800be14 <cosf+0x28>
 800be3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be40:	ed9d 0a00 	vldr	s0, [sp]
 800be44:	f000 fe44 	bl	800cad0 <__kernel_sinf>
 800be48:	eeb1 0a40 	vneg.f32	s0, s0
 800be4c:	e7e2      	b.n	800be14 <cosf+0x28>
 800be4e:	eddd 0a01 	vldr	s1, [sp, #4]
 800be52:	ed9d 0a00 	vldr	s0, [sp]
 800be56:	f000 fde3 	bl	800ca20 <__kernel_cosf>
 800be5a:	e7f5      	b.n	800be48 <cosf+0x5c>
 800be5c:	eddd 0a01 	vldr	s1, [sp, #4]
 800be60:	ed9d 0a00 	vldr	s0, [sp]
 800be64:	2001      	movs	r0, #1
 800be66:	f000 fe33 	bl	800cad0 <__kernel_sinf>
 800be6a:	e7d3      	b.n	800be14 <cosf+0x28>
 800be6c:	3f490fd8 	.word	0x3f490fd8
 800be70:	00000000 	.word	0x00000000

0800be74 <finite>:
 800be74:	b082      	sub	sp, #8
 800be76:	ed8d 0b00 	vstr	d0, [sp]
 800be7a:	9801      	ldr	r0, [sp, #4]
 800be7c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800be80:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800be84:	0fc0      	lsrs	r0, r0, #31
 800be86:	b002      	add	sp, #8
 800be88:	4770      	bx	lr

0800be8a <__ieee754_sqrtf>:
 800be8a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be8e:	4770      	bx	lr

0800be90 <floor>:
 800be90:	ec51 0b10 	vmov	r0, r1, d0
 800be94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bea0:	2e13      	cmp	r6, #19
 800bea2:	460c      	mov	r4, r1
 800bea4:	4605      	mov	r5, r0
 800bea6:	4680      	mov	r8, r0
 800bea8:	dc34      	bgt.n	800bf14 <floor+0x84>
 800beaa:	2e00      	cmp	r6, #0
 800beac:	da17      	bge.n	800bede <floor+0x4e>
 800beae:	a332      	add	r3, pc, #200	@ (adr r3, 800bf78 <floor+0xe8>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 f9aa 	bl	800020c <__adddf3>
 800beb8:	2200      	movs	r2, #0
 800beba:	2300      	movs	r3, #0
 800bebc:	f7f4 fdec 	bl	8000a98 <__aeabi_dcmpgt>
 800bec0:	b150      	cbz	r0, 800bed8 <floor+0x48>
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	da55      	bge.n	800bf72 <floor+0xe2>
 800bec6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800beca:	432c      	orrs	r4, r5
 800becc:	2500      	movs	r5, #0
 800bece:	42ac      	cmp	r4, r5
 800bed0:	4c2b      	ldr	r4, [pc, #172]	@ (800bf80 <floor+0xf0>)
 800bed2:	bf08      	it	eq
 800bed4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bed8:	4621      	mov	r1, r4
 800beda:	4628      	mov	r0, r5
 800bedc:	e023      	b.n	800bf26 <floor+0x96>
 800bede:	4f29      	ldr	r7, [pc, #164]	@ (800bf84 <floor+0xf4>)
 800bee0:	4137      	asrs	r7, r6
 800bee2:	ea01 0307 	and.w	r3, r1, r7
 800bee6:	4303      	orrs	r3, r0
 800bee8:	d01d      	beq.n	800bf26 <floor+0x96>
 800beea:	a323      	add	r3, pc, #140	@ (adr r3, 800bf78 <floor+0xe8>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	f7f4 f98c 	bl	800020c <__adddf3>
 800bef4:	2200      	movs	r2, #0
 800bef6:	2300      	movs	r3, #0
 800bef8:	f7f4 fdce 	bl	8000a98 <__aeabi_dcmpgt>
 800befc:	2800      	cmp	r0, #0
 800befe:	d0eb      	beq.n	800bed8 <floor+0x48>
 800bf00:	2c00      	cmp	r4, #0
 800bf02:	bfbe      	ittt	lt
 800bf04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800bf08:	4133      	asrlt	r3, r6
 800bf0a:	18e4      	addlt	r4, r4, r3
 800bf0c:	ea24 0407 	bic.w	r4, r4, r7
 800bf10:	2500      	movs	r5, #0
 800bf12:	e7e1      	b.n	800bed8 <floor+0x48>
 800bf14:	2e33      	cmp	r6, #51	@ 0x33
 800bf16:	dd0a      	ble.n	800bf2e <floor+0x9e>
 800bf18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bf1c:	d103      	bne.n	800bf26 <floor+0x96>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	f7f4 f973 	bl	800020c <__adddf3>
 800bf26:	ec41 0b10 	vmov	d0, r0, r1
 800bf2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bf32:	f04f 37ff 	mov.w	r7, #4294967295
 800bf36:	40df      	lsrs	r7, r3
 800bf38:	4207      	tst	r7, r0
 800bf3a:	d0f4      	beq.n	800bf26 <floor+0x96>
 800bf3c:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf78 <floor+0xe8>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f963 	bl	800020c <__adddf3>
 800bf46:	2200      	movs	r2, #0
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f7f4 fda5 	bl	8000a98 <__aeabi_dcmpgt>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d0c2      	beq.n	800bed8 <floor+0x48>
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	da0a      	bge.n	800bf6c <floor+0xdc>
 800bf56:	2e14      	cmp	r6, #20
 800bf58:	d101      	bne.n	800bf5e <floor+0xce>
 800bf5a:	3401      	adds	r4, #1
 800bf5c:	e006      	b.n	800bf6c <floor+0xdc>
 800bf5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bf62:	2301      	movs	r3, #1
 800bf64:	40b3      	lsls	r3, r6
 800bf66:	441d      	add	r5, r3
 800bf68:	4545      	cmp	r5, r8
 800bf6a:	d3f6      	bcc.n	800bf5a <floor+0xca>
 800bf6c:	ea25 0507 	bic.w	r5, r5, r7
 800bf70:	e7b2      	b.n	800bed8 <floor+0x48>
 800bf72:	2500      	movs	r5, #0
 800bf74:	462c      	mov	r4, r5
 800bf76:	e7af      	b.n	800bed8 <floor+0x48>
 800bf78:	8800759c 	.word	0x8800759c
 800bf7c:	7e37e43c 	.word	0x7e37e43c
 800bf80:	bff00000 	.word	0xbff00000
 800bf84:	000fffff 	.word	0x000fffff

0800bf88 <__ieee754_pow>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	b091      	sub	sp, #68	@ 0x44
 800bf8e:	ed8d 1b00 	vstr	d1, [sp]
 800bf92:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bf96:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bf9a:	ea5a 0001 	orrs.w	r0, sl, r1
 800bf9e:	ec57 6b10 	vmov	r6, r7, d0
 800bfa2:	d113      	bne.n	800bfcc <__ieee754_pow+0x44>
 800bfa4:	19b3      	adds	r3, r6, r6
 800bfa6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bfaa:	4152      	adcs	r2, r2
 800bfac:	4298      	cmp	r0, r3
 800bfae:	4b98      	ldr	r3, [pc, #608]	@ (800c210 <__ieee754_pow+0x288>)
 800bfb0:	4193      	sbcs	r3, r2
 800bfb2:	f080 84ea 	bcs.w	800c98a <__ieee754_pow+0xa02>
 800bfb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 f925 	bl	800020c <__adddf3>
 800bfc2:	ec41 0b10 	vmov	d0, r0, r1
 800bfc6:	b011      	add	sp, #68	@ 0x44
 800bfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfcc:	4a91      	ldr	r2, [pc, #580]	@ (800c214 <__ieee754_pow+0x28c>)
 800bfce:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bfd2:	4590      	cmp	r8, r2
 800bfd4:	463d      	mov	r5, r7
 800bfd6:	4633      	mov	r3, r6
 800bfd8:	d806      	bhi.n	800bfe8 <__ieee754_pow+0x60>
 800bfda:	d101      	bne.n	800bfe0 <__ieee754_pow+0x58>
 800bfdc:	2e00      	cmp	r6, #0
 800bfde:	d1ea      	bne.n	800bfb6 <__ieee754_pow+0x2e>
 800bfe0:	4592      	cmp	sl, r2
 800bfe2:	d801      	bhi.n	800bfe8 <__ieee754_pow+0x60>
 800bfe4:	d10e      	bne.n	800c004 <__ieee754_pow+0x7c>
 800bfe6:	b169      	cbz	r1, 800c004 <__ieee754_pow+0x7c>
 800bfe8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bfec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bff0:	431d      	orrs	r5, r3
 800bff2:	d1e0      	bne.n	800bfb6 <__ieee754_pow+0x2e>
 800bff4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bff8:	18db      	adds	r3, r3, r3
 800bffa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bffe:	4152      	adcs	r2, r2
 800c000:	429d      	cmp	r5, r3
 800c002:	e7d4      	b.n	800bfae <__ieee754_pow+0x26>
 800c004:	2d00      	cmp	r5, #0
 800c006:	46c3      	mov	fp, r8
 800c008:	da3a      	bge.n	800c080 <__ieee754_pow+0xf8>
 800c00a:	4a83      	ldr	r2, [pc, #524]	@ (800c218 <__ieee754_pow+0x290>)
 800c00c:	4592      	cmp	sl, r2
 800c00e:	d84d      	bhi.n	800c0ac <__ieee754_pow+0x124>
 800c010:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c014:	4592      	cmp	sl, r2
 800c016:	f240 84c7 	bls.w	800c9a8 <__ieee754_pow+0xa20>
 800c01a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c01e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c022:	2a14      	cmp	r2, #20
 800c024:	dd0f      	ble.n	800c046 <__ieee754_pow+0xbe>
 800c026:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c02a:	fa21 f402 	lsr.w	r4, r1, r2
 800c02e:	fa04 f202 	lsl.w	r2, r4, r2
 800c032:	428a      	cmp	r2, r1
 800c034:	f040 84b8 	bne.w	800c9a8 <__ieee754_pow+0xa20>
 800c038:	f004 0401 	and.w	r4, r4, #1
 800c03c:	f1c4 0402 	rsb	r4, r4, #2
 800c040:	2900      	cmp	r1, #0
 800c042:	d158      	bne.n	800c0f6 <__ieee754_pow+0x16e>
 800c044:	e00e      	b.n	800c064 <__ieee754_pow+0xdc>
 800c046:	2900      	cmp	r1, #0
 800c048:	d154      	bne.n	800c0f4 <__ieee754_pow+0x16c>
 800c04a:	f1c2 0214 	rsb	r2, r2, #20
 800c04e:	fa4a f402 	asr.w	r4, sl, r2
 800c052:	fa04 f202 	lsl.w	r2, r4, r2
 800c056:	4552      	cmp	r2, sl
 800c058:	f040 84a3 	bne.w	800c9a2 <__ieee754_pow+0xa1a>
 800c05c:	f004 0401 	and.w	r4, r4, #1
 800c060:	f1c4 0402 	rsb	r4, r4, #2
 800c064:	4a6d      	ldr	r2, [pc, #436]	@ (800c21c <__ieee754_pow+0x294>)
 800c066:	4592      	cmp	sl, r2
 800c068:	d12e      	bne.n	800c0c8 <__ieee754_pow+0x140>
 800c06a:	f1b9 0f00 	cmp.w	r9, #0
 800c06e:	f280 8494 	bge.w	800c99a <__ieee754_pow+0xa12>
 800c072:	496a      	ldr	r1, [pc, #424]	@ (800c21c <__ieee754_pow+0x294>)
 800c074:	4632      	mov	r2, r6
 800c076:	463b      	mov	r3, r7
 800c078:	2000      	movs	r0, #0
 800c07a:	f7f4 fba7 	bl	80007cc <__aeabi_ddiv>
 800c07e:	e7a0      	b.n	800bfc2 <__ieee754_pow+0x3a>
 800c080:	2400      	movs	r4, #0
 800c082:	bbc1      	cbnz	r1, 800c0f6 <__ieee754_pow+0x16e>
 800c084:	4a63      	ldr	r2, [pc, #396]	@ (800c214 <__ieee754_pow+0x28c>)
 800c086:	4592      	cmp	sl, r2
 800c088:	d1ec      	bne.n	800c064 <__ieee754_pow+0xdc>
 800c08a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c08e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c092:	431a      	orrs	r2, r3
 800c094:	f000 8479 	beq.w	800c98a <__ieee754_pow+0xa02>
 800c098:	4b61      	ldr	r3, [pc, #388]	@ (800c220 <__ieee754_pow+0x298>)
 800c09a:	4598      	cmp	r8, r3
 800c09c:	d908      	bls.n	800c0b0 <__ieee754_pow+0x128>
 800c09e:	f1b9 0f00 	cmp.w	r9, #0
 800c0a2:	f2c0 8476 	blt.w	800c992 <__ieee754_pow+0xa0a>
 800c0a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0aa:	e78a      	b.n	800bfc2 <__ieee754_pow+0x3a>
 800c0ac:	2402      	movs	r4, #2
 800c0ae:	e7e8      	b.n	800c082 <__ieee754_pow+0xfa>
 800c0b0:	f1b9 0f00 	cmp.w	r9, #0
 800c0b4:	f04f 0000 	mov.w	r0, #0
 800c0b8:	f04f 0100 	mov.w	r1, #0
 800c0bc:	da81      	bge.n	800bfc2 <__ieee754_pow+0x3a>
 800c0be:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c0c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c0c6:	e77c      	b.n	800bfc2 <__ieee754_pow+0x3a>
 800c0c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c0cc:	d106      	bne.n	800c0dc <__ieee754_pow+0x154>
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	463b      	mov	r3, r7
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7f4 fa4f 	bl	8000578 <__aeabi_dmul>
 800c0da:	e772      	b.n	800bfc2 <__ieee754_pow+0x3a>
 800c0dc:	4a51      	ldr	r2, [pc, #324]	@ (800c224 <__ieee754_pow+0x29c>)
 800c0de:	4591      	cmp	r9, r2
 800c0e0:	d109      	bne.n	800c0f6 <__ieee754_pow+0x16e>
 800c0e2:	2d00      	cmp	r5, #0
 800c0e4:	db07      	blt.n	800c0f6 <__ieee754_pow+0x16e>
 800c0e6:	ec47 6b10 	vmov	d0, r6, r7
 800c0ea:	b011      	add	sp, #68	@ 0x44
 800c0ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f0:	f000 bf2a 	b.w	800cf48 <__ieee754_sqrt>
 800c0f4:	2400      	movs	r4, #0
 800c0f6:	ec47 6b10 	vmov	d0, r6, r7
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	f000 fc88 	bl	800ca10 <fabs>
 800c100:	9b02      	ldr	r3, [sp, #8]
 800c102:	ec51 0b10 	vmov	r0, r1, d0
 800c106:	bb53      	cbnz	r3, 800c15e <__ieee754_pow+0x1d6>
 800c108:	4b44      	ldr	r3, [pc, #272]	@ (800c21c <__ieee754_pow+0x294>)
 800c10a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c10e:	429a      	cmp	r2, r3
 800c110:	d002      	beq.n	800c118 <__ieee754_pow+0x190>
 800c112:	f1b8 0f00 	cmp.w	r8, #0
 800c116:	d122      	bne.n	800c15e <__ieee754_pow+0x1d6>
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	da05      	bge.n	800c12a <__ieee754_pow+0x1a2>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	2000      	movs	r0, #0
 800c124:	493d      	ldr	r1, [pc, #244]	@ (800c21c <__ieee754_pow+0x294>)
 800c126:	f7f4 fb51 	bl	80007cc <__aeabi_ddiv>
 800c12a:	2d00      	cmp	r5, #0
 800c12c:	f6bf af49 	bge.w	800bfc2 <__ieee754_pow+0x3a>
 800c130:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c134:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c138:	ea58 0804 	orrs.w	r8, r8, r4
 800c13c:	d108      	bne.n	800c150 <__ieee754_pow+0x1c8>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4610      	mov	r0, r2
 800c144:	4619      	mov	r1, r3
 800c146:	f7f4 f85f 	bl	8000208 <__aeabi_dsub>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	e794      	b.n	800c07a <__ieee754_pow+0xf2>
 800c150:	2c01      	cmp	r4, #1
 800c152:	f47f af36 	bne.w	800bfc2 <__ieee754_pow+0x3a>
 800c156:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c15a:	4619      	mov	r1, r3
 800c15c:	e731      	b.n	800bfc2 <__ieee754_pow+0x3a>
 800c15e:	0feb      	lsrs	r3, r5, #31
 800c160:	3b01      	subs	r3, #1
 800c162:	ea53 0204 	orrs.w	r2, r3, r4
 800c166:	d102      	bne.n	800c16e <__ieee754_pow+0x1e6>
 800c168:	4632      	mov	r2, r6
 800c16a:	463b      	mov	r3, r7
 800c16c:	e7e9      	b.n	800c142 <__ieee754_pow+0x1ba>
 800c16e:	3c01      	subs	r4, #1
 800c170:	431c      	orrs	r4, r3
 800c172:	d016      	beq.n	800c1a2 <__ieee754_pow+0x21a>
 800c174:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c200 <__ieee754_pow+0x278>
 800c178:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c17c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c180:	f240 8112 	bls.w	800c3a8 <__ieee754_pow+0x420>
 800c184:	4b28      	ldr	r3, [pc, #160]	@ (800c228 <__ieee754_pow+0x2a0>)
 800c186:	459a      	cmp	sl, r3
 800c188:	4b25      	ldr	r3, [pc, #148]	@ (800c220 <__ieee754_pow+0x298>)
 800c18a:	d916      	bls.n	800c1ba <__ieee754_pow+0x232>
 800c18c:	4598      	cmp	r8, r3
 800c18e:	d80b      	bhi.n	800c1a8 <__ieee754_pow+0x220>
 800c190:	f1b9 0f00 	cmp.w	r9, #0
 800c194:	da0b      	bge.n	800c1ae <__ieee754_pow+0x226>
 800c196:	2000      	movs	r0, #0
 800c198:	b011      	add	sp, #68	@ 0x44
 800c19a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19e:	f000 becb 	b.w	800cf38 <__math_oflow>
 800c1a2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c208 <__ieee754_pow+0x280>
 800c1a6:	e7e7      	b.n	800c178 <__ieee754_pow+0x1f0>
 800c1a8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ac:	dcf3      	bgt.n	800c196 <__ieee754_pow+0x20e>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	b011      	add	sp, #68	@ 0x44
 800c1b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b6:	f000 beb7 	b.w	800cf28 <__math_uflow>
 800c1ba:	4598      	cmp	r8, r3
 800c1bc:	d20c      	bcs.n	800c1d8 <__ieee754_pow+0x250>
 800c1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f7f4 fc49 	bl	8000a5c <__aeabi_dcmplt>
 800c1ca:	3800      	subs	r0, #0
 800c1cc:	bf18      	it	ne
 800c1ce:	2001      	movne	r0, #1
 800c1d0:	f1b9 0f00 	cmp.w	r9, #0
 800c1d4:	daec      	bge.n	800c1b0 <__ieee754_pow+0x228>
 800c1d6:	e7df      	b.n	800c198 <__ieee754_pow+0x210>
 800c1d8:	4b10      	ldr	r3, [pc, #64]	@ (800c21c <__ieee754_pow+0x294>)
 800c1da:	4598      	cmp	r8, r3
 800c1dc:	f04f 0200 	mov.w	r2, #0
 800c1e0:	d924      	bls.n	800c22c <__ieee754_pow+0x2a4>
 800c1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f7f4 fc38 	bl	8000a5c <__aeabi_dcmplt>
 800c1ec:	3800      	subs	r0, #0
 800c1ee:	bf18      	it	ne
 800c1f0:	2001      	movne	r0, #1
 800c1f2:	f1b9 0f00 	cmp.w	r9, #0
 800c1f6:	dccf      	bgt.n	800c198 <__ieee754_pow+0x210>
 800c1f8:	e7da      	b.n	800c1b0 <__ieee754_pow+0x228>
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w
 800c200:	00000000 	.word	0x00000000
 800c204:	3ff00000 	.word	0x3ff00000
 800c208:	00000000 	.word	0x00000000
 800c20c:	bff00000 	.word	0xbff00000
 800c210:	fff00000 	.word	0xfff00000
 800c214:	7ff00000 	.word	0x7ff00000
 800c218:	433fffff 	.word	0x433fffff
 800c21c:	3ff00000 	.word	0x3ff00000
 800c220:	3fefffff 	.word	0x3fefffff
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	43f00000 	.word	0x43f00000
 800c22c:	4b5a      	ldr	r3, [pc, #360]	@ (800c398 <__ieee754_pow+0x410>)
 800c22e:	f7f3 ffeb 	bl	8000208 <__aeabi_dsub>
 800c232:	a351      	add	r3, pc, #324	@ (adr r3, 800c378 <__ieee754_pow+0x3f0>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	4604      	mov	r4, r0
 800c23a:	460d      	mov	r5, r1
 800c23c:	f7f4 f99c 	bl	8000578 <__aeabi_dmul>
 800c240:	a34f      	add	r3, pc, #316	@ (adr r3, 800c380 <__ieee754_pow+0x3f8>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	4620      	mov	r0, r4
 800c24c:	4629      	mov	r1, r5
 800c24e:	f7f4 f993 	bl	8000578 <__aeabi_dmul>
 800c252:	4b52      	ldr	r3, [pc, #328]	@ (800c39c <__ieee754_pow+0x414>)
 800c254:	4682      	mov	sl, r0
 800c256:	468b      	mov	fp, r1
 800c258:	2200      	movs	r2, #0
 800c25a:	4620      	mov	r0, r4
 800c25c:	4629      	mov	r1, r5
 800c25e:	f7f4 f98b 	bl	8000578 <__aeabi_dmul>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	a148      	add	r1, pc, #288	@ (adr r1, 800c388 <__ieee754_pow+0x400>)
 800c268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c26c:	f7f3 ffcc 	bl	8000208 <__aeabi_dsub>
 800c270:	4622      	mov	r2, r4
 800c272:	462b      	mov	r3, r5
 800c274:	f7f4 f980 	bl	8000578 <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	2000      	movs	r0, #0
 800c27e:	4948      	ldr	r1, [pc, #288]	@ (800c3a0 <__ieee754_pow+0x418>)
 800c280:	f7f3 ffc2 	bl	8000208 <__aeabi_dsub>
 800c284:	4622      	mov	r2, r4
 800c286:	4680      	mov	r8, r0
 800c288:	4689      	mov	r9, r1
 800c28a:	462b      	mov	r3, r5
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f7f4 f972 	bl	8000578 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4640      	mov	r0, r8
 800c29a:	4649      	mov	r1, r9
 800c29c:	f7f4 f96c 	bl	8000578 <__aeabi_dmul>
 800c2a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800c390 <__ieee754_pow+0x408>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f4 f967 	bl	8000578 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	4659      	mov	r1, fp
 800c2b2:	f7f3 ffa9 	bl	8000208 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4680      	mov	r8, r0
 800c2bc:	4689      	mov	r9, r1
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f3 ffa3 	bl	800020c <__adddf3>
 800c2c6:	2400      	movs	r4, #0
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	463b      	mov	r3, r7
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	f7f3 ff9a 	bl	8000208 <__aeabi_dsub>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4640      	mov	r0, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	f7f3 ff94 	bl	8000208 <__aeabi_dsub>
 800c2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	460f      	mov	r7, r1
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	465b      	mov	r3, fp
 800c2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2fc:	f7f3 ff84 	bl	8000208 <__aeabi_dsub>
 800c300:	4622      	mov	r2, r4
 800c302:	462b      	mov	r3, r5
 800c304:	f7f4 f938 	bl	8000578 <__aeabi_dmul>
 800c308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c30c:	4680      	mov	r8, r0
 800c30e:	4689      	mov	r9, r1
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	f7f4 f930 	bl	8000578 <__aeabi_dmul>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4640      	mov	r0, r8
 800c31e:	4649      	mov	r1, r9
 800c320:	f7f3 ff74 	bl	800020c <__adddf3>
 800c324:	4652      	mov	r2, sl
 800c326:	465b      	mov	r3, fp
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 f922 	bl	8000578 <__aeabi_dmul>
 800c334:	460b      	mov	r3, r1
 800c336:	4602      	mov	r2, r0
 800c338:	4680      	mov	r8, r0
 800c33a:	4689      	mov	r9, r1
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f3 ff64 	bl	800020c <__adddf3>
 800c344:	4b17      	ldr	r3, [pc, #92]	@ (800c3a4 <__ieee754_pow+0x41c>)
 800c346:	4299      	cmp	r1, r3
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	468a      	mov	sl, r1
 800c34e:	468b      	mov	fp, r1
 800c350:	f340 82ef 	ble.w	800c932 <__ieee754_pow+0x9aa>
 800c354:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c358:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c35c:	4303      	orrs	r3, r0
 800c35e:	f000 81e8 	beq.w	800c732 <__ieee754_pow+0x7aa>
 800c362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c366:	2200      	movs	r2, #0
 800c368:	2300      	movs	r3, #0
 800c36a:	f7f4 fb77 	bl	8000a5c <__aeabi_dcmplt>
 800c36e:	3800      	subs	r0, #0
 800c370:	bf18      	it	ne
 800c372:	2001      	movne	r0, #1
 800c374:	e710      	b.n	800c198 <__ieee754_pow+0x210>
 800c376:	bf00      	nop
 800c378:	60000000 	.word	0x60000000
 800c37c:	3ff71547 	.word	0x3ff71547
 800c380:	f85ddf44 	.word	0xf85ddf44
 800c384:	3e54ae0b 	.word	0x3e54ae0b
 800c388:	55555555 	.word	0x55555555
 800c38c:	3fd55555 	.word	0x3fd55555
 800c390:	652b82fe 	.word	0x652b82fe
 800c394:	3ff71547 	.word	0x3ff71547
 800c398:	3ff00000 	.word	0x3ff00000
 800c39c:	3fd00000 	.word	0x3fd00000
 800c3a0:	3fe00000 	.word	0x3fe00000
 800c3a4:	408fffff 	.word	0x408fffff
 800c3a8:	4bd5      	ldr	r3, [pc, #852]	@ (800c700 <__ieee754_pow+0x778>)
 800c3aa:	402b      	ands	r3, r5
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	b92b      	cbnz	r3, 800c3bc <__ieee754_pow+0x434>
 800c3b0:	4bd4      	ldr	r3, [pc, #848]	@ (800c704 <__ieee754_pow+0x77c>)
 800c3b2:	f7f4 f8e1 	bl	8000578 <__aeabi_dmul>
 800c3b6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c3ba:	468b      	mov	fp, r1
 800c3bc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c3c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c3c4:	4413      	add	r3, r2
 800c3c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3c8:	4bcf      	ldr	r3, [pc, #828]	@ (800c708 <__ieee754_pow+0x780>)
 800c3ca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c3ce:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c3d2:	459b      	cmp	fp, r3
 800c3d4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c3d8:	dd08      	ble.n	800c3ec <__ieee754_pow+0x464>
 800c3da:	4bcc      	ldr	r3, [pc, #816]	@ (800c70c <__ieee754_pow+0x784>)
 800c3dc:	459b      	cmp	fp, r3
 800c3de:	f340 81a5 	ble.w	800c72c <__ieee754_pow+0x7a4>
 800c3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3e8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c3ec:	f04f 0a00 	mov.w	sl, #0
 800c3f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c3f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3f6:	4bc6      	ldr	r3, [pc, #792]	@ (800c710 <__ieee754_pow+0x788>)
 800c3f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c3fc:	ed93 7b00 	vldr	d7, [r3]
 800c400:	4629      	mov	r1, r5
 800c402:	ec53 2b17 	vmov	r2, r3, d7
 800c406:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c40a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c40e:	f7f3 fefb 	bl	8000208 <__aeabi_dsub>
 800c412:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c416:	4606      	mov	r6, r0
 800c418:	460f      	mov	r7, r1
 800c41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c41e:	f7f3 fef5 	bl	800020c <__adddf3>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	2000      	movs	r0, #0
 800c428:	49ba      	ldr	r1, [pc, #744]	@ (800c714 <__ieee754_pow+0x78c>)
 800c42a:	f7f4 f9cf 	bl	80007cc <__aeabi_ddiv>
 800c42e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4630      	mov	r0, r6
 800c438:	4639      	mov	r1, r7
 800c43a:	f7f4 f89d 	bl	8000578 <__aeabi_dmul>
 800c43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c442:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c446:	106d      	asrs	r5, r5, #1
 800c448:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c44c:	f04f 0b00 	mov.w	fp, #0
 800c450:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c454:	4661      	mov	r1, ip
 800c456:	2200      	movs	r2, #0
 800c458:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c45c:	4658      	mov	r0, fp
 800c45e:	46e1      	mov	r9, ip
 800c460:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c464:	4614      	mov	r4, r2
 800c466:	461d      	mov	r5, r3
 800c468:	f7f4 f886 	bl	8000578 <__aeabi_dmul>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f3 fec8 	bl	8000208 <__aeabi_dsub>
 800c478:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	4620      	mov	r0, r4
 800c482:	4629      	mov	r1, r5
 800c484:	f7f3 fec0 	bl	8000208 <__aeabi_dsub>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c490:	f7f3 feba 	bl	8000208 <__aeabi_dsub>
 800c494:	465a      	mov	r2, fp
 800c496:	464b      	mov	r3, r9
 800c498:	f7f4 f86e 	bl	8000578 <__aeabi_dmul>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	f7f3 feb0 	bl	8000208 <__aeabi_dsub>
 800c4a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c4ac:	f7f4 f864 	bl	8000578 <__aeabi_dmul>
 800c4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	f7f4 f85c 	bl	8000578 <__aeabi_dmul>
 800c4c0:	a37d      	add	r3, pc, #500	@ (adr r3, 800c6b8 <__ieee754_pow+0x730>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	f7f4 f855 	bl	8000578 <__aeabi_dmul>
 800c4ce:	a37c      	add	r3, pc, #496	@ (adr r3, 800c6c0 <__ieee754_pow+0x738>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	f7f3 fe9a 	bl	800020c <__adddf3>
 800c4d8:	4622      	mov	r2, r4
 800c4da:	462b      	mov	r3, r5
 800c4dc:	f7f4 f84c 	bl	8000578 <__aeabi_dmul>
 800c4e0:	a379      	add	r3, pc, #484	@ (adr r3, 800c6c8 <__ieee754_pow+0x740>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f7f3 fe91 	bl	800020c <__adddf3>
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	f7f4 f843 	bl	8000578 <__aeabi_dmul>
 800c4f2:	a377      	add	r3, pc, #476	@ (adr r3, 800c6d0 <__ieee754_pow+0x748>)
 800c4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f8:	f7f3 fe88 	bl	800020c <__adddf3>
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	462b      	mov	r3, r5
 800c500:	f7f4 f83a 	bl	8000578 <__aeabi_dmul>
 800c504:	a374      	add	r3, pc, #464	@ (adr r3, 800c6d8 <__ieee754_pow+0x750>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	f7f3 fe7f 	bl	800020c <__adddf3>
 800c50e:	4622      	mov	r2, r4
 800c510:	462b      	mov	r3, r5
 800c512:	f7f4 f831 	bl	8000578 <__aeabi_dmul>
 800c516:	a372      	add	r3, pc, #456	@ (adr r3, 800c6e0 <__ieee754_pow+0x758>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f3 fe76 	bl	800020c <__adddf3>
 800c520:	4622      	mov	r2, r4
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	462b      	mov	r3, r5
 800c528:	4620      	mov	r0, r4
 800c52a:	4629      	mov	r1, r5
 800c52c:	f7f4 f824 	bl	8000578 <__aeabi_dmul>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4630      	mov	r0, r6
 800c536:	4639      	mov	r1, r7
 800c538:	f7f4 f81e 	bl	8000578 <__aeabi_dmul>
 800c53c:	465a      	mov	r2, fp
 800c53e:	4604      	mov	r4, r0
 800c540:	460d      	mov	r5, r1
 800c542:	464b      	mov	r3, r9
 800c544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c548:	f7f3 fe60 	bl	800020c <__adddf3>
 800c54c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c550:	f7f4 f812 	bl	8000578 <__aeabi_dmul>
 800c554:	4622      	mov	r2, r4
 800c556:	462b      	mov	r3, r5
 800c558:	f7f3 fe58 	bl	800020c <__adddf3>
 800c55c:	465a      	mov	r2, fp
 800c55e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c562:	464b      	mov	r3, r9
 800c564:	4658      	mov	r0, fp
 800c566:	4649      	mov	r1, r9
 800c568:	f7f4 f806 	bl	8000578 <__aeabi_dmul>
 800c56c:	4b6a      	ldr	r3, [pc, #424]	@ (800c718 <__ieee754_pow+0x790>)
 800c56e:	2200      	movs	r2, #0
 800c570:	4606      	mov	r6, r0
 800c572:	460f      	mov	r7, r1
 800c574:	f7f3 fe4a 	bl	800020c <__adddf3>
 800c578:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c57c:	f7f3 fe46 	bl	800020c <__adddf3>
 800c580:	46d8      	mov	r8, fp
 800c582:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c586:	460d      	mov	r5, r1
 800c588:	465a      	mov	r2, fp
 800c58a:	460b      	mov	r3, r1
 800c58c:	4640      	mov	r0, r8
 800c58e:	4649      	mov	r1, r9
 800c590:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c594:	f7f3 fff0 	bl	8000578 <__aeabi_dmul>
 800c598:	465c      	mov	r4, fp
 800c59a:	4680      	mov	r8, r0
 800c59c:	4689      	mov	r9, r1
 800c59e:	4b5e      	ldr	r3, [pc, #376]	@ (800c718 <__ieee754_pow+0x790>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f7f3 fe2f 	bl	8000208 <__aeabi_dsub>
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	f7f3 fe2b 	bl	8000208 <__aeabi_dsub>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5ba:	f7f3 fe25 	bl	8000208 <__aeabi_dsub>
 800c5be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c2:	f7f3 ffd9 	bl	8000578 <__aeabi_dmul>
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5d2:	f7f3 ffd1 	bl	8000578 <__aeabi_dmul>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f3 fe15 	bl	800020c <__adddf3>
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f7f3 fe0d 	bl	800020c <__adddf3>
 800c5f2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c5f6:	a33c      	add	r3, pc, #240	@ (adr r3, 800c6e8 <__ieee754_pow+0x760>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	4658      	mov	r0, fp
 800c5fe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c602:	460d      	mov	r5, r1
 800c604:	f7f3 ffb8 	bl	8000578 <__aeabi_dmul>
 800c608:	465c      	mov	r4, fp
 800c60a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c60e:	4642      	mov	r2, r8
 800c610:	464b      	mov	r3, r9
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f7f3 fdf7 	bl	8000208 <__aeabi_dsub>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4630      	mov	r0, r6
 800c620:	4639      	mov	r1, r7
 800c622:	f7f3 fdf1 	bl	8000208 <__aeabi_dsub>
 800c626:	a332      	add	r3, pc, #200	@ (adr r3, 800c6f0 <__ieee754_pow+0x768>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f3 ffa4 	bl	8000578 <__aeabi_dmul>
 800c630:	a331      	add	r3, pc, #196	@ (adr r3, 800c6f8 <__ieee754_pow+0x770>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	4606      	mov	r6, r0
 800c638:	460f      	mov	r7, r1
 800c63a:	4620      	mov	r0, r4
 800c63c:	4629      	mov	r1, r5
 800c63e:	f7f3 ff9b 	bl	8000578 <__aeabi_dmul>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4630      	mov	r0, r6
 800c648:	4639      	mov	r1, r7
 800c64a:	f7f3 fddf 	bl	800020c <__adddf3>
 800c64e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c650:	4b32      	ldr	r3, [pc, #200]	@ (800c71c <__ieee754_pow+0x794>)
 800c652:	4413      	add	r3, r2
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 fdd8 	bl	800020c <__adddf3>
 800c65c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c660:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c662:	f7f3 ff1f 	bl	80004a4 <__aeabi_i2d>
 800c666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c668:	4b2d      	ldr	r3, [pc, #180]	@ (800c720 <__ieee754_pow+0x798>)
 800c66a:	4413      	add	r3, r2
 800c66c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c670:	4606      	mov	r6, r0
 800c672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c676:	460f      	mov	r7, r1
 800c678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c67c:	f7f3 fdc6 	bl	800020c <__adddf3>
 800c680:	4642      	mov	r2, r8
 800c682:	464b      	mov	r3, r9
 800c684:	f7f3 fdc2 	bl	800020c <__adddf3>
 800c688:	4632      	mov	r2, r6
 800c68a:	463b      	mov	r3, r7
 800c68c:	f7f3 fdbe 	bl	800020c <__adddf3>
 800c690:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c694:	4632      	mov	r2, r6
 800c696:	463b      	mov	r3, r7
 800c698:	4658      	mov	r0, fp
 800c69a:	460d      	mov	r5, r1
 800c69c:	f7f3 fdb4 	bl	8000208 <__aeabi_dsub>
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	464b      	mov	r3, r9
 800c6a4:	f7f3 fdb0 	bl	8000208 <__aeabi_dsub>
 800c6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6ac:	f7f3 fdac 	bl	8000208 <__aeabi_dsub>
 800c6b0:	465c      	mov	r4, fp
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	e036      	b.n	800c724 <__ieee754_pow+0x79c>
 800c6b6:	bf00      	nop
 800c6b8:	4a454eef 	.word	0x4a454eef
 800c6bc:	3fca7e28 	.word	0x3fca7e28
 800c6c0:	93c9db65 	.word	0x93c9db65
 800c6c4:	3fcd864a 	.word	0x3fcd864a
 800c6c8:	a91d4101 	.word	0xa91d4101
 800c6cc:	3fd17460 	.word	0x3fd17460
 800c6d0:	518f264d 	.word	0x518f264d
 800c6d4:	3fd55555 	.word	0x3fd55555
 800c6d8:	db6fabff 	.word	0xdb6fabff
 800c6dc:	3fdb6db6 	.word	0x3fdb6db6
 800c6e0:	33333303 	.word	0x33333303
 800c6e4:	3fe33333 	.word	0x3fe33333
 800c6e8:	e0000000 	.word	0xe0000000
 800c6ec:	3feec709 	.word	0x3feec709
 800c6f0:	dc3a03fd 	.word	0xdc3a03fd
 800c6f4:	3feec709 	.word	0x3feec709
 800c6f8:	145b01f5 	.word	0x145b01f5
 800c6fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c700:	7ff00000 	.word	0x7ff00000
 800c704:	43400000 	.word	0x43400000
 800c708:	0003988e 	.word	0x0003988e
 800c70c:	000bb679 	.word	0x000bb679
 800c710:	08020840 	.word	0x08020840
 800c714:	3ff00000 	.word	0x3ff00000
 800c718:	40080000 	.word	0x40080000
 800c71c:	08020820 	.word	0x08020820
 800c720:	08020830 	.word	0x08020830
 800c724:	460b      	mov	r3, r1
 800c726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c72a:	e5d7      	b.n	800c2dc <__ieee754_pow+0x354>
 800c72c:	f04f 0a01 	mov.w	sl, #1
 800c730:	e65e      	b.n	800c3f0 <__ieee754_pow+0x468>
 800c732:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ca04 <__ieee754_pow+0xa7c>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	4630      	mov	r0, r6
 800c73a:	4639      	mov	r1, r7
 800c73c:	f7f3 fd66 	bl	800020c <__adddf3>
 800c740:	4642      	mov	r2, r8
 800c742:	e9cd 0100 	strd	r0, r1, [sp]
 800c746:	464b      	mov	r3, r9
 800c748:	4620      	mov	r0, r4
 800c74a:	4629      	mov	r1, r5
 800c74c:	f7f3 fd5c 	bl	8000208 <__aeabi_dsub>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c758:	f7f4 f99e 	bl	8000a98 <__aeabi_dcmpgt>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	f47f ae00 	bne.w	800c362 <__ieee754_pow+0x3da>
 800c762:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c766:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c76a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c76e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c772:	44da      	add	sl, fp
 800c774:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c778:	489d      	ldr	r0, [pc, #628]	@ (800c9f0 <__ieee754_pow+0xa68>)
 800c77a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c77e:	4108      	asrs	r0, r1
 800c780:	ea00 030a 	and.w	r3, r0, sl
 800c784:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c788:	f1c1 0114 	rsb	r1, r1, #20
 800c78c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c790:	fa4a fa01 	asr.w	sl, sl, r1
 800c794:	f1bb 0f00 	cmp.w	fp, #0
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	f04f 0200 	mov.w	r2, #0
 800c7a0:	bfb8      	it	lt
 800c7a2:	f1ca 0a00 	rsblt	sl, sl, #0
 800c7a6:	f7f3 fd2f 	bl	8000208 <__aeabi_dsub>
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	4689      	mov	r9, r1
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	463b      	mov	r3, r7
 800c7b2:	4640      	mov	r0, r8
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	f7f3 fd29 	bl	800020c <__adddf3>
 800c7ba:	2400      	movs	r4, #0
 800c7bc:	a37c      	add	r3, pc, #496	@ (adr r3, 800c9b0 <__ieee754_pow+0xa28>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	f7f3 fed7 	bl	8000578 <__aeabi_dmul>
 800c7ca:	4642      	mov	r2, r8
 800c7cc:	e9cd 0100 	strd	r0, r1, [sp]
 800c7d0:	464b      	mov	r3, r9
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f3 fd17 	bl	8000208 <__aeabi_dsub>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4630      	mov	r0, r6
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fd11 	bl	8000208 <__aeabi_dsub>
 800c7e6:	a374      	add	r3, pc, #464	@ (adr r3, 800c9b8 <__ieee754_pow+0xa30>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f7f3 fec4 	bl	8000578 <__aeabi_dmul>
 800c7f0:	a373      	add	r3, pc, #460	@ (adr r3, 800c9c0 <__ieee754_pow+0xa38>)
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	4689      	mov	r9, r1
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f3 febb 	bl	8000578 <__aeabi_dmul>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4640      	mov	r0, r8
 800c808:	4649      	mov	r1, r9
 800c80a:	f7f3 fcff 	bl	800020c <__adddf3>
 800c80e:	4604      	mov	r4, r0
 800c810:	460d      	mov	r5, r1
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c81a:	f7f3 fcf7 	bl	800020c <__adddf3>
 800c81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c822:	4680      	mov	r8, r0
 800c824:	4689      	mov	r9, r1
 800c826:	f7f3 fcef 	bl	8000208 <__aeabi_dsub>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	4620      	mov	r0, r4
 800c830:	4629      	mov	r1, r5
 800c832:	f7f3 fce9 	bl	8000208 <__aeabi_dsub>
 800c836:	4642      	mov	r2, r8
 800c838:	4606      	mov	r6, r0
 800c83a:	460f      	mov	r7, r1
 800c83c:	464b      	mov	r3, r9
 800c83e:	4640      	mov	r0, r8
 800c840:	4649      	mov	r1, r9
 800c842:	f7f3 fe99 	bl	8000578 <__aeabi_dmul>
 800c846:	a360      	add	r3, pc, #384	@ (adr r3, 800c9c8 <__ieee754_pow+0xa40>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	f7f3 fe92 	bl	8000578 <__aeabi_dmul>
 800c854:	a35e      	add	r3, pc, #376	@ (adr r3, 800c9d0 <__ieee754_pow+0xa48>)
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f7f3 fcd5 	bl	8000208 <__aeabi_dsub>
 800c85e:	4622      	mov	r2, r4
 800c860:	462b      	mov	r3, r5
 800c862:	f7f3 fe89 	bl	8000578 <__aeabi_dmul>
 800c866:	a35c      	add	r3, pc, #368	@ (adr r3, 800c9d8 <__ieee754_pow+0xa50>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f7f3 fcce 	bl	800020c <__adddf3>
 800c870:	4622      	mov	r2, r4
 800c872:	462b      	mov	r3, r5
 800c874:	f7f3 fe80 	bl	8000578 <__aeabi_dmul>
 800c878:	a359      	add	r3, pc, #356	@ (adr r3, 800c9e0 <__ieee754_pow+0xa58>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 fcc3 	bl	8000208 <__aeabi_dsub>
 800c882:	4622      	mov	r2, r4
 800c884:	462b      	mov	r3, r5
 800c886:	f7f3 fe77 	bl	8000578 <__aeabi_dmul>
 800c88a:	a357      	add	r3, pc, #348	@ (adr r3, 800c9e8 <__ieee754_pow+0xa60>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	f7f3 fcbc 	bl	800020c <__adddf3>
 800c894:	4622      	mov	r2, r4
 800c896:	462b      	mov	r3, r5
 800c898:	f7f3 fe6e 	bl	8000578 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f3 fcb0 	bl	8000208 <__aeabi_dsub>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	f7f3 fe60 	bl	8000578 <__aeabi_dmul>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	e9cd 0100 	strd	r0, r1, [sp]
 800c8be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 fc9f 	bl	8000208 <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8d2:	f7f3 ff7b 	bl	80007cc <__aeabi_ddiv>
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	463b      	mov	r3, r7
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	f7f3 fe49 	bl	8000578 <__aeabi_dmul>
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	463b      	mov	r3, r7
 800c8ea:	f7f3 fc8f 	bl	800020c <__adddf3>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f3 fc87 	bl	8000208 <__aeabi_dsub>
 800c8fa:	4642      	mov	r2, r8
 800c8fc:	464b      	mov	r3, r9
 800c8fe:	f7f3 fc83 	bl	8000208 <__aeabi_dsub>
 800c902:	460b      	mov	r3, r1
 800c904:	4602      	mov	r2, r0
 800c906:	493b      	ldr	r1, [pc, #236]	@ (800c9f4 <__ieee754_pow+0xa6c>)
 800c908:	2000      	movs	r0, #0
 800c90a:	f7f3 fc7d 	bl	8000208 <__aeabi_dsub>
 800c90e:	ec41 0b10 	vmov	d0, r0, r1
 800c912:	ee10 3a90 	vmov	r3, s1
 800c916:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c91a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c91e:	da30      	bge.n	800c982 <__ieee754_pow+0x9fa>
 800c920:	4650      	mov	r0, sl
 800c922:	f000 fa55 	bl	800cdd0 <scalbn>
 800c926:	ec51 0b10 	vmov	r0, r1, d0
 800c92a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c92e:	f7ff bbd2 	b.w	800c0d6 <__ieee754_pow+0x14e>
 800c932:	4c31      	ldr	r4, [pc, #196]	@ (800c9f8 <__ieee754_pow+0xa70>)
 800c934:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d91a      	bls.n	800c972 <__ieee754_pow+0x9ea>
 800c93c:	4b2f      	ldr	r3, [pc, #188]	@ (800c9fc <__ieee754_pow+0xa74>)
 800c93e:	440b      	add	r3, r1
 800c940:	4303      	orrs	r3, r0
 800c942:	d009      	beq.n	800c958 <__ieee754_pow+0x9d0>
 800c944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	f7f4 f886 	bl	8000a5c <__aeabi_dcmplt>
 800c950:	3800      	subs	r0, #0
 800c952:	bf18      	it	ne
 800c954:	2001      	movne	r0, #1
 800c956:	e42b      	b.n	800c1b0 <__ieee754_pow+0x228>
 800c958:	4642      	mov	r2, r8
 800c95a:	464b      	mov	r3, r9
 800c95c:	f7f3 fc54 	bl	8000208 <__aeabi_dsub>
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	f7f4 f88e 	bl	8000a84 <__aeabi_dcmpge>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1eb      	bne.n	800c944 <__ieee754_pow+0x9bc>
 800c96c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ca0c <__ieee754_pow+0xa84>
 800c970:	e6f7      	b.n	800c762 <__ieee754_pow+0x7da>
 800c972:	469a      	mov	sl, r3
 800c974:	4b22      	ldr	r3, [pc, #136]	@ (800ca00 <__ieee754_pow+0xa78>)
 800c976:	459a      	cmp	sl, r3
 800c978:	f63f aef3 	bhi.w	800c762 <__ieee754_pow+0x7da>
 800c97c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c980:	e715      	b.n	800c7ae <__ieee754_pow+0x826>
 800c982:	ec51 0b10 	vmov	r0, r1, d0
 800c986:	4619      	mov	r1, r3
 800c988:	e7cf      	b.n	800c92a <__ieee754_pow+0x9a2>
 800c98a:	491a      	ldr	r1, [pc, #104]	@ (800c9f4 <__ieee754_pow+0xa6c>)
 800c98c:	2000      	movs	r0, #0
 800c98e:	f7ff bb18 	b.w	800bfc2 <__ieee754_pow+0x3a>
 800c992:	2000      	movs	r0, #0
 800c994:	2100      	movs	r1, #0
 800c996:	f7ff bb14 	b.w	800bfc2 <__ieee754_pow+0x3a>
 800c99a:	4630      	mov	r0, r6
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7ff bb10 	b.w	800bfc2 <__ieee754_pow+0x3a>
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	f7ff bb5e 	b.w	800c064 <__ieee754_pow+0xdc>
 800c9a8:	2400      	movs	r4, #0
 800c9aa:	f7ff bb49 	b.w	800c040 <__ieee754_pow+0xb8>
 800c9ae:	bf00      	nop
 800c9b0:	00000000 	.word	0x00000000
 800c9b4:	3fe62e43 	.word	0x3fe62e43
 800c9b8:	fefa39ef 	.word	0xfefa39ef
 800c9bc:	3fe62e42 	.word	0x3fe62e42
 800c9c0:	0ca86c39 	.word	0x0ca86c39
 800c9c4:	be205c61 	.word	0xbe205c61
 800c9c8:	72bea4d0 	.word	0x72bea4d0
 800c9cc:	3e663769 	.word	0x3e663769
 800c9d0:	c5d26bf1 	.word	0xc5d26bf1
 800c9d4:	3ebbbd41 	.word	0x3ebbbd41
 800c9d8:	af25de2c 	.word	0xaf25de2c
 800c9dc:	3f11566a 	.word	0x3f11566a
 800c9e0:	16bebd93 	.word	0x16bebd93
 800c9e4:	3f66c16c 	.word	0x3f66c16c
 800c9e8:	5555553e 	.word	0x5555553e
 800c9ec:	3fc55555 	.word	0x3fc55555
 800c9f0:	fff00000 	.word	0xfff00000
 800c9f4:	3ff00000 	.word	0x3ff00000
 800c9f8:	4090cbff 	.word	0x4090cbff
 800c9fc:	3f6f3400 	.word	0x3f6f3400
 800ca00:	3fe00000 	.word	0x3fe00000
 800ca04:	652b82fe 	.word	0x652b82fe
 800ca08:	3c971547 	.word	0x3c971547
 800ca0c:	4090cc00 	.word	0x4090cc00

0800ca10 <fabs>:
 800ca10:	ec51 0b10 	vmov	r0, r1, d0
 800ca14:	4602      	mov	r2, r0
 800ca16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ca1a:	ec43 2b10 	vmov	d0, r2, r3
 800ca1e:	4770      	bx	lr

0800ca20 <__kernel_cosf>:
 800ca20:	ee10 3a10 	vmov	r3, s0
 800ca24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ca2c:	eef0 6a40 	vmov.f32	s13, s0
 800ca30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ca34:	d204      	bcs.n	800ca40 <__kernel_cosf+0x20>
 800ca36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ca3a:	ee17 2a90 	vmov	r2, s15
 800ca3e:	b342      	cbz	r2, 800ca92 <__kernel_cosf+0x72>
 800ca40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ca44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800cab0 <__kernel_cosf+0x90>
 800ca48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800cab4 <__kernel_cosf+0x94>
 800ca4c:	4a1a      	ldr	r2, [pc, #104]	@ (800cab8 <__kernel_cosf+0x98>)
 800ca4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca52:	4293      	cmp	r3, r2
 800ca54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cabc <__kernel_cosf+0x9c>
 800ca58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800cac0 <__kernel_cosf+0xa0>
 800ca60:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800cac4 <__kernel_cosf+0xa4>
 800ca68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cac8 <__kernel_cosf+0xa8>
 800ca70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ca78:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ca7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ca80:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ca84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca88:	d804      	bhi.n	800ca94 <__kernel_cosf+0x74>
 800ca8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ca8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca92:	4770      	bx	lr
 800ca94:	4a0d      	ldr	r2, [pc, #52]	@ (800cacc <__kernel_cosf+0xac>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bf9a      	itte	ls
 800ca9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ca9e:	ee07 3a10 	vmovls	s14, r3
 800caa2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800caa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800caaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800caae:	e7ec      	b.n	800ca8a <__kernel_cosf+0x6a>
 800cab0:	ad47d74e 	.word	0xad47d74e
 800cab4:	310f74f6 	.word	0x310f74f6
 800cab8:	3e999999 	.word	0x3e999999
 800cabc:	b493f27c 	.word	0xb493f27c
 800cac0:	37d00d01 	.word	0x37d00d01
 800cac4:	bab60b61 	.word	0xbab60b61
 800cac8:	3d2aaaab 	.word	0x3d2aaaab
 800cacc:	3f480000 	.word	0x3f480000

0800cad0 <__kernel_sinf>:
 800cad0:	ee10 3a10 	vmov	r3, s0
 800cad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cad8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cadc:	d204      	bcs.n	800cae8 <__kernel_sinf+0x18>
 800cade:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cae2:	ee17 3a90 	vmov	r3, s15
 800cae6:	b35b      	cbz	r3, 800cb40 <__kernel_sinf+0x70>
 800cae8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800caec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cb44 <__kernel_sinf+0x74>
 800caf0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800cb48 <__kernel_sinf+0x78>
 800caf4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800caf8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800cb4c <__kernel_sinf+0x7c>
 800cafc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cb00:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800cb50 <__kernel_sinf+0x80>
 800cb04:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cb08:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800cb54 <__kernel_sinf+0x84>
 800cb0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cb10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cb14:	b930      	cbnz	r0, 800cb24 <__kernel_sinf+0x54>
 800cb16:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800cb58 <__kernel_sinf+0x88>
 800cb1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cb1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cb22:	4770      	bx	lr
 800cb24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cb28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cb2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cb30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cb34:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800cb5c <__kernel_sinf+0x8c>
 800cb38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cb3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	2f2ec9d3 	.word	0x2f2ec9d3
 800cb48:	b2d72f34 	.word	0xb2d72f34
 800cb4c:	3638ef1b 	.word	0x3638ef1b
 800cb50:	b9500d01 	.word	0xb9500d01
 800cb54:	3c088889 	.word	0x3c088889
 800cb58:	be2aaaab 	.word	0xbe2aaaab
 800cb5c:	3e2aaaab 	.word	0x3e2aaaab

0800cb60 <__ieee754_rem_pio2f>:
 800cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb62:	ee10 6a10 	vmov	r6, s0
 800cb66:	4b88      	ldr	r3, [pc, #544]	@ (800cd88 <__ieee754_rem_pio2f+0x228>)
 800cb68:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cb6c:	429d      	cmp	r5, r3
 800cb6e:	b087      	sub	sp, #28
 800cb70:	4604      	mov	r4, r0
 800cb72:	d805      	bhi.n	800cb80 <__ieee754_rem_pio2f+0x20>
 800cb74:	2300      	movs	r3, #0
 800cb76:	ed80 0a00 	vstr	s0, [r0]
 800cb7a:	6043      	str	r3, [r0, #4]
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e022      	b.n	800cbc6 <__ieee754_rem_pio2f+0x66>
 800cb80:	4b82      	ldr	r3, [pc, #520]	@ (800cd8c <__ieee754_rem_pio2f+0x22c>)
 800cb82:	429d      	cmp	r5, r3
 800cb84:	d83a      	bhi.n	800cbfc <__ieee754_rem_pio2f+0x9c>
 800cb86:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cb8a:	2e00      	cmp	r6, #0
 800cb8c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800cd90 <__ieee754_rem_pio2f+0x230>
 800cb90:	4a80      	ldr	r2, [pc, #512]	@ (800cd94 <__ieee754_rem_pio2f+0x234>)
 800cb92:	f023 030f 	bic.w	r3, r3, #15
 800cb96:	dd18      	ble.n	800cbca <__ieee754_rem_pio2f+0x6a>
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cb9e:	bf09      	itett	eq
 800cba0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800cd98 <__ieee754_rem_pio2f+0x238>
 800cba4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800cd9c <__ieee754_rem_pio2f+0x23c>
 800cba8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800cda0 <__ieee754_rem_pio2f+0x240>
 800cbac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800cbb0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800cbb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbb8:	ed80 7a00 	vstr	s14, [r0]
 800cbbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cbc0:	edc0 7a01 	vstr	s15, [r0, #4]
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	b007      	add	sp, #28
 800cbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800cbd0:	bf09      	itett	eq
 800cbd2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800cd98 <__ieee754_rem_pio2f+0x238>
 800cbd6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800cd9c <__ieee754_rem_pio2f+0x23c>
 800cbda:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800cda0 <__ieee754_rem_pio2f+0x240>
 800cbde:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800cbe2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cbe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbea:	ed80 7a00 	vstr	s14, [r0]
 800cbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf2:	edc0 7a01 	vstr	s15, [r0, #4]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	e7e4      	b.n	800cbc6 <__ieee754_rem_pio2f+0x66>
 800cbfc:	4b69      	ldr	r3, [pc, #420]	@ (800cda4 <__ieee754_rem_pio2f+0x244>)
 800cbfe:	429d      	cmp	r5, r3
 800cc00:	d873      	bhi.n	800ccea <__ieee754_rem_pio2f+0x18a>
 800cc02:	f000 f8dd 	bl	800cdc0 <fabsf>
 800cc06:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cda8 <__ieee754_rem_pio2f+0x248>
 800cc0a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cc0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cc12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc1a:	ee17 0a90 	vmov	r0, s15
 800cc1e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cd90 <__ieee754_rem_pio2f+0x230>
 800cc22:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cc26:	281f      	cmp	r0, #31
 800cc28:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cd9c <__ieee754_rem_pio2f+0x23c>
 800cc2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc30:	eeb1 6a47 	vneg.f32	s12, s14
 800cc34:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cc38:	ee16 1a90 	vmov	r1, s13
 800cc3c:	dc09      	bgt.n	800cc52 <__ieee754_rem_pio2f+0xf2>
 800cc3e:	4a5b      	ldr	r2, [pc, #364]	@ (800cdac <__ieee754_rem_pio2f+0x24c>)
 800cc40:	1e47      	subs	r7, r0, #1
 800cc42:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cc46:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cc4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d107      	bne.n	800cc62 <__ieee754_rem_pio2f+0x102>
 800cc52:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800cc56:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800cc5a:	2a08      	cmp	r2, #8
 800cc5c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cc60:	dc14      	bgt.n	800cc8c <__ieee754_rem_pio2f+0x12c>
 800cc62:	6021      	str	r1, [r4, #0]
 800cc64:	ed94 7a00 	vldr	s14, [r4]
 800cc68:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cc6c:	2e00      	cmp	r6, #0
 800cc6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc72:	ed84 0a01 	vstr	s0, [r4, #4]
 800cc76:	daa6      	bge.n	800cbc6 <__ieee754_rem_pio2f+0x66>
 800cc78:	eeb1 7a47 	vneg.f32	s14, s14
 800cc7c:	eeb1 0a40 	vneg.f32	s0, s0
 800cc80:	ed84 7a00 	vstr	s14, [r4]
 800cc84:	ed84 0a01 	vstr	s0, [r4, #4]
 800cc88:	4240      	negs	r0, r0
 800cc8a:	e79c      	b.n	800cbc6 <__ieee754_rem_pio2f+0x66>
 800cc8c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800cd98 <__ieee754_rem_pio2f+0x238>
 800cc90:	eef0 6a40 	vmov.f32	s13, s0
 800cc94:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cc98:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cc9c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cca0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cda0 <__ieee754_rem_pio2f+0x240>
 800cca4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cca8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ccac:	ee15 2a90 	vmov	r2, s11
 800ccb0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ccb4:	1a5b      	subs	r3, r3, r1
 800ccb6:	2b19      	cmp	r3, #25
 800ccb8:	dc04      	bgt.n	800ccc4 <__ieee754_rem_pio2f+0x164>
 800ccba:	edc4 5a00 	vstr	s11, [r4]
 800ccbe:	eeb0 0a66 	vmov.f32	s0, s13
 800ccc2:	e7cf      	b.n	800cc64 <__ieee754_rem_pio2f+0x104>
 800ccc4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800cdb0 <__ieee754_rem_pio2f+0x250>
 800ccc8:	eeb0 0a66 	vmov.f32	s0, s13
 800cccc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ccd0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ccd4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800cdb4 <__ieee754_rem_pio2f+0x254>
 800ccd8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ccdc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cce0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cce4:	ed84 7a00 	vstr	s14, [r4]
 800cce8:	e7bc      	b.n	800cc64 <__ieee754_rem_pio2f+0x104>
 800ccea:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ccee:	d306      	bcc.n	800ccfe <__ieee754_rem_pio2f+0x19e>
 800ccf0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ccf4:	edc0 7a01 	vstr	s15, [r0, #4]
 800ccf8:	edc0 7a00 	vstr	s15, [r0]
 800ccfc:	e73e      	b.n	800cb7c <__ieee754_rem_pio2f+0x1c>
 800ccfe:	15ea      	asrs	r2, r5, #23
 800cd00:	3a86      	subs	r2, #134	@ 0x86
 800cd02:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cd0e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800cdb8 <__ieee754_rem_pio2f+0x258>
 800cd12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cd16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd1a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cd1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cd26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cd2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd2e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cd32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd36:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3e:	edcd 7a05 	vstr	s15, [sp, #20]
 800cd42:	d11e      	bne.n	800cd82 <__ieee754_rem_pio2f+0x222>
 800cd44:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4c:	bf0c      	ite	eq
 800cd4e:	2301      	moveq	r3, #1
 800cd50:	2302      	movne	r3, #2
 800cd52:	491a      	ldr	r1, [pc, #104]	@ (800cdbc <__ieee754_rem_pio2f+0x25c>)
 800cd54:	9101      	str	r1, [sp, #4]
 800cd56:	2102      	movs	r1, #2
 800cd58:	9100      	str	r1, [sp, #0]
 800cd5a:	a803      	add	r0, sp, #12
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	f000 f9cd 	bl	800d0fc <__kernel_rem_pio2f>
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	f6bf af2f 	bge.w	800cbc6 <__ieee754_rem_pio2f+0x66>
 800cd68:	edd4 7a00 	vldr	s15, [r4]
 800cd6c:	eef1 7a67 	vneg.f32	s15, s15
 800cd70:	edc4 7a00 	vstr	s15, [r4]
 800cd74:	edd4 7a01 	vldr	s15, [r4, #4]
 800cd78:	eef1 7a67 	vneg.f32	s15, s15
 800cd7c:	edc4 7a01 	vstr	s15, [r4, #4]
 800cd80:	e782      	b.n	800cc88 <__ieee754_rem_pio2f+0x128>
 800cd82:	2303      	movs	r3, #3
 800cd84:	e7e5      	b.n	800cd52 <__ieee754_rem_pio2f+0x1f2>
 800cd86:	bf00      	nop
 800cd88:	3f490fd8 	.word	0x3f490fd8
 800cd8c:	4016cbe3 	.word	0x4016cbe3
 800cd90:	3fc90f80 	.word	0x3fc90f80
 800cd94:	3fc90fd0 	.word	0x3fc90fd0
 800cd98:	37354400 	.word	0x37354400
 800cd9c:	37354443 	.word	0x37354443
 800cda0:	2e85a308 	.word	0x2e85a308
 800cda4:	43490f80 	.word	0x43490f80
 800cda8:	3f22f984 	.word	0x3f22f984
 800cdac:	08020850 	.word	0x08020850
 800cdb0:	2e85a300 	.word	0x2e85a300
 800cdb4:	248d3132 	.word	0x248d3132
 800cdb8:	43800000 	.word	0x43800000
 800cdbc:	080208d0 	.word	0x080208d0

0800cdc0 <fabsf>:
 800cdc0:	ee10 3a10 	vmov	r3, s0
 800cdc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdc8:	ee00 3a10 	vmov	s0, r3
 800cdcc:	4770      	bx	lr
	...

0800cdd0 <scalbn>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	ec55 4b10 	vmov	r4, r5, d0
 800cdd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cdda:	4606      	mov	r6, r0
 800cddc:	462b      	mov	r3, r5
 800cdde:	b991      	cbnz	r1, 800ce06 <scalbn+0x36>
 800cde0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cde4:	4323      	orrs	r3, r4
 800cde6:	d03d      	beq.n	800ce64 <scalbn+0x94>
 800cde8:	4b35      	ldr	r3, [pc, #212]	@ (800cec0 <scalbn+0xf0>)
 800cdea:	4620      	mov	r0, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f7f3 fbc2 	bl	8000578 <__aeabi_dmul>
 800cdf4:	4b33      	ldr	r3, [pc, #204]	@ (800cec4 <scalbn+0xf4>)
 800cdf6:	429e      	cmp	r6, r3
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	da0f      	bge.n	800ce1e <scalbn+0x4e>
 800cdfe:	a328      	add	r3, pc, #160	@ (adr r3, 800cea0 <scalbn+0xd0>)
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	e01e      	b.n	800ce44 <scalbn+0x74>
 800ce06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ce0a:	4291      	cmp	r1, r2
 800ce0c:	d10b      	bne.n	800ce26 <scalbn+0x56>
 800ce0e:	4622      	mov	r2, r4
 800ce10:	4620      	mov	r0, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 f9fa 	bl	800020c <__adddf3>
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	e022      	b.n	800ce64 <scalbn+0x94>
 800ce1e:	460b      	mov	r3, r1
 800ce20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ce24:	3936      	subs	r1, #54	@ 0x36
 800ce26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ce2a:	4296      	cmp	r6, r2
 800ce2c:	dd0d      	ble.n	800ce4a <scalbn+0x7a>
 800ce2e:	2d00      	cmp	r5, #0
 800ce30:	a11d      	add	r1, pc, #116	@ (adr r1, 800cea8 <scalbn+0xd8>)
 800ce32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce36:	da02      	bge.n	800ce3e <scalbn+0x6e>
 800ce38:	a11d      	add	r1, pc, #116	@ (adr r1, 800ceb0 <scalbn+0xe0>)
 800ce3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce3e:	a31a      	add	r3, pc, #104	@ (adr r3, 800cea8 <scalbn+0xd8>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f7f3 fb98 	bl	8000578 <__aeabi_dmul>
 800ce48:	e7e6      	b.n	800ce18 <scalbn+0x48>
 800ce4a:	1872      	adds	r2, r6, r1
 800ce4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ce50:	428a      	cmp	r2, r1
 800ce52:	dcec      	bgt.n	800ce2e <scalbn+0x5e>
 800ce54:	2a00      	cmp	r2, #0
 800ce56:	dd08      	ble.n	800ce6a <scalbn+0x9a>
 800ce58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ce60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce64:	ec45 4b10 	vmov	d0, r4, r5
 800ce68:	bd70      	pop	{r4, r5, r6, pc}
 800ce6a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ce6e:	da08      	bge.n	800ce82 <scalbn+0xb2>
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	a10b      	add	r1, pc, #44	@ (adr r1, 800cea0 <scalbn+0xd0>)
 800ce74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce78:	dac1      	bge.n	800cdfe <scalbn+0x2e>
 800ce7a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ceb8 <scalbn+0xe8>)
 800ce7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce80:	e7bd      	b.n	800cdfe <scalbn+0x2e>
 800ce82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ce86:	3236      	adds	r2, #54	@ 0x36
 800ce88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ce8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce90:	4620      	mov	r0, r4
 800ce92:	4b0d      	ldr	r3, [pc, #52]	@ (800cec8 <scalbn+0xf8>)
 800ce94:	4629      	mov	r1, r5
 800ce96:	2200      	movs	r2, #0
 800ce98:	e7d4      	b.n	800ce44 <scalbn+0x74>
 800ce9a:	bf00      	nop
 800ce9c:	f3af 8000 	nop.w
 800cea0:	c2f8f359 	.word	0xc2f8f359
 800cea4:	01a56e1f 	.word	0x01a56e1f
 800cea8:	8800759c 	.word	0x8800759c
 800ceac:	7e37e43c 	.word	0x7e37e43c
 800ceb0:	8800759c 	.word	0x8800759c
 800ceb4:	fe37e43c 	.word	0xfe37e43c
 800ceb8:	c2f8f359 	.word	0xc2f8f359
 800cebc:	81a56e1f 	.word	0x81a56e1f
 800cec0:	43500000 	.word	0x43500000
 800cec4:	ffff3cb0 	.word	0xffff3cb0
 800cec8:	3c900000 	.word	0x3c900000

0800cecc <with_errno>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	ed2d 8b02 	vpush	{d8}
 800ced2:	eeb0 8a40 	vmov.f32	s16, s0
 800ced6:	eef0 8a60 	vmov.f32	s17, s1
 800ceda:	4604      	mov	r4, r0
 800cedc:	f7fe fece 	bl	800bc7c <__errno>
 800cee0:	eeb0 0a48 	vmov.f32	s0, s16
 800cee4:	eef0 0a68 	vmov.f32	s1, s17
 800cee8:	ecbd 8b02 	vpop	{d8}
 800ceec:	6004      	str	r4, [r0, #0]
 800ceee:	bd10      	pop	{r4, pc}

0800cef0 <xflow>:
 800cef0:	4603      	mov	r3, r0
 800cef2:	b507      	push	{r0, r1, r2, lr}
 800cef4:	ec51 0b10 	vmov	r0, r1, d0
 800cef8:	b183      	cbz	r3, 800cf1c <xflow+0x2c>
 800cefa:	4602      	mov	r2, r0
 800cefc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf00:	e9cd 2300 	strd	r2, r3, [sp]
 800cf04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf08:	f7f3 fb36 	bl	8000578 <__aeabi_dmul>
 800cf0c:	ec41 0b10 	vmov	d0, r0, r1
 800cf10:	2022      	movs	r0, #34	@ 0x22
 800cf12:	b003      	add	sp, #12
 800cf14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf18:	f7ff bfd8 	b.w	800cecc <with_errno>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	e7ee      	b.n	800cf00 <xflow+0x10>
 800cf22:	0000      	movs	r0, r0
 800cf24:	0000      	movs	r0, r0
	...

0800cf28 <__math_uflow>:
 800cf28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cf30 <__math_uflow+0x8>
 800cf2c:	f7ff bfe0 	b.w	800cef0 <xflow>
 800cf30:	00000000 	.word	0x00000000
 800cf34:	10000000 	.word	0x10000000

0800cf38 <__math_oflow>:
 800cf38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cf40 <__math_oflow+0x8>
 800cf3c:	f7ff bfd8 	b.w	800cef0 <xflow>
 800cf40:	00000000 	.word	0x00000000
 800cf44:	70000000 	.word	0x70000000

0800cf48 <__ieee754_sqrt>:
 800cf48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	4a68      	ldr	r2, [pc, #416]	@ (800d0f0 <__ieee754_sqrt+0x1a8>)
 800cf4e:	ec55 4b10 	vmov	r4, r5, d0
 800cf52:	43aa      	bics	r2, r5
 800cf54:	462b      	mov	r3, r5
 800cf56:	4621      	mov	r1, r4
 800cf58:	d110      	bne.n	800cf7c <__ieee754_sqrt+0x34>
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 fb0a 	bl	8000578 <__aeabi_dmul>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4620      	mov	r0, r4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7f3 f94e 	bl	800020c <__adddf3>
 800cf70:	4604      	mov	r4, r0
 800cf72:	460d      	mov	r5, r1
 800cf74:	ec45 4b10 	vmov	d0, r4, r5
 800cf78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	dc0e      	bgt.n	800cf9e <__ieee754_sqrt+0x56>
 800cf80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cf84:	4322      	orrs	r2, r4
 800cf86:	d0f5      	beq.n	800cf74 <__ieee754_sqrt+0x2c>
 800cf88:	b19d      	cbz	r5, 800cfb2 <__ieee754_sqrt+0x6a>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f7f3 f93a 	bl	8000208 <__aeabi_dsub>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	f7f3 fc18 	bl	80007cc <__aeabi_ddiv>
 800cf9c:	e7e8      	b.n	800cf70 <__ieee754_sqrt+0x28>
 800cf9e:	152a      	asrs	r2, r5, #20
 800cfa0:	d115      	bne.n	800cfce <__ieee754_sqrt+0x86>
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	e009      	b.n	800cfba <__ieee754_sqrt+0x72>
 800cfa6:	0acb      	lsrs	r3, r1, #11
 800cfa8:	3a15      	subs	r2, #21
 800cfaa:	0549      	lsls	r1, r1, #21
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0fa      	beq.n	800cfa6 <__ieee754_sqrt+0x5e>
 800cfb0:	e7f7      	b.n	800cfa2 <__ieee754_sqrt+0x5a>
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	e7fa      	b.n	800cfac <__ieee754_sqrt+0x64>
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	3001      	adds	r0, #1
 800cfba:	02dc      	lsls	r4, r3, #11
 800cfbc:	d5fb      	bpl.n	800cfb6 <__ieee754_sqrt+0x6e>
 800cfbe:	1e44      	subs	r4, r0, #1
 800cfc0:	1b12      	subs	r2, r2, r4
 800cfc2:	f1c0 0420 	rsb	r4, r0, #32
 800cfc6:	fa21 f404 	lsr.w	r4, r1, r4
 800cfca:	4323      	orrs	r3, r4
 800cfcc:	4081      	lsls	r1, r0
 800cfce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfd2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cfd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfda:	07d2      	lsls	r2, r2, #31
 800cfdc:	bf5c      	itt	pl
 800cfde:	005b      	lslpl	r3, r3, #1
 800cfe0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cfe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfe8:	bf58      	it	pl
 800cfea:	0049      	lslpl	r1, r1, #1
 800cfec:	2600      	movs	r6, #0
 800cfee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cff2:	106d      	asrs	r5, r5, #1
 800cff4:	0049      	lsls	r1, r1, #1
 800cff6:	2016      	movs	r0, #22
 800cff8:	4632      	mov	r2, r6
 800cffa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cffe:	1917      	adds	r7, r2, r4
 800d000:	429f      	cmp	r7, r3
 800d002:	bfde      	ittt	le
 800d004:	193a      	addle	r2, r7, r4
 800d006:	1bdb      	suble	r3, r3, r7
 800d008:	1936      	addle	r6, r6, r4
 800d00a:	0fcf      	lsrs	r7, r1, #31
 800d00c:	3801      	subs	r0, #1
 800d00e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d012:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d016:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d01a:	d1f0      	bne.n	800cffe <__ieee754_sqrt+0xb6>
 800d01c:	4604      	mov	r4, r0
 800d01e:	2720      	movs	r7, #32
 800d020:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d024:	429a      	cmp	r2, r3
 800d026:	eb00 0e0c 	add.w	lr, r0, ip
 800d02a:	db02      	blt.n	800d032 <__ieee754_sqrt+0xea>
 800d02c:	d113      	bne.n	800d056 <__ieee754_sqrt+0x10e>
 800d02e:	458e      	cmp	lr, r1
 800d030:	d811      	bhi.n	800d056 <__ieee754_sqrt+0x10e>
 800d032:	f1be 0f00 	cmp.w	lr, #0
 800d036:	eb0e 000c 	add.w	r0, lr, ip
 800d03a:	da42      	bge.n	800d0c2 <__ieee754_sqrt+0x17a>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	db40      	blt.n	800d0c2 <__ieee754_sqrt+0x17a>
 800d040:	f102 0801 	add.w	r8, r2, #1
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	458e      	cmp	lr, r1
 800d048:	bf88      	it	hi
 800d04a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d04e:	eba1 010e 	sub.w	r1, r1, lr
 800d052:	4464      	add	r4, ip
 800d054:	4642      	mov	r2, r8
 800d056:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d05a:	3f01      	subs	r7, #1
 800d05c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d060:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d064:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d068:	d1dc      	bne.n	800d024 <__ieee754_sqrt+0xdc>
 800d06a:	4319      	orrs	r1, r3
 800d06c:	d01b      	beq.n	800d0a6 <__ieee754_sqrt+0x15e>
 800d06e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d0f4 <__ieee754_sqrt+0x1ac>
 800d072:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d0f8 <__ieee754_sqrt+0x1b0>
 800d076:	e9da 0100 	ldrd	r0, r1, [sl]
 800d07a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d07e:	f7f3 f8c3 	bl	8000208 <__aeabi_dsub>
 800d082:	e9da 8900 	ldrd	r8, r9, [sl]
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	f7f3 fcef 	bl	8000a70 <__aeabi_dcmple>
 800d092:	b140      	cbz	r0, 800d0a6 <__ieee754_sqrt+0x15e>
 800d094:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d098:	e9da 0100 	ldrd	r0, r1, [sl]
 800d09c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d0a0:	d111      	bne.n	800d0c6 <__ieee754_sqrt+0x17e>
 800d0a2:	3601      	adds	r6, #1
 800d0a4:	463c      	mov	r4, r7
 800d0a6:	1072      	asrs	r2, r6, #1
 800d0a8:	0863      	lsrs	r3, r4, #1
 800d0aa:	07f1      	lsls	r1, r6, #31
 800d0ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d0b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d0b4:	bf48      	it	mi
 800d0b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d0ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d0be:	4618      	mov	r0, r3
 800d0c0:	e756      	b.n	800cf70 <__ieee754_sqrt+0x28>
 800d0c2:	4690      	mov	r8, r2
 800d0c4:	e7be      	b.n	800d044 <__ieee754_sqrt+0xfc>
 800d0c6:	f7f3 f8a1 	bl	800020c <__adddf3>
 800d0ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	f7f3 fcc1 	bl	8000a5c <__aeabi_dcmplt>
 800d0da:	b120      	cbz	r0, 800d0e6 <__ieee754_sqrt+0x19e>
 800d0dc:	1ca0      	adds	r0, r4, #2
 800d0de:	bf08      	it	eq
 800d0e0:	3601      	addeq	r6, #1
 800d0e2:	3402      	adds	r4, #2
 800d0e4:	e7df      	b.n	800d0a6 <__ieee754_sqrt+0x15e>
 800d0e6:	1c63      	adds	r3, r4, #1
 800d0e8:	f023 0401 	bic.w	r4, r3, #1
 800d0ec:	e7db      	b.n	800d0a6 <__ieee754_sqrt+0x15e>
 800d0ee:	bf00      	nop
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	20000068 	.word	0x20000068
 800d0f8:	20000060 	.word	0x20000060

0800d0fc <__kernel_rem_pio2f>:
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	ed2d 8b04 	vpush	{d8-d9}
 800d104:	b0d9      	sub	sp, #356	@ 0x164
 800d106:	4690      	mov	r8, r2
 800d108:	9001      	str	r0, [sp, #4]
 800d10a:	4ab9      	ldr	r2, [pc, #740]	@ (800d3f0 <__kernel_rem_pio2f+0x2f4>)
 800d10c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d10e:	f118 0f04 	cmn.w	r8, #4
 800d112:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d116:	460f      	mov	r7, r1
 800d118:	f103 3bff 	add.w	fp, r3, #4294967295
 800d11c:	db27      	blt.n	800d16e <__kernel_rem_pio2f+0x72>
 800d11e:	f1b8 0203 	subs.w	r2, r8, #3
 800d122:	bf48      	it	mi
 800d124:	f108 0204 	addmi.w	r2, r8, #4
 800d128:	10d2      	asrs	r2, r2, #3
 800d12a:	1c55      	adds	r5, r2, #1
 800d12c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d12e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d132:	00e8      	lsls	r0, r5, #3
 800d134:	eba2 060b 	sub.w	r6, r2, fp
 800d138:	9002      	str	r0, [sp, #8]
 800d13a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d13e:	eb0a 0c0b 	add.w	ip, sl, fp
 800d142:	ac1c      	add	r4, sp, #112	@ 0x70
 800d144:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d148:	2000      	movs	r0, #0
 800d14a:	4560      	cmp	r0, ip
 800d14c:	dd11      	ble.n	800d172 <__kernel_rem_pio2f+0x76>
 800d14e:	a91c      	add	r1, sp, #112	@ 0x70
 800d150:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d154:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d158:	f04f 0c00 	mov.w	ip, #0
 800d15c:	45d4      	cmp	ip, sl
 800d15e:	dc27      	bgt.n	800d1b0 <__kernel_rem_pio2f+0xb4>
 800d160:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d164:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d168:	4606      	mov	r6, r0
 800d16a:	2400      	movs	r4, #0
 800d16c:	e016      	b.n	800d19c <__kernel_rem_pio2f+0xa0>
 800d16e:	2200      	movs	r2, #0
 800d170:	e7db      	b.n	800d12a <__kernel_rem_pio2f+0x2e>
 800d172:	42c6      	cmn	r6, r0
 800d174:	bf5d      	ittte	pl
 800d176:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d17a:	ee07 1a90 	vmovpl	s15, r1
 800d17e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d182:	eef0 7a47 	vmovmi.f32	s15, s14
 800d186:	ece4 7a01 	vstmia	r4!, {s15}
 800d18a:	3001      	adds	r0, #1
 800d18c:	e7dd      	b.n	800d14a <__kernel_rem_pio2f+0x4e>
 800d18e:	ecfe 6a01 	vldmia	lr!, {s13}
 800d192:	ed96 7a00 	vldr	s14, [r6]
 800d196:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d19a:	3401      	adds	r4, #1
 800d19c:	455c      	cmp	r4, fp
 800d19e:	f1a6 0604 	sub.w	r6, r6, #4
 800d1a2:	ddf4      	ble.n	800d18e <__kernel_rem_pio2f+0x92>
 800d1a4:	ece9 7a01 	vstmia	r9!, {s15}
 800d1a8:	f10c 0c01 	add.w	ip, ip, #1
 800d1ac:	3004      	adds	r0, #4
 800d1ae:	e7d5      	b.n	800d15c <__kernel_rem_pio2f+0x60>
 800d1b0:	a908      	add	r1, sp, #32
 800d1b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1b6:	9104      	str	r1, [sp, #16]
 800d1b8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d1ba:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800d3fc <__kernel_rem_pio2f+0x300>
 800d1be:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800d3f8 <__kernel_rem_pio2f+0x2fc>
 800d1c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d1c6:	9203      	str	r2, [sp, #12]
 800d1c8:	4654      	mov	r4, sl
 800d1ca:	00a2      	lsls	r2, r4, #2
 800d1cc:	9205      	str	r2, [sp, #20]
 800d1ce:	aa58      	add	r2, sp, #352	@ 0x160
 800d1d0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d1d4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d1d8:	a944      	add	r1, sp, #272	@ 0x110
 800d1da:	aa08      	add	r2, sp, #32
 800d1dc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d1e0:	4694      	mov	ip, r2
 800d1e2:	4626      	mov	r6, r4
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	f1a0 0004 	sub.w	r0, r0, #4
 800d1ea:	dc4c      	bgt.n	800d286 <__kernel_rem_pio2f+0x18a>
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d1f2:	f000 f9f5 	bl	800d5e0 <scalbnf>
 800d1f6:	eeb0 8a40 	vmov.f32	s16, s0
 800d1fa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d1fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d202:	f000 fa53 	bl	800d6ac <floorf>
 800d206:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d20a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d20e:	2d00      	cmp	r5, #0
 800d210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d214:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d218:	ee17 9a90 	vmov	r9, s15
 800d21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d220:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d224:	dd41      	ble.n	800d2aa <__kernel_rem_pio2f+0x1ae>
 800d226:	f104 3cff 	add.w	ip, r4, #4294967295
 800d22a:	a908      	add	r1, sp, #32
 800d22c:	f1c5 0e08 	rsb	lr, r5, #8
 800d230:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d234:	fa46 f00e 	asr.w	r0, r6, lr
 800d238:	4481      	add	r9, r0
 800d23a:	fa00 f00e 	lsl.w	r0, r0, lr
 800d23e:	1a36      	subs	r6, r6, r0
 800d240:	f1c5 0007 	rsb	r0, r5, #7
 800d244:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d248:	4106      	asrs	r6, r0
 800d24a:	2e00      	cmp	r6, #0
 800d24c:	dd3c      	ble.n	800d2c8 <__kernel_rem_pio2f+0x1cc>
 800d24e:	f04f 0e00 	mov.w	lr, #0
 800d252:	f109 0901 	add.w	r9, r9, #1
 800d256:	4670      	mov	r0, lr
 800d258:	4574      	cmp	r4, lr
 800d25a:	dc68      	bgt.n	800d32e <__kernel_rem_pio2f+0x232>
 800d25c:	2d00      	cmp	r5, #0
 800d25e:	dd03      	ble.n	800d268 <__kernel_rem_pio2f+0x16c>
 800d260:	2d01      	cmp	r5, #1
 800d262:	d074      	beq.n	800d34e <__kernel_rem_pio2f+0x252>
 800d264:	2d02      	cmp	r5, #2
 800d266:	d07d      	beq.n	800d364 <__kernel_rem_pio2f+0x268>
 800d268:	2e02      	cmp	r6, #2
 800d26a:	d12d      	bne.n	800d2c8 <__kernel_rem_pio2f+0x1cc>
 800d26c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d270:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d274:	b340      	cbz	r0, 800d2c8 <__kernel_rem_pio2f+0x1cc>
 800d276:	4628      	mov	r0, r5
 800d278:	9306      	str	r3, [sp, #24]
 800d27a:	f000 f9b1 	bl	800d5e0 <scalbnf>
 800d27e:	9b06      	ldr	r3, [sp, #24]
 800d280:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d284:	e020      	b.n	800d2c8 <__kernel_rem_pio2f+0x1cc>
 800d286:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d28a:	3e01      	subs	r6, #1
 800d28c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d294:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d298:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d29c:	ecac 0a01 	vstmia	ip!, {s0}
 800d2a0:	ed90 0a00 	vldr	s0, [r0]
 800d2a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d2a8:	e79c      	b.n	800d1e4 <__kernel_rem_pio2f+0xe8>
 800d2aa:	d105      	bne.n	800d2b8 <__kernel_rem_pio2f+0x1bc>
 800d2ac:	1e60      	subs	r0, r4, #1
 800d2ae:	a908      	add	r1, sp, #32
 800d2b0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d2b4:	11f6      	asrs	r6, r6, #7
 800d2b6:	e7c8      	b.n	800d24a <__kernel_rem_pio2f+0x14e>
 800d2b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c4:	da31      	bge.n	800d32a <__kernel_rem_pio2f+0x22e>
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d0:	f040 8098 	bne.w	800d404 <__kernel_rem_pio2f+0x308>
 800d2d4:	1e60      	subs	r0, r4, #1
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4550      	cmp	r0, sl
 800d2da:	da4b      	bge.n	800d374 <__kernel_rem_pio2f+0x278>
 800d2dc:	2a00      	cmp	r2, #0
 800d2de:	d065      	beq.n	800d3ac <__kernel_rem_pio2f+0x2b0>
 800d2e0:	3c01      	subs	r4, #1
 800d2e2:	ab08      	add	r3, sp, #32
 800d2e4:	3d08      	subs	r5, #8
 800d2e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d0f8      	beq.n	800d2e0 <__kernel_rem_pio2f+0x1e4>
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d2f4:	f000 f974 	bl	800d5e0 <scalbnf>
 800d2f8:	1c63      	adds	r3, r4, #1
 800d2fa:	aa44      	add	r2, sp, #272	@ 0x110
 800d2fc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d3fc <__kernel_rem_pio2f+0x300>
 800d300:	0099      	lsls	r1, r3, #2
 800d302:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d306:	4623      	mov	r3, r4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f280 80a9 	bge.w	800d460 <__kernel_rem_pio2f+0x364>
 800d30e:	4623      	mov	r3, r4
 800d310:	2b00      	cmp	r3, #0
 800d312:	f2c0 80c7 	blt.w	800d4a4 <__kernel_rem_pio2f+0x3a8>
 800d316:	aa44      	add	r2, sp, #272	@ 0x110
 800d318:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d31c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d3f4 <__kernel_rem_pio2f+0x2f8>
 800d320:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d324:	2000      	movs	r0, #0
 800d326:	1ae2      	subs	r2, r4, r3
 800d328:	e0b1      	b.n	800d48e <__kernel_rem_pio2f+0x392>
 800d32a:	2602      	movs	r6, #2
 800d32c:	e78f      	b.n	800d24e <__kernel_rem_pio2f+0x152>
 800d32e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d332:	b948      	cbnz	r0, 800d348 <__kernel_rem_pio2f+0x24c>
 800d334:	b121      	cbz	r1, 800d340 <__kernel_rem_pio2f+0x244>
 800d336:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d33a:	f842 1c04 	str.w	r1, [r2, #-4]
 800d33e:	2101      	movs	r1, #1
 800d340:	f10e 0e01 	add.w	lr, lr, #1
 800d344:	4608      	mov	r0, r1
 800d346:	e787      	b.n	800d258 <__kernel_rem_pio2f+0x15c>
 800d348:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d34c:	e7f5      	b.n	800d33a <__kernel_rem_pio2f+0x23e>
 800d34e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d352:	aa08      	add	r2, sp, #32
 800d354:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d358:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d35c:	a908      	add	r1, sp, #32
 800d35e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d362:	e781      	b.n	800d268 <__kernel_rem_pio2f+0x16c>
 800d364:	f104 3cff 	add.w	ip, r4, #4294967295
 800d368:	aa08      	add	r2, sp, #32
 800d36a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d36e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d372:	e7f3      	b.n	800d35c <__kernel_rem_pio2f+0x260>
 800d374:	a908      	add	r1, sp, #32
 800d376:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d37a:	3801      	subs	r0, #1
 800d37c:	430a      	orrs	r2, r1
 800d37e:	e7ab      	b.n	800d2d8 <__kernel_rem_pio2f+0x1dc>
 800d380:	3201      	adds	r2, #1
 800d382:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d386:	2e00      	cmp	r6, #0
 800d388:	d0fa      	beq.n	800d380 <__kernel_rem_pio2f+0x284>
 800d38a:	9905      	ldr	r1, [sp, #20]
 800d38c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d390:	eb0d 0001 	add.w	r0, sp, r1
 800d394:	18e6      	adds	r6, r4, r3
 800d396:	a91c      	add	r1, sp, #112	@ 0x70
 800d398:	f104 0c01 	add.w	ip, r4, #1
 800d39c:	384c      	subs	r0, #76	@ 0x4c
 800d39e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d3a2:	4422      	add	r2, r4
 800d3a4:	4562      	cmp	r2, ip
 800d3a6:	da04      	bge.n	800d3b2 <__kernel_rem_pio2f+0x2b6>
 800d3a8:	4614      	mov	r4, r2
 800d3aa:	e70e      	b.n	800d1ca <__kernel_rem_pio2f+0xce>
 800d3ac:	9804      	ldr	r0, [sp, #16]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	e7e7      	b.n	800d382 <__kernel_rem_pio2f+0x286>
 800d3b2:	9903      	ldr	r1, [sp, #12]
 800d3b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d3b8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	ee07 1a90 	vmov	s15, r1
 800d3c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c6:	2400      	movs	r4, #0
 800d3c8:	ece6 7a01 	vstmia	r6!, {s15}
 800d3cc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d3d0:	46b1      	mov	r9, r6
 800d3d2:	455c      	cmp	r4, fp
 800d3d4:	dd04      	ble.n	800d3e0 <__kernel_rem_pio2f+0x2e4>
 800d3d6:	ece0 7a01 	vstmia	r0!, {s15}
 800d3da:	f10c 0c01 	add.w	ip, ip, #1
 800d3de:	e7e1      	b.n	800d3a4 <__kernel_rem_pio2f+0x2a8>
 800d3e0:	ecfe 6a01 	vldmia	lr!, {s13}
 800d3e4:	ed39 7a01 	vldmdb	r9!, {s14}
 800d3e8:	3401      	adds	r4, #1
 800d3ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d3ee:	e7f0      	b.n	800d3d2 <__kernel_rem_pio2f+0x2d6>
 800d3f0:	08020c14 	.word	0x08020c14
 800d3f4:	08020be8 	.word	0x08020be8
 800d3f8:	43800000 	.word	0x43800000
 800d3fc:	3b800000 	.word	0x3b800000
 800d400:	00000000 	.word	0x00000000
 800d404:	9b02      	ldr	r3, [sp, #8]
 800d406:	eeb0 0a48 	vmov.f32	s0, s16
 800d40a:	eba3 0008 	sub.w	r0, r3, r8
 800d40e:	f000 f8e7 	bl	800d5e0 <scalbnf>
 800d412:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d3f8 <__kernel_rem_pio2f+0x2fc>
 800d416:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41e:	db19      	blt.n	800d454 <__kernel_rem_pio2f+0x358>
 800d420:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d3fc <__kernel_rem_pio2f+0x300>
 800d424:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d428:	aa08      	add	r2, sp, #32
 800d42a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d42e:	3508      	adds	r5, #8
 800d430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d434:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d43c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d440:	ee10 3a10 	vmov	r3, s0
 800d444:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d448:	ee17 3a90 	vmov	r3, s15
 800d44c:	3401      	adds	r4, #1
 800d44e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d452:	e74c      	b.n	800d2ee <__kernel_rem_pio2f+0x1f2>
 800d454:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d458:	aa08      	add	r2, sp, #32
 800d45a:	ee10 3a10 	vmov	r3, s0
 800d45e:	e7f6      	b.n	800d44e <__kernel_rem_pio2f+0x352>
 800d460:	a808      	add	r0, sp, #32
 800d462:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d466:	9001      	str	r0, [sp, #4]
 800d468:	ee07 0a90 	vmov	s15, r0
 800d46c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d470:	3b01      	subs	r3, #1
 800d472:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d476:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d47a:	ed62 7a01 	vstmdb	r2!, {s15}
 800d47e:	e743      	b.n	800d308 <__kernel_rem_pio2f+0x20c>
 800d480:	ecfc 6a01 	vldmia	ip!, {s13}
 800d484:	ecb5 7a01 	vldmia	r5!, {s14}
 800d488:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d48c:	3001      	adds	r0, #1
 800d48e:	4550      	cmp	r0, sl
 800d490:	dc01      	bgt.n	800d496 <__kernel_rem_pio2f+0x39a>
 800d492:	4282      	cmp	r2, r0
 800d494:	daf4      	bge.n	800d480 <__kernel_rem_pio2f+0x384>
 800d496:	a858      	add	r0, sp, #352	@ 0x160
 800d498:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d49c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	e735      	b.n	800d310 <__kernel_rem_pio2f+0x214>
 800d4a4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	dc09      	bgt.n	800d4be <__kernel_rem_pio2f+0x3c2>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	dc2b      	bgt.n	800d506 <__kernel_rem_pio2f+0x40a>
 800d4ae:	d044      	beq.n	800d53a <__kernel_rem_pio2f+0x43e>
 800d4b0:	f009 0007 	and.w	r0, r9, #7
 800d4b4:	b059      	add	sp, #356	@ 0x164
 800d4b6:	ecbd 8b04 	vpop	{d8-d9}
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d4c0:	2b03      	cmp	r3, #3
 800d4c2:	d1f5      	bne.n	800d4b0 <__kernel_rem_pio2f+0x3b4>
 800d4c4:	aa30      	add	r2, sp, #192	@ 0xc0
 800d4c6:	1f0b      	subs	r3, r1, #4
 800d4c8:	4413      	add	r3, r2
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f1a2 0204 	sub.w	r2, r2, #4
 800d4d4:	dc52      	bgt.n	800d57c <__kernel_rem_pio2f+0x480>
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	2a01      	cmp	r2, #1
 800d4da:	f1a3 0304 	sub.w	r3, r3, #4
 800d4de:	dc5d      	bgt.n	800d59c <__kernel_rem_pio2f+0x4a0>
 800d4e0:	ab30      	add	r3, sp, #192	@ 0xc0
 800d4e2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d4e6:	440b      	add	r3, r1
 800d4e8:	2c01      	cmp	r4, #1
 800d4ea:	dc67      	bgt.n	800d5bc <__kernel_rem_pio2f+0x4c0>
 800d4ec:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d4f0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d4f4:	2e00      	cmp	r6, #0
 800d4f6:	d167      	bne.n	800d5c8 <__kernel_rem_pio2f+0x4cc>
 800d4f8:	edc7 6a00 	vstr	s13, [r7]
 800d4fc:	ed87 7a01 	vstr	s14, [r7, #4]
 800d500:	edc7 7a02 	vstr	s15, [r7, #8]
 800d504:	e7d4      	b.n	800d4b0 <__kernel_rem_pio2f+0x3b4>
 800d506:	ab30      	add	r3, sp, #192	@ 0xc0
 800d508:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d50c:	440b      	add	r3, r1
 800d50e:	4622      	mov	r2, r4
 800d510:	2a00      	cmp	r2, #0
 800d512:	da24      	bge.n	800d55e <__kernel_rem_pio2f+0x462>
 800d514:	b34e      	cbz	r6, 800d56a <__kernel_rem_pio2f+0x46e>
 800d516:	eef1 7a47 	vneg.f32	s15, s14
 800d51a:	edc7 7a00 	vstr	s15, [r7]
 800d51e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d526:	aa31      	add	r2, sp, #196	@ 0xc4
 800d528:	2301      	movs	r3, #1
 800d52a:	429c      	cmp	r4, r3
 800d52c:	da20      	bge.n	800d570 <__kernel_rem_pio2f+0x474>
 800d52e:	b10e      	cbz	r6, 800d534 <__kernel_rem_pio2f+0x438>
 800d530:	eef1 7a67 	vneg.f32	s15, s15
 800d534:	edc7 7a01 	vstr	s15, [r7, #4]
 800d538:	e7ba      	b.n	800d4b0 <__kernel_rem_pio2f+0x3b4>
 800d53a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d53c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800d400 <__kernel_rem_pio2f+0x304>
 800d540:	440b      	add	r3, r1
 800d542:	2c00      	cmp	r4, #0
 800d544:	da05      	bge.n	800d552 <__kernel_rem_pio2f+0x456>
 800d546:	b10e      	cbz	r6, 800d54c <__kernel_rem_pio2f+0x450>
 800d548:	eef1 7a67 	vneg.f32	s15, s15
 800d54c:	edc7 7a00 	vstr	s15, [r7]
 800d550:	e7ae      	b.n	800d4b0 <__kernel_rem_pio2f+0x3b4>
 800d552:	ed33 7a01 	vldmdb	r3!, {s14}
 800d556:	3c01      	subs	r4, #1
 800d558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d55c:	e7f1      	b.n	800d542 <__kernel_rem_pio2f+0x446>
 800d55e:	ed73 7a01 	vldmdb	r3!, {s15}
 800d562:	3a01      	subs	r2, #1
 800d564:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d568:	e7d2      	b.n	800d510 <__kernel_rem_pio2f+0x414>
 800d56a:	eef0 7a47 	vmov.f32	s15, s14
 800d56e:	e7d4      	b.n	800d51a <__kernel_rem_pio2f+0x41e>
 800d570:	ecb2 7a01 	vldmia	r2!, {s14}
 800d574:	3301      	adds	r3, #1
 800d576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d57a:	e7d6      	b.n	800d52a <__kernel_rem_pio2f+0x42e>
 800d57c:	edd2 7a00 	vldr	s15, [r2]
 800d580:	edd2 6a01 	vldr	s13, [r2, #4]
 800d584:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d588:	3801      	subs	r0, #1
 800d58a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d58e:	ed82 7a00 	vstr	s14, [r2]
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	edc2 7a01 	vstr	s15, [r2, #4]
 800d59a:	e798      	b.n	800d4ce <__kernel_rem_pio2f+0x3d2>
 800d59c:	edd3 7a00 	vldr	s15, [r3]
 800d5a0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d5a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d5a8:	3a01      	subs	r2, #1
 800d5aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5ae:	ed83 7a00 	vstr	s14, [r3]
 800d5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b6:	edc3 7a01 	vstr	s15, [r3, #4]
 800d5ba:	e78d      	b.n	800d4d8 <__kernel_rem_pio2f+0x3dc>
 800d5bc:	ed33 7a01 	vldmdb	r3!, {s14}
 800d5c0:	3c01      	subs	r4, #1
 800d5c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5c6:	e78f      	b.n	800d4e8 <__kernel_rem_pio2f+0x3ec>
 800d5c8:	eef1 6a66 	vneg.f32	s13, s13
 800d5cc:	eeb1 7a47 	vneg.f32	s14, s14
 800d5d0:	edc7 6a00 	vstr	s13, [r7]
 800d5d4:	ed87 7a01 	vstr	s14, [r7, #4]
 800d5d8:	eef1 7a67 	vneg.f32	s15, s15
 800d5dc:	e790      	b.n	800d500 <__kernel_rem_pio2f+0x404>
 800d5de:	bf00      	nop

0800d5e0 <scalbnf>:
 800d5e0:	ee10 3a10 	vmov	r3, s0
 800d5e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d5e8:	d02b      	beq.n	800d642 <scalbnf+0x62>
 800d5ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d5ee:	d302      	bcc.n	800d5f6 <scalbnf+0x16>
 800d5f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5f4:	4770      	bx	lr
 800d5f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d5fa:	d123      	bne.n	800d644 <scalbnf+0x64>
 800d5fc:	4b24      	ldr	r3, [pc, #144]	@ (800d690 <scalbnf+0xb0>)
 800d5fe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d694 <scalbnf+0xb4>
 800d602:	4298      	cmp	r0, r3
 800d604:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d608:	db17      	blt.n	800d63a <scalbnf+0x5a>
 800d60a:	ee10 3a10 	vmov	r3, s0
 800d60e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d612:	3a19      	subs	r2, #25
 800d614:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d618:	4288      	cmp	r0, r1
 800d61a:	dd15      	ble.n	800d648 <scalbnf+0x68>
 800d61c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d698 <scalbnf+0xb8>
 800d620:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d69c <scalbnf+0xbc>
 800d624:	ee10 3a10 	vmov	r3, s0
 800d628:	eeb0 7a67 	vmov.f32	s14, s15
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bfb8      	it	lt
 800d630:	eef0 7a66 	vmovlt.f32	s15, s13
 800d634:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d638:	4770      	bx	lr
 800d63a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d6a0 <scalbnf+0xc0>
 800d63e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d642:	4770      	bx	lr
 800d644:	0dd2      	lsrs	r2, r2, #23
 800d646:	e7e5      	b.n	800d614 <scalbnf+0x34>
 800d648:	4410      	add	r0, r2
 800d64a:	28fe      	cmp	r0, #254	@ 0xfe
 800d64c:	dce6      	bgt.n	800d61c <scalbnf+0x3c>
 800d64e:	2800      	cmp	r0, #0
 800d650:	dd06      	ble.n	800d660 <scalbnf+0x80>
 800d652:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d656:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d65a:	ee00 3a10 	vmov	s0, r3
 800d65e:	4770      	bx	lr
 800d660:	f110 0f16 	cmn.w	r0, #22
 800d664:	da09      	bge.n	800d67a <scalbnf+0x9a>
 800d666:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d6a0 <scalbnf+0xc0>
 800d66a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d6a4 <scalbnf+0xc4>
 800d66e:	ee10 3a10 	vmov	r3, s0
 800d672:	eeb0 7a67 	vmov.f32	s14, s15
 800d676:	2b00      	cmp	r3, #0
 800d678:	e7d9      	b.n	800d62e <scalbnf+0x4e>
 800d67a:	3019      	adds	r0, #25
 800d67c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d680:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d684:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d6a8 <scalbnf+0xc8>
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	e7d7      	b.n	800d63e <scalbnf+0x5e>
 800d68e:	bf00      	nop
 800d690:	ffff3cb0 	.word	0xffff3cb0
 800d694:	4c000000 	.word	0x4c000000
 800d698:	7149f2ca 	.word	0x7149f2ca
 800d69c:	f149f2ca 	.word	0xf149f2ca
 800d6a0:	0da24260 	.word	0x0da24260
 800d6a4:	8da24260 	.word	0x8da24260
 800d6a8:	33000000 	.word	0x33000000

0800d6ac <floorf>:
 800d6ac:	ee10 3a10 	vmov	r3, s0
 800d6b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6b4:	3a7f      	subs	r2, #127	@ 0x7f
 800d6b6:	2a16      	cmp	r2, #22
 800d6b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6bc:	dc2b      	bgt.n	800d716 <floorf+0x6a>
 800d6be:	2a00      	cmp	r2, #0
 800d6c0:	da12      	bge.n	800d6e8 <floorf+0x3c>
 800d6c2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d728 <floorf+0x7c>
 800d6c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d6ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d2:	dd06      	ble.n	800d6e2 <floorf+0x36>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	da24      	bge.n	800d722 <floorf+0x76>
 800d6d8:	2900      	cmp	r1, #0
 800d6da:	4b14      	ldr	r3, [pc, #80]	@ (800d72c <floorf+0x80>)
 800d6dc:	bf08      	it	eq
 800d6de:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d6e2:	ee00 3a10 	vmov	s0, r3
 800d6e6:	4770      	bx	lr
 800d6e8:	4911      	ldr	r1, [pc, #68]	@ (800d730 <floorf+0x84>)
 800d6ea:	4111      	asrs	r1, r2
 800d6ec:	420b      	tst	r3, r1
 800d6ee:	d0fa      	beq.n	800d6e6 <floorf+0x3a>
 800d6f0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d728 <floorf+0x7c>
 800d6f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d6f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d700:	ddef      	ble.n	800d6e2 <floorf+0x36>
 800d702:	2b00      	cmp	r3, #0
 800d704:	bfbe      	ittt	lt
 800d706:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d70a:	fa40 f202 	asrlt.w	r2, r0, r2
 800d70e:	189b      	addlt	r3, r3, r2
 800d710:	ea23 0301 	bic.w	r3, r3, r1
 800d714:	e7e5      	b.n	800d6e2 <floorf+0x36>
 800d716:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d71a:	d3e4      	bcc.n	800d6e6 <floorf+0x3a>
 800d71c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d720:	4770      	bx	lr
 800d722:	2300      	movs	r3, #0
 800d724:	e7dd      	b.n	800d6e2 <floorf+0x36>
 800d726:	bf00      	nop
 800d728:	7149f2ca 	.word	0x7149f2ca
 800d72c:	bf800000 	.word	0xbf800000
 800d730:	007fffff 	.word	0x007fffff

0800d734 <_init>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr

0800d740 <_fini>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	bf00      	nop
 800d744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d746:	bc08      	pop	{r3}
 800d748:	469e      	mov	lr, r3
 800d74a:	4770      	bx	lr
