
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013070  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc04  0801cc04  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc04  0801cc04  0002cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc0c  0801cc0c  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc0c  0801cc0c  0002cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cc10  0801cc10  0002cc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801cc14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000005c  0801cc70  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0801cc70  00030424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c47  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dce  00000000  00000000  00051d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  00055b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001038  00000000  00000000  00057168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f8  00000000  00000000  000581a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c4a  00000000  00000000  0006e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005f74  00000000  00000000  000763e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000042  00000000  00000000  0007c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003c05  00000000  00000000  0007c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000001a8  00000000  00000000  0007ff9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000005c 	.word	0x2000005c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009b7c 	.word	0x08009b7c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000060 	.word	0x20000060
 80001f8:	08009b7c 	.word	0x08009b7c

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_d2f>:
 8000574:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000578:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800057c:	bf24      	itt	cs
 800057e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000582:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000586:	d90d      	bls.n	80005a4 <__aeabi_d2f+0x30>
 8000588:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800058c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000590:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000594:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000598:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800059c:	bf08      	it	eq
 800059e:	f020 0001 	biceq.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005a8:	d121      	bne.n	80005ee <__aeabi_d2f+0x7a>
 80005aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ae:	bfbc      	itt	lt
 80005b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005b4:	4770      	bxlt	lr
 80005b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005be:	f1c2 0218 	rsb	r2, r2, #24
 80005c2:	f1c2 0c20 	rsb	ip, r2, #32
 80005c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	bf18      	it	ne
 80005d0:	f040 0001 	orrne.w	r0, r0, #1
 80005d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e0:	ea40 000c 	orr.w	r0, r0, ip
 80005e4:	fa23 f302 	lsr.w	r3, r3, r2
 80005e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005ec:	e7cc      	b.n	8000588 <__aeabi_d2f+0x14>
 80005ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005f2:	d107      	bne.n	8000604 <__aeabi_d2f+0x90>
 80005f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005f8:	bf1e      	ittt	ne
 80005fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bxne	lr
 8000604:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000608:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800060c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <__aeabi_uldivmod>:
 8000614:	b953      	cbnz	r3, 800062c <__aeabi_uldivmod+0x18>
 8000616:	b94a      	cbnz	r2, 800062c <__aeabi_uldivmod+0x18>
 8000618:	2900      	cmp	r1, #0
 800061a:	bf08      	it	eq
 800061c:	2800      	cmpeq	r0, #0
 800061e:	bf1c      	itt	ne
 8000620:	f04f 31ff 	movne.w	r1, #4294967295
 8000624:	f04f 30ff 	movne.w	r0, #4294967295
 8000628:	f000 b970 	b.w	800090c <__aeabi_idiv0>
 800062c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000630:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000634:	f000 f806 	bl	8000644 <__udivmoddi4>
 8000638:	f8dd e004 	ldr.w	lr, [sp, #4]
 800063c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000640:	b004      	add	sp, #16
 8000642:	4770      	bx	lr

08000644 <__udivmoddi4>:
 8000644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000648:	9e08      	ldr	r6, [sp, #32]
 800064a:	460d      	mov	r5, r1
 800064c:	4604      	mov	r4, r0
 800064e:	460f      	mov	r7, r1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d14a      	bne.n	80006ea <__udivmoddi4+0xa6>
 8000654:	428a      	cmp	r2, r1
 8000656:	4694      	mov	ip, r2
 8000658:	d965      	bls.n	8000726 <__udivmoddi4+0xe2>
 800065a:	fab2 f382 	clz	r3, r2
 800065e:	b143      	cbz	r3, 8000672 <__udivmoddi4+0x2e>
 8000660:	fa02 fc03 	lsl.w	ip, r2, r3
 8000664:	f1c3 0220 	rsb	r2, r3, #32
 8000668:	409f      	lsls	r7, r3
 800066a:	fa20 f202 	lsr.w	r2, r0, r2
 800066e:	4317      	orrs	r7, r2
 8000670:	409c      	lsls	r4, r3
 8000672:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000676:	fa1f f58c 	uxth.w	r5, ip
 800067a:	fbb7 f1fe 	udiv	r1, r7, lr
 800067e:	0c22      	lsrs	r2, r4, #16
 8000680:	fb0e 7711 	mls	r7, lr, r1, r7
 8000684:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000688:	fb01 f005 	mul.w	r0, r1, r5
 800068c:	4290      	cmp	r0, r2
 800068e:	d90a      	bls.n	80006a6 <__udivmoddi4+0x62>
 8000690:	eb1c 0202 	adds.w	r2, ip, r2
 8000694:	f101 37ff 	add.w	r7, r1, #4294967295
 8000698:	f080 811c 	bcs.w	80008d4 <__udivmoddi4+0x290>
 800069c:	4290      	cmp	r0, r2
 800069e:	f240 8119 	bls.w	80008d4 <__udivmoddi4+0x290>
 80006a2:	3902      	subs	r1, #2
 80006a4:	4462      	add	r2, ip
 80006a6:	1a12      	subs	r2, r2, r0
 80006a8:	b2a4      	uxth	r4, r4
 80006aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80006ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80006b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006b6:	fb00 f505 	mul.w	r5, r0, r5
 80006ba:	42a5      	cmp	r5, r4
 80006bc:	d90a      	bls.n	80006d4 <__udivmoddi4+0x90>
 80006be:	eb1c 0404 	adds.w	r4, ip, r4
 80006c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c6:	f080 8107 	bcs.w	80008d8 <__udivmoddi4+0x294>
 80006ca:	42a5      	cmp	r5, r4
 80006cc:	f240 8104 	bls.w	80008d8 <__udivmoddi4+0x294>
 80006d0:	4464      	add	r4, ip
 80006d2:	3802      	subs	r0, #2
 80006d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	2100      	movs	r1, #0
 80006dc:	b11e      	cbz	r6, 80006e6 <__udivmoddi4+0xa2>
 80006de:	40dc      	lsrs	r4, r3
 80006e0:	2300      	movs	r3, #0
 80006e2:	e9c6 4300 	strd	r4, r3, [r6]
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d908      	bls.n	8000700 <__udivmoddi4+0xbc>
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	f000 80ed 	beq.w	80008ce <__udivmoddi4+0x28a>
 80006f4:	2100      	movs	r1, #0
 80006f6:	e9c6 0500 	strd	r0, r5, [r6]
 80006fa:	4608      	mov	r0, r1
 80006fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000700:	fab3 f183 	clz	r1, r3
 8000704:	2900      	cmp	r1, #0
 8000706:	d149      	bne.n	800079c <__udivmoddi4+0x158>
 8000708:	42ab      	cmp	r3, r5
 800070a:	d302      	bcc.n	8000712 <__udivmoddi4+0xce>
 800070c:	4282      	cmp	r2, r0
 800070e:	f200 80f8 	bhi.w	8000902 <__udivmoddi4+0x2be>
 8000712:	1a84      	subs	r4, r0, r2
 8000714:	eb65 0203 	sbc.w	r2, r5, r3
 8000718:	2001      	movs	r0, #1
 800071a:	4617      	mov	r7, r2
 800071c:	2e00      	cmp	r6, #0
 800071e:	d0e2      	beq.n	80006e6 <__udivmoddi4+0xa2>
 8000720:	e9c6 4700 	strd	r4, r7, [r6]
 8000724:	e7df      	b.n	80006e6 <__udivmoddi4+0xa2>
 8000726:	b902      	cbnz	r2, 800072a <__udivmoddi4+0xe6>
 8000728:	deff      	udf	#255	; 0xff
 800072a:	fab2 f382 	clz	r3, r2
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x210>
 8000734:	1a8a      	subs	r2, r1, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f fe8c 	uxth.w	lr, ip
 800073e:	2101      	movs	r1, #1
 8000740:	fbb2 f5f7 	udiv	r5, r2, r7
 8000744:	fb07 2015 	mls	r0, r7, r5, r2
 8000748:	0c22      	lsrs	r2, r4, #16
 800074a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800074e:	fb0e f005 	mul.w	r0, lr, r5
 8000752:	4290      	cmp	r0, r2
 8000754:	d908      	bls.n	8000768 <__udivmoddi4+0x124>
 8000756:	eb1c 0202 	adds.w	r2, ip, r2
 800075a:	f105 38ff 	add.w	r8, r5, #4294967295
 800075e:	d202      	bcs.n	8000766 <__udivmoddi4+0x122>
 8000760:	4290      	cmp	r0, r2
 8000762:	f200 80cb 	bhi.w	80008fc <__udivmoddi4+0x2b8>
 8000766:	4645      	mov	r5, r8
 8000768:	1a12      	subs	r2, r2, r0
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000770:	fb07 2210 	mls	r2, r7, r0, r2
 8000774:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000778:	fb0e fe00 	mul.w	lr, lr, r0
 800077c:	45a6      	cmp	lr, r4
 800077e:	d908      	bls.n	8000792 <__udivmoddi4+0x14e>
 8000780:	eb1c 0404 	adds.w	r4, ip, r4
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	d202      	bcs.n	8000790 <__udivmoddi4+0x14c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f200 80bb 	bhi.w	8000906 <__udivmoddi4+0x2c2>
 8000790:	4610      	mov	r0, r2
 8000792:	eba4 040e 	sub.w	r4, r4, lr
 8000796:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800079a:	e79f      	b.n	80006dc <__udivmoddi4+0x98>
 800079c:	f1c1 0720 	rsb	r7, r1, #32
 80007a0:	408b      	lsls	r3, r1
 80007a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80007a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80007aa:	fa05 f401 	lsl.w	r4, r5, r1
 80007ae:	fa20 f307 	lsr.w	r3, r0, r7
 80007b2:	40fd      	lsrs	r5, r7
 80007b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007b8:	4323      	orrs	r3, r4
 80007ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80007be:	fa1f fe8c 	uxth.w	lr, ip
 80007c2:	fb09 5518 	mls	r5, r9, r8, r5
 80007c6:	0c1c      	lsrs	r4, r3, #16
 80007c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007cc:	fb08 f50e 	mul.w	r5, r8, lr
 80007d0:	42a5      	cmp	r5, r4
 80007d2:	fa02 f201 	lsl.w	r2, r2, r1
 80007d6:	fa00 f001 	lsl.w	r0, r0, r1
 80007da:	d90b      	bls.n	80007f4 <__udivmoddi4+0x1b0>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80007e4:	f080 8088 	bcs.w	80008f8 <__udivmoddi4+0x2b4>
 80007e8:	42a5      	cmp	r5, r4
 80007ea:	f240 8085 	bls.w	80008f8 <__udivmoddi4+0x2b4>
 80007ee:	f1a8 0802 	sub.w	r8, r8, #2
 80007f2:	4464      	add	r4, ip
 80007f4:	1b64      	subs	r4, r4, r5
 80007f6:	b29d      	uxth	r5, r3
 80007f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80007fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000800:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000804:	fb03 fe0e 	mul.w	lr, r3, lr
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x1da>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f103 35ff 	add.w	r5, r3, #4294967295
 8000814:	d26c      	bcs.n	80008f0 <__udivmoddi4+0x2ac>
 8000816:	45a6      	cmp	lr, r4
 8000818:	d96a      	bls.n	80008f0 <__udivmoddi4+0x2ac>
 800081a:	3b02      	subs	r3, #2
 800081c:	4464      	add	r4, ip
 800081e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000822:	fba3 9502 	umull	r9, r5, r3, r2
 8000826:	eba4 040e 	sub.w	r4, r4, lr
 800082a:	42ac      	cmp	r4, r5
 800082c:	46c8      	mov	r8, r9
 800082e:	46ae      	mov	lr, r5
 8000830:	d356      	bcc.n	80008e0 <__udivmoddi4+0x29c>
 8000832:	d053      	beq.n	80008dc <__udivmoddi4+0x298>
 8000834:	b156      	cbz	r6, 800084c <__udivmoddi4+0x208>
 8000836:	ebb0 0208 	subs.w	r2, r0, r8
 800083a:	eb64 040e 	sbc.w	r4, r4, lr
 800083e:	fa04 f707 	lsl.w	r7, r4, r7
 8000842:	40ca      	lsrs	r2, r1
 8000844:	40cc      	lsrs	r4, r1
 8000846:	4317      	orrs	r7, r2
 8000848:	e9c6 7400 	strd	r7, r4, [r6]
 800084c:	4618      	mov	r0, r3
 800084e:	2100      	movs	r1, #0
 8000850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000854:	f1c3 0120 	rsb	r1, r3, #32
 8000858:	fa02 fc03 	lsl.w	ip, r2, r3
 800085c:	fa20 f201 	lsr.w	r2, r0, r1
 8000860:	fa25 f101 	lsr.w	r1, r5, r1
 8000864:	409d      	lsls	r5, r3
 8000866:	432a      	orrs	r2, r5
 8000868:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800086c:	fa1f fe8c 	uxth.w	lr, ip
 8000870:	fbb1 f0f7 	udiv	r0, r1, r7
 8000874:	fb07 1510 	mls	r5, r7, r0, r1
 8000878:	0c11      	lsrs	r1, r2, #16
 800087a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800087e:	fb00 f50e 	mul.w	r5, r0, lr
 8000882:	428d      	cmp	r5, r1
 8000884:	fa04 f403 	lsl.w	r4, r4, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x258>
 800088a:	eb1c 0101 	adds.w	r1, ip, r1
 800088e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000892:	d22f      	bcs.n	80008f4 <__udivmoddi4+0x2b0>
 8000894:	428d      	cmp	r5, r1
 8000896:	d92d      	bls.n	80008f4 <__udivmoddi4+0x2b0>
 8000898:	3802      	subs	r0, #2
 800089a:	4461      	add	r1, ip
 800089c:	1b49      	subs	r1, r1, r5
 800089e:	b292      	uxth	r2, r2
 80008a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80008a4:	fb07 1115 	mls	r1, r7, r5, r1
 80008a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008ac:	fb05 f10e 	mul.w	r1, r5, lr
 80008b0:	4291      	cmp	r1, r2
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x282>
 80008b4:	eb1c 0202 	adds.w	r2, ip, r2
 80008b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80008bc:	d216      	bcs.n	80008ec <__udivmoddi4+0x2a8>
 80008be:	4291      	cmp	r1, r2
 80008c0:	d914      	bls.n	80008ec <__udivmoddi4+0x2a8>
 80008c2:	3d02      	subs	r5, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a52      	subs	r2, r2, r1
 80008c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008cc:	e738      	b.n	8000740 <__udivmoddi4+0xfc>
 80008ce:	4631      	mov	r1, r6
 80008d0:	4630      	mov	r0, r6
 80008d2:	e708      	b.n	80006e6 <__udivmoddi4+0xa2>
 80008d4:	4639      	mov	r1, r7
 80008d6:	e6e6      	b.n	80006a6 <__udivmoddi4+0x62>
 80008d8:	4610      	mov	r0, r2
 80008da:	e6fb      	b.n	80006d4 <__udivmoddi4+0x90>
 80008dc:	4548      	cmp	r0, r9
 80008de:	d2a9      	bcs.n	8000834 <__udivmoddi4+0x1f0>
 80008e0:	ebb9 0802 	subs.w	r8, r9, r2
 80008e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008e8:	3b01      	subs	r3, #1
 80008ea:	e7a3      	b.n	8000834 <__udivmoddi4+0x1f0>
 80008ec:	4645      	mov	r5, r8
 80008ee:	e7ea      	b.n	80008c6 <__udivmoddi4+0x282>
 80008f0:	462b      	mov	r3, r5
 80008f2:	e794      	b.n	800081e <__udivmoddi4+0x1da>
 80008f4:	4640      	mov	r0, r8
 80008f6:	e7d1      	b.n	800089c <__udivmoddi4+0x258>
 80008f8:	46d0      	mov	r8, sl
 80008fa:	e77b      	b.n	80007f4 <__udivmoddi4+0x1b0>
 80008fc:	3d02      	subs	r5, #2
 80008fe:	4462      	add	r2, ip
 8000900:	e732      	b.n	8000768 <__udivmoddi4+0x124>
 8000902:	4608      	mov	r0, r1
 8000904:	e70a      	b.n	800071c <__udivmoddi4+0xd8>
 8000906:	4464      	add	r4, ip
 8000908:	3802      	subs	r0, #2
 800090a:	e742      	b.n	8000792 <__udivmoddi4+0x14e>

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

	convFlag = 1;
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_ADC_ConvCpltCallback+0x1c>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200002e0 	.word	0x200002e0

08000930 <maxIndex>:


void maxIndex(float32_t * fftStart, uint32_t * maxIndices, int start, int length) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]

	int maxVal, maxInd;

	fftStart += start;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < 8; ++i){
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	e01a      	b.n	8000984 <maxIndex+0x54>

		arm_max_f32(fftStart, length, &maxVal, &maxInd);
 800094e:	6839      	ldr	r1, [r7, #0]
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	f107 0218 	add.w	r2, r7, #24
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f007 fee1 	bl	8008720 <arm_max_f32>
		maxIndices[i] = maxInd + start;
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	18d1      	adds	r1, r2, r3
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	4413      	add	r3, r2
 800096c:	460a      	mov	r2, r1
 800096e:	601a      	str	r2, [r3, #0]

		//sample without replacement
		fftStart[maxInd] = 0;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 8; ++i){
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3301      	adds	r3, #1
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2b07      	cmp	r3, #7
 8000988:	dde1      	ble.n	800094e <maxIndex+0x1e>
	}


}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b5b0      	push	{r4, r5, r7, lr}
 8000996:	f5ad 4d60 	sub.w	sp, sp, #57344	; 0xe000
 800099a:	b09c      	sub	sp, #112	; 0x70
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	convFlag = 0;
 800099e:	4bb4      	ldr	r3, [pc, #720]	; (8000c70 <main+0x2dc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

	float32_t string_freqs[6] = {329.63, 246.94, 196.0, 146.83, 110.0, 82.41};
 80009a4:	4bb3      	ldr	r3, [pc, #716]	; (8000c74 <main+0x2e0>)
 80009a6:	f507 4460 	add.w	r4, r7, #57344	; 0xe000
 80009aa:	f104 0438 	add.w	r4, r4, #56	; 0x38
 80009ae:	461d      	mov	r5, r3
 80009b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b8:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f001 f869 	bl	8001a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f962 	bl	8000c88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009c4:	f000 f9a6 	bl	8000d14 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f000 fbce 	bl	8001168 <MX_GPIO_Init>
  MX_DMA_Init();
 80009cc:	f000 fb9a 	bl	8001104 <MX_DMA_Init>
  MX_ADC1_Init();
 80009d0:	f000 f9d0 	bl	8000d74 <MX_ADC1_Init>
  MX_DAC1_Init();
 80009d4:	f000 fa34 	bl	8000e40 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 80009d8:	f000 fa66 	bl	8000ea8 <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 80009dc:	f000 fab0 	bl	8000f40 <MX_SAI1_Init>
  MX_TIM1_Init();
 80009e0:	f000 fae4 	bl	8000fac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  arm_rfft_fast_init_f32(&fftHandler, BUFFER_LENGTH);
 80009e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e8:	48a3      	ldr	r0, [pc, #652]	; (8000c78 <main+0x2e4>)
 80009ea:	f007 ffcd 	bl	8008988 <arm_rfft_fast_init_f32>
  float32_t FFT_OUT[BUFFER_LENGTH];
  float32_t FFT_MAG[BUFFER_LENGTH/2];

   volatile uint16_t ADC_BUFFER[BUFFER_LENGTH];

  float32_t freq_resolution = (float32_t)SAMPLING_RATE / (float32_t)BUFFER_LENGTH;
 80009ee:	4ba3      	ldr	r3, [pc, #652]	; (8000c7c <main+0x2e8>)
 80009f0:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 80009f4:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80009f8:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 80009fa:	48a1      	ldr	r0, [pc, #644]	; (8000c80 <main+0x2ec>)
 80009fc:	f006 f902 	bl	8006c04 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint16_t *) &ADC_BUFFER, BUFFER_LENGTH);
 8000a00:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a04:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a08:	3b50      	subs	r3, #80	; 0x50
 8000a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0e:	4619      	mov	r1, r3
 8000a10:	489c      	ldr	r0, [pc, #624]	; (8000c84 <main+0x2f0>)
 8000a12:	f001 fbf7 	bl	8002204 <HAL_ADC_Start_DMA>
//		  float32_t s = sin(r) + sin(r*4) * 0.5 + sin(r*3) * 0.25;
//		  FFT_IN[i] = s;
//	  }


	  while(convFlag == 0) {;}
 8000a16:	bf00      	nop
 8000a18:	4b95      	ldr	r3, [pc, #596]	; (8000c70 <main+0x2dc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0fb      	beq.n	8000a18 <main+0x84>
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000a26:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e031      	b.n	8000a92 <main+0xfe>
		  FFT_IN[i] = (double)(ADC_BUFFER[i]);
 8000a2e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a32:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a36:	461a      	mov	r2, r3
 8000a38:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000a3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd17 	bl	8000480 <__aeabi_ui2d>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fd8b 	bl	8000574 <__aeabi_d2f>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8000a64:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000a6e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	3b50      	subs	r3, #80	; 0x50
 8000a7a:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < BUFFER_LENGTH; i++) {
 8000a7c:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000a80:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000a8c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000a96:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa0:	dbc5      	blt.n	8000a2e <main+0x9a>
	  }


	  arm_rfft_fast_f32(&fftHandler, &FFT_IN, &FFT_OUT, 0);
 8000aa2:	f507 42c0 	add.w	r2, r7, #24576	; 0x6000
 8000aa6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8000aaa:	3a50      	subs	r2, #80	; 0x50
 8000aac:	f507 4120 	add.w	r1, r7, #40960	; 0xa000
 8000ab0:	f101 0170 	add.w	r1, r1, #112	; 0x70
 8000ab4:	3950      	subs	r1, #80	; 0x50
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	486f      	ldr	r0, [pc, #444]	; (8000c78 <main+0x2e4>)
 8000aba:	f008 f849 	bl	8008b50 <arm_rfft_fast_f32>
	  arm_cmplx_mag_f32(FFT_OUT,FFT_MAG,BUFFER_LENGTH/2);
 8000abe:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8000ac2:	f101 0170 	add.w	r1, r1, #112	; 0x70
 8000ac6:	3950      	subs	r1, #80	; 0x50
 8000ac8:	f507 43c0 	add.w	r3, r7, #24576	; 0x6000
 8000acc:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000ad0:	3b50      	subs	r3, #80	; 0x50
 8000ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 fc18 	bl	800930c <arm_cmplx_mag_f32>

	  //Set freq below 50 Hz = 0
	  for(int i = 0; i < 50; i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000ae2:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e01a      	b.n	8000b20 <main+0x18c>
		  FFT_MAG[i] = 0;
 8000aea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000aee:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000af2:	461a      	mov	r2, r3
 8000af4:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000af8:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	3b50      	subs	r3, #80	; 0x50
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 50; i++) {
 8000b0a:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000b0e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000b1a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000b24:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b31      	cmp	r3, #49	; 0x31
 8000b2c:	dddd      	ble.n	8000aea <main+0x156>
	  }


	  //Set freq above 500 Hz = 0
	  for(int i =500; i< BUFFER_LENGTH; ++i){
 8000b2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b32:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000b36:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e01a      	b.n	8000b74 <main+0x1e0>
		  FFT_MAG[i] = 0;
 8000b3e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000b42:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000b46:	461a      	mov	r2, r3
 8000b48:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000b4c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	3b50      	subs	r3, #80	; 0x50
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
	  for(int i =500; i< BUFFER_LENGTH; ++i){
 8000b5e:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000b62:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000b6e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000b78:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b82:	dbdc      	blt.n	8000b3e <main+0x1aa>
	  }

	  uint32_t maxInd[8];
	  float32_t FFT_M[BUFFER_LENGTH/2];
	  for(int i =0; i < BUFFER_LENGTH/2; ++i){
 8000b84:	2300      	movs	r3, #0
 8000b86:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000b8a:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e024      	b.n	8000bdc <main+0x248>
		  FFT_M[i] = FFT_MAG[i];
 8000b92:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000b96:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000ba0:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	3b50      	subs	r3, #80	; 0x50
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000bb8:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3b50      	subs	r3, #80	; 0x50
 8000bc4:	601a      	str	r2, [r3, #0]
	  for(int i =0; i < BUFFER_LENGTH/2; ++i){
 8000bc6:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000bca:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000bd6:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000be0:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bea:	dbd2      	blt.n	8000b92 <main+0x1fe>
	  }
	  maxIndex(&FFT_M[0], &maxInd, 50, 450);
 8000bec:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bf0:	3970      	subs	r1, #112	; 0x70
 8000bf2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000bf6:	3850      	subs	r0, #80	; 0x50
 8000bf8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000bfc:	2232      	movs	r2, #50	; 0x32
 8000bfe:	f7ff fe97 	bl	8000930 <maxIndex>

	  uint32_t minInd = maxInd[0];
 8000c02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c06:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000c0a:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000c0e:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8000c12:	6013      	str	r3, [r2, #0]
	  float32_t minInd_Val = FFT_MAG[minInd];
 8000c14:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000c18:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000c22:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3b50      	subs	r3, #80	; 0x50
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f507 4260 	add.w	r2, r7, #57344	; 0xe000
 8000c34:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8000c38:	6013      	str	r3, [r2, #0]

	  //uint32_t minInd, minVal;
	  //arm_min_f32(&maxInd, 6, &minInd, &minVal);


	  float32_t freq_at_max = minInd * freq_resolution;
 8000c3a:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000c3e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4c:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000c50:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000c54:	ed93 7a00 	vldr	s14, [r3]
 8000c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5c:	f507 4360 	add.w	r3, r7, #57344	; 0xe000
 8000c60:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000c64:	edc3 7a00 	vstr	s15, [r3]

	  //j = 0;

	  convFlag = 0;
 8000c68:	4b01      	ldr	r3, [pc, #4]	; (8000c70 <main+0x2dc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
  {
 8000c6e:	e6c7      	b.n	8000a00 <main+0x6c>
 8000c70:	200002e0 	.word	0x200002e0
 8000c74:	08009b94 	.word	0x08009b94
 8000c78:	200002c8 	.word	0x200002c8
 8000c7c:	3f7f199a 	.word	0x3f7f199a
 8000c80:	2000027c 	.word	0x2000027c
 8000c84:	20000078 	.word	0x20000078

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2244      	movs	r2, #68	; 0x44
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f008 ff1c 	bl	8009ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000caa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cae:	f002 fefb 	bl	8003aa8 <HAL_PWREx_ControlVoltageScaling>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cb8:	f000 fc2e 	bl	8001518 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cc8:	2360      	movs	r3, #96	; 0x60
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 ff9b 	bl	8003c10 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 fc1a 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fba1 	bl	8004444 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d08:	f000 fc06 	bl	8001518 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3758      	adds	r7, #88	; 0x58
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0a6      	sub	sp, #152	; 0x98
 8000d18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2294      	movs	r2, #148	; 0x94
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f008 fed7 	bl	8009ad4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8000d26:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000d2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d40:	2310      	movs	r3, #16
 8000d42:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <PeriphCommonClock_Config+0x5c>)
 8000d52:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 fe32 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000d62:	f000 fbd9 	bl	8001518 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3798      	adds	r7, #152	; 0x98
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	01010000 	.word	0x01010000

08000d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <MX_ADC1_Init+0xc4>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000d92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dcc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000df2:	f001 f8c1 	bl	8001f78 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f000 fb8c 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xc8>)
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xc0>)
 8000e1e:	f001 fa89 	bl	8002334 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000e28:	f000 fb76 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000078 	.word	0x20000078
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	04300002 	.word	0x04300002

08000e40 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2228      	movs	r2, #40	; 0x28
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 fe41 	bl	8009ad4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_DAC1_Init+0x60>)
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <MX_DAC1_Init+0x64>)
 8000e56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_DAC1_Init+0x60>)
 8000e5a:	f002 f892 	bl	8002f82 <HAL_DAC_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e64:	f000 fb58 	bl	8001518 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_DAC1_Init+0x60>)
 8000e88:	f002 f89e 	bl	8002fc8 <HAL_DAC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000e92:	f000 fb41 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000140 	.word	0x20000140
 8000ea4:	40007400 	.word	0x40007400

08000ea8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_LPUART1_UART_Init+0x94>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000ef2:	f006 fdad 	bl	8007a50 <HAL_UART_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 fb0c 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000f04:	f007 fb42 	bl	800858c <HAL_UARTEx_SetTxFifoThreshold>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f0e:	f000 fb03 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000f16:	f007 fb77 	bl	8008608 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f000 fafa 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_LPUART1_UART_Init+0x90>)
 8000f26:	f007 faf8 	bl	800851a <HAL_UARTEx_DisableFifoMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f000 faf2 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000154 	.word	0x20000154
 8000f3c:	40008000 	.word	0x40008000

08000f40 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_SAI1_Init+0x64>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <MX_SAI1_Init+0x68>)
 8000f6c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000f86:	2302      	movs	r3, #2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_SAI1_Init+0x60>)
 8000f8e:	f005 fa63 	bl	8006458 <HAL_SAI_InitProtocol>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 fabe 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001e8 	.word	0x200001e8
 8000fa4:	40015404 	.word	0x40015404
 8000fa8:	0002ee00 	.word	0x0002ee00

08000fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09a      	sub	sp, #104	; 0x68
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	222c      	movs	r2, #44	; 0x2c
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 fd74 	bl	8009ad4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <MX_TIM1_Init+0x150>)
 8000fee:	4a44      	ldr	r2, [pc, #272]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 97;
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ff4:	2261      	movs	r2, #97	; 0x61
 8000ff6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <MX_TIM1_Init+0x150>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_TIM1_Init+0x150>)
 8001000:	2209      	movs	r2, #9
 8001002:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <MX_TIM1_Init+0x150>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <MX_TIM1_Init+0x150>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <MX_TIM1_Init+0x150>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001016:	4839      	ldr	r0, [pc, #228]	; (80010fc <MX_TIM1_Init+0x150>)
 8001018:	f005 fd9c 	bl	8006b54 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001022:	f000 fa79 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001030:	4619      	mov	r1, r3
 8001032:	4832      	ldr	r0, [pc, #200]	; (80010fc <MX_TIM1_Init+0x150>)
 8001034:	f005 ff32 	bl	8006e9c <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800103e:	f000 fa6b 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001042:	482e      	ldr	r0, [pc, #184]	; (80010fc <MX_TIM1_Init+0x150>)
 8001044:	f005 fe4e 	bl	8006ce4 <HAL_TIM_OC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800104e:	f000 fa63 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001052:	2320      	movs	r3, #32
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001062:	4619      	mov	r1, r3
 8001064:	4825      	ldr	r0, [pc, #148]	; (80010fc <MX_TIM1_Init+0x150>)
 8001066:	f006 fbed 	bl	8007844 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001070:	f000 fa52 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5;
 8001078:	2305      	movs	r3, #5
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM1_Init+0x150>)
 800109a:	f005 fe85 	bl	8006da8 <HAL_TIM_OC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80010a4:	f000 fa38 	bl	8001518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM1_Init+0x150>)
 80010de:	f006 fc39 	bl	8007954 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80010e8:	f000 fa16 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM1_Init+0x150>)
 80010ee:	f000 fbd5 	bl	800189c <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3768      	adds	r7, #104	; 0x68
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000027c 	.word	0x2000027c
 8001100:	40012c00 	.word	0x40012c00

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_DMA_Init+0x60>)
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <MX_DMA_Init+0x60>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6493      	str	r3, [r2, #72]	; 0x48
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_DMA_Init+0x60>)
 8001118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_DMA_Init+0x60>)
 8001124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <MX_DMA_Init+0x60>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6493      	str	r3, [r2, #72]	; 0x48
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_DMA_Init+0x60>)
 8001130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	200b      	movs	r0, #11
 8001140:	f001 fee9 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001144:	200b      	movs	r0, #11
 8001146:	f001 ff02 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	205e      	movs	r0, #94	; 0x5e
 8001150:	f001 fee1 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001154:	205e      	movs	r0, #94	; 0x5e
 8001156:	f001 fefa 	bl	8002f4e <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4bb2      	ldr	r3, [pc, #712]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4ab1      	ldr	r2, [pc, #708]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4baf      	ldr	r3, [pc, #700]	; (8001448 <MX_GPIO_Init+0x2e0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4bac      	ldr	r3, [pc, #688]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4aab      	ldr	r2, [pc, #684]	; (8001448 <MX_GPIO_Init+0x2e0>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4ba9      	ldr	r3, [pc, #676]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	4ba6      	ldr	r3, [pc, #664]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4aa5      	ldr	r2, [pc, #660]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4ba3      	ldr	r3, [pc, #652]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	4ba0      	ldr	r3, [pc, #640]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a9f      	ldr	r2, [pc, #636]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b9d      	ldr	r3, [pc, #628]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b9a      	ldr	r3, [pc, #616]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a99      	ldr	r2, [pc, #612]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b97      	ldr	r3, [pc, #604]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b94      	ldr	r3, [pc, #592]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a93      	ldr	r2, [pc, #588]	; (8001448 <MX_GPIO_Init+0x2e0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b91      	ldr	r3, [pc, #580]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a8d      	ldr	r2, [pc, #564]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <MX_GPIO_Init+0x2e0>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a87      	ldr	r2, [pc, #540]	; (8001448 <MX_GPIO_Init+0x2e0>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <MX_GPIO_Init+0x2e0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800123e:	f002 fcd7 	bl	8003bf0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001242:	2307      	movs	r3, #7
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001246:	2312      	movs	r3, #18
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001252:	2304      	movs	r3, #4
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	487b      	ldr	r0, [pc, #492]	; (800144c <MX_GPIO_Init+0x2e4>)
 800125e:	f002 fa71 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001272:	2301      	movs	r3, #1
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f002 fa60 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001294:	2305      	movs	r3, #5
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f002 fa4f 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a6:	2301      	movs	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b6:	2302      	movs	r3, #2
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4863      	ldr	r0, [pc, #396]	; (8001450 <MX_GPIO_Init+0x2e8>)
 80012c2:	f002 fa3f 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80012c6:	2344      	movs	r3, #68	; 0x44
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	485d      	ldr	r0, [pc, #372]	; (8001450 <MX_GPIO_Init+0x2e8>)
 80012da:	f002 fa33 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f0:	2301      	movs	r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4855      	ldr	r0, [pc, #340]	; (8001450 <MX_GPIO_Init+0x2e8>)
 80012fc:	f002 fa22 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001300:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001312:	230d      	movs	r3, #13
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	4619      	mov	r1, r3
 800131c:	484c      	ldr	r0, [pc, #304]	; (8001450 <MX_GPIO_Init+0x2e8>)
 800131e:	f002 fa11 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001334:	230e      	movs	r3, #14
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4844      	ldr	r0, [pc, #272]	; (8001450 <MX_GPIO_Init+0x2e8>)
 8001340:	f002 fa00 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001356:	2307      	movs	r3, #7
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	483c      	ldr	r0, [pc, #240]	; (8001454 <MX_GPIO_Init+0x2ec>)
 8001362:	f002 f9ef 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001366:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001378:	2302      	movs	r3, #2
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4834      	ldr	r0, [pc, #208]	; (8001454 <MX_GPIO_Init+0x2ec>)
 8001384:	f002 f9de 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001398:	230d      	movs	r3, #13
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <MX_GPIO_Init+0x2f0>)
 80013a4:	f002 f9ce 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b8:	2302      	movs	r3, #2
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4825      	ldr	r0, [pc, #148]	; (8001458 <MX_GPIO_Init+0x2f0>)
 80013c4:	f002 f9be 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013da:	230c      	movs	r3, #12
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	481c      	ldr	r0, [pc, #112]	; (8001458 <MX_GPIO_Init+0x2f0>)
 80013e6:	f002 f9ad 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80013ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013fc:	230a      	movs	r3, #10
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 f99b 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f002 f98d 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800143a:	2309      	movs	r3, #9
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	e00a      	b.n	800145c <MX_GPIO_Init+0x2f4>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	48001400 	.word	0x48001400
 8001450:	48000400 	.word	0x48000400
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48000800 	.word	0x48000800
 800145c:	482b      	ldr	r0, [pc, #172]	; (800150c <MX_GPIO_Init+0x3a4>)
 800145e:	f002 f971 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001462:	2304      	movs	r3, #4
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001472:	230c      	movs	r3, #12
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4823      	ldr	r0, [pc, #140]	; (800150c <MX_GPIO_Init+0x3a4>)
 800147e:	f002 f961 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001482:	2378      	movs	r3, #120	; 0x78
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001492:	2307      	movs	r3, #7
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	481b      	ldr	r0, [pc, #108]	; (800150c <MX_GPIO_Init+0x3a4>)
 800149e:	f002 f951 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014a2:	2338      	movs	r3, #56	; 0x38
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b2:	2306      	movs	r3, #6
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4814      	ldr	r0, [pc, #80]	; (8001510 <MX_GPIO_Init+0x3a8>)
 80014be:	f002 f941 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0x3a8>)
 80014e0:	f002 f930 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f4:	2302      	movs	r3, #2
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_GPIO_Init+0x3ac>)
 8001500:	f002 f920 	bl	8003744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48000400 	.word	0x48000400
 8001514:	48001000 	.word	0x48001000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x44>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x44>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <HAL_ADC_MspInit+0x130>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f040 8081 	bne.w	8001692 <HAL_ADC_MspInit+0x126>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	4a42      	ldr	r2, [pc, #264]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 8001596:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	4a3c      	ldr	r2, [pc, #240]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_ADC_MspInit+0x134>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015f0:	233f      	movs	r3, #63	; 0x3f
 80015f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f4:	230b      	movs	r3, #11
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4828      	ldr	r0, [pc, #160]	; (80016a4 <HAL_ADC_MspInit+0x138>)
 8001604:	f002 f89e 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001608:	230a      	movs	r3, #10
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800160c:	230b      	movs	r3, #11
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f002 f891 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001622:	2302      	movs	r3, #2
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001626:	230b      	movs	r3, #11
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <HAL_ADC_MspInit+0x13c>)
 8001636:	f002 f885 	bl	8003744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800163c:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_ADC_MspInit+0x144>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001642:	2205      	movs	r2, #5
 8001644:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800165a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001666:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800166a:	2220      	movs	r2, #32
 800166c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001670:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <HAL_ADC_MspInit+0x140>)
 8001678:	f001 fdf2 	bl	8003260 <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8001682:	f7ff ff49 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800168a:	651a      	str	r2, [r3, #80]	; 0x50
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_ADC_MspInit+0x140>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	50040000 	.word	0x50040000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000400 	.word	0x48000400
 80016ac:	200000e0 	.word	0x200000e0
 80016b0:	40020008 	.word	0x40020008

080016b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_DAC_MspInit+0x74>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d124      	bne.n	8001720 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_DAC_MspInit+0x78>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001706:	2310      	movs	r3, #16
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170a:	2303      	movs	r3, #3
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f002 f812 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40007400 	.word	0x40007400
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0ae      	sub	sp, #184	; 0xb8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2294      	movs	r2, #148	; 0x94
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f008 f9bf 	bl	8009ad4 <memset>
  if(huart->Instance==LPUART1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_UART_MspInit+0xb4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d13d      	bne.n	80017dc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001760:	2320      	movs	r3, #32
 8001762:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f927 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001778:	f7ff fece 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 800179a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0xb8>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80017ac:	f002 fa20 	bl	8003bf0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017ca:	2308      	movs	r3, #8
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0xbc>)
 80017d8:	f001 ffb4 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	37b8      	adds	r7, #184	; 0xb8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40008000 	.word	0x40008000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48001800 	.word	0x48001800

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_TIM_Base_MspInit+0xa0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d139      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181c:	6613      	str	r3, [r2, #96]	; 0x60
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001842:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001854:	2301      	movs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001860:	f001 ff70 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001864:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001876:	2303      	movs	r3, #3
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001882:	f001 ff5f 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40021000 	.word	0x40021000
 8001898:	48001000 	.word	0x48001000

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_TIM_MspPostInit+0x64>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11c      	bne.n	80018f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_TIM_MspPostInit+0x68>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_TIM_MspPostInit+0x68>)
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_TIM_MspPostInit+0x68>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80018d6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80018da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_TIM_MspPostInit+0x6c>)
 80018f4:	f001 ff26 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40021000 	.word	0x40021000
 8001908:	48001000 	.word	0x48001000

0800190c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_SAI_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d134      	bne.n	8001988 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_SAI_MspInit+0x88>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10b      	bne.n	800193e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_SAI_MspInit+0x8c>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_SAI_MspInit+0x8c>)
 800192c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_SAI_MspInit+0x8c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_SAI_MspInit+0x88>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a13      	ldr	r2, [pc, #76]	; (8001994 <HAL_SAI_MspInit+0x88>)
 8001946:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PF7     ------> SAI1_MCLK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001948:	237c      	movs	r3, #124	; 0x7c
 800194a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001958:	230d      	movs	r3, #13
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4619      	mov	r1, r3
 8001962:	480e      	ldr	r0, [pc, #56]	; (800199c <HAL_SAI_MspInit+0x90>)
 8001964:	f001 feee 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001978:	230d      	movs	r3, #13
 800197a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <HAL_SAI_MspInit+0x94>)
 8001984:	f001 fede 	bl	8003744 <HAL_GPIO_Init>

    }
}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40015404 	.word	0x40015404
 8001994:	200002e4 	.word	0x200002e4
 8001998:	40021000 	.word	0x40021000
 800199c:	48001000 	.word	0x48001000
 80019a0:	48001400 	.word	0x48001400

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f8a4 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA1_Channel1_IRQHandler+0x10>)
 80019fe:	f001 fd52 	bl	80034a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200000e0 	.word	0x200000e0

08001a0c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff ffea 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	; (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	; (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f008 f83f 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a72:	f7fe ff8f 	bl	8000994 <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a84:	0801cc14 	.word	0x0801cc14
  ldr r2, =_sbss
 8001a88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a8c:	20000424 	.word	0x20000424

08001a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_IRQHandler>

08001a92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f001 fa2f 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f80e 	bl	8001ac4 <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e001      	b.n	8001ab8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab4:	f7ff fd36 	bl	8001524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_InitTick+0x70>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fa3b 	bl	8002f6a <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d809      	bhi.n	8001b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f001 fa05 	bl	8002f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0x74>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e004      	b.n	8001b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e001      	b.n	8001b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	200002e8 	.word	0x200002e8

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200002e8 	.word	0x200002e8

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3360      	adds	r3, #96	; 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LL_ADC_SetOffset+0x44>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	03fff000 	.word	0x03fff000

08001c74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3360      	adds	r3, #96	; 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	; 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	615a      	str	r2, [r3, #20]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3330      	adds	r3, #48	; 0x30
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	211f      	movs	r1, #31
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	f003 011f 	and.w	r1, r3, #31
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b087      	sub	sp, #28
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3314      	adds	r3, #20
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0e5b      	lsrs	r3, r3, #25
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	4413      	add	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0d1b      	lsrs	r3, r3, #20
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2107      	movs	r1, #7
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	0d1b      	lsrs	r3, r3, #20
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	0007ffff 	.word	0x0007ffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <LL_ADC_IsEnabled+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_ADC_IsEnabled+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e129      	b.n	80021e6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fae3 	bl	800156c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff3f 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff25 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff5a 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff3e 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_ADC_Init+0x278>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	4a81      	ldr	r2, [pc, #516]	; (80021f4 <HAL_ADC_Init+0x27c>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff3c 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff75 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002040:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 80c2 	bne.w	80021d4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80be 	bne.w	80021d4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff35 	bl	8001edc <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002078:	485f      	ldr	r0, [pc, #380]	; (80021f8 <HAL_ADC_Init+0x280>)
 800207a:	f7ff ff2f 	bl	8001edc <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	485c      	ldr	r0, [pc, #368]	; (80021fc <HAL_ADC_Init+0x284>)
 800208c:	f7ff fd9a 	bl	8001bc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	3b01      	subs	r3, #1
 80020c4:	045b      	lsls	r3, r3, #17
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_ADC_Init+0x288>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff25 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 8002106:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d140      	bne.n	8002190 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d13d      	bne.n	8002190 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
 800211c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800211e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002126:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002136:	f023 0306 	bic.w	r3, r3, #6
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	430b      	orrs	r3, r1
 8002142:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800214a:	2b01      	cmp	r3, #1
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002170:	430a      	orrs	r2, r1
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	e007      	b.n	8002190 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10c      	bne.n	80021b2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f023 010f 	bic.w	r1, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 020f 	bic.w	r2, r2, #15
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58
 80021d2:	e007      	b.n	80021e4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f043 0210 	orr.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000
 80021f4:	053e2d63 	.word	0x053e2d63
 80021f8:	50040000 	.word	0x50040000
 80021fc:	50040300 	.word	0x50040300
 8002200:	fff0c007 	.word	0xfff0c007

08002204 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe88 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d167      	bne.n	80022f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_ADC_Start_DMA+0x2a>
 800222a:	2302      	movs	r3, #2
 800222c:	e063      	b.n	80022f6 <HAL_ADC_Start_DMA+0xf2>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fc78 	bl	8002b2c <ADC_Enable>
 800223c:	4603      	mov	r3, r0
 800223e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d14f      	bne.n	80022e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f023 0206 	bic.w	r2, r3, #6
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c
 8002272:	e002      	b.n	800227a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227e:	4a20      	ldr	r2, [pc, #128]	; (8002300 <HAL_ADC_Start_DMA+0xfc>)
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_ADC_Start_DMA+0x100>)
 8002288:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_ADC_Start_DMA+0x104>)
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	221c      	movs	r2, #28
 8002298:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0210 	orr.w	r2, r2, #16
 80022b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3340      	adds	r3, #64	; 0x40
 80022cc:	4619      	mov	r1, r3
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f001 f86d 	bl	80033b0 <HAL_DMA_Start_IT>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe0f 	bl	8001f02 <LL_ADC_REG_StartConversion>
 80022e4:	e006      	b.n	80022f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08002c39 	.word	0x08002c39
 8002304:	08002d11 	.word	0x08002d11
 8002308:	08002d2d 	.word	0x08002d2d

0800230c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0b6      	sub	sp, #216	; 0xd8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x22>
 8002352:	2302      	movs	r3, #2
 8002354:	e3d5      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7ce>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fde1 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 83ba 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d824      	bhi.n	80023ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	3b02      	subs	r3, #2
 8002386:	2b03      	cmp	r3, #3
 8002388:	d81b      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x8e>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_ADC_ConfigChannel+0x5c>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023a9 	.word	0x080023a9
 8002398:	080023b1 	.word	0x080023b1
 800239c:	080023b9 	.word	0x080023b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023a0:	230c      	movs	r3, #12
 80023a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023a6:	e010      	b.n	80023ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023a8:	2312      	movs	r3, #18
 80023aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023ae:	e00c      	b.n	80023ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023b0:	2318      	movs	r3, #24
 80023b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023b6:	e008      	b.n	80023ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023c0:	e003      	b.n	80023ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023c2:	2306      	movs	r3, #6
 80023c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80023c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80023d8:	f7ff fca3 	bl	8001d22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fda2 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 80023e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fdae 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 80023f4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 81bf 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 81ba 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002414:	d10f      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff fcaa 	bl	8001d7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc51 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002434:	e00e      	b.n	8002454 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	461a      	mov	r2, r3
 8002444:	f7ff fc99 	bl	8001d7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc41 	bl	8001cd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d00a      	beq.n	800248c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002486:	f7ff fbd1 	bl	8001c2c <LL_ADC_SetOffset>
 800248a:	e179      	b.n	8002780 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fbee 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x184>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fbe3 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	e01e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x1c2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fbd8 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e004      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80024ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_ADC_ConfigChannel+0x1da>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	e018      	b.n	8002540 <HAL_ADC_ConfigChannel+0x20c>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800252a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e004      	b.n	8002540 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002540:	429a      	cmp	r2, r3
 8002542:	d106      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fba7 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fb8b 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <HAL_ADC_ConfigChannel+0x24a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb80 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	e01e      	b.n	80025bc <HAL_ADC_ConfigChannel+0x288>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb75 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800259c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80025a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e004      	b.n	80025ba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80025b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x2a0>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	e018      	b.n	8002606 <HAL_ADC_ConfigChannel+0x2d2>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80025e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80025f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e004      	b.n	8002606 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80025fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002606:	429a      	cmp	r2, r3
 8002608:	d106      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fb44 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fb28 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x310>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2102      	movs	r1, #2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fb1d 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	e01e      	b.n	8002682 <HAL_ADC_ConfigChannel+0x34e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fb12 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800266a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e004      	b.n	8002680 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_ConfigChannel+0x366>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	e014      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x390>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80026a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80026ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e004      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80026ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d106      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	2102      	movs	r1, #2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fae5 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2103      	movs	r1, #3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fac9 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x3ce>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2103      	movs	r1, #3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fabe 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	e017      	b.n	8002732 <HAL_ADC_ConfigChannel+0x3fe>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2103      	movs	r1, #3
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fab3 	bl	8001c74 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800271e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e003      	b.n	8002730 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADC_ConfigChannel+0x416>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	e011      	b.n	800276e <HAL_ADC_ConfigChannel+0x43a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800275c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800276e:	429a      	cmp	r2, r3
 8002770:	d106      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	2103      	movs	r1, #3
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa90 	bl	8001ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fba9 	bl	8001edc <LL_ADC_IsEnabled>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 813f 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff fb16 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a8e      	ldr	r2, [pc, #568]	; (80029e4 <HAL_ADC_ConfigChannel+0x6b0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f040 8130 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x4a4>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e019      	b.n	800280c <HAL_ADC_ConfigChannel+0x4d8>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80027ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b09      	cmp	r3, #9
 8002804:	bf94      	ite	ls
 8002806:	2301      	movls	r3, #1
 8002808:	2300      	movhi	r3, #0
 800280a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280c:	2b00      	cmp	r3, #0
 800280e:	d079      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_ADC_ConfigChannel+0x4f8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	3301      	adds	r3, #1
 8002824:	069b      	lsls	r3, r3, #26
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282a:	e015      	b.n	8002858 <HAL_ADC_ConfigChannel+0x524>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x544>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	e017      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x574>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002888:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800288a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e003      	b.n	800289c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3301      	adds	r3, #1
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x59a>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	051b      	lsls	r3, r3, #20
 80028cc:	e018      	b.n	8002900 <HAL_ADC_ConfigChannel+0x5cc>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002900:	430b      	orrs	r3, r1
 8002902:	e080      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x5ec>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	3301      	adds	r3, #1
 8002918:	069b      	lsls	r3, r3, #26
 800291a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291e:	e015      	b.n	800294c <HAL_ADC_ConfigChannel+0x618>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002938:	2320      	movs	r3, #32
 800293a:	e003      	b.n	8002944 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3301      	adds	r3, #1
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_ConfigChannel+0x638>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	e017      	b.n	800299c <HAL_ADC_ConfigChannel+0x668>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	61bb      	str	r3, [r7, #24]
  return result;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	ea42 0103 	orr.w	r1, r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x694>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	3b1e      	subs	r3, #30
 80029c0:	051b      	lsls	r3, r3, #20
 80029c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c6:	e01d      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x6d0>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	60fb      	str	r3, [r7, #12]
  return result;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80029e0:	2320      	movs	r3, #32
 80029e2:	e005      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x6bc>
 80029e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	051b      	lsls	r3, r3, #20
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7ff f9b5 	bl	8001d7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d06c      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a1c:	483c      	ldr	r0, [pc, #240]	; (8002b10 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a1e:	f7ff f8f7 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002a22:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3a      	ldr	r2, [pc, #232]	; (8002b14 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d127      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d121      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a35      	ldr	r2, [pc, #212]	; (8002b18 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d157      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a4e:	4619      	mov	r1, r3
 8002a50:	482f      	ldr	r0, [pc, #188]	; (8002b10 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a52:	f7ff f8ca 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a56:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <HAL_ADC_ConfigChannel+0x7e8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	4a30      	ldr	r2, [pc, #192]	; (8002b20 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7e:	e03a      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10d      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d12a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4819      	ldr	r0, [pc, #100]	; (8002b10 <HAL_ADC_ConfigChannel+0x7dc>)
 8002aac:	f7ff f89d 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ab0:	e021      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d11c      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002abc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d111      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ada:	4619      	mov	r1, r3
 8002adc:	480c      	ldr	r0, [pc, #48]	; (8002b10 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ade:	f7ff f884 	bl	8001bea <LL_ADC_SetCommonPathInternalCh>
 8002ae2:	e008      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002afe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	37d8      	adds	r7, #216	; 0xd8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	80080000 	.word	0x80080000
 8002b10:	50040300 	.word	0x50040300
 8002b14:	c7520000 	.word	0xc7520000
 8002b18:	50040000 	.word	0x50040000
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	053e2d63 	.word	0x053e2d63
 8002b24:	cb840000 	.word	0xcb840000
 8002b28:	80000001 	.word	0x80000001

08002b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f9cd 	bl	8001edc <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d169      	bne.n	8002c1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <ADC_Enable+0xfc>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e055      	b.n	8002c1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f99c 	bl	8001eb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b7c:	482b      	ldr	r0, [pc, #172]	; (8002c2c <ADC_Enable+0x100>)
 8002b7e:	f7ff f847 	bl	8001c10 <LL_ADC_GetCommonPathInternalCh>
 8002b82:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <ADC_Enable+0x104>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <ADC_Enable+0x108>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba6:	e002      	b.n	8002bae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe ffd6 	bl	8001b64 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bba:	e028      	b.n	8002c0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f98b 	bl	8001edc <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f96f 	bl	8001eb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bd6:	f7fe ffc5 	bl	8001b64 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d914      	bls.n	8002c0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d00d      	beq.n	8002c0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d1cf      	bne.n	8002bbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	8000003f 	.word	0x8000003f
 8002c2c:	50040300 	.word	0x50040300
 8002c30:	20000000 	.word	0x20000000
 8002c34:	053e2d63 	.word	0x053e2d63

08002c38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d14b      	bne.n	8002cea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d021      	beq.n	8002cb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f843 	bl	8001cfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d032      	beq.n	8002ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d12b      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11f      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58
 8002cae:	e018      	b.n	8002ce2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d111      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7fd fe14 	bl	8000910 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce8:	e00e      	b.n	8002d08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fb12 	bl	8002320 <HAL_ADC_ErrorCallback>
}
 8002cfc:	e004      	b.n	8002d08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff faf4 	bl	800230c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fae4 	bl	8002320 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	; (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff29 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff3e 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff8e 	bl	8002e54 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5d 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff31 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e014      	b.n	8002fbe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe fb85 	bl	80016b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	795b      	ldrb	r3, [r3, #5]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_DAC_ConfigChannel+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e137      	b.n	8003254 <HAL_DAC_ConfigChannel+0x28c>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	f040 8081 	bne.w	80030fc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ffa:	f7fe fdb3 	bl	8001b64 <HAL_GetTick>
 8002ffe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d140      	bne.n	8003088 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003006:	e018      	b.n	800303a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003008:	f7fe fdac 	bl	8001b64 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d911      	bls.n	800303a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f043 0208 	orr.w	r2, r3, #8
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2203      	movs	r2, #3
 8003034:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e10c      	b.n	8003254 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1df      	bne.n	8003008 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003048:	2001      	movs	r0, #1
 800304a:	f7fe fd97 	bl	8001b7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	69d2      	ldr	r2, [r2, #28]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
 8003058:	e023      	b.n	80030a2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800305a:	f7fe fd83 	bl	8001b64 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d90f      	bls.n	8003088 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	2b00      	cmp	r3, #0
 8003070:	da0a      	bge.n	8003088 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2203      	movs	r2, #3
 8003082:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0e5      	b.n	8003254 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	dbe3      	blt.n	800305a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003092:	2001      	movs	r0, #1
 8003094:	f7fe fd72 	bl	8001b7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	69d2      	ldr	r2, [r2, #28]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	ea02 0103 	and.w	r1, r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	21ff      	movs	r1, #255	; 0xff
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	ea02 0103 	and.w	r1, r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d11d      	bne.n	8003140 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	221f      	movs	r2, #31
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4013      	ands	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	4313      	orrs	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2207      	movs	r2, #7
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	4013      	ands	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	431a      	orrs	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43da      	mvns	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e4:	d104      	bne.n	80031f0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e018      	b.n	8003222 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e00f      	b.n	8003222 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003202:	f001 fae5 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8003206:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4a14      	ldr	r2, [pc, #80]	; (800325c <HAL_DAC_ConfigChannel+0x294>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d904      	bls.n	800321a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e003      	b.n	8003222 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003220:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	22c0      	movs	r2, #192	; 0xc0
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43da      	mvns	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	400a      	ands	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	04c4b400 	.word	0x04c4b400

08003260 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e08d      	b.n	800338e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_DMA_Init+0x138>)
 800327a:	429a      	cmp	r2, r3
 800327c:	d80f      	bhi.n	800329e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_DMA_Init+0x13c>)
 8003286:	4413      	add	r3, r2
 8003288:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <HAL_DMA_Init+0x140>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a42      	ldr	r2, [pc, #264]	; (80033a4 <HAL_DMA_Init+0x144>)
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
 800329c:	e00e      	b.n	80032bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_DMA_Init+0x148>)
 80032a6:	4413      	add	r3, r2
 80032a8:	4a3d      	ldr	r2, [pc, #244]	; (80033a0 <HAL_DMA_Init+0x140>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	009a      	lsls	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <HAL_DMA_Init+0x14c>)
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f9b6 	bl	8003680 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d102      	bne.n	8003324 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003338:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_DMA_Init+0x104>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d80c      	bhi.n	8003364 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9d6 	bl	80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	e008      	b.n	8003376 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40020407 	.word	0x40020407
 800339c:	bffdfff8 	.word	0xbffdfff8
 80033a0:	cccccccd 	.word	0xcccccccd
 80033a4:	40020000 	.word	0x40020000
 80033a8:	bffdfbf8 	.word	0xbffdfbf8
 80033ac:	40020400 	.word	0x40020400

080033b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_DMA_Start_IT+0x20>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e066      	b.n	800349e <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d155      	bne.n	8003490 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8fb 	bl	8003604 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 020e 	orr.w	r2, r2, #14
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e00f      	b.n	8003448 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 020a 	orr.w	r2, r2, #10
 8003446:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003464:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	e005      	b.n	800349c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003498:	2302      	movs	r3, #2
 800349a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f003 031c 	and.w	r3, r3, #28
 80034c6:	2204      	movs	r2, #4
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d026      	beq.n	8003520 <HAL_DMA_IRQHandler+0x7a>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d021      	beq.n	8003520 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0204 	bic.w	r2, r2, #4
 80034f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f003 021c 	and.w	r2, r3, #28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2104      	movs	r1, #4
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d071      	beq.n	80035fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800351e:	e06c      	b.n	80035fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 031c 	and.w	r3, r3, #28
 8003528:	2202      	movs	r2, #2
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02e      	beq.n	8003592 <HAL_DMA_IRQHandler+0xec>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d029      	beq.n	8003592 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 020a 	bic.w	r2, r2, #10
 800355a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f003 021c 	and.w	r2, r3, #28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2102      	movs	r1, #2
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d038      	beq.n	80035fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003590:	e033      	b.n	80035fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 031c 	and.w	r3, r3, #28
 800359a:	2208      	movs	r2, #8
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <HAL_DMA_IRQHandler+0x156>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d025      	beq.n	80035fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 020e 	bic.w	r2, r2, #14
 80035be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	f003 021c 	and.w	r2, r3, #28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
}
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800361a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800362c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 021c 	and.w	r2, r3, #28
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b10      	cmp	r3, #16
 8003650:	d108      	bne.n	8003664 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003662:	e007      	b.n	8003674 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003690:	429a      	cmp	r2, r3
 8003692:	d80a      	bhi.n	80036aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6493      	str	r3, [r2, #72]	; 0x48
 80036a8:	e007      	b.n	80036ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	009a      	lsls	r2, r3, #2
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3b08      	subs	r3, #8
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40020407 	.word	0x40020407
 80036f0:	4002081c 	.word	0x4002081c
 80036f4:	cccccccd 	.word	0xcccccccd
 80036f8:	40020880 	.word	0x40020880

080036fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800371e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b01      	subs	r3, #1
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	1000823f 	.word	0x1000823f
 8003740:	40020940 	.word	0x40020940

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003752:	e166      	b.n	8003a22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	4013      	ands	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8158 	beq.w	8003a1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d005      	beq.n	8003784 <HAL_GPIO_Init+0x40>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d130      	bne.n	80037e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ba:	2201      	movs	r2, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0201 	and.w	r2, r3, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d017      	beq.n	8003822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d123      	bne.n	8003876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	220f      	movs	r2, #15
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	6939      	ldr	r1, [r7, #16]
 8003872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80b2 	beq.w	8003a1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b8:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <HAL_GPIO_Init+0x2fc>)
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	4a60      	ldr	r2, [pc, #384]	; (8003a40 <HAL_GPIO_Init+0x2fc>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6613      	str	r3, [r2, #96]	; 0x60
 80038c4:	4b5e      	ldr	r3, [pc, #376]	; (8003a40 <HAL_GPIO_Init+0x2fc>)
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038d0:	4a5c      	ldr	r2, [pc, #368]	; (8003a44 <HAL_GPIO_Init+0x300>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038fa:	d02b      	beq.n	8003954 <HAL_GPIO_Init+0x210>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d025      	beq.n	8003950 <HAL_GPIO_Init+0x20c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_GPIO_Init+0x308>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01f      	beq.n	800394c <HAL_GPIO_Init+0x208>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a50      	ldr	r2, [pc, #320]	; (8003a50 <HAL_GPIO_Init+0x30c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d019      	beq.n	8003948 <HAL_GPIO_Init+0x204>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4f      	ldr	r2, [pc, #316]	; (8003a54 <HAL_GPIO_Init+0x310>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_GPIO_Init+0x200>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4e      	ldr	r2, [pc, #312]	; (8003a58 <HAL_GPIO_Init+0x314>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00d      	beq.n	8003940 <HAL_GPIO_Init+0x1fc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4d      	ldr	r2, [pc, #308]	; (8003a5c <HAL_GPIO_Init+0x318>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d007      	beq.n	800393c <HAL_GPIO_Init+0x1f8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4c      	ldr	r2, [pc, #304]	; (8003a60 <HAL_GPIO_Init+0x31c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_GPIO_Init+0x1f4>
 8003934:	2307      	movs	r3, #7
 8003936:	e00e      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003938:	2308      	movs	r3, #8
 800393a:	e00c      	b.n	8003956 <HAL_GPIO_Init+0x212>
 800393c:	2306      	movs	r3, #6
 800393e:	e00a      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003940:	2305      	movs	r3, #5
 8003942:	e008      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003944:	2304      	movs	r3, #4
 8003946:	e006      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003948:	2303      	movs	r3, #3
 800394a:	e004      	b.n	8003956 <HAL_GPIO_Init+0x212>
 800394c:	2302      	movs	r3, #2
 800394e:	e002      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_GPIO_Init+0x212>
 8003954:	2300      	movs	r3, #0
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	f002 0203 	and.w	r2, r2, #3
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4093      	lsls	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003966:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x300>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003974:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_GPIO_Init+0x320>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003998:	4a32      	ldr	r2, [pc, #200]	; (8003a64 <HAL_GPIO_Init+0x320>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_GPIO_Init+0x320>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <HAL_GPIO_Init+0x320>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039c8:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_GPIO_Init+0x320>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039ec:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <HAL_GPIO_Init+0x320>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <HAL_GPIO_Init+0x320>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a16:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <HAL_GPIO_Init+0x320>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f ae91 	bne.w	8003754 <HAL_GPIO_Init+0x10>
  }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	48001800 	.word	0x48001800
 8003a60:	48001c00 	.word	0x48001c00
 8003a64:	40010400 	.word	0x40010400

08003a68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a78:	d102      	bne.n	8003a80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a7e:	e00b      	b.n	8003a98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8e:	d102      	bne.n	8003a96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a94:	e000      	b.n	8003a98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d141      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab6:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d131      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac4:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aca:	4a46      	ldr	r2, [pc, #280]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003adc:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2232      	movs	r2, #50	; 0x32
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a3f      	ldr	r2, [pc, #252]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afa:	e002      	b.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	d102      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f2      	bne.n	8003afc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d158      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e057      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b38:	e04d      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d141      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4e:	d131      	bne.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2232      	movs	r2, #50	; 0x32
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9b      	lsrs	r3, r3, #18
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b86:	e002      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f2      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	d112      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e011      	b.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bc4:	e007      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40007000 	.word	0x40007000
 8003be8:	20000000 	.word	0x20000000
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bfe:	6053      	str	r3, [r2, #4]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f000 bc08 	b.w	8004434 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c24:	4b96      	ldr	r3, [pc, #600]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2e:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80e4 	beq.w	8003e0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4c>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	f040 808b 	bne.w	8003d6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	f040 8087 	bne.w	8003d6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_OscConfig+0x64>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e3df      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_RCC_OscConfig+0x7e>
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8c:	e005      	b.n	8003c9a <HAL_RCC_OscConfig+0x8a>
 8003c8e:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d223      	bcs.n	8003ce6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fdcc 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e3c0      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb2:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a72      	ldr	r2, [pc, #456]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	f043 0308 	orr.w	r3, r3, #8
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	496d      	ldr	r1, [pc, #436]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd0:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	4968      	ldr	r1, [pc, #416]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	e025      	b.n	8003d32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce6:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4960      	ldr	r1, [pc, #384]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	495b      	ldr	r1, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd8c 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e380      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d32:	f000 fcc1 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	4950      	ldr	r1, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a4e      	ldr	r2, [pc, #312]	; (8003e88 <HAL_RCC_OscConfig+0x278>)
 8003d50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d52:	4b4e      	ldr	r3, [pc, #312]	; (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd feb4 	bl	8001ac4 <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d052      	beq.n	8003e0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	e364      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d032      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d72:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fef1 	bl	8001b64 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d86:	f7fd feed 	bl	8001b64 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e34d      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a35      	ldr	r2, [pc, #212]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003daa:	f043 0308 	orr.w	r3, r3, #8
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4930      	ldr	r1, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	492b      	ldr	r1, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
 8003dd6:	e01a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd8:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de4:	f7fd febe 	bl	8001b64 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dec:	f7fd feba 	bl	8001b64 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e31a      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1dc>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d073      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_OscConfig+0x21c>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d10e      	bne.n	8003e44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d063      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d15f      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e2f7      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x24c>
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e025      	b.n	8003ea8 <HAL_RCC_OscConfig+0x298>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e64:	d114      	bne.n	8003e90 <HAL_RCC_OscConfig+0x280>
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a02      	ldr	r2, [pc, #8]	; (8003e80 <HAL_RCC_OscConfig+0x270>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e013      	b.n	8003ea8 <HAL_RCC_OscConfig+0x298>
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08009bac 	.word	0x08009bac
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	20000004 	.word	0x20000004
 8003e90:	4ba0      	ldr	r3, [pc, #640]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a9f      	ldr	r2, [pc, #636]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b9d      	ldr	r3, [pc, #628]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a9c      	ldr	r2, [pc, #624]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d013      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fe58 	bl	8001b64 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fe54 	bl	8001b64 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e2b4      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	4b92      	ldr	r3, [pc, #584]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2a8>
 8003ed6:	e014      	b.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fe44 	bl	8001b64 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fd fe40 	bl	8001b64 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e2a0      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2d0>
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d060      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x310>
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d119      	bne.n	8003f4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d116      	bne.n	8003f4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f20:	4b7c      	ldr	r3, [pc, #496]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_OscConfig+0x328>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e27d      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	4973      	ldr	r1, [pc, #460]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4c:	e040      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d023      	beq.n	8003f9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f56:	4b6f      	ldr	r3, [pc, #444]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6e      	ldr	r2, [pc, #440]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd fdff 	bl	8001b64 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fdfb 	bl	8001b64 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e25b      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7c:	4b65      	ldr	r3, [pc, #404]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b62      	ldr	r3, [pc, #392]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	495f      	ldr	r1, [pc, #380]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e018      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5c      	ldr	r2, [pc, #368]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fddb 	bl	8001b64 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fdd7 	bl	8001b64 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e237      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d03c      	beq.n	8004056 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fea:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fd fdb6 	bl	8001b64 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fd fdb2 	bl	8001b64 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e212      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ef      	beq.n	8003ffc <HAL_RCC_OscConfig+0x3ec>
 800401c:	e01b      	b.n	8004056 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401e:	4b3d      	ldr	r3, [pc, #244]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004024:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd fd99 	bl	8001b64 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004036:	f7fd fd95 	bl	8001b64 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1f5      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004048:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 800404a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ef      	bne.n	8004036 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a6 	beq.w	80041b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004068:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6593      	str	r3, [r2, #88]	; 0x58
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	4b21      	ldr	r3, [pc, #132]	; (8004118 <HAL_RCC_OscConfig+0x508>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d118      	bne.n	80040ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <HAL_RCC_OscConfig+0x508>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x508>)
 80040a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a8:	f7fd fd5c 	bl	8001b64 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b0:	f7fd fd58 	bl	8001b64 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1b8      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x508>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4d8>
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e6:	e029      	b.n	800413c <HAL_RCC_OscConfig+0x52c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d115      	bne.n	800411c <HAL_RCC_OscConfig+0x50c>
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	4a03      	ldr	r2, [pc, #12]	; (8004114 <HAL_RCC_OscConfig+0x504>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004110:	e014      	b.n	800413c <HAL_RCC_OscConfig+0x52c>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	4b9d      	ldr	r3, [pc, #628]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	4a9c      	ldr	r2, [pc, #624]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800412c:	4b99      	ldr	r3, [pc, #612]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	4a98      	ldr	r2, [pc, #608]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d016      	beq.n	8004172 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fd0e 	bl	8001b64 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fd fd0a 	bl	8001b64 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e168      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004162:	4b8c      	ldr	r3, [pc, #560]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ed      	beq.n	800414c <HAL_RCC_OscConfig+0x53c>
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd fcf7 	bl	8001b64 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	e00a      	b.n	8004190 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fd fcf3 	bl	8001b64 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e151      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004190:	4b80      	ldr	r3, [pc, #512]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ed      	bne.n	800417a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a4:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d03c      	beq.n	8004236 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01c      	beq.n	80041fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041c4:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ca:	4a72      	ldr	r2, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fd fcc6 	bl	8001b64 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041dc:	f7fd fcc2 	bl	8001b64 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e122      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ee:	4b69      	ldr	r3, [pc, #420]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80041f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ef      	beq.n	80041dc <HAL_RCC_OscConfig+0x5cc>
 80041fc:	e01b      	b.n	8004236 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004204:	4a63      	ldr	r2, [pc, #396]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7fd fca9 	bl	8001b64 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004216:	f7fd fca5 	bl	8001b64 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e105      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004228:	4b5a      	ldr	r3, [pc, #360]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800422a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ef      	bne.n	8004216 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80f9 	beq.w	8004432 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	2b02      	cmp	r3, #2
 8004246:	f040 80cf 	bne.w	80043e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 0203 	and.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	429a      	cmp	r2, r3
 800425c:	d12c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	3b01      	subs	r3, #1
 800426a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d123      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d11b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d113      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d109      	bne.n	80042b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d071      	beq.n	800439c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d068      	beq.n	8004390 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042be:	4b35      	ldr	r3, [pc, #212]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042ca:	4b32      	ldr	r3, [pc, #200]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0ac      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042da:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2d      	ldr	r2, [pc, #180]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 80042e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e6:	f7fd fc3d 	bl	8001b64 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fd fc39 	bl	8001b64 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e099      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430c:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_RCC_OscConfig+0x788>)
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800431c:	3a01      	subs	r2, #1
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004326:	0212      	lsls	r2, r2, #8
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800432e:	0852      	lsrs	r2, r2, #1
 8004330:	3a01      	subs	r2, #1
 8004332:	0552      	lsls	r2, r2, #21
 8004334:	4311      	orrs	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800433a:	0852      	lsrs	r2, r2, #1
 800433c:	3a01      	subs	r2, #1
 800433e:	0652      	lsls	r2, r2, #25
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004346:	06d2      	lsls	r2, r2, #27
 8004348:	430a      	orrs	r2, r1
 800434a:	4912      	ldr	r1, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800434c:	4313      	orrs	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004350:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004368:	f7fd fbfc 	bl	8001b64 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fbf8 	bl	8001b64 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e058      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_OscConfig+0x784>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438e:	e050      	b.n	8004432 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04f      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
 8004394:	40021000 	.word	0x40021000
 8004398:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d144      	bne.n	8004432 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a23      	ldr	r2, [pc, #140]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a20      	ldr	r2, [pc, #128]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c0:	f7fd fbd0 	bl	8001b64 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fbcc 	bl	8001b64 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e02c      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x7b8>
 80043e6:	e024      	b.n	8004432 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d01f      	beq.n	800442e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd fbb3 	bl	8001b64 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fd fbaf 	bl	8001b64 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f0      	bne.n	8004402 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4905      	ldr	r1, [pc, #20]	; (800443c <HAL_RCC_OscConfig+0x82c>)
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x830>)
 8004428:	4013      	ands	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
 800442c:	e001      	b.n	8004432 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	feeefffc 	.word	0xfeeefffc

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e11d      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b90      	ldr	r3, [pc, #576]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d910      	bls.n	800448c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b8d      	ldr	r3, [pc, #564]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 020f 	bic.w	r2, r3, #15
 8004472:	498b      	ldr	r1, [pc, #556]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e105      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d010      	beq.n	80044ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d908      	bls.n	80044ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b7e      	ldr	r3, [pc, #504]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	497b      	ldr	r1, [pc, #492]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d079      	beq.n	80045ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d11e      	bne.n	800450c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0dc      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044de:	f000 fa09 	bl	80048f4 <RCC_GetSysClockFreqFromPLLSource>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4a70      	ldr	r2, [pc, #448]	; (80046a8 <HAL_RCC_ClockConfig+0x264>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d946      	bls.n	8004578 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044ea:	4b6e      	ldr	r3, [pc, #440]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d140      	bne.n	8004578 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044f6:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044fe:	4a69      	ldr	r2, [pc, #420]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e035      	b.n	8004578 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d107      	bne.n	8004524 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004514:	4b63      	ldr	r3, [pc, #396]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d115      	bne.n	800454c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b9      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452c:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0ad      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0a5      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800454c:	f000 f8b4 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004550:	4603      	mov	r3, r0
 8004552:	4a55      	ldr	r2, [pc, #340]	; (80046a8 <HAL_RCC_ClockConfig+0x264>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d90f      	bls.n	8004578 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004558:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004564:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004578:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 0203 	bic.w	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4947      	ldr	r1, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458a:	f7fd faeb 	bl	8001b64 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004592:	f7fd fae7 	bl	8001b64 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e077      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a8:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 020c 	and.w	r2, r3, #12
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d1eb      	bne.n	8004592 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d105      	bne.n	80045cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d208      	bcs.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	492b      	ldr	r1, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d210      	bcs.n	800462a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 020f 	bic.w	r2, r3, #15
 8004610:	4923      	ldr	r1, [pc, #140]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_ClockConfig+0x25c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d001      	beq.n	800462a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e036      	b.n	8004698 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4918      	ldr	r1, [pc, #96]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4910      	ldr	r1, [pc, #64]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004668:	f000 f826 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_ClockConfig+0x260>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <HAL_RCC_ClockConfig+0x268>)
 800467a:	5ccb      	ldrb	r3, [r1, r3]
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x26c>)
 8004686:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x270>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fd fa19 	bl	8001ac4 <HAL_InitTick>
 8004692:	4603      	mov	r3, r0
 8004694:	73fb      	strb	r3, [r7, #15]

  return status;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40021000 	.word	0x40021000
 80046a8:	04c4b400 	.word	0x04c4b400
 80046ac:	08009bac 	.word	0x08009bac
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000004 	.word	0x20000004

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x34>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d121      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d11e      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e005      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d102      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e004      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d101      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 800473e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d134      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0xa6>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d003      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0xac>
 800475c:	e005      	b.n	800476a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004760:	617b      	str	r3, [r7, #20]
      break;
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004766:	617b      	str	r3, [r7, #20]
      break;
 8004768:	e002      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	617b      	str	r3, [r7, #20]
      break;
 800476e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	fb03 f202 	mul.w	r2, r3, r2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	0e5b      	lsrs	r3, r3, #25
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	3301      	adds	r3, #1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047b0:	69bb      	ldr	r3, [r7, #24]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08009bc4 	.word	0x08009bc4
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000000 	.word	0x20000000

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4904      	ldr	r1, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	08009bbc 	.word	0x08009bbc

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004818:	f7ff ffda 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCC_GetPCLK2Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	08009bbc 	.word	0x08009bbc

08004840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800484c:	4b27      	ldr	r3, [pc, #156]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004858:	f7ff f906 	bl	8003a68 <HAL_PWREx_GetVoltageRange>
 800485c:	6178      	str	r0, [r7, #20]
 800485e:	e014      	b.n	800488a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a21      	ldr	r2, [pc, #132]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
 800486c:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004878:	f7ff f8f6 	bl	8003a68 <HAL_PWREx_GetVoltageRange>
 800487c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	4a1a      	ldr	r2, [pc, #104]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d10b      	bne.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d913      	bls.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2ba0      	cmp	r3, #160	; 0xa0
 800489c:	d902      	bls.n	80048a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800489e:	2302      	movs	r3, #2
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e00d      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048a4:	2301      	movs	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e00a      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b7f      	cmp	r3, #127	; 0x7f
 80048ae:	d902      	bls.n	80048b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048b0:	2302      	movs	r3, #2
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	e004      	b.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d101      	bne.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048bc:	2301      	movs	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 020f 	bic.w	r2, r3, #15
 80048c8:	4909      	ldr	r1, [pc, #36]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d001      	beq.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40022000 	.word	0x40022000

080048f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048fa:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d00b      	beq.n	8004922 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d825      	bhi.n	800495c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d008      	beq.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d11f      	bne.n	800495c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800491e:	613b      	str	r3, [r7, #16]
    break;
 8004920:	e01f      	b.n	8004962 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004922:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004924:	613b      	str	r3, [r7, #16]
    break;
 8004926:	e01c      	b.n	8004962 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004928:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d107      	bne.n	8004944 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004934:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e005      	b.n	8004950 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
    break;
 800495a:	e002      	b.n	8004962 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
    break;
 8004960:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	3301      	adds	r3, #1
 800496e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	fb03 f202 	mul.w	r2, r3, r2
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	0e5b      	lsrs	r3, r3, #25
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049a2:	683b      	ldr	r3, [r7, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40021000 	.word	0x40021000
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	007a1200 	.word	0x007a1200
 80049bc:	08009bc4 	.word	0x08009bc4

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c8:	2300      	movs	r3, #0
 80049ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049cc:	2300      	movs	r3, #0
 80049ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d040      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d02a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d825      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d026      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d821      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d006      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d81d      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d010      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a00:	e018      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a02:	4b89      	ldr	r3, [pc, #548]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	4a88      	ldr	r2, [pc, #544]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a0e:	e015      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fa24 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a20:	e00c      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3320      	adds	r3, #32
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fb0f 	bl	800604c <RCCEx_PLLSAI2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	74fb      	strb	r3, [r7, #19]
      break;
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a42:	4b79      	ldr	r3, [pc, #484]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a48:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a50:	4975      	ldr	r1, [pc, #468]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a58:	e001      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d047      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d030      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a78:	d82a      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7e:	d02a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a84:	d824      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a90:	d81e      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	d010      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a9c:	e018      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a9e:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4a61      	ldr	r2, [pc, #388]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aaa:	e015      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f9d6 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004abc:	e00c      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3320      	adds	r3, #32
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 fac1 	bl	800604c <RCCEx_PLLSAI2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ace:	e003      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ade:	4b52      	ldr	r3, [pc, #328]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	494e      	ldr	r1, [pc, #312]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004af4:	e001      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	7cfb      	ldrb	r3, [r7, #19]
 8004af8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 809f 	beq.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b0c:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	4a40      	ldr	r2, [pc, #256]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b2e:	4b3e      	ldr	r3, [pc, #248]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3a      	ldr	r2, [pc, #232]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd f80b 	bl	8001b64 <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b50:	e009      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fd f807 	bl	8001b64 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d902      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	74fb      	strb	r3, [r7, #19]
        break;
 8004b64:	e005      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ef      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d15b      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01f      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d019      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d016      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc ffc6 	bl	8001b64 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fc ffc2 	bl	8001b64 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d902      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	74fb      	strb	r3, [r7, #19]
            break;
 8004bf2:	e006      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ec      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c20:	e008      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	74bb      	strb	r3, [r7, #18]
 8004c26:	e005      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7c7b      	ldrb	r3, [r7, #17]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4ba0      	ldr	r3, [pc, #640]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a9f      	ldr	r2, [pc, #636]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c52:	4b9a      	ldr	r3, [pc, #616]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f023 0203 	bic.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	4996      	ldr	r1, [pc, #600]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c74:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 020c 	bic.w	r2, r3, #12
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	498e      	ldr	r1, [pc, #568]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c96:	4b89      	ldr	r3, [pc, #548]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	4985      	ldr	r1, [pc, #532]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	497d      	ldr	r1, [pc, #500]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cda:	4b78      	ldr	r3, [pc, #480]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	4974      	ldr	r1, [pc, #464]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cfc:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	496c      	ldr	r1, [pc, #432]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2c:	4963      	ldr	r1, [pc, #396]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d40:	4b5e      	ldr	r3, [pc, #376]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4e:	495b      	ldr	r1, [pc, #364]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d62:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	4952      	ldr	r1, [pc, #328]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d84:	4b4d      	ldr	r3, [pc, #308]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	494a      	ldr	r1, [pc, #296]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da6:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db4:	4941      	ldr	r1, [pc, #260]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc8:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	4939      	ldr	r1, [pc, #228]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d028      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df8:	4930      	ldr	r1, [pc, #192]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e14:	60d3      	str	r3, [r2, #12]
 8004e16:	e011      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2101      	movs	r1, #1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 f81b 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d04d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e62:	e012      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e64:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e82:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]
 8004ea0:	e020      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a02      	ldr	r2, [pc, #8]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb6:	60d3      	str	r3, [r2, #12]
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 ffc7 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d028      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef0:	4b4a      	ldr	r3, [pc, #296]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efe:	4947      	ldr	r1, [pc, #284]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f10:	4b42      	ldr	r3, [pc, #264]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a41      	ldr	r2, [pc, #260]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1a:	60d3      	str	r3, [r2, #12]
 8004f1c:	e011      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 ff98 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f3e:	7cfb      	ldrb	r3, [r7, #19]
 8004f40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01e      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f4e:	4b33      	ldr	r3, [pc, #204]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5e:	492f      	ldr	r1, [pc, #188]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 ff73 	bl	8005e64 <RCCEx_PLLSAI1_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9e:	f023 0204 	bic.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	491c      	ldr	r1, [pc, #112]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fbc:	4b17      	ldr	r3, [pc, #92]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fc2:	f023 0218 	bic.w	r2, r3, #24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	4913      	ldr	r1, [pc, #76]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d017      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff0:	490a      	ldr	r1, [pc, #40]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005010:	7cbb      	ldrb	r3, [r7, #18]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005032:	d13e      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005034:	4bb6      	ldr	r3, [pc, #728]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005046:	d028      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	f200 86f4 	bhi.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005058:	d005      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d00e      	beq.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005062:	f000 beea 	b.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005066:	4baa      	ldr	r3, [pc, #680]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	f040 86e4 	bne.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	61fb      	str	r3, [r7, #28]
      break;
 800507c:	f000 bedf 	b.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005080:	4ba3      	ldr	r3, [pc, #652]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	f040 86d9 	bne.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005090:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005094:	61fb      	str	r3, [r7, #28]
      break;
 8005096:	f000 bed4 	b.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800509a:	4b9d      	ldr	r3, [pc, #628]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	f040 86ce 	bne.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80050aa:	4b9a      	ldr	r3, [pc, #616]	; (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80050ac:	61fb      	str	r3, [r7, #28]
      break;
 80050ae:	f000 beca 	b.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b2:	4b97      	ldr	r3, [pc, #604]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d036      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d840      	bhi.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d020      	beq.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80050d4:	e039      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050d6:	4b8e      	ldr	r3, [pc, #568]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d116      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80050e2:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80050ee:	4b88      	ldr	r3, [pc, #544]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80050fa:	4b85      	ldr	r3, [pc, #532]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80050fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a84      	ldr	r2, [pc, #528]	; (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800510e:	e01f      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
      break;
 8005114:	e01c      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005116:	4b7e      	ldr	r3, [pc, #504]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d102      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005124:	4b7d      	ldr	r3, [pc, #500]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005126:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005128:	e012      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
      break;
 800512e:	e00f      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005130:	4b77      	ldr	r3, [pc, #476]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513c:	d102      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800513e:	4b78      	ldr	r3, [pc, #480]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005140:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
      break;
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
      break;
 800514e:	bf00      	nop
    }

    switch(PeriphClk)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005156:	f000 8606 	beq.w	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005160:	f200 8673 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516a:	f000 8469 	beq.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005174:	f200 8669 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	f000 8531 	beq.w	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005188:	f200 865f 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005192:	f000 8187 	beq.w	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800519c:	f200 8655 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051a6:	f000 80cd 	beq.w	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051b0:	f200 864b 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ba:	f000 8430 	beq.w	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	f200 8641 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ce:	f000 83e4 	beq.w	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d8:	f200 8637 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	f000 80af 	beq.w	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ec:	f200 862d 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f6:	f000 809d 	beq.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005200:	f200 8623 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520a:	f000 808b 	beq.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	f200 8619 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	f000 8554 	beq.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	f200 860f 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005232:	f000 8500 	beq.w	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	f200 8605 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005246:	f000 84a1 	beq.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005250:	f200 85fb 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	f000 846c 	beq.w	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	f200 85f3 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b20      	cmp	r3, #32
 8005268:	d84c      	bhi.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 85ec 	beq.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3b01      	subs	r3, #1
 8005276:	2b1f      	cmp	r3, #31
 8005278:	f200 85e7 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	08005699 	.word	0x08005699
 8005288:	08005707 	.word	0x08005707
 800528c:	08005e4b 	.word	0x08005e4b
 8005290:	0800579b 	.word	0x0800579b
 8005294:	08005e4b 	.word	0x08005e4b
 8005298:	08005e4b 	.word	0x08005e4b
 800529c:	08005e4b 	.word	0x08005e4b
 80052a0:	08005813 	.word	0x08005813
 80052a4:	08005e4b 	.word	0x08005e4b
 80052a8:	08005e4b 	.word	0x08005e4b
 80052ac:	08005e4b 	.word	0x08005e4b
 80052b0:	08005e4b 	.word	0x08005e4b
 80052b4:	08005e4b 	.word	0x08005e4b
 80052b8:	08005e4b 	.word	0x08005e4b
 80052bc:	08005e4b 	.word	0x08005e4b
 80052c0:	08005897 	.word	0x08005897
 80052c4:	08005e4b 	.word	0x08005e4b
 80052c8:	08005e4b 	.word	0x08005e4b
 80052cc:	08005e4b 	.word	0x08005e4b
 80052d0:	08005e4b 	.word	0x08005e4b
 80052d4:	08005e4b 	.word	0x08005e4b
 80052d8:	08005e4b 	.word	0x08005e4b
 80052dc:	08005e4b 	.word	0x08005e4b
 80052e0:	08005e4b 	.word	0x08005e4b
 80052e4:	08005e4b 	.word	0x08005e4b
 80052e8:	08005e4b 	.word	0x08005e4b
 80052ec:	08005e4b 	.word	0x08005e4b
 80052f0:	08005e4b 	.word	0x08005e4b
 80052f4:	08005e4b 	.word	0x08005e4b
 80052f8:	08005e4b 	.word	0x08005e4b
 80052fc:	08005e4b 	.word	0x08005e4b
 8005300:	08005919 	.word	0x08005919
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	f000 83e8 	beq.w	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800530c:	f000 bd9d 	b.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005310:	40021000 	.word	0x40021000
 8005314:	0003d090 	.word	0x0003d090
 8005318:	08009bc4 	.word	0x08009bc4
 800531c:	00f42400 	.word	0x00f42400
 8005320:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800532a:	f000 ff83 	bl	8006234 <RCCEx_GetSAIxPeriphCLKFreq>
 800532e:	61f8      	str	r0, [r7, #28]
      break;
 8005330:	f000 bd8e 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800533a:	f000 ff7b 	bl	8006234 <RCCEx_GetSAIxPeriphCLKFreq>
 800533e:	61f8      	str	r0, [r7, #28]
      break;
 8005340:	f000 bd86 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005344:	4b9a      	ldr	r3, [pc, #616]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005356:	d015      	beq.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800535e:	f200 8092 	bhi.w	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005368:	d029      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005370:	f200 8089 	bhi.w	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d07b      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005380:	d04a      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005382:	e080      	b.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005384:	4b8a      	ldr	r3, [pc, #552]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d17d      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005390:	4b87      	ldr	r3, [pc, #540]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800539c:	4b84      	ldr	r3, [pc, #528]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	e005      	b.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80053a8:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	4a7f      	ldr	r2, [pc, #508]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80053b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ba:	61fb      	str	r3, [r7, #28]
          break;
 80053bc:	e066      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80053be:	4b7c      	ldr	r3, [pc, #496]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053ca:	d162      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80053cc:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d8:	d15b      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80053da:	4b75      	ldr	r3, [pc, #468]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	fb03 f202 	mul.w	r2, r3, r2
 80053ee:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	3301      	adds	r3, #1
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005400:	4b6b      	ldr	r3, [pc, #428]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	0d5b      	lsrs	r3, r3, #21
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	3301      	adds	r3, #1
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	61fb      	str	r3, [r7, #28]
          break;
 8005416:	e03c      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005418:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005424:	d138      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005426:	4b62      	ldr	r3, [pc, #392]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d131      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005434:	4b5e      	ldr	r3, [pc, #376]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	fb03 f202 	mul.w	r2, r3, r2
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3301      	adds	r3, #1
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800545a:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	0d5b      	lsrs	r3, r3, #21
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	3301      	adds	r3, #1
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	fbb2 f3f3 	udiv	r3, r2, r3
 800546e:	61fb      	str	r3, [r7, #28]
          break;
 8005470:	e012      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005472:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d10e      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005480:	4b4d      	ldr	r3, [pc, #308]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005482:	61fb      	str	r3, [r7, #28]
          break;
 8005484:	e00b      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005486:	bf00      	nop
 8005488:	f000 bce2 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800548c:	bf00      	nop
 800548e:	f000 bcdf 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005492:	bf00      	nop
 8005494:	f000 bcdc 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005498:	bf00      	nop
 800549a:	f000 bcd9 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800549e:	bf00      	nop
        break;
 80054a0:	f000 bcd6 	b.w	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b2:	d13d      	bne.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054b4:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c0:	f040 84c5 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80054c4:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	f040 84bd 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054d4:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054de:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	fb03 f202 	mul.w	r2, r3, r2
 80054e8:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	3301      	adds	r3, #1
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80054fa:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	0edb      	lsrs	r3, r3, #27
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005518:	2311      	movs	r3, #17
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e001      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800551e:	2307      	movs	r3, #7
 8005520:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fbb2 f3f3 	udiv	r3, r2, r3
 800552a:	61fb      	str	r3, [r7, #28]
      break;
 800552c:	f000 bc8f 	b.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005542:	d016      	beq.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800554a:	f200 809b 	bhi.w	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005554:	d032      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555c:	f200 8092 	bhi.w	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8084 	beq.w	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556e:	d052      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8005570:	e088      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	f040 8084 	bne.w	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	e005      	b.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	4a03      	ldr	r2, [pc, #12]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055aa:	61fb      	str	r3, [r7, #28]
          break;
 80055ac:	e06c      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	08009bc4 	.word	0x08009bc4
 80055b8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055bc:	4ba5      	ldr	r3, [pc, #660]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c8:	d160      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80055ca:	4ba2      	ldr	r3, [pc, #648]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d6:	d159      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055d8:	4b9e      	ldr	r3, [pc, #632]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	fb03 f202 	mul.w	r2, r3, r2
 80055ec:	4b99      	ldr	r3, [pc, #612]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3301      	adds	r3, #1
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80055fe:	4b95      	ldr	r3, [pc, #596]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	0d5b      	lsrs	r3, r3, #21
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	3301      	adds	r3, #1
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	61fb      	str	r3, [r7, #28]
          break;
 8005614:	e03a      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005616:	4b8f      	ldr	r3, [pc, #572]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800561e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005622:	d135      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005624:	4b8b      	ldr	r3, [pc, #556]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005630:	d12e      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005632:	4b88      	ldr	r3, [pc, #544]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	fb03 f202 	mul.w	r2, r3, r2
 8005646:	4b83      	ldr	r3, [pc, #524]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	3301      	adds	r3, #1
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005658:	4b7e      	ldr	r3, [pc, #504]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	0d5b      	lsrs	r3, r3, #21
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	61fb      	str	r3, [r7, #28]
          break;
 800566e:	e00f      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005670:	4b78      	ldr	r3, [pc, #480]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	d10a      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800567e:	4b76      	ldr	r3, [pc, #472]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005680:	61fb      	str	r3, [r7, #28]
          break;
 8005682:	e007      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8005684:	bf00      	nop
 8005686:	e3e2      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005688:	bf00      	nop
 800568a:	e3e0      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800568c:	bf00      	nop
 800568e:	e3de      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005690:	bf00      	nop
 8005692:	e3dc      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8005694:	bf00      	nop
      break;
 8005696:	e3da      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005698:	4b6e      	ldr	r3, [pc, #440]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d827      	bhi.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056e5 	.word	0x080056e5
          frequency = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7ff f8a8 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
          break;
 80056c6:	e01d      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80056c8:	f7fe fff6 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80056cc:	61f8      	str	r0, [r7, #28]
          break;
 80056ce:	e019      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d0:	4b60      	ldr	r3, [pc, #384]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d10f      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80056de:	4b5f      	ldr	r3, [pc, #380]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056e0:	61fb      	str	r3, [r7, #28]
          break;
 80056e2:	e00c      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056e4:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d107      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	61fb      	str	r3, [r7, #28]
          break;
 80056f8:	e003      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80056fa:	bf00      	nop
 80056fc:	e3a8      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056fe:	bf00      	nop
 8005700:	e3a6      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005702:	bf00      	nop
        break;
 8005704:	e3a4      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005706:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b0c      	cmp	r3, #12
 8005716:	d83a      	bhi.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005755 	.word	0x08005755
 8005724:	0800578f 	.word	0x0800578f
 8005728:	0800578f 	.word	0x0800578f
 800572c:	0800578f 	.word	0x0800578f
 8005730:	0800575d 	.word	0x0800575d
 8005734:	0800578f 	.word	0x0800578f
 8005738:	0800578f 	.word	0x0800578f
 800573c:	0800578f 	.word	0x0800578f
 8005740:	08005765 	.word	0x08005765
 8005744:	0800578f 	.word	0x0800578f
 8005748:	0800578f 	.word	0x0800578f
 800574c:	0800578f 	.word	0x0800578f
 8005750:	08005779 	.word	0x08005779
          frequency = HAL_RCC_GetPCLK1Freq();
 8005754:	f7ff f848 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005758:	61f8      	str	r0, [r7, #28]
          break;
 800575a:	e01d      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800575c:	f7fe ffac 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005760:	61f8      	str	r0, [r7, #28]
          break;
 8005762:	e019      	b.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005764:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d10f      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8005772:	4b3a      	ldr	r3, [pc, #232]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005774:	61fb      	str	r3, [r7, #28]
          break;
 8005776:	e00c      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578a:	61fb      	str	r3, [r7, #28]
          break;
 800578c:	e003      	b.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800578e:	bf00      	nop
 8005790:	e35e      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005792:	bf00      	nop
 8005794:	e35c      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005796:	bf00      	nop
        break;
 8005798:	e35a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800579a:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b30      	cmp	r3, #48	; 0x30
 80057aa:	d021      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b30      	cmp	r3, #48	; 0x30
 80057b0:	d829      	bhi.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d011      	beq.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d823      	bhi.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d004      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80057ca:	e01c      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7ff f80c 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80057d0:	61f8      	str	r0, [r7, #28]
          break;
 80057d2:	e01d      	b.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80057d4:	f7fe ff70 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80057d8:	61f8      	str	r0, [r7, #28]
          break;
 80057da:	e019      	b.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057dc:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d10f      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057ec:	61fb      	str	r3, [r7, #28]
          break;
 80057ee:	e00c      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057f0:	4b18      	ldr	r3, [pc, #96]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d107      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	61fb      	str	r3, [r7, #28]
          break;
 8005804:	e003      	b.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8005806:	bf00      	nop
 8005808:	e322      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800580a:	bf00      	nop
 800580c:	e320      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800580e:	bf00      	nop
        break;
 8005810:	e31e      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2bc0      	cmp	r3, #192	; 0xc0
 8005822:	d027      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2bc0      	cmp	r3, #192	; 0xc0
 8005828:	d82f      	bhi.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d017      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d829      	bhi.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d004      	beq.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8005842:	e022      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe ffd0 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005848:	61f8      	str	r0, [r7, #28]
          break;
 800584a:	e023      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800584c:	f7fe ff34 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005850:	61f8      	str	r0, [r7, #28]
          break;
 8005852:	e01f      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8005854:	40021000 	.word	0x40021000
 8005858:	02dc6c00 	.word	0x02dc6c00
 800585c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d10f      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800586e:	4b99      	ldr	r3, [pc, #612]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005870:	61fb      	str	r3, [r7, #28]
          break;
 8005872:	e00c      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005874:	4b96      	ldr	r3, [pc, #600]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d107      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	61fb      	str	r3, [r7, #28]
          break;
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800588a:	bf00      	nop
 800588c:	e2e0      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800588e:	bf00      	nop
 8005890:	e2de      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005892:	bf00      	nop
        break;
 8005894:	e2dc      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005896:	4b8e      	ldr	r3, [pc, #568]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a8:	d025      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058b0:	d82c      	bhi.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d013      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c0:	d824      	bhi.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ce:	d004      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80058d0:	e01c      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7fe ff89 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80058d6:	61f8      	str	r0, [r7, #28]
          break;
 80058d8:	e01d      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80058da:	f7fe feed 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80058de:	61f8      	str	r0, [r7, #28]
          break;
 80058e0:	e019      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d10f      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80058f0:	4b78      	ldr	r3, [pc, #480]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80058f2:	61fb      	str	r3, [r7, #28]
          break;
 80058f4:	e00c      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058f6:	4b76      	ldr	r3, [pc, #472]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d107      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8005904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005908:	61fb      	str	r3, [r7, #28]
          break;
 800590a:	e003      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800590c:	bf00      	nop
 800590e:	e29f      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005910:	bf00      	nop
 8005912:	e29d      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005914:	bf00      	nop
        break;
 8005916:	e29b      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005918:	4b6d      	ldr	r3, [pc, #436]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800592a:	d025      	beq.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005932:	d82c      	bhi.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593a:	d013      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d824      	bhi.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	d004      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8005952:	e01c      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe ff48 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005958:	61f8      	str	r0, [r7, #28]
          break;
 800595a:	e01d      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800595c:	f7fe feac 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005960:	61f8      	str	r0, [r7, #28]
          break;
 8005962:	e019      	b.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005964:	4b5a      	ldr	r3, [pc, #360]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d10f      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8005972:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005974:	61fb      	str	r3, [r7, #28]
          break;
 8005976:	e00c      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005978:	4b55      	ldr	r3, [pc, #340]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b02      	cmp	r3, #2
 8005984:	d107      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598a:	61fb      	str	r3, [r7, #28]
          break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800598e:	bf00      	nop
 8005990:	e25e      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005992:	bf00      	nop
 8005994:	e25c      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005996:	bf00      	nop
        break;
 8005998:	e25a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800599a:	4b4d      	ldr	r3, [pc, #308]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ac:	d007      	beq.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b4:	d12f      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80059b6:	f7fe fe7f 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80059ba:	61f8      	str	r0, [r7, #28]
          break;
 80059bc:	e02e      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80059be:	4b44      	ldr	r3, [pc, #272]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ca:	d126      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80059cc:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d020      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80059d8:	4b3d      	ldr	r3, [pc, #244]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	3301      	adds	r3, #1
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	0e5b      	lsrs	r3, r3, #25
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	61fb      	str	r3, [r7, #28]
          break;
 8005a14:	e001      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8005a16:	bf00      	nop
 8005a18:	e21a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005a1a:	bf00      	nop
        break;
 8005a1c:	e218      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fe fef0 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005a34:	61f8      	str	r0, [r7, #28]
        break;
 8005a36:	e20b      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a38:	f7fe fe3e 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005a3c:	61f8      	str	r0, [r7, #28]
        break;
 8005a3e:	e207      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a46:	f003 0318 	and.w	r3, r3, #24
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b10      	cmp	r3, #16
 8005a50:	d010      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d834      	bhi.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d024      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005a64:	e02d      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005a66:	69b9      	ldr	r1, [r7, #24]
 8005a68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a6c:	f000 fbe2 	bl	8006234 <RCCEx_GetSAIxPeriphCLKFreq>
 8005a70:	61f8      	str	r0, [r7, #28]
          break;
 8005a72:	e02b      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a74:	4b16      	ldr	r3, [pc, #88]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d122      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005a8c:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	e005      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	61fb      	str	r3, [r7, #28]
          break;
 8005aac:	e00b      	b.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aba:	d106      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005abe:	61fb      	str	r3, [r7, #28]
          break;
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8005ac2:	bf00      	nop
 8005ac4:	e1c4      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005ac6:	bf00      	nop
 8005ac8:	e1c2      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005aca:	bf00      	nop
        break;
 8005acc:	e1c0      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	00f42400 	.word	0x00f42400
 8005ad8:	08009bc4 	.word	0x08009bc4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005adc:	4b96      	ldr	r3, [pc, #600]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aee:	d013      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af6:	d819      	bhi.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d004      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b08:	f7fe fe6e 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005b0c:	61f8      	str	r0, [r7, #28]
          break;
 8005b0e:	e010      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b10:	f7fe fdd2 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005b14:	61f8      	str	r0, [r7, #28]
          break;
 8005b16:	e00c      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b18:	4b87      	ldr	r3, [pc, #540]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b24:	d104      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8005b26:	4b85      	ldr	r3, [pc, #532]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005b28:	61fb      	str	r3, [r7, #28]
          break;
 8005b2a:	e001      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8005b2c:	bf00      	nop
 8005b2e:	e18f      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b30:	bf00      	nop
        break;
 8005b32:	e18d      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005b34:	4b80      	ldr	r3, [pc, #512]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b46:	d013      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	d819      	bhi.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8005b5e:	e011      	b.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b60:	f7fe fe42 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005b64:	61f8      	str	r0, [r7, #28]
          break;
 8005b66:	e010      	b.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b68:	f7fe fda6 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005b6c:	61f8      	str	r0, [r7, #28]
          break;
 8005b6e:	e00c      	b.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b70:	4b71      	ldr	r3, [pc, #452]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7c:	d104      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005b80:	61fb      	str	r3, [r7, #28]
          break;
 8005b82:	e001      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005b84:	bf00      	nop
 8005b86:	e163      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005b88:	bf00      	nop
        break;
 8005b8a:	e161      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b8c:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b9e:	d013      	beq.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba6:	d819      	bhi.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d004      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d004      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fe fe16 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	61f8      	str	r0, [r7, #28]
          break;
 8005bbe:	e010      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bc0:	f7fe fd7a 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005bc4:	61f8      	str	r0, [r7, #28]
          break;
 8005bc6:	e00c      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc8:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd4:	d104      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005bd8:	61fb      	str	r3, [r7, #28]
          break;
 8005bda:	e001      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005bdc:	bf00      	nop
 8005bde:	e137      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005be0:	bf00      	nop
        break;
 8005be2:	e135      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005be4:	4b54      	ldr	r3, [pc, #336]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d011      	beq.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d818      	bhi.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d004      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8005c08:	e011      	b.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c0a:	f7fe fded 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005c0e:	61f8      	str	r0, [r7, #28]
          break;
 8005c10:	e010      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c12:	f7fe fd51 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005c16:	61f8      	str	r0, [r7, #28]
          break;
 8005c18:	e00c      	b.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c26:	d104      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8005c28:	4b44      	ldr	r3, [pc, #272]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005c2a:	61fb      	str	r3, [r7, #28]
          break;
 8005c2c:	e001      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8005c2e:	bf00      	nop
 8005c30:	e10e      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005c32:	bf00      	nop
        break;
 8005c34:	e10c      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005c36:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c48:	d02c      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c50:	d833      	bhi.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c58:	d01a      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c60:	d82b      	bhi.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d004      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8005c70:	e023      	b.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c72:	f7fe fdb9 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005c76:	61f8      	str	r0, [r7, #28]
          break;
 8005c78:	e026      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c7a:	4b2f      	ldr	r3, [pc, #188]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d11a      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005c88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c8c:	61fb      	str	r3, [r7, #28]
          break;
 8005c8e:	e016      	b.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d111      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8005c9e:	4b27      	ldr	r3, [pc, #156]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005ca0:	61fb      	str	r3, [r7, #28]
          break;
 8005ca2:	e00e      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ca4:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d109      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8005cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb6:	61fb      	str	r3, [r7, #28]
          break;
 8005cb8:	e005      	b.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005cba:	bf00      	nop
 8005cbc:	e0c8      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cbe:	bf00      	nop
 8005cc0:	e0c6      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cc2:	bf00      	nop
 8005cc4:	e0c4      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005cc6:	bf00      	nop
        break;
 8005cc8:	e0c2      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cdc:	d030      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ce4:	d837      	bhi.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cec:	d01a      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cf4:	d82f      	bhi.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8005d04:	e027      	b.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d06:	f7fe fd6f 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005d0a:	61f8      	str	r0, [r7, #28]
          break;
 8005d0c:	e02a      	b.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d11e      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8005d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d20:	61fb      	str	r3, [r7, #28]
          break;
 8005d22:	e01a      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d115      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8005d32:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005d34:	61fb      	str	r3, [r7, #28]
          break;
 8005d36:	e012      	b.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d40:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8005d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d52:	61fb      	str	r3, [r7, #28]
          break;
 8005d54:	e005      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8005d56:	bf00      	nop
 8005d58:	e07a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d5a:	bf00      	nop
 8005d5c:	e078      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d5e:	bf00      	nop
 8005d60:	e076      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005d62:	bf00      	nop
        break;
 8005d64:	e074      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005d66:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d78:	d02c      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d80:	d855      	bhi.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d004      	beq.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8005d90:	e04d      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fc91 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005d96:	61f8      	str	r0, [r7, #28]
          break;
 8005d98:	e04e      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d9a:	4b30      	ldr	r3, [pc, #192]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d145      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005da6:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	e005      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005dbe:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	4a25      	ldr	r2, [pc, #148]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd0:	61fb      	str	r3, [r7, #28]
          break;
 8005dd2:	e02e      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005de0:	d129      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dee:	d122      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	0a1b      	lsrs	r3, r3, #8
 8005df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	fb03 f202 	mul.w	r2, r3, r2
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	3301      	adds	r3, #1
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	0d5b      	lsrs	r3, r3, #21
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	3301      	adds	r3, #1
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61fb      	str	r3, [r7, #28]
          break;
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8005e2e:	bf00      	nop
 8005e30:	e00e      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e32:	bf00      	nop
 8005e34:	e00c      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005e36:	bf00      	nop
        break;
 8005e38:	e00a      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e008      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e42:	bf00      	nop
 8005e44:	e004      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e46:	bf00      	nop
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8005e4e:	bf00      	nop
    }
  }

  return(frequency);
 8005e50:	69fb      	ldr	r3, [r7, #28]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	08009bc4 	.word	0x08009bc4

08005e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e72:	4b72      	ldr	r3, [pc, #456]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e7e:	4b6f      	ldr	r3, [pc, #444]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0203 	and.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d103      	bne.n	8005e96 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
       ||
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d142      	bne.n	8005f1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	e03f      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d018      	beq.n	8005ed6 <RCCEx_PLLSAI1_Config+0x72>
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d825      	bhi.n	8005ef4 <RCCEx_PLLSAI1_Config+0x90>
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d002      	beq.n	8005eb2 <RCCEx_PLLSAI1_Config+0x4e>
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d009      	beq.n	8005ec4 <RCCEx_PLLSAI1_Config+0x60>
 8005eb0:	e020      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eb2:	4b62      	ldr	r3, [pc, #392]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d11d      	bne.n	8005efa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec2:	e01a      	b.n	8005efa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ec4:	4b5d      	ldr	r3, [pc, #372]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d116      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed4:	e013      	b.n	8005efe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ee2:	4b56      	ldr	r3, [pc, #344]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ef2:	e006      	b.n	8005f02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e004      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005f02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005f0a:	4b4c      	ldr	r3, [pc, #304]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f023 0203 	bic.w	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4949      	ldr	r1, [pc, #292]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 8086 	bne.w	8006030 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f24:	4b45      	ldr	r3, [pc, #276]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a44      	ldr	r2, [pc, #272]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f30:	f7fb fe18 	bl	8001b64 <HAL_GetTick>
 8005f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f36:	e009      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f38:	f7fb fe14 	bl	8001b64 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d902      	bls.n	8005f4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	73fb      	strb	r3, [r7, #15]
        break;
 8005f4a:	e005      	b.n	8005f58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ef      	bne.n	8005f38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d168      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f64:	4b35      	ldr	r3, [pc, #212]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	4b35      	ldr	r3, [pc, #212]	; (8006040 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6892      	ldr	r2, [r2, #8]
 8005f70:	0211      	lsls	r1, r2, #8
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	68d2      	ldr	r2, [r2, #12]
 8005f76:	06d2      	lsls	r2, r2, #27
 8005f78:	4311      	orrs	r1, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6852      	ldr	r2, [r2, #4]
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	0112      	lsls	r2, r2, #4
 8005f82:	430a      	orrs	r2, r1
 8005f84:	492d      	ldr	r1, [pc, #180]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
 8005f8a:	e02d      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d115      	bne.n	8005fbe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f92:	4b2a      	ldr	r3, [pc, #168]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6892      	ldr	r2, [r2, #8]
 8005f9e:	0211      	lsls	r1, r2, #8
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6912      	ldr	r2, [r2, #16]
 8005fa4:	0852      	lsrs	r2, r2, #1
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	0552      	lsls	r2, r2, #21
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6852      	ldr	r2, [r2, #4]
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	0112      	lsls	r2, r2, #4
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	4921      	ldr	r1, [pc, #132]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	610b      	str	r3, [r1, #16]
 8005fbc:	e014      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6892      	ldr	r2, [r2, #8]
 8005fca:	0211      	lsls	r1, r2, #8
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6952      	ldr	r2, [r2, #20]
 8005fd0:	0852      	lsrs	r2, r2, #1
 8005fd2:	3a01      	subs	r2, #1
 8005fd4:	0652      	lsls	r2, r2, #25
 8005fd6:	4311      	orrs	r1, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6852      	ldr	r2, [r2, #4]
 8005fdc:	3a01      	subs	r2, #1
 8005fde:	0112      	lsls	r2, r2, #4
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	4916      	ldr	r1, [pc, #88]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fe8:	4b14      	ldr	r3, [pc, #80]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fb fdb6 	bl	8001b64 <HAL_GetTick>
 8005ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffa:	e009      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffc:	f7fb fdb2 	bl	8001b64 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d902      	bls.n	8006010 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	73fb      	strb	r3, [r7, #15]
          break;
 800600e:	e005      	b.n	800601c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	4904      	ldr	r1, [pc, #16]	; (800603c <RCCEx_PLLSAI1_Config+0x1d8>)
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000
 8006040:	07ff800f 	.word	0x07ff800f
 8006044:	ff9f800f 	.word	0xff9f800f
 8006048:	f9ff800f 	.word	0xf9ff800f

0800604c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800605a:	4b72      	ldr	r3, [pc, #456]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006066:	4b6f      	ldr	r3, [pc, #444]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0203 	and.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d103      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
       ||
 800607a:	2b00      	cmp	r3, #0
 800607c:	d142      	bne.n	8006104 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	73fb      	strb	r3, [r7, #15]
 8006082:	e03f      	b.n	8006104 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d018      	beq.n	80060be <RCCEx_PLLSAI2_Config+0x72>
 800608c:	2b03      	cmp	r3, #3
 800608e:	d825      	bhi.n	80060dc <RCCEx_PLLSAI2_Config+0x90>
 8006090:	2b01      	cmp	r3, #1
 8006092:	d002      	beq.n	800609a <RCCEx_PLLSAI2_Config+0x4e>
 8006094:	2b02      	cmp	r3, #2
 8006096:	d009      	beq.n	80060ac <RCCEx_PLLSAI2_Config+0x60>
 8006098:	e020      	b.n	80060dc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800609a:	4b62      	ldr	r3, [pc, #392]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11d      	bne.n	80060e2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060aa:	e01a      	b.n	80060e2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060ac:	4b5d      	ldr	r3, [pc, #372]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060bc:	e013      	b.n	80060e6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060ca:	4b56      	ldr	r3, [pc, #344]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060da:	e006      	b.n	80060ea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
      break;
 80060e0:	e004      	b.n	80060ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060e2:	bf00      	nop
 80060e4:	e002      	b.n	80060ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80060f2:	4b4c      	ldr	r3, [pc, #304]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f023 0203 	bic.w	r2, r3, #3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4949      	ldr	r1, [pc, #292]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 8086 	bne.w	8006218 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800610c:	4b45      	ldr	r3, [pc, #276]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a44      	ldr	r2, [pc, #272]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006118:	f7fb fd24 	bl	8001b64 <HAL_GetTick>
 800611c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800611e:	e009      	b.n	8006134 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006120:	f7fb fd20 	bl	8001b64 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d902      	bls.n	8006134 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	73fb      	strb	r3, [r7, #15]
        break;
 8006132:	e005      	b.n	8006140 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ef      	bne.n	8006120 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d168      	bne.n	8006218 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d113      	bne.n	8006174 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800614c:	4b35      	ldr	r3, [pc, #212]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	4b35      	ldr	r3, [pc, #212]	; (8006228 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006152:	4013      	ands	r3, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	0211      	lsls	r1, r2, #8
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	06d2      	lsls	r2, r2, #27
 8006160:	4311      	orrs	r1, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6852      	ldr	r2, [r2, #4]
 8006166:	3a01      	subs	r2, #1
 8006168:	0112      	lsls	r2, r2, #4
 800616a:	430a      	orrs	r2, r1
 800616c:	492d      	ldr	r1, [pc, #180]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	614b      	str	r3, [r1, #20]
 8006172:	e02d      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d115      	bne.n	80061a6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800617a:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	4b2b      	ldr	r3, [pc, #172]	; (800622c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006180:	4013      	ands	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6892      	ldr	r2, [r2, #8]
 8006186:	0211      	lsls	r1, r2, #8
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6912      	ldr	r2, [r2, #16]
 800618c:	0852      	lsrs	r2, r2, #1
 800618e:	3a01      	subs	r2, #1
 8006190:	0552      	lsls	r2, r2, #21
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6852      	ldr	r2, [r2, #4]
 8006198:	3a01      	subs	r2, #1
 800619a:	0112      	lsls	r2, r2, #4
 800619c:	430a      	orrs	r2, r1
 800619e:	4921      	ldr	r1, [pc, #132]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	614b      	str	r3, [r1, #20]
 80061a4:	e014      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80061a6:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	4b21      	ldr	r3, [pc, #132]	; (8006230 <RCCEx_PLLSAI2_Config+0x1e4>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6892      	ldr	r2, [r2, #8]
 80061b2:	0211      	lsls	r1, r2, #8
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6952      	ldr	r2, [r2, #20]
 80061b8:	0852      	lsrs	r2, r2, #1
 80061ba:	3a01      	subs	r2, #1
 80061bc:	0652      	lsls	r2, r2, #25
 80061be:	4311      	orrs	r1, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6852      	ldr	r2, [r2, #4]
 80061c4:	3a01      	subs	r2, #1
 80061c6:	0112      	lsls	r2, r2, #4
 80061c8:	430a      	orrs	r2, r1
 80061ca:	4916      	ldr	r1, [pc, #88]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061d0:	4b14      	ldr	r3, [pc, #80]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fb fcc2 	bl	8001b64 <HAL_GetTick>
 80061e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061e2:	e009      	b.n	80061f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061e4:	f7fb fcbe 	bl	8001b64 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d902      	bls.n	80061f8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	73fb      	strb	r3, [r7, #15]
          break;
 80061f6:	e005      	b.n	8006204 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ef      	beq.n	80061e4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	4904      	ldr	r1, [pc, #16]	; (8006224 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006214:	4313      	orrs	r3, r2
 8006216:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000
 8006228:	07ff800f 	.word	0x07ff800f
 800622c:	ff9f800f 	.word	0xff9f800f
 8006230:	f9ff800f 	.word	0xf9ff800f

08006234 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006250:	d10b      	bne.n	800626a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006252:	4b7e      	ldr	r3, [pc, #504]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006258:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800625c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b60      	cmp	r3, #96	; 0x60
 8006262:	d112      	bne.n	800628a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006264:	4b7a      	ldr	r3, [pc, #488]	; (8006450 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e00f      	b.n	800628a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d10b      	bne.n	800628a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006272:	4b76      	ldr	r3, [pc, #472]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800627c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006284:	d101      	bne.n	800628a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006286:	4b72      	ldr	r3, [pc, #456]	; (8006450 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006288:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 80d6 	bne.w	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d003      	beq.n	80062a4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a2:	d13b      	bne.n	800631c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80062a4:	4b69      	ldr	r3, [pc, #420]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b0:	f040 80c4 	bne.w	800643c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80062b4:	4b65      	ldr	r3, [pc, #404]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80bd 	beq.w	800643c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062c2:	4b62      	ldr	r3, [pc, #392]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	3301      	adds	r3, #1
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062d6:	4b5d      	ldr	r3, [pc, #372]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80062e2:	4b5a      	ldr	r3, [pc, #360]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	0edb      	lsrs	r3, r3, #27
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80062f4:	4b55      	ldr	r3, [pc, #340]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006300:	2311      	movs	r3, #17
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e001      	b.n	800630a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006306:	2307      	movs	r3, #7
 8006308:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	fb03 f202 	mul.w	r2, r3, r2
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800631a:	e08f      	b.n	800643c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d13a      	bne.n	8006398 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006322:	4b4a      	ldr	r3, [pc, #296]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800632a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800632e:	f040 8086 	bne.w	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006332:	4b46      	ldr	r3, [pc, #280]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d07f      	beq.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800633e:	4b43      	ldr	r3, [pc, #268]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	091b      	lsrs	r3, r3, #4
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	3301      	adds	r3, #1
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006352:	4b3e      	ldr	r3, [pc, #248]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800635e:	4b3b      	ldr	r3, [pc, #236]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	0edb      	lsrs	r3, r3, #27
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800637c:	2311      	movs	r3, #17
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e001      	b.n	8006386 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006382:	2307      	movs	r3, #7
 8006384:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	fb03 f202 	mul.w	r2, r3, r2
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e052      	b.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d003      	beq.n	80063a6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a4:	d109      	bne.n	80063ba <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063a6:	4b29      	ldr	r3, [pc, #164]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d144      	bne.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80063b6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063b8:	e041      	b.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d003      	beq.n	80063c8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d13a      	bne.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80063c8:	4b20      	ldr	r3, [pc, #128]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d4:	d133      	bne.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02d      	beq.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80063e2:	4b1a      	ldr	r3, [pc, #104]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	3301      	adds	r3, #1
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006400:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	0edb      	lsrs	r3, r3, #27
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006420:	2311      	movs	r3, #17
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e001      	b.n	800642a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006426:	2307      	movs	r3, #7
 8006428:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	fb03 f202 	mul.w	r2, r3, r2
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e000      	b.n	800643e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800643c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800643e:	69fb      	ldr	r3, [r7, #28]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3724      	adds	r7, #36	; 0x24
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40021000 	.word	0x40021000
 8006450:	001fff68 	.word	0x001fff68
 8006454:	00f42400 	.word	0x00f42400

08006458 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d904      	bls.n	8006476 <HAL_SAI_InitProtocol+0x1e>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3b03      	subs	r3, #3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d812      	bhi.n	800649a <HAL_SAI_InitProtocol+0x42>
 8006474:	e008      	b.n	8006488 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f9fb 	bl	8006878 <SAI_InitI2S>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	e00b      	b.n	80064a0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 faa4 	bl	80069dc <SAI_InitPCM>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e002      	b.n	80064a0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
      break;
 800649e:	bf00      	nop
  }

  if (status == HAL_OK)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f808 	bl	80064bc <HAL_SAI_Init>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e1c7      	b.n	800685e <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10e      	bne.n	80064f6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a81      	ldr	r2, [pc, #516]	; (80066e4 <HAL_SAI_Init+0x228>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d107      	bne.n	80064f2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d103      	bne.n	80064f2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1b3      	b.n	800685e <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fb f9fe 	bl	800190c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fae5 	bl	8006ae0 <SAI_Disable>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e19e      	b.n	800685e <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d00c      	beq.n	800654a <HAL_SAI_Init+0x8e>
 8006530:	2b02      	cmp	r3, #2
 8006532:	d80d      	bhi.n	8006550 <HAL_SAI_Init+0x94>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_SAI_Init+0x82>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d003      	beq.n	8006544 <HAL_SAI_Init+0x88>
 800653c:	e008      	b.n	8006550 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006542:	e008      	b.n	8006556 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006544:	2310      	movs	r3, #16
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006548:	e005      	b.n	8006556 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800654a:	2320      	movs	r3, #32
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800654e:	e002      	b.n	8006556 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006554:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d81d      	bhi.n	800659a <HAL_SAI_Init+0xde>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <HAL_SAI_Init+0xa8>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006575 	.word	0x08006575
 8006568:	0800657b 	.word	0x0800657b
 800656c:	08006583 	.word	0x08006583
 8006570:	0800658b 	.word	0x0800658b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
      break;
 8006578:	e012      	b.n	80065a0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800657a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657e:	61fb      	str	r3, [r7, #28]
      break;
 8006580:	e00e      	b.n	80065a0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006586:	61fb      	str	r3, [r7, #28]
      break;
 8006588:	e00a      	b.n	80065a0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800658a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800658e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8006598:	e002      	b.n	80065a0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
      break;
 800659e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a4f      	ldr	r2, [pc, #316]	; (80066e4 <HAL_SAI_Init+0x228>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_SAI_Init+0xf8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a4e      	ldr	r2, [pc, #312]	; (80066e8 <HAL_SAI_Init+0x22c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d103      	bne.n	80065bc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80065b4:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_SAI_Init+0x230>)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e002      	b.n	80065c2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80065bc:	4a4c      	ldr	r2, [pc, #304]	; (80066f0 <HAL_SAI_Init+0x234>)
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d073      	beq.n	80066b2 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a45      	ldr	r2, [pc, #276]	; (80066e4 <HAL_SAI_Init+0x228>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <HAL_SAI_Init+0x122>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a43      	ldr	r2, [pc, #268]	; (80066e8 <HAL_SAI_Init+0x22c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d105      	bne.n	80065ea <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80065de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80065e2:	f7fe fd1d 	bl	8005020 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e6:	61b8      	str	r0, [r7, #24]
 80065e8:	e004      	b.n	80065f4 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80065ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80065ee:	f7fe fd17 	bl	8005020 <HAL_RCCEx_GetPeriphCLKFreq>
 80065f2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065fc:	d120      	bne.n	8006640 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	2b04      	cmp	r3, #4
 8006604:	d102      	bne.n	800660c <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	e00a      	b.n	8006622 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b08      	cmp	r3, #8
 8006612:	d103      	bne.n	800661c <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e002      	b.n	8006622 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4619      	mov	r1, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	fbb1 f3f3 	udiv	r3, r1, r3
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	e017      	b.n	8006670 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006648:	d101      	bne.n	800664e <HAL_SAI_Init+0x192>
 800664a:	2302      	movs	r3, #2
 800664c:	e000      	b.n	8006650 <HAL_SAI_Init+0x194>
 800664e:	2301      	movs	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4619      	mov	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	fbb1 f3f3 	udiv	r3, r1, r3
 800666e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <HAL_SAI_Init+0x238>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	08da      	lsrs	r2, r3, #3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800667e:	6979      	ldr	r1, [r7, #20]
 8006680:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_SAI_Init+0x238>)
 8006682:	fba3 2301 	umull	r2, r3, r3, r1
 8006686:	08da      	lsrs	r2, r3, #3
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	1aca      	subs	r2, r1, r3
 8006692:	2a08      	cmp	r2, #8
 8006694:	d904      	bls.n	80066a0 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d104      	bne.n	80066b2 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	085a      	lsrs	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_SAI_Init+0x206>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d109      	bne.n	80066d6 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_SAI_Init+0x212>
 80066ca:	2300      	movs	r3, #0
 80066cc:	e001      	b.n	80066d2 <HAL_SAI_Init+0x216>
 80066ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	e012      	b.n	80066fc <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d10c      	bne.n	80066f8 <HAL_SAI_Init+0x23c>
 80066de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e2:	e00a      	b.n	80066fa <HAL_SAI_Init+0x23e>
 80066e4:	40015404 	.word	0x40015404
 80066e8:	40015424 	.word	0x40015424
 80066ec:	40015400 	.word	0x40015400
 80066f0:	40015800 	.word	0x40015800
 80066f4:	cccccccd 	.word	0xcccccccd
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b58      	ldr	r3, [pc, #352]	; (8006868 <HAL_SAI_Init+0x3ac>)
 8006708:	400b      	ands	r3, r1
 800670a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006720:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	431a      	orrs	r2, r3
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006734:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006740:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	051b      	lsls	r3, r3, #20
 8006748:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800674e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006766:	f023 030f 	bic.w	r3, r3, #15
 800676a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6899      	ldr	r1, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b35      	ldr	r3, [pc, #212]	; (800686c <HAL_SAI_Init+0x3b0>)
 8006796:	400b      	ands	r3, r1
 8006798:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6899      	ldr	r1, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80067b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80067b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	3b01      	subs	r3, #1
 80067be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80067c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68d9      	ldr	r1, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80067d8:	400b      	ands	r3, r1
 80067da:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68d9      	ldr	r1, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80067f2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	3b01      	subs	r3, #1
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a19      	ldr	r2, [pc, #100]	; (8006870 <HAL_SAI_Init+0x3b4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d119      	bne.n	8006844 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006810:	4b18      	ldr	r3, [pc, #96]	; (8006874 <HAL_SAI_Init+0x3b8>)
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <HAL_SAI_Init+0x3b8>)
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10e      	bne.n	8006844 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	3b01      	subs	r3, #1
 8006830:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006832:	4910      	ldr	r1, [pc, #64]	; (8006874 <HAL_SAI_Init+0x3b8>)
 8006834:	4313      	orrs	r3, r2
 8006836:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006838:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <HAL_SAI_Init+0x3b8>)
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <HAL_SAI_Init+0x3b8>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3728      	adds	r7, #40	; 0x28
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	f805c010 	.word	0xf805c010
 800686c:	fff88000 	.word	0xfff88000
 8006870:	40015404 	.word	0x40015404
 8006874:	40015400 	.word	0x40015400

08006878 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <SAI_InitI2S+0x2e>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d103      	bne.n	80068ae <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80068ac:	e002      	b.n	80068b4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068ba:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068c2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e077      	b.n	80069ce <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d107      	bne.n	80068f4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80068f0:	661a      	str	r2, [r3, #96]	; 0x60
 80068f2:	e006      	b.n	8006902 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068fa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d84f      	bhi.n	80069a8 <SAI_InitI2S+0x130>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <SAI_InitI2S+0x98>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006921 	.word	0x08006921
 8006914:	08006943 	.word	0x08006943
 8006918:	08006965 	.word	0x08006965
 800691c:	08006987 	.word	0x08006987
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	085b      	lsrs	r3, r3, #1
 8006934:	011a      	lsls	r2, r3, #4
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2240      	movs	r2, #64	; 0x40
 800693e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006940:	e035      	b.n	80069ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2280      	movs	r2, #128	; 0x80
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	019a      	lsls	r2, r3, #6
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006962:	e024      	b.n	80069ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22c0      	movs	r2, #192	; 0xc0
 8006968:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	019a      	lsls	r2, r3, #6
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006984:	e013      	b.n	80069ae <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	22e0      	movs	r2, #224	; 0xe0
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	019a      	lsls	r2, r3, #6
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80069a6:	e002      	b.n	80069ae <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d10b      	bne.n	80069cc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d102      	bne.n	80069c0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2210      	movs	r2, #16
 80069be:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d102      	bne.n	80069cc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2208      	movs	r2, #8
 80069ca:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <SAI_InitPCM+0x2e>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d103      	bne.n	8006a12 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a10:	e002      	b.n	8006a18 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006a2c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a40:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d103      	bne.n	8006a50 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8006a4e:	e002      	b.n	8006a56 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	220d      	movs	r2, #13
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d837      	bhi.n	8006acc <SAI_InitPCM+0xf0>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <SAI_InitPCM+0x88>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a75 	.word	0x08006a75
 8006a68:	08006a8b 	.word	0x08006a8b
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006ab7 	.word	0x08006ab7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2280      	movs	r2, #128	; 0x80
 8006a78:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	011a      	lsls	r2, r3, #4
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2240      	movs	r2, #64	; 0x40
 8006a86:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006a88:	e023      	b.n	8006ad2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006a9e:	e018      	b.n	8006ad2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22c0      	movs	r2, #192	; 0xc0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2280      	movs	r2, #128	; 0x80
 8006ab2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006ab4:	e00d      	b.n	8006ad2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22e0      	movs	r2, #224	; 0xe0
 8006aba:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2280      	movs	r2, #128	; 0x80
 8006ac8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8006aca:	e002      	b.n	8006ad2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	bf00      	nop
  }

  return status;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <SAI_Disable+0x6c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <SAI_Disable+0x70>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0b1b      	lsrs	r3, r3, #12
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b0a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	72fb      	strb	r3, [r7, #11]
      break;
 8006b26:	e009      	b.n	8006b3c <SAI_Disable+0x5c>
    }
    count--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e7      	bne.n	8006b0c <SAI_Disable+0x2c>

  return status;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000000 	.word	0x20000000
 8006b50:	95cbec1b 	.word	0x95cbec1b

08006b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e049      	b.n	8006bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fa fe38 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4619      	mov	r1, r3
 8006b92:	4610      	mov	r0, r2
 8006b94:	f000 fa4c 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d001      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e04f      	b.n	8006cbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01d      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d018      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIM_Base_Start_IT+0x76>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d115      	bne.n	8006ca6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d015      	beq.n	8006cb8 <HAL_TIM_Base_Start_IT+0xb4>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c92:	d011      	beq.n	8006cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0201 	orr.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca4:	e008      	b.n	8006cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e000      	b.n	8006cba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40000c00 	.word	0x40000c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	00010007 	.word	0x00010007

08006ce4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e049      	b.n	8006d8a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f841 	bl	8006d92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f000 f984 	bl	8007030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e066      	b.n	8006e94 <HAL_TIM_OC_ConfigChannel+0xec>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b14      	cmp	r3, #20
 8006dd2:	d857      	bhi.n	8006e84 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <HAL_TIM_OC_ConfigChannel+0x34>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006e85 	.word	0x08006e85
 8006de4:	08006e85 	.word	0x08006e85
 8006de8:	08006e85 	.word	0x08006e85
 8006dec:	08006e3f 	.word	0x08006e3f
 8006df0:	08006e85 	.word	0x08006e85
 8006df4:	08006e85 	.word	0x08006e85
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006e85 	.word	0x08006e85
 8006e08:	08006e85 	.word	0x08006e85
 8006e0c:	08006e5b 	.word	0x08006e5b
 8006e10:	08006e85 	.word	0x08006e85
 8006e14:	08006e85 	.word	0x08006e85
 8006e18:	08006e85 	.word	0x08006e85
 8006e1c:	08006e69 	.word	0x08006e69
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006e85 	.word	0x08006e85
 8006e28:	08006e85 	.word	0x08006e85
 8006e2c:	08006e77 	.word	0x08006e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f994 	bl	8007164 <TIM_OC1_SetConfig>
      break;
 8006e3c:	e025      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fa1d 	bl	8007284 <TIM_OC2_SetConfig>
      break;
 8006e4a:	e01e      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 faa0 	bl	8007398 <TIM_OC3_SetConfig>
      break;
 8006e58:	e017      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fb21 	bl	80074a8 <TIM_OC4_SetConfig>
      break;
 8006e66:	e010      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fb84 	bl	800757c <TIM_OC5_SetConfig>
      break;
 8006e74:	e009      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fbe1 	bl	8007644 <TIM_OC6_SetConfig>
      break;
 8006e82:	e002      	b.n	8006e8a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0b6      	b.n	8007026 <HAL_TIM_ConfigClockSource+0x18a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef4:	d03e      	beq.n	8006f74 <HAL_TIM_ConfigClockSource+0xd8>
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efa:	f200 8087 	bhi.w	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f02:	f000 8086 	beq.w	8007012 <HAL_TIM_ConfigClockSource+0x176>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	d87f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f0c:	2b70      	cmp	r3, #112	; 0x70
 8006f0e:	d01a      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0xaa>
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d87b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f14:	2b60      	cmp	r3, #96	; 0x60
 8006f16:	d050      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x11e>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d877      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f1c:	2b50      	cmp	r3, #80	; 0x50
 8006f1e:	d03c      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0xfe>
 8006f20:	2b50      	cmp	r3, #80	; 0x50
 8006f22:	d873      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d058      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x13e>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d86f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d064      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15e>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d86b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d060      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15e>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d867      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x170>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d05c      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15e>
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d05a      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15e>
 8006f44:	e062      	b.n	800700c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f56:	f000 fc55 	bl	8007804 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	609a      	str	r2, [r3, #8]
      break;
 8006f72:	e04f      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f84:	f000 fc3e 	bl	8007804 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f96:	609a      	str	r2, [r3, #8]
      break;
 8006f98:	e03c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 fbb2 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2150      	movs	r1, #80	; 0x50
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fc0b 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8006fb8:	e02c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 fbd1 	bl	800776e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2160      	movs	r1, #96	; 0x60
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fbfb 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e01c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 fb92 	bl	8007710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2140      	movs	r1, #64	; 0x40
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fbeb 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 8006ff8:	e00c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 fbe2 	bl	80077ce <TIM_ITRx_SetConfig>
      break;
 800700a:	e003      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e000      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a40      	ldr	r2, [pc, #256]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d00f      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3c      	ldr	r2, [pc, #240]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <TIM_Base_SetConfig+0x120>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d108      	bne.n	8007082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2f      	ldr	r2, [pc, #188]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01f      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d01b      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2c      	ldr	r2, [pc, #176]	; (8007148 <TIM_Base_SetConfig+0x118>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d017      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <TIM_Base_SetConfig+0x11c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <TIM_Base_SetConfig+0x120>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00f      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <TIM_Base_SetConfig+0x124>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00b      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <TIM_Base_SetConfig+0x128>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <TIM_Base_SetConfig+0x12c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_Base_SetConfig+0x9a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a26      	ldr	r2, [pc, #152]	; (8007160 <TIM_Base_SetConfig+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d108      	bne.n	80070dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a10      	ldr	r2, [pc, #64]	; (8007144 <TIM_Base_SetConfig+0x114>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a12      	ldr	r2, [pc, #72]	; (8007154 <TIM_Base_SetConfig+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a11      	ldr	r2, [pc, #68]	; (8007158 <TIM_Base_SetConfig+0x128>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <TIM_Base_SetConfig+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0xf8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <TIM_Base_SetConfig+0x130>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d103      	bne.n	8007130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	615a      	str	r2, [r3, #20]
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40013400 	.word	0x40013400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f023 0201 	bic.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 0302 	bic.w	r3, r3, #2
 80071b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <TIM_OC1_SetConfig+0x10c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_OC1_SetConfig+0x80>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <TIM_OC1_SetConfig+0x110>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_OC1_SetConfig+0x80>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <TIM_OC1_SetConfig+0x114>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_OC1_SetConfig+0x80>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a29      	ldr	r2, [pc, #164]	; (800727c <TIM_OC1_SetConfig+0x118>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC1_SetConfig+0x80>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a28      	ldr	r2, [pc, #160]	; (8007280 <TIM_OC1_SetConfig+0x11c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10c      	bne.n	80071fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0308 	bic.w	r3, r3, #8
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 0304 	bic.w	r3, r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <TIM_OC1_SetConfig+0x10c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00f      	beq.n	8007226 <TIM_OC1_SetConfig+0xc2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1a      	ldr	r2, [pc, #104]	; (8007274 <TIM_OC1_SetConfig+0x110>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00b      	beq.n	8007226 <TIM_OC1_SetConfig+0xc2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <TIM_OC1_SetConfig+0x114>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d007      	beq.n	8007226 <TIM_OC1_SetConfig+0xc2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <TIM_OC1_SetConfig+0x118>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_OC1_SetConfig+0xc2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a17      	ldr	r2, [pc, #92]	; (8007280 <TIM_OC1_SetConfig+0x11c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d111      	bne.n	800724a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	621a      	str	r2, [r3, #32]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40013400 	.word	0x40013400
 8007278:	40014000 	.word	0x40014000
 800727c:	40014400 	.word	0x40014400
 8007280:	40014800 	.word	0x40014800

08007284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f023 0210 	bic.w	r2, r3, #16
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0320 	bic.w	r3, r3, #32
 80072d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a28      	ldr	r2, [pc, #160]	; (8007384 <TIM_OC2_SetConfig+0x100>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_OC2_SetConfig+0x6c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <TIM_OC2_SetConfig+0x104>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10d      	bne.n	800730c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1d      	ldr	r2, [pc, #116]	; (8007384 <TIM_OC2_SetConfig+0x100>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00f      	beq.n	8007334 <TIM_OC2_SetConfig+0xb0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <TIM_OC2_SetConfig+0x104>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00b      	beq.n	8007334 <TIM_OC2_SetConfig+0xb0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1b      	ldr	r2, [pc, #108]	; (800738c <TIM_OC2_SetConfig+0x108>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d007      	beq.n	8007334 <TIM_OC2_SetConfig+0xb0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <TIM_OC2_SetConfig+0x10c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_OC2_SetConfig+0xb0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a19      	ldr	r2, [pc, #100]	; (8007394 <TIM_OC2_SetConfig+0x110>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d113      	bne.n	800735c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800733a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800

08007398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a27      	ldr	r2, [pc, #156]	; (8007494 <TIM_OC3_SetConfig+0xfc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC3_SetConfig+0x6a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a26      	ldr	r2, [pc, #152]	; (8007498 <TIM_OC3_SetConfig+0x100>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d10d      	bne.n	800741e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <TIM_OC3_SetConfig+0xfc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00f      	beq.n	8007446 <TIM_OC3_SetConfig+0xae>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <TIM_OC3_SetConfig+0x100>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00b      	beq.n	8007446 <TIM_OC3_SetConfig+0xae>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1a      	ldr	r2, [pc, #104]	; (800749c <TIM_OC3_SetConfig+0x104>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d007      	beq.n	8007446 <TIM_OC3_SetConfig+0xae>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <TIM_OC3_SetConfig+0x108>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_OC3_SetConfig+0xae>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a18      	ldr	r2, [pc, #96]	; (80074a4 <TIM_OC3_SetConfig+0x10c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d113      	bne.n	800746e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <TIM_OC4_SetConfig+0xc0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00f      	beq.n	800752c <TIM_OC4_SetConfig+0x84>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a17      	ldr	r2, [pc, #92]	; (800756c <TIM_OC4_SetConfig+0xc4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00b      	beq.n	800752c <TIM_OC4_SetConfig+0x84>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a16      	ldr	r2, [pc, #88]	; (8007570 <TIM_OC4_SetConfig+0xc8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <TIM_OC4_SetConfig+0x84>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a15      	ldr	r2, [pc, #84]	; (8007574 <TIM_OC4_SetConfig+0xcc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC4_SetConfig+0x84>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a14      	ldr	r2, [pc, #80]	; (8007578 <TIM_OC4_SetConfig+0xd0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d109      	bne.n	8007540 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40012c00 	.word	0x40012c00
 800756c:	40013400 	.word	0x40013400
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800

0800757c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a17      	ldr	r2, [pc, #92]	; (8007630 <TIM_OC5_SetConfig+0xb4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_OC5_SetConfig+0x7a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <TIM_OC5_SetConfig+0xb8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_OC5_SetConfig+0x7a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <TIM_OC5_SetConfig+0xbc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_OC5_SetConfig+0x7a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a14      	ldr	r2, [pc, #80]	; (800763c <TIM_OC5_SetConfig+0xc0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC5_SetConfig+0x7a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a13      	ldr	r2, [pc, #76]	; (8007640 <TIM_OC5_SetConfig+0xc4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d109      	bne.n	800760a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	621a      	str	r2, [r3, #32]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	40012c00 	.word	0x40012c00
 8007634:	40013400 	.word	0x40013400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800768a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	051b      	lsls	r3, r3, #20
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a18      	ldr	r2, [pc, #96]	; (80076fc <TIM_OC6_SetConfig+0xb8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00f      	beq.n	80076c0 <TIM_OC6_SetConfig+0x7c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a17      	ldr	r2, [pc, #92]	; (8007700 <TIM_OC6_SetConfig+0xbc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_OC6_SetConfig+0x7c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <TIM_OC6_SetConfig+0xc0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_OC6_SetConfig+0x7c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <TIM_OC6_SetConfig+0xc4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_OC6_SetConfig+0x7c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a14      	ldr	r2, [pc, #80]	; (800770c <TIM_OC6_SetConfig+0xc8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d109      	bne.n	80076d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400
 8007704:	40014000 	.word	0x40014000
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800773a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 030a 	bic.w	r3, r3, #10
 800774c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	621a      	str	r2, [r3, #32]
}
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776e:	b480      	push	{r7}
 8007770:	b087      	sub	sp, #28
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f023 0210 	bic.w	r2, r3, #16
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	031b      	lsls	r3, r3, #12
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	621a      	str	r2, [r3, #32]
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f043 0307 	orr.w	r3, r3, #7
 80077f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	609a      	str	r2, [r3, #8]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800781e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	021a      	lsls	r2, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	431a      	orrs	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	609a      	str	r2, [r3, #8]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007858:	2302      	movs	r3, #2
 800785a:	e068      	b.n	800792e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a2e      	ldr	r2, [pc, #184]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d004      	beq.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a2d      	ldr	r2, [pc, #180]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d108      	bne.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1e      	ldr	r2, [pc, #120]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d01d      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d018      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00e      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a18      	ldr	r2, [pc, #96]	; (800794c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d009      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d004      	beq.n	8007902 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a14      	ldr	r2, [pc, #80]	; (8007950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d10c      	bne.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4313      	orrs	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00
 8007940:	40013400 	.word	0x40013400
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40014000 	.word	0x40014000

08007954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800796c:	2302      	movs	r3, #2
 800796e:	e065      	b.n	8007a3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a14      	ldr	r2, [pc, #80]	; (8007a4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d115      	bne.n	8007a2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	051b      	lsls	r3, r3, #20
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40013400 	.word	0x40013400

08007a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e042      	b.n	8007ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7f9 fe5b 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2224      	movs	r2, #36	; 0x24
 8007a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0201 	bic.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb24 	bl	80080e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f825 	bl	8007af0 <UART_SetConfig>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e01b      	b.n	8007ae8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fba3 	bl	800822c <UART_CheckIdleState>
 8007ae6:	4603      	mov	r3, r0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007af4:	b08c      	sub	sp, #48	; 0x30
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4baa      	ldr	r3, [pc, #680]	; (8007dc8 <UART_SetConfig+0x2d8>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a9f      	ldr	r2, [pc, #636]	; (8007dcc <UART_SetConfig+0x2dc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	f023 010f 	bic.w	r1, r3, #15
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a90      	ldr	r2, [pc, #576]	; (8007dd0 <UART_SetConfig+0x2e0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d125      	bne.n	8007be0 <UART_SetConfig+0xf0>
 8007b94:	4b8f      	ldr	r3, [pc, #572]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d81a      	bhi.n	8007bd8 <UART_SetConfig+0xe8>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0xb8>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e116      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e112      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e10e      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e10a      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bde:	e106      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a7c      	ldr	r2, [pc, #496]	; (8007dd8 <UART_SetConfig+0x2e8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d138      	bne.n	8007c5c <UART_SetConfig+0x16c>
 8007bea:	4b7a      	ldr	r3, [pc, #488]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	f003 030c 	and.w	r3, r3, #12
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d82d      	bhi.n	8007c54 <UART_SetConfig+0x164>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x110>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c35 	.word	0x08007c35
 8007c04:	08007c55 	.word	0x08007c55
 8007c08:	08007c55 	.word	0x08007c55
 8007c0c:	08007c55 	.word	0x08007c55
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c55 	.word	0x08007c55
 8007c18:	08007c55 	.word	0x08007c55
 8007c1c:	08007c55 	.word	0x08007c55
 8007c20:	08007c3d 	.word	0x08007c3d
 8007c24:	08007c55 	.word	0x08007c55
 8007c28:	08007c55 	.word	0x08007c55
 8007c2c:	08007c55 	.word	0x08007c55
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3a:	e0d8      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c42:	e0d4      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c44:	2304      	movs	r3, #4
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4a:	e0d0      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c52:	e0cc      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e0c8      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a5e      	ldr	r2, [pc, #376]	; (8007ddc <UART_SetConfig+0x2ec>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d125      	bne.n	8007cb2 <UART_SetConfig+0x1c2>
 8007c66:	4b5b      	ldr	r3, [pc, #364]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c70:	2b30      	cmp	r3, #48	; 0x30
 8007c72:	d016      	beq.n	8007ca2 <UART_SetConfig+0x1b2>
 8007c74:	2b30      	cmp	r3, #48	; 0x30
 8007c76:	d818      	bhi.n	8007caa <UART_SetConfig+0x1ba>
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d00a      	beq.n	8007c92 <UART_SetConfig+0x1a2>
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d814      	bhi.n	8007caa <UART_SetConfig+0x1ba>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <UART_SetConfig+0x19a>
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d008      	beq.n	8007c9a <UART_SetConfig+0x1aa>
 8007c88:	e00f      	b.n	8007caa <UART_SetConfig+0x1ba>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c90:	e0ad      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c92:	2302      	movs	r3, #2
 8007c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c98:	e0a9      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca0:	e0a5      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca8:	e0a1      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007caa:	2310      	movs	r3, #16
 8007cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb0:	e09d      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a4a      	ldr	r2, [pc, #296]	; (8007de0 <UART_SetConfig+0x2f0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d125      	bne.n	8007d08 <UART_SetConfig+0x218>
 8007cbc:	4b45      	ldr	r3, [pc, #276]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc8:	d016      	beq.n	8007cf8 <UART_SetConfig+0x208>
 8007cca:	2bc0      	cmp	r3, #192	; 0xc0
 8007ccc:	d818      	bhi.n	8007d00 <UART_SetConfig+0x210>
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d00a      	beq.n	8007ce8 <UART_SetConfig+0x1f8>
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d814      	bhi.n	8007d00 <UART_SetConfig+0x210>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <UART_SetConfig+0x1f0>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d008      	beq.n	8007cf0 <UART_SetConfig+0x200>
 8007cde:	e00f      	b.n	8007d00 <UART_SetConfig+0x210>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e082      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e07e      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e07a      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e076      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d06:	e072      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a35      	ldr	r2, [pc, #212]	; (8007de4 <UART_SetConfig+0x2f4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d12a      	bne.n	8007d68 <UART_SetConfig+0x278>
 8007d12:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d20:	d01a      	beq.n	8007d58 <UART_SetConfig+0x268>
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d81b      	bhi.n	8007d60 <UART_SetConfig+0x270>
 8007d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2c:	d00c      	beq.n	8007d48 <UART_SetConfig+0x258>
 8007d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d32:	d815      	bhi.n	8007d60 <UART_SetConfig+0x270>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <UART_SetConfig+0x250>
 8007d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3c:	d008      	beq.n	8007d50 <UART_SetConfig+0x260>
 8007d3e:	e00f      	b.n	8007d60 <UART_SetConfig+0x270>
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e052      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e04e      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e04a      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e046      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e042      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <UART_SetConfig+0x2dc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d13a      	bne.n	8007de8 <UART_SetConfig+0x2f8>
 8007d72:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <UART_SetConfig+0x2e4>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d80:	d01a      	beq.n	8007db8 <UART_SetConfig+0x2c8>
 8007d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d86:	d81b      	bhi.n	8007dc0 <UART_SetConfig+0x2d0>
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8c:	d00c      	beq.n	8007da8 <UART_SetConfig+0x2b8>
 8007d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d92:	d815      	bhi.n	8007dc0 <UART_SetConfig+0x2d0>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <UART_SetConfig+0x2b0>
 8007d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9c:	d008      	beq.n	8007db0 <UART_SetConfig+0x2c0>
 8007d9e:	e00f      	b.n	8007dc0 <UART_SetConfig+0x2d0>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da6:	e022      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dae:	e01e      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db6:	e01a      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dbe:	e016      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc6:	e012      	b.n	8007dee <UART_SetConfig+0x2fe>
 8007dc8:	cfff69f3 	.word	0xcfff69f3
 8007dcc:	40008000 	.word	0x40008000
 8007dd0:	40013800 	.word	0x40013800
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40004400 	.word	0x40004400
 8007ddc:	40004800 	.word	0x40004800
 8007de0:	40004c00 	.word	0x40004c00
 8007de4:	40005000 	.word	0x40005000
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4aae      	ldr	r2, [pc, #696]	; (80080ac <UART_SetConfig+0x5bc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	f040 8097 	bne.w	8007f28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d823      	bhi.n	8007e4a <UART_SetConfig+0x35a>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x318>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e35 	.word	0x08007e35
 8007e14:	08007e4b 	.word	0x08007e4b
 8007e18:	08007e3b 	.word	0x08007e3b
 8007e1c:	08007e4b 	.word	0x08007e4b
 8007e20:	08007e4b 	.word	0x08007e4b
 8007e24:	08007e4b 	.word	0x08007e4b
 8007e28:	08007e43 	.word	0x08007e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f7fc fcdc 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8007e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e32:	e010      	b.n	8007e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e34:	4b9e      	ldr	r3, [pc, #632]	; (80080b0 <UART_SetConfig+0x5c0>)
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e38:	e00d      	b.n	8007e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3a:	f7fc fc3d 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8007e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e40:	e009      	b.n	8007e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e48:	e005      	b.n	8007e56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8130 	beq.w	80080be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	4a94      	ldr	r2, [pc, #592]	; (80080b4 <UART_SetConfig+0x5c4>)
 8007e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d305      	bcc.n	8007e8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e94:	e113      	b.n	80080be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	2200      	movs	r2, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
 8007e9c:	60fa      	str	r2, [r7, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	4a84      	ldr	r2, [pc, #528]	; (80080b4 <UART_SetConfig+0x5c4>)
 8007ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2200      	movs	r2, #0
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eb8:	f7f8 fbac 	bl	8000614 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	020b      	lsls	r3, r1, #8
 8007ece:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ed2:	0202      	lsls	r2, r0, #8
 8007ed4:	6979      	ldr	r1, [r7, #20]
 8007ed6:	6849      	ldr	r1, [r1, #4]
 8007ed8:	0849      	lsrs	r1, r1, #1
 8007eda:	2000      	movs	r0, #0
 8007edc:	460c      	mov	r4, r1
 8007ede:	4605      	mov	r5, r0
 8007ee0:	eb12 0804 	adds.w	r8, r2, r4
 8007ee4:	eb43 0905 	adc.w	r9, r3, r5
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	469a      	mov	sl, r3
 8007ef0:	4693      	mov	fp, r2
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	465b      	mov	r3, fp
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 fb8b 	bl	8000614 <__aeabi_uldivmod>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4613      	mov	r3, r2
 8007f04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f0c:	d308      	bcc.n	8007f20 <UART_SetConfig+0x430>
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f14:	d204      	bcs.n	8007f20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	e0ce      	b.n	80080be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f26:	e0ca      	b.n	80080be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f30:	d166      	bne.n	8008000 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d827      	bhi.n	8007f8a <UART_SetConfig+0x49a>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <UART_SetConfig+0x450>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f65 	.word	0x08007f65
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	08007f8b 	.word	0x08007f8b
 8007f50:	08007f7b 	.word	0x08007f7b
 8007f54:	08007f8b 	.word	0x08007f8b
 8007f58:	08007f8b 	.word	0x08007f8b
 8007f5c:	08007f8b 	.word	0x08007f8b
 8007f60:	08007f83 	.word	0x08007f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f64:	f7fc fc40 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f6a:	e014      	b.n	8007f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f6c:	f7fc fc52 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f72:	e010      	b.n	8007f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f74:	4b4e      	ldr	r3, [pc, #312]	; (80080b0 <UART_SetConfig+0x5c0>)
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f78:	e00d      	b.n	8007f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7a:	f7fc fb9d 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8007f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f80:	e009      	b.n	8007f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f88:	e005      	b.n	8007f96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 8090 	beq.w	80080be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	4a44      	ldr	r2, [pc, #272]	; (80080b4 <UART_SetConfig+0x5c4>)
 8007fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fb0:	005a      	lsls	r2, r3, #1
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	441a      	add	r2, r3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d916      	bls.n	8007ff8 <UART_SetConfig+0x508>
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd0:	d212      	bcs.n	8007ff8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f023 030f 	bic.w	r3, r3, #15
 8007fda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	8bfb      	ldrh	r3, [r7, #30]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	8bfa      	ldrh	r2, [r7, #30]
 8007ff4:	60da      	str	r2, [r3, #12]
 8007ff6:	e062      	b.n	80080be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ffe:	e05e      	b.n	80080be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008004:	2b08      	cmp	r3, #8
 8008006:	d828      	bhi.n	800805a <UART_SetConfig+0x56a>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0x520>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008035 	.word	0x08008035
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008045 	.word	0x08008045
 800801c:	0800805b 	.word	0x0800805b
 8008020:	0800804b 	.word	0x0800804b
 8008024:	0800805b 	.word	0x0800805b
 8008028:	0800805b 	.word	0x0800805b
 800802c:	0800805b 	.word	0x0800805b
 8008030:	08008053 	.word	0x08008053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008034:	f7fc fbd8 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800803a:	e014      	b.n	8008066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800803c:	f7fc fbea 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008042:	e010      	b.n	8008066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <UART_SetConfig+0x5c0>)
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008048:	e00d      	b.n	8008066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804a:	f7fc fb35 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008050:	e009      	b.n	8008066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008058:	e005      	b.n	8008066 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008064:	bf00      	nop
    }

    if (pclk != 0U)
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	d028      	beq.n	80080be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	4a10      	ldr	r2, [pc, #64]	; (80080b4 <UART_SetConfig+0x5c4>)
 8008072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008076:	461a      	mov	r2, r3
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	fbb3 f2f2 	udiv	r2, r3, r2
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	085b      	lsrs	r3, r3, #1
 8008084:	441a      	add	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	2b0f      	cmp	r3, #15
 8008094:	d910      	bls.n	80080b8 <UART_SetConfig+0x5c8>
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800809c:	d20c      	bcs.n	80080b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60da      	str	r2, [r3, #12]
 80080a8:	e009      	b.n	80080be <UART_SetConfig+0x5ce>
 80080aa:	bf00      	nop
 80080ac:	40008000 	.word	0x40008000
 80080b0:	00f42400 	.word	0x00f42400
 80080b4:	08009bf4 	.word	0x08009bf4
      }
      else
      {
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2200      	movs	r2, #0
 80080d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3730      	adds	r7, #48	; 0x30
 80080e2:	46bd      	mov	sp, r7
 80080e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080080e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01a      	beq.n	80081fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e6:	d10a      	bne.n	80081fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	605a      	str	r2, [r3, #4]
  }
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b098      	sub	sp, #96	; 0x60
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800823c:	f7f9 fc92 	bl	8001b64 <HAL_GetTick>
 8008240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b08      	cmp	r3, #8
 800824e:	d12f      	bne.n	80082b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008258:	2200      	movs	r2, #0
 800825a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f88e 	bl	8008380 <UART_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d022      	beq.n	80082b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827e:	653b      	str	r3, [r7, #80]	; 0x50
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
 800828a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800828e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e063      	b.n	8008378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d149      	bne.n	8008352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c6:	2200      	movs	r2, #0
 80082c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f857 	bl	8008380 <UART_WaitOnFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d03c      	beq.n	8008352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	623b      	str	r3, [r7, #32]
   return(result);
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f6:	633b      	str	r3, [r7, #48]	; 0x30
 80082f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e6      	bne.n	80082d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	60fb      	str	r3, [r7, #12]
   return(result);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	64bb      	str	r3, [r7, #72]	; 0x48
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832a:	61fa      	str	r2, [r7, #28]
 800832c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	69b9      	ldr	r1, [r7, #24]
 8008330:	69fa      	ldr	r2, [r7, #28]
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	617b      	str	r3, [r7, #20]
   return(result);
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e012      	b.n	8008378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3758      	adds	r7, #88	; 0x58
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008390:	e049      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d045      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839a:	f7f9 fbe3 	bl	8001b64 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d302      	bcc.n	80083b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e048      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d031      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d110      	bne.n	80083f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2208      	movs	r2, #8
 80083d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f838 	bl	800844e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2208      	movs	r2, #8
 80083e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e029      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008400:	d111      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800840a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f81e 	bl	800844e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e00f      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69da      	ldr	r2, [r3, #28]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4013      	ands	r3, r2
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	bf0c      	ite	eq
 8008436:	2301      	moveq	r3, #1
 8008438:	2300      	movne	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	429a      	cmp	r2, r3
 8008442:	d0a6      	beq.n	8008392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800844e:	b480      	push	{r7}
 8008450:	b095      	sub	sp, #84	; 0x54
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
 8008476:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800847a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e6      	bne.n	8008456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	61fb      	str	r3, [r7, #28]
   return(result);
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e3      	bne.n	8008488 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d118      	bne.n	80084fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6979      	ldr	r1, [r7, #20]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	613b      	str	r3, [r7, #16]
   return(result);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800850e:	bf00      	nop
 8008510:	3754      	adds	r7, #84	; 0x54
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_UARTEx_DisableFifoMode+0x16>
 800852c:	2302      	movs	r3, #2
 800852e:	e027      	b.n	8008580 <HAL_UARTEx_DisableFifoMode+0x66>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	; 0x24
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800855e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e02d      	b.n	8008600 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	; 0x24
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f84f 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800861c:	2302      	movs	r3, #2
 800861e:	e02d      	b.n	800867c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2224      	movs	r2, #36	; 0x24
 800862c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f811 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	2b00      	cmp	r3, #0
 8008692:	d108      	bne.n	80086a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086a4:	e031      	b.n	800870a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086a6:	2308      	movs	r3, #8
 80086a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086aa:	2308      	movs	r3, #8
 80086ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	0e5b      	lsrs	r3, r3, #25
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0f5b      	lsrs	r3, r3, #29
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	7b3a      	ldrb	r2, [r7, #12]
 80086d2:	4911      	ldr	r1, [pc, #68]	; (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086d4:	5c8a      	ldrb	r2, [r1, r2]
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086da:	7b3a      	ldrb	r2, [r7, #12]
 80086dc:	490f      	ldr	r1, [pc, #60]	; (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	7b7a      	ldrb	r2, [r7, #13]
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086f2:	5c8a      	ldrb	r2, [r1, r2]
 80086f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086f8:	7b7a      	ldrb	r2, [r7, #13]
 80086fa:	4908      	ldr	r1, [pc, #32]	; (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	08009c0c 	.word	0x08009c0c
 800871c:	08009c14 	.word	0x08009c14

08008720 <arm_max_f32>:
 8008720:	f101 3cff 	add.w	ip, r1, #4294967295
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	4607      	mov	r7, r0
 8008728:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800872c:	ecf7 7a01 	vldmia	r7!, {s15}
 8008730:	d060      	beq.n	80087f4 <arm_max_f32+0xd4>
 8008732:	2400      	movs	r4, #0
 8008734:	3014      	adds	r0, #20
 8008736:	4625      	mov	r5, r4
 8008738:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800873c:	ed10 7a04 	vldr	s14, [r0, #-16]
 8008740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	bf48      	it	mi
 800874a:	eef0 7a47 	vmovmi.f32	s15, s14
 800874e:	ed10 7a03 	vldr	s14, [r0, #-12]
 8008752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008756:	bf48      	it	mi
 8008758:	1c65      	addmi	r5, r4, #1
 800875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875e:	bf48      	it	mi
 8008760:	eef0 7a47 	vmovmi.f32	s15, s14
 8008764:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800876c:	bf48      	it	mi
 800876e:	1ca5      	addmi	r5, r4, #2
 8008770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008774:	bf48      	it	mi
 8008776:	eef0 7a47 	vmovmi.f32	s15, s14
 800877a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800877e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008782:	bf48      	it	mi
 8008784:	1ce5      	addmi	r5, r4, #3
 8008786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878a:	f104 0404 	add.w	r4, r4, #4
 800878e:	bf44      	itt	mi
 8008790:	eef0 7a47 	vmovmi.f32	s15, s14
 8008794:	4625      	movmi	r5, r4
 8008796:	42a6      	cmp	r6, r4
 8008798:	f100 0010 	add.w	r0, r0, #16
 800879c:	d1ce      	bne.n	800873c <arm_max_f32+0x1c>
 800879e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80087a2:	f01c 0003 	ands.w	r0, ip, #3
 80087a6:	d021      	beq.n	80087ec <arm_max_f32+0xcc>
 80087a8:	ed97 7a00 	vldr	s14, [r7]
 80087ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	bfc4      	itt	gt
 80087b6:	eef0 7a47 	vmovgt.f32	s15, s14
 80087ba:	1a0d      	subgt	r5, r1, r0
 80087bc:	3801      	subs	r0, #1
 80087be:	d015      	beq.n	80087ec <arm_max_f32+0xcc>
 80087c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80087c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087cc:	bf44      	itt	mi
 80087ce:	eef0 7a47 	vmovmi.f32	s15, s14
 80087d2:	1a0d      	submi	r5, r1, r0
 80087d4:	2801      	cmp	r0, #1
 80087d6:	d009      	beq.n	80087ec <arm_max_f32+0xcc>
 80087d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80087dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e4:	bfc4      	itt	gt
 80087e6:	eef0 7a47 	vmovgt.f32	s15, s14
 80087ea:	4665      	movgt	r5, ip
 80087ec:	edc2 7a00 	vstr	s15, [r2]
 80087f0:	601d      	str	r5, [r3, #0]
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	4675      	mov	r5, lr
 80087f6:	e7d4      	b.n	80087a2 <arm_max_f32+0x82>

080087f8 <arm_rfft_32_fast_init_f32>:
 80087f8:	b178      	cbz	r0, 800881a <arm_rfft_32_fast_init_f32+0x22>
 80087fa:	b430      	push	{r4, r5}
 80087fc:	4908      	ldr	r1, [pc, #32]	; (8008820 <arm_rfft_32_fast_init_f32+0x28>)
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <arm_rfft_32_fast_init_f32+0x2c>)
 8008800:	2310      	movs	r3, #16
 8008802:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008806:	8003      	strh	r3, [r0, #0]
 8008808:	2520      	movs	r5, #32
 800880a:	2414      	movs	r4, #20
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <arm_rfft_32_fast_init_f32+0x30>)
 800880e:	8205      	strh	r5, [r0, #16]
 8008810:	8184      	strh	r4, [r0, #12]
 8008812:	6143      	str	r3, [r0, #20]
 8008814:	bc30      	pop	{r4, r5}
 8008816:	2000      	movs	r0, #0
 8008818:	4770      	bx	lr
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	4770      	bx	lr
 8008820:	0800abcc 	.word	0x0800abcc
 8008824:	0800f504 	.word	0x0800f504
 8008828:	08018284 	.word	0x08018284

0800882c <arm_rfft_64_fast_init_f32>:
 800882c:	b178      	cbz	r0, 800884e <arm_rfft_64_fast_init_f32+0x22>
 800882e:	b430      	push	{r4, r5}
 8008830:	4908      	ldr	r1, [pc, #32]	; (8008854 <arm_rfft_64_fast_init_f32+0x28>)
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <arm_rfft_64_fast_init_f32+0x2c>)
 8008834:	2320      	movs	r3, #32
 8008836:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800883a:	8003      	strh	r3, [r0, #0]
 800883c:	2540      	movs	r5, #64	; 0x40
 800883e:	2430      	movs	r4, #48	; 0x30
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <arm_rfft_64_fast_init_f32+0x30>)
 8008842:	8205      	strh	r5, [r0, #16]
 8008844:	8184      	strh	r4, [r0, #12]
 8008846:	6143      	str	r3, [r0, #20]
 8008848:	bc30      	pop	{r4, r5}
 800884a:	2000      	movs	r0, #0
 800884c:	4770      	bx	lr
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	4770      	bx	lr
 8008854:	0800cd24 	.word	0x0800cd24
 8008858:	08013d84 	.word	0x08013d84
 800885c:	0801cb04 	.word	0x0801cb04

08008860 <arm_rfft_256_fast_init_f32>:
 8008860:	b180      	cbz	r0, 8008884 <arm_rfft_256_fast_init_f32+0x24>
 8008862:	b430      	push	{r4, r5}
 8008864:	4909      	ldr	r1, [pc, #36]	; (800888c <arm_rfft_256_fast_init_f32+0x2c>)
 8008866:	4a0a      	ldr	r2, [pc, #40]	; (8008890 <arm_rfft_256_fast_init_f32+0x30>)
 8008868:	2380      	movs	r3, #128	; 0x80
 800886a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800886e:	8003      	strh	r3, [r0, #0]
 8008870:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008874:	24d0      	movs	r4, #208	; 0xd0
 8008876:	4b07      	ldr	r3, [pc, #28]	; (8008894 <arm_rfft_256_fast_init_f32+0x34>)
 8008878:	8205      	strh	r5, [r0, #16]
 800887a:	8184      	strh	r4, [r0, #12]
 800887c:	6143      	str	r3, [r0, #20]
 800887e:	bc30      	pop	{r4, r5}
 8008880:	2000      	movs	r0, #0
 8008882:	4770      	bx	lr
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	0800aa2c 	.word	0x0800aa2c
 8008890:	0800f104 	.word	0x0800f104
 8008894:	08017e84 	.word	0x08017e84

08008898 <arm_rfft_512_fast_init_f32>:
 8008898:	b190      	cbz	r0, 80088c0 <arm_rfft_512_fast_init_f32+0x28>
 800889a:	b430      	push	{r4, r5}
 800889c:	490a      	ldr	r1, [pc, #40]	; (80088c8 <arm_rfft_512_fast_init_f32+0x30>)
 800889e:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <arm_rfft_512_fast_init_f32+0x34>)
 80088a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80088a8:	8003      	strh	r3, [r0, #0]
 80088aa:	f44f 7500 	mov.w	r5, #512	; 0x200
 80088ae:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <arm_rfft_512_fast_init_f32+0x38>)
 80088b4:	8205      	strh	r5, [r0, #16]
 80088b6:	8184      	strh	r4, [r0, #12]
 80088b8:	6143      	str	r3, [r0, #20]
 80088ba:	bc30      	pop	{r4, r5}
 80088bc:	2000      	movs	r0, #0
 80088be:	4770      	bx	lr
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	0800c9b4 	.word	0x0800c9b4
 80088cc:	08013584 	.word	0x08013584
 80088d0:	0801c304 	.word	0x0801c304

080088d4 <arm_rfft_1024_fast_init_f32>:
 80088d4:	b190      	cbz	r0, 80088fc <arm_rfft_1024_fast_init_f32+0x28>
 80088d6:	b430      	push	{r4, r5}
 80088d8:	490a      	ldr	r1, [pc, #40]	; (8008904 <arm_rfft_1024_fast_init_f32+0x30>)
 80088da:	4a0b      	ldr	r2, [pc, #44]	; (8008908 <arm_rfft_1024_fast_init_f32+0x34>)
 80088dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80088e4:	8003      	strh	r3, [r0, #0]
 80088e6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80088ea:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <arm_rfft_1024_fast_init_f32+0x38>)
 80088f0:	8205      	strh	r5, [r0, #16]
 80088f2:	8184      	strh	r4, [r0, #12]
 80088f4:	6143      	str	r3, [r0, #20]
 80088f6:	bc30      	pop	{r4, r5}
 80088f8:	2000      	movs	r0, #0
 80088fa:	4770      	bx	lr
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	0800cd84 	.word	0x0800cd84
 8008908:	08013e84 	.word	0x08013e84
 800890c:	08014e84 	.word	0x08014e84

08008910 <arm_rfft_2048_fast_init_f32>:
 8008910:	b190      	cbz	r0, 8008938 <arm_rfft_2048_fast_init_f32+0x28>
 8008912:	b430      	push	{r4, r5}
 8008914:	490a      	ldr	r1, [pc, #40]	; (8008940 <arm_rfft_2048_fast_init_f32+0x30>)
 8008916:	4a0b      	ldr	r2, [pc, #44]	; (8008944 <arm_rfft_2048_fast_init_f32+0x34>)
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008920:	8003      	strh	r3, [r0, #0]
 8008922:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008926:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <arm_rfft_2048_fast_init_f32+0x38>)
 800892c:	8205      	strh	r5, [r0, #16]
 800892e:	8184      	strh	r4, [r0, #12]
 8008930:	6143      	str	r3, [r0, #20]
 8008932:	bc30      	pop	{r4, r5}
 8008934:	2000      	movs	r0, #0
 8008936:	4770      	bx	lr
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	08009c1c 	.word	0x08009c1c
 8008944:	0800d104 	.word	0x0800d104
 8008948:	08015e84 	.word	0x08015e84

0800894c <arm_rfft_4096_fast_init_f32>:
 800894c:	b190      	cbz	r0, 8008974 <arm_rfft_4096_fast_init_f32+0x28>
 800894e:	b430      	push	{r4, r5}
 8008950:	490a      	ldr	r1, [pc, #40]	; (800897c <arm_rfft_4096_fast_init_f32+0x30>)
 8008952:	4a0b      	ldr	r2, [pc, #44]	; (8008980 <arm_rfft_4096_fast_init_f32+0x34>)
 8008954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008958:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800895c:	8003      	strh	r3, [r0, #0]
 800895e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008962:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008966:	4b07      	ldr	r3, [pc, #28]	; (8008984 <arm_rfft_4096_fast_init_f32+0x38>)
 8008968:	8205      	strh	r5, [r0, #16]
 800896a:	8184      	strh	r4, [r0, #12]
 800896c:	6143      	str	r3, [r0, #20]
 800896e:	bc30      	pop	{r4, r5}
 8008970:	2000      	movs	r0, #0
 8008972:	4770      	bx	lr
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	0800abf4 	.word	0x0800abf4
 8008980:	0800f584 	.word	0x0800f584
 8008984:	08018304 	.word	0x08018304

08008988 <arm_rfft_fast_init_f32>:
 8008988:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800898c:	d01f      	beq.n	80089ce <arm_rfft_fast_init_f32+0x46>
 800898e:	d90b      	bls.n	80089a8 <arm_rfft_fast_init_f32+0x20>
 8008990:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008994:	d019      	beq.n	80089ca <arm_rfft_fast_init_f32+0x42>
 8008996:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800899a:	d012      	beq.n	80089c2 <arm_rfft_fast_init_f32+0x3a>
 800899c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089a0:	d00d      	beq.n	80089be <arm_rfft_fast_init_f32+0x36>
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	4770      	bx	lr
 80089a8:	2940      	cmp	r1, #64	; 0x40
 80089aa:	d00c      	beq.n	80089c6 <arm_rfft_fast_init_f32+0x3e>
 80089ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80089b0:	d003      	beq.n	80089ba <arm_rfft_fast_init_f32+0x32>
 80089b2:	2920      	cmp	r1, #32
 80089b4:	d1f5      	bne.n	80089a2 <arm_rfft_fast_init_f32+0x1a>
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <arm_rfft_fast_init_f32+0x4c>)
 80089b8:	4718      	bx	r3
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <arm_rfft_fast_init_f32+0x50>)
 80089bc:	4718      	bx	r3
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <arm_rfft_fast_init_f32+0x54>)
 80089c0:	4718      	bx	r3
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <arm_rfft_fast_init_f32+0x58>)
 80089c4:	4718      	bx	r3
 80089c6:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <arm_rfft_fast_init_f32+0x5c>)
 80089c8:	e7f6      	b.n	80089b8 <arm_rfft_fast_init_f32+0x30>
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <arm_rfft_fast_init_f32+0x60>)
 80089cc:	e7f4      	b.n	80089b8 <arm_rfft_fast_init_f32+0x30>
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <arm_rfft_fast_init_f32+0x64>)
 80089d0:	e7f2      	b.n	80089b8 <arm_rfft_fast_init_f32+0x30>
 80089d2:	bf00      	nop
 80089d4:	080087f9 	.word	0x080087f9
 80089d8:	08008861 	.word	0x08008861
 80089dc:	080088d5 	.word	0x080088d5
 80089e0:	0800894d 	.word	0x0800894d
 80089e4:	0800882d 	.word	0x0800882d
 80089e8:	08008911 	.word	0x08008911
 80089ec:	08008899 	.word	0x08008899

080089f0 <stage_rfft_f32>:
 80089f0:	b410      	push	{r4}
 80089f2:	edd1 7a00 	vldr	s15, [r1]
 80089f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80089fa:	8804      	ldrh	r4, [r0, #0]
 80089fc:	6940      	ldr	r0, [r0, #20]
 80089fe:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008a06:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008a0a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a12:	3c01      	subs	r4, #1
 8008a14:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008a18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008a1c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008a20:	ed82 7a00 	vstr	s14, [r2]
 8008a24:	edc2 7a01 	vstr	s15, [r2, #4]
 8008a28:	3010      	adds	r0, #16
 8008a2a:	3210      	adds	r2, #16
 8008a2c:	3b08      	subs	r3, #8
 8008a2e:	3110      	adds	r1, #16
 8008a30:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008a34:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a38:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008a3c:	edd3 4a03 	vldr	s9, [r3, #12]
 8008a40:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008a44:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008a48:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008a4c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008a50:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008a54:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008a58:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008a5c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008a60:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008a64:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008a68:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008a6c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008a70:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a78:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008a7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008a80:	3c01      	subs	r4, #1
 8008a82:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008a86:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008a8a:	f1a3 0308 	sub.w	r3, r3, #8
 8008a8e:	f101 0108 	add.w	r1, r1, #8
 8008a92:	f100 0008 	add.w	r0, r0, #8
 8008a96:	f102 0208 	add.w	r2, r2, #8
 8008a9a:	d1c9      	bne.n	8008a30 <stage_rfft_f32+0x40>
 8008a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop

08008aa4 <merge_rfft_f32>:
 8008aa4:	b410      	push	{r4}
 8008aa6:	edd1 7a00 	vldr	s15, [r1]
 8008aaa:	edd1 6a01 	vldr	s13, [r1, #4]
 8008aae:	8804      	ldrh	r4, [r0, #0]
 8008ab0:	6940      	ldr	r0, [r0, #20]
 8008ab2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ab6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008aba:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008abe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008ac2:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008ac6:	3c01      	subs	r4, #1
 8008ac8:	ed82 7a00 	vstr	s14, [r2]
 8008acc:	edc2 7a01 	vstr	s15, [r2, #4]
 8008ad0:	b3dc      	cbz	r4, 8008b4a <merge_rfft_f32+0xa6>
 8008ad2:	00e3      	lsls	r3, r4, #3
 8008ad4:	3b08      	subs	r3, #8
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3010      	adds	r0, #16
 8008ada:	3210      	adds	r2, #16
 8008adc:	3110      	adds	r1, #16
 8008ade:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008ae2:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ae6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008aea:	edd3 4a03 	vldr	s9, [r3, #12]
 8008aee:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008af2:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008af6:	ee75 5a47 	vsub.f32	s11, s10, s14
 8008afa:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008afe:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008b02:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008b06:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008b0a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008b0e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008b12:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008b16:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008b1a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008b1e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8008b22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008b2a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008b2e:	3c01      	subs	r4, #1
 8008b30:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008b34:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008b38:	f1a3 0308 	sub.w	r3, r3, #8
 8008b3c:	f101 0108 	add.w	r1, r1, #8
 8008b40:	f100 0008 	add.w	r0, r0, #8
 8008b44:	f102 0208 	add.w	r2, r2, #8
 8008b48:	d1c9      	bne.n	8008ade <merge_rfft_f32+0x3a>
 8008b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <arm_rfft_fast_f32>:
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	8a05      	ldrh	r5, [r0, #16]
 8008b56:	086d      	lsrs	r5, r5, #1
 8008b58:	8005      	strh	r5, [r0, #0]
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	461d      	mov	r5, r3
 8008b60:	b14b      	cbz	r3, 8008b76 <arm_rfft_fast_f32+0x26>
 8008b62:	f7ff ff9f 	bl	8008aa4 <merge_rfft_f32>
 8008b66:	462a      	mov	r2, r5
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	f000 bb33 	b.w	80091dc <arm_cfft_f32>
 8008b76:	460f      	mov	r7, r1
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f000 fb2e 	bl	80091dc <arm_cfft_f32>
 8008b80:	4632      	mov	r2, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	4620      	mov	r0, r4
 8008b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8a:	f7ff bf31 	b.w	80089f0 <stage_rfft_f32>
 8008b8e:	bf00      	nop

08008b90 <arm_cfft_radix8by2_f32>:
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	ed2d 8b08 	vpush	{d8-d11}
 8008b98:	4607      	mov	r7, r0
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	f8b7 c000 	ldrh.w	ip, [r7]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008ba6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8008baa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008bae:	f000 80b0 	beq.w	8008d12 <arm_cfft_radix8by2_f32+0x182>
 8008bb2:	008c      	lsls	r4, r1, #2
 8008bb4:	3410      	adds	r4, #16
 8008bb6:	f100 0310 	add.w	r3, r0, #16
 8008bba:	1906      	adds	r6, r0, r4
 8008bbc:	3210      	adds	r2, #16
 8008bbe:	4444      	add	r4, r8
 8008bc0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8008bc4:	f108 0510 	add.w	r5, r8, #16
 8008bc8:	ed15 2a04 	vldr	s4, [r5, #-16]
 8008bcc:	ed55 2a03 	vldr	s5, [r5, #-12]
 8008bd0:	ed54 4a04 	vldr	s9, [r4, #-16]
 8008bd4:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008bd8:	ed14 6a02 	vldr	s12, [r4, #-8]
 8008bdc:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008be0:	ed53 3a04 	vldr	s7, [r3, #-16]
 8008be4:	ed15 0a02 	vldr	s0, [r5, #-8]
 8008be8:	ed55 0a01 	vldr	s1, [r5, #-4]
 8008bec:	ed56 6a04 	vldr	s13, [r6, #-16]
 8008bf0:	ed16 3a03 	vldr	s6, [r6, #-12]
 8008bf4:	ed13 7a03 	vldr	s14, [r3, #-12]
 8008bf8:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008bfc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008c00:	ed16 1a02 	vldr	s2, [r6, #-8]
 8008c04:	ed56 1a01 	vldr	s3, [r6, #-4]
 8008c08:	ee73 ba82 	vadd.f32	s23, s7, s4
 8008c0c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8008c10:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8008c14:	ee33 9a04 	vadd.f32	s18, s6, s8
 8008c18:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8008c1c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8008c20:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8008c24:	ee71 8a06 	vadd.f32	s17, s2, s12
 8008c28:	ed43 ba04 	vstr	s23, [r3, #-16]
 8008c2c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8008c30:	ed43 aa02 	vstr	s21, [r3, #-8]
 8008c34:	ed03 aa01 	vstr	s20, [r3, #-4]
 8008c38:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008c3c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008c40:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008c44:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008c48:	ee37 7a62 	vsub.f32	s14, s14, s5
 8008c4c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008c50:	ee34 4a43 	vsub.f32	s8, s8, s6
 8008c54:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008c58:	ed12 3a04 	vldr	s6, [r2, #-16]
 8008c5c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008c60:	ee27 8a26 	vmul.f32	s16, s14, s13
 8008c64:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8008c68:	ee23 2a83 	vmul.f32	s4, s7, s6
 8008c6c:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008c70:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8008c74:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008c78:	ee64 6a26 	vmul.f32	s13, s8, s13
 8008c7c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8008c80:	ee37 7a63 	vsub.f32	s14, s14, s7
 8008c84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008c88:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8008c8c:	ee32 3a08 	vadd.f32	s6, s4, s16
 8008c90:	ed05 7a03 	vstr	s14, [r5, #-12]
 8008c94:	ed05 3a04 	vstr	s6, [r5, #-16]
 8008c98:	ed04 4a04 	vstr	s8, [r4, #-16]
 8008c9c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008ca0:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008ca4:	ee76 6a41 	vsub.f32	s13, s12, s2
 8008ca8:	ee35 5a40 	vsub.f32	s10, s10, s0
 8008cac:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8008cb0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008cb4:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008cb8:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008cbc:	ee66 4a87 	vmul.f32	s9, s13, s14
 8008cc0:	ee25 4a25 	vmul.f32	s8, s10, s11
 8008cc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008cc8:	ee25 5a07 	vmul.f32	s10, s10, s14
 8008ccc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008cd0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008cd4:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008cd8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008cdc:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008ce0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8008ce4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008ce8:	3310      	adds	r3, #16
 8008cea:	4563      	cmp	r3, ip
 8008cec:	ed45 5a02 	vstr	s11, [r5, #-8]
 8008cf0:	f106 0610 	add.w	r6, r6, #16
 8008cf4:	ed45 7a01 	vstr	s15, [r5, #-4]
 8008cf8:	f102 0210 	add.w	r2, r2, #16
 8008cfc:	ed04 6a02 	vstr	s12, [r4, #-8]
 8008d00:	ed04 7a01 	vstr	s14, [r4, #-4]
 8008d04:	f105 0510 	add.w	r5, r5, #16
 8008d08:	f104 0410 	add.w	r4, r4, #16
 8008d0c:	f47f af5c 	bne.w	8008bc8 <arm_cfft_radix8by2_f32+0x38>
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	b28c      	uxth	r4, r1
 8008d14:	4621      	mov	r1, r4
 8008d16:	2302      	movs	r3, #2
 8008d18:	f000 fc1c 	bl	8009554 <arm_radix8_butterfly_f32>
 8008d1c:	ecbd 8b08 	vpop	{d8-d11}
 8008d20:	4621      	mov	r1, r4
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4640      	mov	r0, r8
 8008d26:	2302      	movs	r3, #2
 8008d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2c:	f000 bc12 	b.w	8009554 <arm_radix8_butterfly_f32>

08008d30 <arm_cfft_radix8by4_f32>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	ed2d 8b0a 	vpush	{d8-d12}
 8008d38:	b08d      	sub	sp, #52	; 0x34
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d3e:	8801      	ldrh	r1, [r0, #0]
 8008d40:	6842      	ldr	r2, [r0, #4]
 8008d42:	900a      	str	r0, [sp, #40]	; 0x28
 8008d44:	0849      	lsrs	r1, r1, #1
 8008d46:	008b      	lsls	r3, r1, #2
 8008d48:	18ee      	adds	r6, r5, r3
 8008d4a:	18f0      	adds	r0, r6, r3
 8008d4c:	edd0 5a00 	vldr	s11, [r0]
 8008d50:	edd5 7a00 	vldr	s15, [r5]
 8008d54:	ed96 7a00 	vldr	s14, [r6]
 8008d58:	edd0 3a01 	vldr	s7, [r0, #4]
 8008d5c:	ed96 4a01 	vldr	s8, [r6, #4]
 8008d60:	ed95 5a01 	vldr	s10, [r5, #4]
 8008d64:	9008      	str	r0, [sp, #32]
 8008d66:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8008d6a:	18c7      	adds	r7, r0, r3
 8008d6c:	edd7 4a00 	vldr	s9, [r7]
 8008d70:	ed97 3a01 	vldr	s6, [r7, #4]
 8008d74:	9701      	str	r7, [sp, #4]
 8008d76:	ee77 6a06 	vadd.f32	s13, s14, s12
 8008d7a:	462c      	mov	r4, r5
 8008d7c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008d80:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008d84:	ee16 ca90 	vmov	ip, s13
 8008d88:	f844 cb08 	str.w	ip, [r4], #8
 8008d8c:	ee75 6a23 	vadd.f32	s13, s10, s7
 8008d90:	edd6 5a01 	vldr	s11, [r6, #4]
 8008d94:	edd7 2a01 	vldr	s5, [r7, #4]
 8008d98:	9404      	str	r4, [sp, #16]
 8008d9a:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008d9e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8008da2:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008da6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8008daa:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008dae:	0849      	lsrs	r1, r1, #1
 8008db0:	f102 0e08 	add.w	lr, r2, #8
 8008db4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008db8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8008dbe:	ee35 4a47 	vsub.f32	s8, s10, s14
 8008dc2:	f1a1 0902 	sub.w	r9, r1, #2
 8008dc6:	f8cd e00c 	str.w	lr, [sp, #12]
 8008dca:	4631      	mov	r1, r6
 8008dcc:	ee13 ea90 	vmov	lr, s7
 8008dd0:	ee36 6a64 	vsub.f32	s12, s12, s9
 8008dd4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8008dd8:	4604      	mov	r4, r0
 8008dda:	edc5 5a01 	vstr	s11, [r5, #4]
 8008dde:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008de2:	f841 eb08 	str.w	lr, [r1], #8
 8008de6:	ee34 5a24 	vadd.f32	s10, s8, s9
 8008dea:	ee16 ea10 	vmov	lr, s12
 8008dee:	ed86 5a01 	vstr	s10, [r6, #4]
 8008df2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008df6:	f844 eb08 	str.w	lr, [r4], #8
 8008dfa:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008dfe:	edc0 6a01 	vstr	s13, [r0, #4]
 8008e02:	9405      	str	r4, [sp, #20]
 8008e04:	4604      	mov	r4, r0
 8008e06:	ee17 0a90 	vmov	r0, s15
 8008e0a:	9106      	str	r1, [sp, #24]
 8008e0c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008e10:	f102 0110 	add.w	r1, r2, #16
 8008e14:	46bc      	mov	ip, r7
 8008e16:	9100      	str	r1, [sp, #0]
 8008e18:	f847 0b08 	str.w	r0, [r7], #8
 8008e1c:	f102 0118 	add.w	r1, r2, #24
 8008e20:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8008e24:	9102      	str	r1, [sp, #8]
 8008e26:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008e2a:	9007      	str	r0, [sp, #28]
 8008e2c:	f000 8134 	beq.w	8009098 <arm_cfft_radix8by4_f32+0x368>
 8008e30:	f102 0920 	add.w	r9, r2, #32
 8008e34:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	f8dd a000 	ldr.w	sl, [sp]
 8008e3e:	3b0c      	subs	r3, #12
 8008e40:	4683      	mov	fp, r0
 8008e42:	4463      	add	r3, ip
 8008e44:	f105 0e10 	add.w	lr, r5, #16
 8008e48:	f1a4 010c 	sub.w	r1, r4, #12
 8008e4c:	f104 0510 	add.w	r5, r4, #16
 8008e50:	f1a6 0c0c 	sub.w	ip, r6, #12
 8008e54:	f1a2 040c 	sub.w	r4, r2, #12
 8008e58:	f106 0010 	add.w	r0, r6, #16
 8008e5c:	3210      	adds	r2, #16
 8008e5e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8008e62:	ed55 5a02 	vldr	s11, [r5, #-8]
 8008e66:	ed50 7a02 	vldr	s15, [r0, #-8]
 8008e6a:	ed52 1a02 	vldr	s3, [r2, #-8]
 8008e6e:	ed55 6a01 	vldr	s13, [r5, #-4]
 8008e72:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8008e76:	ed12 1a01 	vldr	s2, [r2, #-4]
 8008e7a:	ed10 8a01 	vldr	s16, [r0, #-4]
 8008e7e:	ee35 4a25 	vadd.f32	s8, s10, s11
 8008e82:	ee30 6a26 	vadd.f32	s12, s0, s13
 8008e86:	ee37 7a84 	vadd.f32	s14, s15, s8
 8008e8a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008e8e:	ee37 7a21 	vadd.f32	s14, s14, s3
 8008e92:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008e96:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8008e9a:	ed10 7a01 	vldr	s14, [r0, #-4]
 8008e9e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008ea2:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008ea6:	ee78 aa25 	vadd.f32	s21, s16, s11
 8008eaa:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008eae:	ee70 3a67 	vsub.f32	s7, s0, s15
 8008eb2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8008eb6:	ed94 7a02 	vldr	s14, [r4, #8]
 8008eba:	ed9c 2a02 	vldr	s4, [ip, #8]
 8008ebe:	ed91 ba02 	vldr	s22, [r1, #8]
 8008ec2:	edd3 9a02 	vldr	s19, [r3, #8]
 8008ec6:	edd4 2a01 	vldr	s5, [r4, #4]
 8008eca:	ed9c 9a01 	vldr	s18, [ip, #4]
 8008ece:	ed93 5a01 	vldr	s10, [r3, #4]
 8008ed2:	edd1 0a01 	vldr	s1, [r1, #4]
 8008ed6:	ee72 6a07 	vadd.f32	s13, s4, s14
 8008eda:	ee32 2a47 	vsub.f32	s4, s4, s14
 8008ede:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8008ee2:	ee79 4a22 	vadd.f32	s9, s18, s5
 8008ee6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8008eea:	ee79 2a62 	vsub.f32	s5, s18, s5
 8008eee:	ed8c 7a02 	vstr	s14, [ip, #8]
 8008ef2:	ed91 7a01 	vldr	s14, [r1, #4]
 8008ef6:	edd3 8a01 	vldr	s17, [r3, #4]
 8008efa:	ee34 7a87 	vadd.f32	s14, s9, s14
 8008efe:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8008f02:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008f06:	ee32 9a60 	vsub.f32	s18, s4, s1
 8008f0a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8008f0e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8008f12:	ed1a aa02 	vldr	s20, [sl, #-8]
 8008f16:	ee73 8a22 	vadd.f32	s17, s6, s5
 8008f1a:	ee39 9a05 	vadd.f32	s18, s18, s10
 8008f1e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8008f22:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008f26:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8008f2a:	ee69 ba07 	vmul.f32	s23, s18, s14
 8008f2e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8008f32:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8008f36:	ee63 ca87 	vmul.f32	s25, s7, s14
 8008f3a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8008f3e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8008f42:	ee68 8a87 	vmul.f32	s17, s17, s14
 8008f46:	ee73 3aea 	vsub.f32	s7, s7, s21
 8008f4a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008f4e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8008f52:	ee3b aaca 	vsub.f32	s20, s23, s20
 8008f56:	ee34 4a67 	vsub.f32	s8, s8, s15
 8008f5a:	ee76 6acb 	vsub.f32	s13, s13, s22
 8008f5e:	ee36 6a48 	vsub.f32	s12, s12, s16
 8008f62:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8008f66:	ed00 7a02 	vstr	s14, [r0, #-8]
 8008f6a:	ed40 3a01 	vstr	s7, [r0, #-4]
 8008f6e:	edc1 8a01 	vstr	s17, [r1, #4]
 8008f72:	ed81 aa02 	vstr	s20, [r1, #8]
 8008f76:	ed59 3a04 	vldr	s7, [r9, #-16]
 8008f7a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8008f7e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8008f82:	ed59 6a03 	vldr	s13, [r9, #-12]
 8008f86:	ee34 4a61 	vsub.f32	s8, s8, s3
 8008f8a:	ee36 6a41 	vsub.f32	s12, s12, s2
 8008f8e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8008f92:	ee66 9a26 	vmul.f32	s19, s12, s13
 8008f96:	ee24 9a23 	vmul.f32	s18, s8, s7
 8008f9a:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008f9e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8008fa2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008fa6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8008faa:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8008fae:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008fb2:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008fb6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8008fba:	ee79 3a29 	vadd.f32	s7, s18, s19
 8008fbe:	ee75 6a60 	vsub.f32	s13, s10, s1
 8008fc2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008fc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008fca:	ed45 3a02 	vstr	s7, [r5, #-8]
 8008fce:	ed05 6a01 	vstr	s12, [r5, #-4]
 8008fd2:	ed84 7a01 	vstr	s14, [r4, #4]
 8008fd6:	ed84 4a02 	vstr	s8, [r4, #8]
 8008fda:	ee35 6a81 	vadd.f32	s12, s11, s2
 8008fde:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8008fe2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8008fe6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8008fea:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008fee:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8008ff2:	ee67 2a26 	vmul.f32	s5, s14, s13
 8008ff6:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8008ffa:	ee26 5a25 	vmul.f32	s10, s12, s11
 8008ffe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009002:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009006:	ee27 7a25 	vmul.f32	s14, s14, s11
 800900a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800900e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009012:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009016:	ee75 5a24 	vadd.f32	s11, s10, s9
 800901a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800901e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009022:	f1bb 0b01 	subs.w	fp, fp, #1
 8009026:	ed42 5a02 	vstr	s11, [r2, #-8]
 800902a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800902e:	f10e 0e08 	add.w	lr, lr, #8
 8009032:	ed83 3a02 	vstr	s6, [r3, #8]
 8009036:	ed83 7a01 	vstr	s14, [r3, #4]
 800903a:	f1ac 0c08 	sub.w	ip, ip, #8
 800903e:	f10a 0a08 	add.w	sl, sl, #8
 8009042:	f100 0008 	add.w	r0, r0, #8
 8009046:	f1a1 0108 	sub.w	r1, r1, #8
 800904a:	f109 0910 	add.w	r9, r9, #16
 800904e:	f105 0508 	add.w	r5, r5, #8
 8009052:	f1a4 0408 	sub.w	r4, r4, #8
 8009056:	f108 0818 	add.w	r8, r8, #24
 800905a:	f102 0208 	add.w	r2, r2, #8
 800905e:	f1a3 0308 	sub.w	r3, r3, #8
 8009062:	f47f aefc 	bne.w	8008e5e <arm_cfft_radix8by4_f32+0x12e>
 8009066:	9907      	ldr	r1, [sp, #28]
 8009068:	9800      	ldr	r0, [sp, #0]
 800906a:	00cb      	lsls	r3, r1, #3
 800906c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009070:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009074:	9100      	str	r1, [sp, #0]
 8009076:	9904      	ldr	r1, [sp, #16]
 8009078:	4419      	add	r1, r3
 800907a:	9104      	str	r1, [sp, #16]
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	4419      	add	r1, r3
 8009080:	9103      	str	r1, [sp, #12]
 8009082:	9906      	ldr	r1, [sp, #24]
 8009084:	4419      	add	r1, r3
 8009086:	9106      	str	r1, [sp, #24]
 8009088:	9905      	ldr	r1, [sp, #20]
 800908a:	441f      	add	r7, r3
 800908c:	4419      	add	r1, r3
 800908e:	9b02      	ldr	r3, [sp, #8]
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009096:	9302      	str	r3, [sp, #8]
 8009098:	9904      	ldr	r1, [sp, #16]
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	ed91 4a00 	vldr	s8, [r1]
 80090a0:	edd0 6a00 	vldr	s13, [r0]
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	ed97 3a00 	vldr	s6, [r7]
 80090aa:	edd3 7a00 	vldr	s15, [r3]
 80090ae:	edd0 4a01 	vldr	s9, [r0, #4]
 80090b2:	edd1 3a01 	vldr	s7, [r1, #4]
 80090b6:	ed97 2a01 	vldr	s4, [r7, #4]
 80090ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80090be:	9a03      	ldr	r2, [sp, #12]
 80090c0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80090c4:	ee34 6a26 	vadd.f32	s12, s8, s13
 80090c8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80090cc:	ee37 5a86 	vadd.f32	s10, s15, s12
 80090d0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80090d4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80090d8:	ee74 6a66 	vsub.f32	s13, s8, s13
 80090dc:	ed81 5a00 	vstr	s10, [r1]
 80090e0:	ed93 5a01 	vldr	s10, [r3, #4]
 80090e4:	edd7 4a01 	vldr	s9, [r7, #4]
 80090e8:	ee35 5a85 	vadd.f32	s10, s11, s10
 80090ec:	ee37 4a26 	vadd.f32	s8, s14, s13
 80090f0:	ee35 5a24 	vadd.f32	s10, s10, s9
 80090f4:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80090f8:	ed81 5a01 	vstr	s10, [r1, #4]
 80090fc:	edd2 1a00 	vldr	s3, [r2]
 8009100:	edd2 2a01 	vldr	s5, [r2, #4]
 8009104:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009108:	ee34 4a42 	vsub.f32	s8, s8, s4
 800910c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009110:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009114:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009118:	ee65 2a22 	vmul.f32	s5, s10, s5
 800911c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009120:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009124:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009128:	edc3 2a00 	vstr	s5, [r3]
 800912c:	ed83 5a01 	vstr	s10, [r3, #4]
 8009130:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	ee36 6a43 	vsub.f32	s12, s12, s6
 800913a:	ed93 4a01 	vldr	s8, [r3, #4]
 800913e:	ed93 5a00 	vldr	s10, [r3]
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009148:	ee66 4a05 	vmul.f32	s9, s12, s10
 800914c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009150:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009154:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009158:	ee35 6a46 	vsub.f32	s12, s10, s12
 800915c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009160:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009164:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009168:	ed80 6a01 	vstr	s12, [r0, #4]
 800916c:	edc0 5a00 	vstr	s11, [r0]
 8009170:	edd3 5a01 	vldr	s11, [r3, #4]
 8009174:	edd3 6a00 	vldr	s13, [r3]
 8009178:	ee37 7a02 	vadd.f32	s14, s14, s4
 800917c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009180:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009184:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009188:	ee27 7a25 	vmul.f32	s14, s14, s11
 800918c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009190:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009194:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009198:	ed87 7a01 	vstr	s14, [r7, #4]
 800919c:	edc7 7a00 	vstr	s15, [r7]
 80091a0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80091a4:	4621      	mov	r1, r4
 80091a6:	686a      	ldr	r2, [r5, #4]
 80091a8:	2304      	movs	r3, #4
 80091aa:	f000 f9d3 	bl	8009554 <arm_radix8_butterfly_f32>
 80091ae:	4630      	mov	r0, r6
 80091b0:	4621      	mov	r1, r4
 80091b2:	686a      	ldr	r2, [r5, #4]
 80091b4:	2304      	movs	r3, #4
 80091b6:	f000 f9cd 	bl	8009554 <arm_radix8_butterfly_f32>
 80091ba:	9808      	ldr	r0, [sp, #32]
 80091bc:	686a      	ldr	r2, [r5, #4]
 80091be:	4621      	mov	r1, r4
 80091c0:	2304      	movs	r3, #4
 80091c2:	f000 f9c7 	bl	8009554 <arm_radix8_butterfly_f32>
 80091c6:	686a      	ldr	r2, [r5, #4]
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	4621      	mov	r1, r4
 80091cc:	2304      	movs	r3, #4
 80091ce:	b00d      	add	sp, #52	; 0x34
 80091d0:	ecbd 8b0a 	vpop	{d8-d12}
 80091d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	f000 b9bc 	b.w	8009554 <arm_radix8_butterfly_f32>

080091dc <arm_cfft_f32>:
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	2a01      	cmp	r2, #1
 80091e2:	4606      	mov	r6, r0
 80091e4:	4617      	mov	r7, r2
 80091e6:	460c      	mov	r4, r1
 80091e8:	4698      	mov	r8, r3
 80091ea:	8805      	ldrh	r5, [r0, #0]
 80091ec:	d056      	beq.n	800929c <arm_cfft_f32+0xc0>
 80091ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80091f2:	d063      	beq.n	80092bc <arm_cfft_f32+0xe0>
 80091f4:	d916      	bls.n	8009224 <arm_cfft_f32+0x48>
 80091f6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80091fa:	d01a      	beq.n	8009232 <arm_cfft_f32+0x56>
 80091fc:	d947      	bls.n	800928e <arm_cfft_f32+0xb2>
 80091fe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009202:	d05b      	beq.n	80092bc <arm_cfft_f32+0xe0>
 8009204:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009208:	d105      	bne.n	8009216 <arm_cfft_f32+0x3a>
 800920a:	2301      	movs	r3, #1
 800920c:	6872      	ldr	r2, [r6, #4]
 800920e:	4629      	mov	r1, r5
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f99f 	bl	8009554 <arm_radix8_butterfly_f32>
 8009216:	f1b8 0f00 	cmp.w	r8, #0
 800921a:	d111      	bne.n	8009240 <arm_cfft_f32+0x64>
 800921c:	2f01      	cmp	r7, #1
 800921e:	d016      	beq.n	800924e <arm_cfft_f32+0x72>
 8009220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009224:	2d20      	cmp	r5, #32
 8009226:	d049      	beq.n	80092bc <arm_cfft_f32+0xe0>
 8009228:	d935      	bls.n	8009296 <arm_cfft_f32+0xba>
 800922a:	2d40      	cmp	r5, #64	; 0x40
 800922c:	d0ed      	beq.n	800920a <arm_cfft_f32+0x2e>
 800922e:	2d80      	cmp	r5, #128	; 0x80
 8009230:	d1f1      	bne.n	8009216 <arm_cfft_f32+0x3a>
 8009232:	4621      	mov	r1, r4
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fcab 	bl	8008b90 <arm_cfft_radix8by2_f32>
 800923a:	f1b8 0f00 	cmp.w	r8, #0
 800923e:	d0ed      	beq.n	800921c <arm_cfft_f32+0x40>
 8009240:	68b2      	ldr	r2, [r6, #8]
 8009242:	89b1      	ldrh	r1, [r6, #12]
 8009244:	4620      	mov	r0, r4
 8009246:	f000 f841 	bl	80092cc <arm_bitreversal_32>
 800924a:	2f01      	cmp	r7, #1
 800924c:	d1e8      	bne.n	8009220 <arm_cfft_f32+0x44>
 800924e:	ee07 5a90 	vmov	s15, r5
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800925a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800925e:	2d00      	cmp	r5, #0
 8009260:	d0de      	beq.n	8009220 <arm_cfft_f32+0x44>
 8009262:	f104 0108 	add.w	r1, r4, #8
 8009266:	2300      	movs	r3, #0
 8009268:	3301      	adds	r3, #1
 800926a:	429d      	cmp	r5, r3
 800926c:	f101 0108 	add.w	r1, r1, #8
 8009270:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009274:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009278:	ee27 7a26 	vmul.f32	s14, s14, s13
 800927c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009280:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009284:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009288:	d1ee      	bne.n	8009268 <arm_cfft_f32+0x8c>
 800928a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009292:	d0ba      	beq.n	800920a <arm_cfft_f32+0x2e>
 8009294:	e7bf      	b.n	8009216 <arm_cfft_f32+0x3a>
 8009296:	2d10      	cmp	r5, #16
 8009298:	d0cb      	beq.n	8009232 <arm_cfft_f32+0x56>
 800929a:	e7bc      	b.n	8009216 <arm_cfft_f32+0x3a>
 800929c:	b19d      	cbz	r5, 80092c6 <arm_cfft_f32+0xea>
 800929e:	f101 030c 	add.w	r3, r1, #12
 80092a2:	2200      	movs	r2, #0
 80092a4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80092a8:	3201      	adds	r2, #1
 80092aa:	eef1 7a67 	vneg.f32	s15, s15
 80092ae:	4295      	cmp	r5, r2
 80092b0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80092b4:	f103 0308 	add.w	r3, r3, #8
 80092b8:	d1f4      	bne.n	80092a4 <arm_cfft_f32+0xc8>
 80092ba:	e798      	b.n	80091ee <arm_cfft_f32+0x12>
 80092bc:	4621      	mov	r1, r4
 80092be:	4630      	mov	r0, r6
 80092c0:	f7ff fd36 	bl	8008d30 <arm_cfft_radix8by4_f32>
 80092c4:	e7a7      	b.n	8009216 <arm_cfft_f32+0x3a>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0aa      	beq.n	8009220 <arm_cfft_f32+0x44>
 80092ca:	e7b9      	b.n	8009240 <arm_cfft_f32+0x64>

080092cc <arm_bitreversal_32>:
 80092cc:	b1e9      	cbz	r1, 800930a <arm_bitreversal_32+0x3e>
 80092ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d0:	2500      	movs	r5, #0
 80092d2:	f102 0e02 	add.w	lr, r2, #2
 80092d6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80092da:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80092de:	08a4      	lsrs	r4, r4, #2
 80092e0:	089b      	lsrs	r3, r3, #2
 80092e2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80092e6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80092ea:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80092ee:	00a6      	lsls	r6, r4, #2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80092f6:	3304      	adds	r3, #4
 80092f8:	1d34      	adds	r4, r6, #4
 80092fa:	3502      	adds	r5, #2
 80092fc:	58c6      	ldr	r6, [r0, r3]
 80092fe:	5907      	ldr	r7, [r0, r4]
 8009300:	50c7      	str	r7, [r0, r3]
 8009302:	428d      	cmp	r5, r1
 8009304:	5106      	str	r6, [r0, r4]
 8009306:	d3e6      	bcc.n	80092d6 <arm_bitreversal_32+0xa>
 8009308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930a:	4770      	bx	lr

0800930c <arm_cmplx_mag_f32>:
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	ed2d 8b02 	vpush	{d8}
 8009314:	0897      	lsrs	r7, r2, #2
 8009316:	b084      	sub	sp, #16
 8009318:	d077      	beq.n	800940a <arm_cmplx_mag_f32+0xfe>
 800931a:	f04f 0800 	mov.w	r8, #0
 800931e:	f100 0420 	add.w	r4, r0, #32
 8009322:	f101 0510 	add.w	r5, r1, #16
 8009326:	463e      	mov	r6, r7
 8009328:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800932c:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8009330:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009334:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009338:	ee30 0a27 	vadd.f32	s0, s0, s15
 800933c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009344:	f2c0 80c5 	blt.w	80094d2 <arm_cmplx_mag_f32+0x1c6>
 8009348:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800934c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009350:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009354:	f100 80cb 	bmi.w	80094ee <arm_cmplx_mag_f32+0x1e2>
 8009358:	ed05 8a04 	vstr	s16, [r5, #-16]
 800935c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8009360:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009364:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009368:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800936c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009370:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009378:	f2c0 80a8 	blt.w	80094cc <arm_cmplx_mag_f32+0x1c0>
 800937c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009384:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009388:	f100 80a8 	bmi.w	80094dc <arm_cmplx_mag_f32+0x1d0>
 800938c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8009390:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009394:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009398:	ee20 0a00 	vmul.f32	s0, s0, s0
 800939c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ac:	f2c0 808b 	blt.w	80094c6 <arm_cmplx_mag_f32+0x1ba>
 80093b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80093b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80093bc:	f100 80a9 	bmi.w	8009512 <arm_cmplx_mag_f32+0x206>
 80093c0:	ed05 8a02 	vstr	s16, [r5, #-8]
 80093c4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80093c8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80093cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80093d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	db6e      	blt.n	80094c0 <arm_cmplx_mag_f32+0x1b4>
 80093e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80093e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80093ee:	f100 8087 	bmi.w	8009500 <arm_cmplx_mag_f32+0x1f4>
 80093f2:	ed05 8a01 	vstr	s16, [r5, #-4]
 80093f6:	3e01      	subs	r6, #1
 80093f8:	f104 0420 	add.w	r4, r4, #32
 80093fc:	f105 0510 	add.w	r5, r5, #16
 8009400:	d192      	bne.n	8009328 <arm_cmplx_mag_f32+0x1c>
 8009402:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009406:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800940a:	f012 0203 	ands.w	r2, r2, #3
 800940e:	d052      	beq.n	80094b6 <arm_cmplx_mag_f32+0x1aa>
 8009410:	ed90 0a00 	vldr	s0, [r0]
 8009414:	edd0 7a01 	vldr	s15, [r0, #4]
 8009418:	ee20 0a00 	vmul.f32	s0, s0, s0
 800941c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009420:	2300      	movs	r3, #0
 8009422:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009426:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800942a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942e:	bfb8      	it	lt
 8009430:	600b      	strlt	r3, [r1, #0]
 8009432:	db08      	blt.n	8009446 <arm_cmplx_mag_f32+0x13a>
 8009434:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009440:	d479      	bmi.n	8009536 <arm_cmplx_mag_f32+0x22a>
 8009442:	ed81 8a00 	vstr	s16, [r1]
 8009446:	3a01      	subs	r2, #1
 8009448:	d035      	beq.n	80094b6 <arm_cmplx_mag_f32+0x1aa>
 800944a:	ed90 0a02 	vldr	s0, [r0, #8]
 800944e:	edd0 7a03 	vldr	s15, [r0, #12]
 8009452:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009456:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800945a:	2300      	movs	r3, #0
 800945c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009468:	bfb8      	it	lt
 800946a:	604b      	strlt	r3, [r1, #4]
 800946c:	db08      	blt.n	8009480 <arm_cmplx_mag_f32+0x174>
 800946e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800947a:	d453      	bmi.n	8009524 <arm_cmplx_mag_f32+0x218>
 800947c:	ed81 8a01 	vstr	s16, [r1, #4]
 8009480:	2a01      	cmp	r2, #1
 8009482:	d018      	beq.n	80094b6 <arm_cmplx_mag_f32+0x1aa>
 8009484:	ed90 0a04 	vldr	s0, [r0, #16]
 8009488:	edd0 7a05 	vldr	s15, [r0, #20]
 800948c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009494:	2300      	movs	r3, #0
 8009496:	ee30 0a27 	vadd.f32	s0, s0, s15
 800949a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	db19      	blt.n	80094d8 <arm_cmplx_mag_f32+0x1cc>
 80094a4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80094a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ac:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80094b0:	d44a      	bmi.n	8009548 <arm_cmplx_mag_f32+0x23c>
 80094b2:	ed81 8a02 	vstr	s16, [r1, #8]
 80094b6:	b004      	add	sp, #16
 80094b8:	ecbd 8b02 	vpop	{d8}
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	f845 8c04 	str.w	r8, [r5, #-4]
 80094c4:	e797      	b.n	80093f6 <arm_cmplx_mag_f32+0xea>
 80094c6:	f845 8c08 	str.w	r8, [r5, #-8]
 80094ca:	e77b      	b.n	80093c4 <arm_cmplx_mag_f32+0xb8>
 80094cc:	f845 8c0c 	str.w	r8, [r5, #-12]
 80094d0:	e75e      	b.n	8009390 <arm_cmplx_mag_f32+0x84>
 80094d2:	f845 8c10 	str.w	r8, [r5, #-16]
 80094d6:	e741      	b.n	800935c <arm_cmplx_mag_f32+0x50>
 80094d8:	608b      	str	r3, [r1, #8]
 80094da:	e7ec      	b.n	80094b6 <arm_cmplx_mag_f32+0x1aa>
 80094dc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80094e0:	9001      	str	r0, [sp, #4]
 80094e2:	f000 fb29 	bl	8009b38 <sqrtf>
 80094e6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80094ea:	9801      	ldr	r0, [sp, #4]
 80094ec:	e74e      	b.n	800938c <arm_cmplx_mag_f32+0x80>
 80094ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80094f2:	9001      	str	r0, [sp, #4]
 80094f4:	f000 fb20 	bl	8009b38 <sqrtf>
 80094f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80094fc:	9801      	ldr	r0, [sp, #4]
 80094fe:	e72b      	b.n	8009358 <arm_cmplx_mag_f32+0x4c>
 8009500:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009504:	9001      	str	r0, [sp, #4]
 8009506:	f000 fb17 	bl	8009b38 <sqrtf>
 800950a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800950e:	9801      	ldr	r0, [sp, #4]
 8009510:	e76f      	b.n	80093f2 <arm_cmplx_mag_f32+0xe6>
 8009512:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009516:	9001      	str	r0, [sp, #4]
 8009518:	f000 fb0e 	bl	8009b38 <sqrtf>
 800951c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009520:	9801      	ldr	r0, [sp, #4]
 8009522:	e74d      	b.n	80093c0 <arm_cmplx_mag_f32+0xb4>
 8009524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009528:	9201      	str	r2, [sp, #4]
 800952a:	f000 fb05 	bl	8009b38 <sqrtf>
 800952e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009532:	9903      	ldr	r1, [sp, #12]
 8009534:	e7a2      	b.n	800947c <arm_cmplx_mag_f32+0x170>
 8009536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953a:	9201      	str	r2, [sp, #4]
 800953c:	f000 fafc 	bl	8009b38 <sqrtf>
 8009540:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009544:	9903      	ldr	r1, [sp, #12]
 8009546:	e77c      	b.n	8009442 <arm_cmplx_mag_f32+0x136>
 8009548:	9101      	str	r1, [sp, #4]
 800954a:	f000 faf5 	bl	8009b38 <sqrtf>
 800954e:	9901      	ldr	r1, [sp, #4]
 8009550:	e7af      	b.n	80094b2 <arm_cmplx_mag_f32+0x1a6>
 8009552:	bf00      	nop

08009554 <arm_radix8_butterfly_f32>:
 8009554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	ed2d 8b10 	vpush	{d8-d15}
 800955c:	b095      	sub	sp, #84	; 0x54
 800955e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009562:	4603      	mov	r3, r0
 8009564:	3304      	adds	r3, #4
 8009566:	ed9f bab9 	vldr	s22, [pc, #740]	; 800984c <arm_radix8_butterfly_f32+0x2f8>
 800956a:	9012      	str	r0, [sp, #72]	; 0x48
 800956c:	468b      	mov	fp, r1
 800956e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009570:	4689      	mov	r9, r1
 8009572:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009578:	960f      	str	r6, [sp, #60]	; 0x3c
 800957a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800957e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009582:	eb03 0508 	add.w	r5, r3, r8
 8009586:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800958a:	eb05 040e 	add.w	r4, r5, lr
 800958e:	0137      	lsls	r7, r6, #4
 8009590:	eba6 030a 	sub.w	r3, r6, sl
 8009594:	eb04 000e 	add.w	r0, r4, lr
 8009598:	44b2      	add	sl, r6
 800959a:	1d3a      	adds	r2, r7, #4
 800959c:	9702      	str	r7, [sp, #8]
 800959e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80095a2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80095a6:	ebae 0c06 	sub.w	ip, lr, r6
 80095aa:	9703      	str	r7, [sp, #12]
 80095ac:	eb03 0708 	add.w	r7, r3, r8
 80095b0:	9701      	str	r7, [sp, #4]
 80095b2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80095b6:	9706      	str	r7, [sp, #24]
 80095b8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80095ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80095be:	f10e 0104 	add.w	r1, lr, #4
 80095c2:	4439      	add	r1, r7
 80095c4:	443a      	add	r2, r7
 80095c6:	0137      	lsls	r7, r6, #4
 80095c8:	00f6      	lsls	r6, r6, #3
 80095ca:	9704      	str	r7, [sp, #16]
 80095cc:	9605      	str	r6, [sp, #20]
 80095ce:	9f01      	ldr	r7, [sp, #4]
 80095d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80095d2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80095d6:	f04f 0c00 	mov.w	ip, #0
 80095da:	edd4 6a00 	vldr	s13, [r4]
 80095de:	edd7 1a00 	vldr	s3, [r7]
 80095e2:	ed16 aa01 	vldr	s20, [r6, #-4]
 80095e6:	edd5 5a00 	vldr	s11, [r5]
 80095ea:	ed52 9a01 	vldr	s19, [r2, #-4]
 80095ee:	ed90 6a00 	vldr	s12, [r0]
 80095f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80095f6:	ed93 3a00 	vldr	s6, [r3]
 80095fa:	ee39 0a86 	vadd.f32	s0, s19, s12
 80095fe:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009602:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009606:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800960a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800960e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009612:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009616:	ee74 6a07 	vadd.f32	s13, s8, s14
 800961a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800961e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009622:	ed85 4a00 	vstr	s8, [r5]
 8009626:	edd1 6a00 	vldr	s13, [r1]
 800962a:	ed94 9a01 	vldr	s18, [r4, #4]
 800962e:	edd3 2a01 	vldr	s5, [r3, #4]
 8009632:	edd7 8a01 	vldr	s17, [r7, #4]
 8009636:	edd6 0a00 	vldr	s1, [r6]
 800963a:	edd5 3a01 	vldr	s7, [r5, #4]
 800963e:	ed90 8a01 	vldr	s16, [r0, #4]
 8009642:	ed92 7a00 	vldr	s14, [r2]
 8009646:	ee33 3a61 	vsub.f32	s6, s6, s3
 800964a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800964e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009652:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009656:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800965a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800965e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009662:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009666:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800966a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800966e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009672:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009676:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800967a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800967e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009682:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009686:	ee76 6a89 	vadd.f32	s13, s13, s18
 800968a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800968e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009692:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009696:	ee35 5a42 	vsub.f32	s10, s10, s4
 800969a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800969e:	ee33 2a20 	vadd.f32	s4, s6, s1
 80096a2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80096a6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80096aa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80096ae:	ee77 0a01 	vadd.f32	s1, s14, s2
 80096b2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80096b6:	ee37 7a41 	vsub.f32	s14, s14, s2
 80096ba:	ee73 1a84 	vadd.f32	s3, s7, s8
 80096be:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80096c2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80096c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80096ca:	ee32 8a00 	vadd.f32	s16, s4, s0
 80096ce:	ee33 1a45 	vsub.f32	s2, s6, s10
 80096d2:	ee32 2a40 	vsub.f32	s4, s4, s0
 80096d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80096da:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80096de:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80096e2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80096e6:	ee34 6a67 	vsub.f32	s12, s8, s15
 80096ea:	ee75 4a87 	vadd.f32	s9, s11, s14
 80096ee:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80096f2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80096f6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80096fa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80096fe:	44dc      	add	ip, fp
 8009700:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009704:	45e1      	cmp	r9, ip
 8009706:	ed86 8a00 	vstr	s16, [r6]
 800970a:	ed85 2a01 	vstr	s4, [r5, #4]
 800970e:	4456      	add	r6, sl
 8009710:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009714:	4455      	add	r5, sl
 8009716:	edc0 6a00 	vstr	s13, [r0]
 800971a:	ed82 1a00 	vstr	s2, [r2]
 800971e:	ed80 5a01 	vstr	s10, [r0, #4]
 8009722:	4452      	add	r2, sl
 8009724:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009728:	4450      	add	r0, sl
 800972a:	edc7 2a00 	vstr	s5, [r7]
 800972e:	edc4 4a00 	vstr	s9, [r4]
 8009732:	ed83 7a00 	vstr	s14, [r3]
 8009736:	edc1 5a00 	vstr	s11, [r1]
 800973a:	edc7 3a01 	vstr	s7, [r7, #4]
 800973e:	4451      	add	r1, sl
 8009740:	ed84 6a01 	vstr	s12, [r4, #4]
 8009744:	4457      	add	r7, sl
 8009746:	edc3 7a01 	vstr	s15, [r3, #4]
 800974a:	4454      	add	r4, sl
 800974c:	4453      	add	r3, sl
 800974e:	f63f af44 	bhi.w	80095da <arm_radix8_butterfly_f32+0x86>
 8009752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009754:	2b07      	cmp	r3, #7
 8009756:	f240 81b7 	bls.w	8009ac8 <arm_radix8_butterfly_f32+0x574>
 800975a:	9b06      	ldr	r3, [sp, #24]
 800975c:	9903      	ldr	r1, [sp, #12]
 800975e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009760:	9e05      	ldr	r6, [sp, #20]
 8009762:	9a04      	ldr	r2, [sp, #16]
 8009764:	f103 0c08 	add.w	ip, r3, #8
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	3108      	adds	r1, #8
 800976c:	f108 0808 	add.w	r8, r8, #8
 8009770:	1841      	adds	r1, r0, r1
 8009772:	3608      	adds	r6, #8
 8009774:	330c      	adds	r3, #12
 8009776:	4604      	mov	r4, r0
 8009778:	4444      	add	r4, r8
 800977a:	18c3      	adds	r3, r0, r3
 800977c:	9109      	str	r1, [sp, #36]	; 0x24
 800977e:	1981      	adds	r1, r0, r6
 8009780:	f10e 0e08 	add.w	lr, lr, #8
 8009784:	3208      	adds	r2, #8
 8009786:	940b      	str	r4, [sp, #44]	; 0x2c
 8009788:	9107      	str	r1, [sp, #28]
 800978a:	4604      	mov	r4, r0
 800978c:	4601      	mov	r1, r0
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	f100 030c 	add.w	r3, r0, #12
 8009794:	4474      	add	r4, lr
 8009796:	f04f 0801 	mov.w	r8, #1
 800979a:	1882      	adds	r2, r0, r2
 800979c:	4461      	add	r1, ip
 800979e:	9305      	str	r3, [sp, #20]
 80097a0:	464b      	mov	r3, r9
 80097a2:	940a      	str	r4, [sp, #40]	; 0x28
 80097a4:	46c1      	mov	r9, r8
 80097a6:	9208      	str	r2, [sp, #32]
 80097a8:	46d8      	mov	r8, fp
 80097aa:	9106      	str	r1, [sp, #24]
 80097ac:	f04f 0e00 	mov.w	lr, #0
 80097b0:	469b      	mov	fp, r3
 80097b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097b6:	449e      	add	lr, r3
 80097b8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80097bc:	441a      	add	r2, r3
 80097be:	920e      	str	r2, [sp, #56]	; 0x38
 80097c0:	441a      	add	r2, r3
 80097c2:	18d4      	adds	r4, r2, r3
 80097c4:	18e5      	adds	r5, r4, r3
 80097c6:	18ee      	adds	r6, r5, r3
 80097c8:	18f7      	adds	r7, r6, r3
 80097ca:	eb07 0c03 	add.w	ip, r7, r3
 80097ce:	920d      	str	r2, [sp, #52]	; 0x34
 80097d0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80097d4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80097d8:	910c      	str	r1, [sp, #48]	; 0x30
 80097da:	4419      	add	r1, r3
 80097dc:	9103      	str	r1, [sp, #12]
 80097de:	4419      	add	r1, r3
 80097e0:	18ca      	adds	r2, r1, r3
 80097e2:	9202      	str	r2, [sp, #8]
 80097e4:	441a      	add	r2, r3
 80097e6:	18d0      	adds	r0, r2, r3
 80097e8:	ed92 ea01 	vldr	s28, [r2, #4]
 80097ec:	9a02      	ldr	r2, [sp, #8]
 80097ee:	edd4 7a00 	vldr	s15, [r4]
 80097f2:	edd2 da01 	vldr	s27, [r2, #4]
 80097f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097f8:	ed91 da01 	vldr	s26, [r1, #4]
 80097fc:	ed92 ca01 	vldr	s24, [r2, #4]
 8009800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009802:	9903      	ldr	r1, [sp, #12]
 8009804:	edcd 7a03 	vstr	s15, [sp, #12]
 8009808:	edd2 7a00 	vldr	s15, [r2]
 800980c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800980e:	edcd 7a02 	vstr	s15, [sp, #8]
 8009812:	edd2 7a00 	vldr	s15, [r2]
 8009816:	edd0 ea01 	vldr	s29, [r0, #4]
 800981a:	edd1 ca01 	vldr	s25, [r1, #4]
 800981e:	eddc ba00 	vldr	s23, [ip]
 8009822:	edd7 aa00 	vldr	s21, [r7]
 8009826:	ed96 aa00 	vldr	s20, [r6]
 800982a:	edd5 9a00 	vldr	s19, [r5]
 800982e:	edcd 7a01 	vstr	s15, [sp, #4]
 8009832:	4403      	add	r3, r0
 8009834:	ed93 fa01 	vldr	s30, [r3, #4]
 8009838:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800983c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009840:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009848:	46cc      	mov	ip, r9
 800984a:	e001      	b.n	8009850 <arm_radix8_butterfly_f32+0x2fc>
 800984c:	3f3504f3 	.word	0x3f3504f3
 8009850:	ed91 6a00 	vldr	s12, [r1]
 8009854:	ed93 5a00 	vldr	s10, [r3]
 8009858:	edd0 fa00 	vldr	s31, [r0]
 800985c:	edd4 7a00 	vldr	s15, [r4]
 8009860:	ed95 7a00 	vldr	s14, [r5]
 8009864:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009868:	ed17 3a01 	vldr	s6, [r7, #-4]
 800986c:	ed92 2a00 	vldr	s4, [r2]
 8009870:	ed96 0a00 	vldr	s0, [r6]
 8009874:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009878:	ee32 1a06 	vadd.f32	s2, s4, s12
 800987c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009880:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009884:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009888:	ee71 6a24 	vadd.f32	s13, s2, s9
 800988c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009890:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009898:	ed06 6a01 	vstr	s12, [r6, #-4]
 800989c:	edd4 8a01 	vldr	s17, [r4, #4]
 80098a0:	ed92 9a01 	vldr	s18, [r2, #4]
 80098a4:	edd7 0a00 	vldr	s1, [r7]
 80098a8:	edd1 2a01 	vldr	s5, [r1, #4]
 80098ac:	ed95 7a01 	vldr	s14, [r5, #4]
 80098b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80098b4:	edd0 5a01 	vldr	s11, [r0, #4]
 80098b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80098bc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80098c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80098c4:	ee78 fac7 	vsub.f32	s31, s17, s14
 80098c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80098cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80098d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80098d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80098d8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80098dc:	ee72 7a67 	vsub.f32	s15, s4, s15
 80098e0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80098e4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80098e8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80098ec:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80098f0:	ee32 1a08 	vadd.f32	s2, s4, s16
 80098f4:	ee72 fa87 	vadd.f32	s31, s5, s14
 80098f8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80098fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009900:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009904:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009908:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800990c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009910:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8009914:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8009918:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800991c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009920:	ee74 0a22 	vadd.f32	s1, s8, s5
 8009924:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009928:	ee74 2a62 	vsub.f32	s5, s8, s5
 800992c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009930:	ee32 4a64 	vsub.f32	s8, s4, s9
 8009934:	ee73 8a09 	vadd.f32	s17, s6, s18
 8009938:	ee74 4a82 	vadd.f32	s9, s9, s4
 800993c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8009940:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8009944:	ee35 3a85 	vadd.f32	s6, s11, s10
 8009948:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800994c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8009950:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009954:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8009958:	ee30 7a68 	vsub.f32	s14, s0, s17
 800995c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8009960:	ee38 0a80 	vadd.f32	s0, s17, s0
 8009964:	ee73 3a82 	vadd.f32	s7, s7, s4
 8009968:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800996c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8009970:	eddd 1a02 	vldr	s3, [sp, #8]
 8009974:	ee35 5a43 	vsub.f32	s10, s10, s6
 8009978:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800997c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8009980:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8009984:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009988:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800998c:	ee76 5a49 	vsub.f32	s11, s12, s18
 8009990:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8009994:	ee39 6a06 	vadd.f32	s12, s18, s12
 8009998:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800999c:	ee21 4a84 	vmul.f32	s8, s3, s8
 80099a0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80099a4:	ee22 7a07 	vmul.f32	s14, s4, s14
 80099a8:	ee22 2a08 	vmul.f32	s4, s4, s16
 80099ac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80099b0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80099b4:	ee31 1a09 	vadd.f32	s2, s2, s18
 80099b8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80099bc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80099c0:	ee74 0a60 	vsub.f32	s1, s8, s1
 80099c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80099c8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80099cc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80099d0:	ee72 1a21 	vadd.f32	s3, s4, s3
 80099d4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80099d8:	ee38 2a89 	vadd.f32	s4, s17, s18
 80099dc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80099e0:	ee38 8a04 	vadd.f32	s16, s16, s8
 80099e4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80099e8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80099ec:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80099f0:	eddd 5a03 	vldr	s11, [sp, #12]
 80099f4:	edc6 fa00 	vstr	s31, [r6]
 80099f8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80099fc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009a00:	ee30 0a45 	vsub.f32	s0, s0, s10
 8009a04:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8009a08:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8009a0c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8009a10:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8009a14:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8009a18:	ee25 6a86 	vmul.f32	s12, s11, s12
 8009a1c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8009a20:	ee34 3a43 	vsub.f32	s6, s8, s6
 8009a24:	ee78 8a85 	vadd.f32	s17, s17, s10
 8009a28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a2c:	44c4      	add	ip, r8
 8009a2e:	45e3      	cmp	fp, ip
 8009a30:	edc3 3a00 	vstr	s7, [r3]
 8009a34:	edc3 6a01 	vstr	s13, [r3, #4]
 8009a38:	4456      	add	r6, sl
 8009a3a:	ed07 1a01 	vstr	s2, [r7, #-4]
 8009a3e:	edc7 0a00 	vstr	s1, [r7]
 8009a42:	4453      	add	r3, sl
 8009a44:	ed80 2a00 	vstr	s4, [r0]
 8009a48:	edc0 2a01 	vstr	s5, [r0, #4]
 8009a4c:	4457      	add	r7, sl
 8009a4e:	edc2 1a00 	vstr	s3, [r2]
 8009a52:	ed82 7a01 	vstr	s14, [r2, #4]
 8009a56:	4450      	add	r0, sl
 8009a58:	ed85 8a00 	vstr	s16, [r5]
 8009a5c:	ed85 0a01 	vstr	s0, [r5, #4]
 8009a60:	4452      	add	r2, sl
 8009a62:	edc1 4a00 	vstr	s9, [r1]
 8009a66:	4455      	add	r5, sl
 8009a68:	ed81 3a01 	vstr	s6, [r1, #4]
 8009a6c:	edc4 8a00 	vstr	s17, [r4]
 8009a70:	ed84 6a01 	vstr	s12, [r4, #4]
 8009a74:	4451      	add	r1, sl
 8009a76:	4454      	add	r4, sl
 8009a78:	f63f aeea 	bhi.w	8009850 <arm_radix8_butterfly_f32+0x2fc>
 8009a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a7e:	3308      	adds	r3, #8
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a84:	3308      	adds	r3, #8
 8009a86:	930a      	str	r3, [sp, #40]	; 0x28
 8009a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8e:	9b08      	ldr	r3, [sp, #32]
 8009a90:	3308      	adds	r3, #8
 8009a92:	9308      	str	r3, [sp, #32]
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	3308      	adds	r3, #8
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	9306      	str	r3, [sp, #24]
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	9b04      	ldr	r3, [sp, #16]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aae:	f109 0901 	add.w	r9, r9, #1
 8009ab2:	454b      	cmp	r3, r9
 8009ab4:	f47f ae7d 	bne.w	80097b2 <arm_radix8_butterfly_f32+0x25e>
 8009ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	46d9      	mov	r9, fp
 8009ac0:	9310      	str	r3, [sp, #64]	; 0x40
 8009ac2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8009ac6:	e554      	b.n	8009572 <arm_radix8_butterfly_f32+0x1e>
 8009ac8:	b015      	add	sp, #84	; 0x54
 8009aca:	ecbd 8b10 	vpop	{d8-d15}
 8009ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad2:	bf00      	nop

08009ad4 <memset>:
 8009ad4:	4402      	add	r2, r0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <__errno>:
 8009ae4:	4b01      	ldr	r3, [pc, #4]	; (8009aec <__errno+0x8>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000058 	.word	0x20000058

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f000 f83a 	bl	8009b7c <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	0801cc0c 	.word	0x0801cc0c
 8009b2c:	0801cc0c 	.word	0x0801cc0c
 8009b30:	0801cc0c 	.word	0x0801cc0c
 8009b34:	0801cc10 	.word	0x0801cc10

08009b38 <sqrtf>:
 8009b38:	b508      	push	{r3, lr}
 8009b3a:	ed2d 8b02 	vpush	{d8}
 8009b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8009b42:	f000 f817 	bl	8009b74 <__ieee754_sqrtf>
 8009b46:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4e:	d60c      	bvs.n	8009b6a <sqrtf+0x32>
 8009b50:	eddf 8a07 	vldr	s17, [pc, #28]	; 8009b70 <sqrtf+0x38>
 8009b54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5c:	d505      	bpl.n	8009b6a <sqrtf+0x32>
 8009b5e:	f7ff ffc1 	bl	8009ae4 <__errno>
 8009b62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009b66:	2321      	movs	r3, #33	; 0x21
 8009b68:	6003      	str	r3, [r0, #0]
 8009b6a:	ecbd 8b02 	vpop	{d8}
 8009b6e:	bd08      	pop	{r3, pc}
 8009b70:	00000000 	.word	0x00000000

08009b74 <__ieee754_sqrtf>:
 8009b74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009b78:	4770      	bx	lr
	...

08009b7c <_init>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	bf00      	nop
 8009b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b82:	bc08      	pop	{r3}
 8009b84:	469e      	mov	lr, r3
 8009b86:	4770      	bx	lr

08009b88 <_fini>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr
